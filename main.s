	.file	"main.cpp"
 # GNU C++17 (Rev6, Built by MSYS2 project) version 13.1.0 (x86_64-w64-mingw32)
 #	compiled by GNU C version 13.1.0, GMP version 6.2.1, MPFR version 4.2.0-p4, MPC version 1.3.1, isl version isl-0.26-GMP

 # warning: MPFR header version 4.2.0-p4 differs from library version 4.2.0-p9.
 # GGC heuristics: --param ggc-min-expand=100 --param ggc-min-heapsize=131072
 # options passed: -mfma -mavx2 -mtune=generic -march=nocona -O3
	.text
	.section	.text$_ZNSt6thread24_M_thread_deps_never_runEv,"x"
	.linkonce discard
	.p2align 4
	.globl	_ZNSt6thread24_M_thread_deps_never_runEv
	.def	_ZNSt6thread24_M_thread_deps_never_runEv;	.scl	2;	.type	32;	.endef
	.seh_proc	_ZNSt6thread24_M_thread_deps_never_runEv
_ZNSt6thread24_M_thread_deps_never_runEv:
.LFB10820:
	.seh_endprologue
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_thread.h:148:     }
	ret	
	.seh_endproc
	.section	.text$_ZNSt13__future_base13_State_baseV217_M_complete_asyncEv,"x"
	.linkonce discard
	.align 2
	.p2align 4
	.globl	_ZNSt13__future_base13_State_baseV217_M_complete_asyncEv
	.def	_ZNSt13__future_base13_State_baseV217_M_complete_asyncEv;	.scl	2;	.type	32;	.endef
	.seh_proc	_ZNSt13__future_base13_State_baseV217_M_complete_asyncEv
_ZNSt13__future_base13_State_baseV217_M_complete_asyncEv:
.LFB11719:
	.seh_endprologue
 # C:/msys64/ucrt64/include/c++/13.1.0/future:598:       virtual void _M_complete_async() { }
	ret	
	.seh_endproc
	.section	.text$_ZNKSt13__future_base13_State_baseV221_M_is_deferred_futureEv,"x"
	.linkonce discard
	.align 2
	.p2align 4
	.globl	_ZNKSt13__future_base13_State_baseV221_M_is_deferred_futureEv
	.def	_ZNKSt13__future_base13_State_baseV221_M_is_deferred_futureEv;	.scl	2;	.type	32;	.endef
	.seh_proc	_ZNKSt13__future_base13_State_baseV221_M_is_deferred_futureEv
_ZNKSt13__future_base13_State_baseV221_M_is_deferred_futureEv:
.LFB11720:
	.seh_endprologue
 # C:/msys64/ucrt64/include/c++/13.1.0/future:601:       virtual bool _M_is_deferred_future() const { return false; }
	xorl	%eax, %eax	 #
	ret	
	.seh_endproc
	.section	.text$_ZNSt13__future_base7_ResultIvE10_M_destroyEv,"x"
	.linkonce discard
	.align 2
	.p2align 4
	.globl	_ZNSt13__future_base7_ResultIvE10_M_destroyEv
	.def	_ZNSt13__future_base7_ResultIvE10_M_destroyEv;	.scl	2;	.type	32;	.endef
	.seh_proc	_ZNSt13__future_base7_ResultIvE10_M_destroyEv
_ZNSt13__future_base7_ResultIvE10_M_destroyEv:
.LFB11726:
	.seh_endprologue
 # C:/msys64/ucrt64/include/c++/13.1.0/future:672:       void _M_destroy() { delete this; }
	movq	(%rcx), %rax	 # this_3(D)->D.147292._vptr._Result_base, this_3(D)->D.147292._vptr._Result_base
	rex.W jmp	*16(%rax)	 # MEM[(int (*) () *)_1 + 16B]
	.seh_endproc
	.text
	.p2align 4
	.def	_ZZ13rebuild_list2RK7BoidMapRK8BoidListP12rebuild_argsP10TaskMasterP8TaskSyncENUlS8_P4TaskE_4_FUNES8_SC_;	.scl	3;	.type	32;	.endef
	.seh_proc	_ZZ13rebuild_list2RK7BoidMapRK8BoidListP12rebuild_argsP10TaskMasterP8TaskSyncENUlS8_P4TaskE_4_FUNES8_SC_
_ZZ13rebuild_list2RK7BoidMapRK8BoidListP12rebuild_argsP10TaskMasterP8TaskSyncENUlS8_P4TaskE_4_FUNES8_SC_:
.LFB12630:
	.seh_endprologue
 # .\src\main.cpp:1290:                         auto temp_boid_store = old_args->boid_list->m_boid_store;
	movq	8(%rdx), %rax	 # _3(D)->argument_struct, _3(D)->argument_struct
	movq	24(%rax), %rax	 # old_args_4->boid_list, _5
 # .\src\main.cpp:1290:                         auto temp_boid_store = old_args->boid_list->m_boid_store;
	vmovdqu	(%rax), %xmm1	 # MEM <vector(2) long long unsigned int> [(struct BoidStore * *)_5], tmp93
	vpalignr	$8, %xmm1, %xmm1, %xmm0	 #, tmp93, vect_temp_boid_store_6.1302
 # .\src\main.cpp:1291:                         old_args->boid_list->m_boid_store = old_args->boid_list->m_backbuffer;
	vmovdqu	%xmm0, (%rax)	 # vect_temp_boid_store_6.1302, MEM <vector(2) long long unsigned int> [(struct BoidStore * *)_5]
 # .\src\main.cpp:1293:                     }),
	ret	
	.seh_endproc
	.section	.text$_ZNSt15__exception_ptr12__dest_thunkISt12future_errorEEvPv,"x"
	.linkonce discard
	.p2align 4
	.globl	_ZNSt15__exception_ptr12__dest_thunkISt12future_errorEEvPv
	.def	_ZNSt15__exception_ptr12__dest_thunkISt12future_errorEEvPv;	.scl	2;	.type	32;	.endef
	.seh_proc	_ZNSt15__exception_ptr12__dest_thunkISt12future_errorEEvPv
_ZNSt15__exception_ptr12__dest_thunkISt12future_errorEEvPv:
.LFB13580:
	.seh_endprologue
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/exception_ptr.h:238:       { static_cast<_Ex*>(__x)->~_Ex(); }
	movq	(%rcx), %rax	 # MEM[(struct future_error *)__x_4(D)].D.139703.D.41479._vptr.exception, MEM[(struct future_error *)__x_4(D)].D.139703.D.41479._vptr.exception
	rex.W jmp	*(%rax)	 # *_1
	.seh_endproc
	.section	.text$_ZNSt6thread11_State_implINS_8_InvokerISt5tupleIJMNSt13__future_base17_Async_state_implINS1_IS2_IJPFvibPK7BoidMapPK5RulesPK8BoidListEibS7_SA_SD_EEEEvEEFvvEPSI_EEEEE6_M_runEv,"x"
	.linkonce discard
	.align 2
	.p2align 4
	.globl	_ZNSt6thread11_State_implINS_8_InvokerISt5tupleIJMNSt13__future_base17_Async_state_implINS1_IS2_IJPFvibPK7BoidMapPK5RulesPK8BoidListEibS7_SA_SD_EEEEvEEFvvEPSI_EEEEE6_M_runEv
	.def	_ZNSt6thread11_State_implINS_8_InvokerISt5tupleIJMNSt13__future_base17_Async_state_implINS1_IS2_IJPFvibPK7BoidMapPK5RulesPK8BoidListEibS7_SA_SD_EEEEvEEFvvEPSI_EEEEE6_M_runEv;	.scl	2;	.type	32;	.endef
	.seh_proc	_ZNSt6thread11_State_implINS_8_InvokerISt5tupleIJMNSt13__future_base17_Async_state_implINS1_IS2_IJPFvibPK7BoidMapPK5RulesPK8BoidListEibS7_SA_SD_EEEEvEEFvvEPSI_EEEEE6_M_runEv
_ZNSt6thread11_State_implINS_8_InvokerISt5tupleIJMNSt13__future_base17_Async_state_implINS1_IS2_IJPFvibPK7BoidMapPK5RulesPK8BoidListEibS7_SA_SD_EEEEvEEFvvEPSI_EEEEE6_M_runEv:
.LFB14945:
	.seh_endprologue
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/invoke.h:74:       return ((*std::forward<_Tp>(__t)).*__f)(std::forward<_Args>(__args)...);
	movq	16(%rcx), %rdx	 # MEM[(struct  &)this_1(D) + 16].__pfn, _4
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_thread.h:244: 	_M_run() { _M_func(); }
	movq	%rcx, %rax	 # tmp98, this
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/invoke.h:74:       return ((*std::forward<_Tp>(__t)).*__f)(std::forward<_Args>(__args)...);
	movq	24(%rcx), %rcx	 # MEM[(struct  &)this_1(D) + 16].__delta, MEM[(struct  &)this_1(D) + 16].__delta
	addq	8(%rax), %rcx	 # MEM[(struct _Async_state_impl * &)this_1(D) + 8], _28
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/invoke.h:74:       return ((*std::forward<_Tp>(__t)).*__f)(std::forward<_Args>(__args)...);
	testb	$1, %dl	 #, _4
	je	.L9	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/invoke.h:74:       return ((*std::forward<_Tp>(__t)).*__f)(std::forward<_Args>(__args)...);
	movq	(%rcx), %rax	 # MEM[(int (*) () * *)_28], MEM[(int (*) () * *)_28]
	movq	-1(%rax,%rdx), %rdx	 # *_13, _4
.L9:
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_thread.h:244: 	_M_run() { _M_func(); }
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/invoke.h:74:       return ((*std::forward<_Tp>(__t)).*__f)(std::forward<_Args>(__args)...);
	rex.W jmp	*%rdx	 # _4
	.seh_endproc
	.section	.text$_ZNSt6thread11_State_implINS_8_InvokerISt5tupleIJMNSt13__future_base17_Async_state_implINS1_IS2_IJPFviPK8BoidListPK7BoidMapEiPS5_PS8_EEEEvEEFvvEPSH_EEEEE6_M_runEv,"x"
	.linkonce discard
	.align 2
	.p2align 4
	.globl	_ZNSt6thread11_State_implINS_8_InvokerISt5tupleIJMNSt13__future_base17_Async_state_implINS1_IS2_IJPFviPK8BoidListPK7BoidMapEiPS5_PS8_EEEEvEEFvvEPSH_EEEEE6_M_runEv
	.def	_ZNSt6thread11_State_implINS_8_InvokerISt5tupleIJMNSt13__future_base17_Async_state_implINS1_IS2_IJPFviPK8BoidListPK7BoidMapEiPS5_PS8_EEEEvEEFvvEPSH_EEEEE6_M_runEv;	.scl	2;	.type	32;	.endef
	.seh_proc	_ZNSt6thread11_State_implINS_8_InvokerISt5tupleIJMNSt13__future_base17_Async_state_implINS1_IS2_IJPFviPK8BoidListPK7BoidMapEiPS5_PS8_EEEEvEEFvvEPSH_EEEEE6_M_runEv
_ZNSt6thread11_State_implINS_8_InvokerISt5tupleIJMNSt13__future_base17_Async_state_implINS1_IS2_IJPFviPK8BoidListPK7BoidMapEiPS5_PS8_EEEEvEEFvvEPSH_EEEEE6_M_runEv:
.LFB14946:
	.seh_endprologue
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/invoke.h:74:       return ((*std::forward<_Tp>(__t)).*__f)(std::forward<_Args>(__args)...);
	movq	16(%rcx), %rdx	 # MEM[(struct  &)this_1(D) + 16].__pfn, _4
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_thread.h:244: 	_M_run() { _M_func(); }
	movq	%rcx, %rax	 # tmp98, this
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/invoke.h:74:       return ((*std::forward<_Tp>(__t)).*__f)(std::forward<_Args>(__args)...);
	movq	24(%rcx), %rcx	 # MEM[(struct  &)this_1(D) + 16].__delta, MEM[(struct  &)this_1(D) + 16].__delta
	addq	8(%rax), %rcx	 # MEM[(struct _Async_state_impl * &)this_1(D) + 8], _28
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/invoke.h:74:       return ((*std::forward<_Tp>(__t)).*__f)(std::forward<_Args>(__args)...);
	testb	$1, %dl	 #, _4
	je	.L14	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/invoke.h:74:       return ((*std::forward<_Tp>(__t)).*__f)(std::forward<_Args>(__args)...);
	movq	(%rcx), %rax	 # MEM[(int (*) () * *)_28], MEM[(int (*) () * *)_28]
	movq	-1(%rax,%rdx), %rdx	 # *_13, _4
.L14:
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_thread.h:244: 	_M_run() { _M_func(); }
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/invoke.h:74:       return ((*std::forward<_Tp>(__t)).*__f)(std::forward<_Args>(__args)...);
	rex.W jmp	*%rdx	 # _4
	.seh_endproc
	.section	.text$_ZNSt23_Sp_counted_ptr_inplaceINSt13__future_base15_Deferred_stateINSt6thread8_InvokerISt5tupleIJPFvibPK7BoidMapPK5RulesPK8BoidListEibS7_SA_SD_EEEEvEESaIvELN9__gnu_cxx12_Lock_policyE2EED1Ev,"x"
	.linkonce discard
	.align 2
	.p2align 4
	.globl	_ZNSt23_Sp_counted_ptr_inplaceINSt13__future_base15_Deferred_stateINSt6thread8_InvokerISt5tupleIJPFvibPK7BoidMapPK5RulesPK8BoidListEibS7_SA_SD_EEEEvEESaIvELN9__gnu_cxx12_Lock_policyE2EED1Ev
	.def	_ZNSt23_Sp_counted_ptr_inplaceINSt13__future_base15_Deferred_stateINSt6thread8_InvokerISt5tupleIJPFvibPK7BoidMapPK5RulesPK8BoidListEibS7_SA_SD_EEEEvEESaIvELN9__gnu_cxx12_Lock_policyE2EED1Ev;	.scl	2;	.type	32;	.endef
	.seh_proc	_ZNSt23_Sp_counted_ptr_inplaceINSt13__future_base15_Deferred_stateINSt6thread8_InvokerISt5tupleIJPFvibPK7BoidMapPK5RulesPK8BoidListEibS7_SA_SD_EEEEvEESaIvELN9__gnu_cxx12_Lock_policyE2EED1Ev
_ZNSt23_Sp_counted_ptr_inplaceINSt13__future_base15_Deferred_stateINSt6thread8_InvokerISt5tupleIJPFvibPK7BoidMapPK5RulesPK8BoidListEibS7_SA_SD_EEEEvEESaIvELN9__gnu_cxx12_Lock_policyE2EED1Ev:
.LFB14949:
	.seh_endprologue
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:608:       ~_Sp_counted_ptr_inplace() noexcept { }
	ret	
	.seh_endproc
	.section	.text$_ZNSt23_Sp_counted_ptr_inplaceINSt13__future_base17_Async_state_implINSt6thread8_InvokerISt5tupleIJPFvibPK7BoidMapPK5RulesPK8BoidListEibS7_SA_SD_EEEEvEESaIvELN9__gnu_cxx12_Lock_policyE2EED1Ev,"x"
	.linkonce discard
	.align 2
	.p2align 4
	.globl	_ZNSt23_Sp_counted_ptr_inplaceINSt13__future_base17_Async_state_implINSt6thread8_InvokerISt5tupleIJPFvibPK7BoidMapPK5RulesPK8BoidListEibS7_SA_SD_EEEEvEESaIvELN9__gnu_cxx12_Lock_policyE2EED1Ev
	.def	_ZNSt23_Sp_counted_ptr_inplaceINSt13__future_base17_Async_state_implINSt6thread8_InvokerISt5tupleIJPFvibPK7BoidMapPK5RulesPK8BoidListEibS7_SA_SD_EEEEvEESaIvELN9__gnu_cxx12_Lock_policyE2EED1Ev;	.scl	2;	.type	32;	.endef
	.seh_proc	_ZNSt23_Sp_counted_ptr_inplaceINSt13__future_base17_Async_state_implINSt6thread8_InvokerISt5tupleIJPFvibPK7BoidMapPK5RulesPK8BoidListEibS7_SA_SD_EEEEvEESaIvELN9__gnu_cxx12_Lock_policyE2EED1Ev
_ZNSt23_Sp_counted_ptr_inplaceINSt13__future_base17_Async_state_implINSt6thread8_InvokerISt5tupleIJPFvibPK7BoidMapPK5RulesPK8BoidListEibS7_SA_SD_EEEEvEESaIvELN9__gnu_cxx12_Lock_policyE2EED1Ev:
.LFB14956:
	.seh_endprologue
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:608:       ~_Sp_counted_ptr_inplace() noexcept { }
	ret	
	.seh_endproc
	.section	.text$_ZNSt23_Sp_counted_ptr_inplaceINSt13__future_base15_Deferred_stateINSt6thread8_InvokerISt5tupleIJPFviPK8BoidListPK7BoidMapEiPS5_PS8_EEEEvEESaIvELN9__gnu_cxx12_Lock_policyE2EED1Ev,"x"
	.linkonce discard
	.align 2
	.p2align 4
	.globl	_ZNSt23_Sp_counted_ptr_inplaceINSt13__future_base15_Deferred_stateINSt6thread8_InvokerISt5tupleIJPFviPK8BoidListPK7BoidMapEiPS5_PS8_EEEEvEESaIvELN9__gnu_cxx12_Lock_policyE2EED1Ev
	.def	_ZNSt23_Sp_counted_ptr_inplaceINSt13__future_base15_Deferred_stateINSt6thread8_InvokerISt5tupleIJPFviPK8BoidListPK7BoidMapEiPS5_PS8_EEEEvEESaIvELN9__gnu_cxx12_Lock_policyE2EED1Ev;	.scl	2;	.type	32;	.endef
	.seh_proc	_ZNSt23_Sp_counted_ptr_inplaceINSt13__future_base15_Deferred_stateINSt6thread8_InvokerISt5tupleIJPFviPK8BoidListPK7BoidMapEiPS5_PS8_EEEEvEESaIvELN9__gnu_cxx12_Lock_policyE2EED1Ev
_ZNSt23_Sp_counted_ptr_inplaceINSt13__future_base15_Deferred_stateINSt6thread8_InvokerISt5tupleIJPFviPK8BoidListPK7BoidMapEiPS5_PS8_EEEEvEESaIvELN9__gnu_cxx12_Lock_policyE2EED1Ev:
.LFB14963:
	.seh_endprologue
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:608:       ~_Sp_counted_ptr_inplace() noexcept { }
	ret	
	.seh_endproc
	.section	.text$_ZNSt23_Sp_counted_ptr_inplaceINSt13__future_base17_Async_state_implINSt6thread8_InvokerISt5tupleIJPFviPK8BoidListPK7BoidMapEiPS5_PS8_EEEEvEESaIvELN9__gnu_cxx12_Lock_policyE2EED1Ev,"x"
	.linkonce discard
	.align 2
	.p2align 4
	.globl	_ZNSt23_Sp_counted_ptr_inplaceINSt13__future_base17_Async_state_implINSt6thread8_InvokerISt5tupleIJPFviPK8BoidListPK7BoidMapEiPS5_PS8_EEEEvEESaIvELN9__gnu_cxx12_Lock_policyE2EED1Ev
	.def	_ZNSt23_Sp_counted_ptr_inplaceINSt13__future_base17_Async_state_implINSt6thread8_InvokerISt5tupleIJPFviPK8BoidListPK7BoidMapEiPS5_PS8_EEEEvEESaIvELN9__gnu_cxx12_Lock_policyE2EED1Ev;	.scl	2;	.type	32;	.endef
	.seh_proc	_ZNSt23_Sp_counted_ptr_inplaceINSt13__future_base17_Async_state_implINSt6thread8_InvokerISt5tupleIJPFviPK8BoidListPK7BoidMapEiPS5_PS8_EEEEvEESaIvELN9__gnu_cxx12_Lock_policyE2EED1Ev
_ZNSt23_Sp_counted_ptr_inplaceINSt13__future_base17_Async_state_implINSt6thread8_InvokerISt5tupleIJPFviPK8BoidListPK7BoidMapEiPS5_PS8_EEEEvEESaIvELN9__gnu_cxx12_Lock_policyE2EED1Ev:
.LFB14970:
	.seh_endprologue
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:608:       ~_Sp_counted_ptr_inplace() noexcept { }
	ret	
	.seh_endproc
	.section	.text$_ZNKSt13__future_base15_Deferred_stateINSt6thread8_InvokerISt5tupleIJPFvibPK7BoidMapPK5RulesPK8BoidListEibS6_S9_SC_EEEEvE21_M_is_deferred_futureEv,"x"
	.linkonce discard
	.align 2
	.p2align 4
	.globl	_ZNKSt13__future_base15_Deferred_stateINSt6thread8_InvokerISt5tupleIJPFvibPK7BoidMapPK5RulesPK8BoidListEibS6_S9_SC_EEEEvE21_M_is_deferred_futureEv
	.def	_ZNKSt13__future_base15_Deferred_stateINSt6thread8_InvokerISt5tupleIJPFvibPK7BoidMapPK5RulesPK8BoidListEibS6_S9_SC_EEEEvE21_M_is_deferred_futureEv;	.scl	2;	.type	32;	.endef
	.seh_proc	_ZNKSt13__future_base15_Deferred_stateINSt6thread8_InvokerISt5tupleIJPFvibPK7BoidMapPK5RulesPK8BoidListEibS6_S9_SC_EEEEvE21_M_is_deferred_futureEv
_ZNKSt13__future_base15_Deferred_stateINSt6thread8_InvokerISt5tupleIJPFvibPK7BoidMapPK5RulesPK8BoidListEibS6_S9_SC_EEEEvE21_M_is_deferred_futureEv:
.LFB14990:
	.seh_endprologue
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1710:       virtual bool _M_is_deferred_future() const { return true; }
	movl	$1, %eax	 #,
	ret	
	.seh_endproc
	.section	.text$_ZNKSt13__future_base15_Deferred_stateINSt6thread8_InvokerISt5tupleIJPFviPK8BoidListPK7BoidMapEiPS4_PS7_EEEEvE21_M_is_deferred_futureEv,"x"
	.linkonce discard
	.align 2
	.p2align 4
	.globl	_ZNKSt13__future_base15_Deferred_stateINSt6thread8_InvokerISt5tupleIJPFviPK8BoidListPK7BoidMapEiPS4_PS7_EEEEvE21_M_is_deferred_futureEv
	.def	_ZNKSt13__future_base15_Deferred_stateINSt6thread8_InvokerISt5tupleIJPFviPK8BoidListPK7BoidMapEiPS4_PS7_EEEEvE21_M_is_deferred_futureEv;	.scl	2;	.type	32;	.endef
	.seh_proc	_ZNKSt13__future_base15_Deferred_stateINSt6thread8_InvokerISt5tupleIJPFviPK8BoidListPK7BoidMapEiPS4_PS7_EEEEvE21_M_is_deferred_futureEv
_ZNKSt13__future_base15_Deferred_stateINSt6thread8_InvokerISt5tupleIJPFviPK8BoidListPK7BoidMapEiPS4_PS7_EEEEvE21_M_is_deferred_futureEv:
.LFB14996:
	.seh_endprologue
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1710:       virtual bool _M_is_deferred_future() const { return true; }
	movl	$1, %eax	 #,
	ret	
	.seh_endproc
	.section	.text$_ZNSt6thread11_State_implINS_8_InvokerISt5tupleIJPFviPKiPK8BoidListPK7BoidMapEiPiPS5_SA_EEEEE6_M_runEv,"x"
	.linkonce discard
	.align 2
	.p2align 4
	.globl	_ZNSt6thread11_State_implINS_8_InvokerISt5tupleIJPFviPKiPK8BoidListPK7BoidMapEiPiPS5_SA_EEEEE6_M_runEv
	.def	_ZNSt6thread11_State_implINS_8_InvokerISt5tupleIJPFviPKiPK8BoidListPK7BoidMapEiPiPS5_SA_EEEEE6_M_runEv;	.scl	2;	.type	32;	.endef
	.seh_proc	_ZNSt6thread11_State_implINS_8_InvokerISt5tupleIJPFviPKiPK8BoidListPK7BoidMapEiPiPS5_SA_EEEEE6_M_runEv
_ZNSt6thread11_State_implINS_8_InvokerISt5tupleIJPFviPKiPK8BoidListPK7BoidMapEiPiPS5_SA_EEEEE6_M_runEv:
.LFB15001:
	.seh_endprologue
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/invoke.h:61:     { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
	movl	32(%rcx), %r10d	 # MEM[(int &)this_1(D) + 32], MEM[(int &)this_1(D) + 32]
	movq	24(%rcx), %rdx	 # MEM[(int * &)this_1(D) + 24], MEM[(int * &)this_1(D) + 24]
	movq	40(%rcx), %rax	 # MEM[(void (*<T14c23>) (int, const int *, const struct BoidList *, const struct BoidMap *) &)this_1(D) + 40], MEM[(void (*<T14c23>) (int, const int *, const struct BoidList *, const struct BoidMap *) &)this_1(D) + 40]
	movq	8(%rcx), %r9	 # MEM[(const struct BoidMap * &)this_1(D) + 8],
	movq	16(%rcx), %r8	 # MEM[(struct BoidList * &)this_1(D) + 16],
	movl	%r10d, %ecx	 # MEM[(int &)this_1(D) + 32],
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_thread.h:244: 	_M_run() { _M_func(); }
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/invoke.h:61:     { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
	rex.W jmp	*%rax	 # MEM[(void (*<T14c23>) (int, const int *, const struct BoidList *, const struct BoidMap *) &)this_1(D) + 40]
	.seh_endproc
	.section	.text$_ZNSt6thread11_State_implINS_8_InvokerISt5tupleIJPFvP10TaskMasterhES4_iEEEEE6_M_runEv,"x"
	.linkonce discard
	.align 2
	.p2align 4
	.globl	_ZNSt6thread11_State_implINS_8_InvokerISt5tupleIJPFvP10TaskMasterhES4_iEEEEE6_M_runEv
	.def	_ZNSt6thread11_State_implINS_8_InvokerISt5tupleIJPFvP10TaskMasterhES4_iEEEEE6_M_runEv;	.scl	2;	.type	32;	.endef
	.seh_proc	_ZNSt6thread11_State_implINS_8_InvokerISt5tupleIJPFvP10TaskMasterhES4_iEEEEE6_M_runEv
_ZNSt6thread11_State_implINS_8_InvokerISt5tupleIJPFvP10TaskMasterhES4_iEEEEE6_M_runEv:
.LFB15002:
	.seh_endprologue
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/invoke.h:61:     { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
	movq	16(%rcx), %r8	 # MEM[(struct TaskMaster * &)this_1(D) + 16], MEM[(struct TaskMaster * &)this_1(D) + 16]
	movzbl	8(%rcx), %edx	 # MEM[(int &)this_1(D) + 8], MEM[(int &)this_1(D) + 8]
	movq	24(%rcx), %rax	 # MEM[(void (*<T1487d>) (struct TaskMaster *, unsigned char) &)this_1(D) + 24], MEM[(void (*<T1487d>) (struct TaskMaster *, unsigned char) &)this_1(D) + 24]
	movq	%r8, %rcx	 # MEM[(struct TaskMaster * &)this_1(D) + 16],
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_thread.h:244: 	_M_run() { _M_func(); }
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/invoke.h:61:     { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
	rex.W jmp	*%rax	 # MEM[(void (*<T1487d>) (struct TaskMaster *, unsigned char) &)this_1(D) + 24]
	.seh_endproc
	.section	.text$_ZNSt23_Sp_counted_ptr_inplaceINSt13__future_base17_Async_state_implINSt6thread8_InvokerISt5tupleIJPFviPK8BoidListPK7BoidMapEiPS5_PS8_EEEEvEESaIvELN9__gnu_cxx12_Lock_policyE2EED0Ev,"x"
	.linkonce discard
	.align 2
	.p2align 4
	.globl	_ZNSt23_Sp_counted_ptr_inplaceINSt13__future_base17_Async_state_implINSt6thread8_InvokerISt5tupleIJPFviPK8BoidListPK7BoidMapEiPS5_PS8_EEEEvEESaIvELN9__gnu_cxx12_Lock_policyE2EED0Ev
	.def	_ZNSt23_Sp_counted_ptr_inplaceINSt13__future_base17_Async_state_implINSt6thread8_InvokerISt5tupleIJPFviPK8BoidListPK7BoidMapEiPS5_PS8_EEEEvEESaIvELN9__gnu_cxx12_Lock_policyE2EED0Ev;	.scl	2;	.type	32;	.endef
	.seh_proc	_ZNSt23_Sp_counted_ptr_inplaceINSt13__future_base17_Async_state_implINSt6thread8_InvokerISt5tupleIJPFviPK8BoidListPK7BoidMapEiPS5_PS8_EEEEvEESaIvELN9__gnu_cxx12_Lock_policyE2EED0Ev
_ZNSt23_Sp_counted_ptr_inplaceINSt13__future_base17_Async_state_implINSt6thread8_InvokerISt5tupleIJPFviPK8BoidListPK7BoidMapEiPS5_PS8_EEEEvEESaIvELN9__gnu_cxx12_Lock_policyE2EED0Ev:
.LFB14971:
	.seh_endprologue
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:608:       ~_Sp_counted_ptr_inplace() noexcept { }
	movl	$120, %edx	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:608:       ~_Sp_counted_ptr_inplace() noexcept { }
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:608:       ~_Sp_counted_ptr_inplace() noexcept { }
	jmp	_ZdlPvy	 #
	.seh_endproc
	.section	.text$_ZNSt23_Sp_counted_ptr_inplaceINSt13__future_base15_Deferred_stateINSt6thread8_InvokerISt5tupleIJPFvibPK7BoidMapPK5RulesPK8BoidListEibS7_SA_SD_EEEEvEESaIvELN9__gnu_cxx12_Lock_policyE2EED0Ev,"x"
	.linkonce discard
	.align 2
	.p2align 4
	.globl	_ZNSt23_Sp_counted_ptr_inplaceINSt13__future_base15_Deferred_stateINSt6thread8_InvokerISt5tupleIJPFvibPK7BoidMapPK5RulesPK8BoidListEibS7_SA_SD_EEEEvEESaIvELN9__gnu_cxx12_Lock_policyE2EED0Ev
	.def	_ZNSt23_Sp_counted_ptr_inplaceINSt13__future_base15_Deferred_stateINSt6thread8_InvokerISt5tupleIJPFvibPK7BoidMapPK5RulesPK8BoidListEibS7_SA_SD_EEEEvEESaIvELN9__gnu_cxx12_Lock_policyE2EED0Ev;	.scl	2;	.type	32;	.endef
	.seh_proc	_ZNSt23_Sp_counted_ptr_inplaceINSt13__future_base15_Deferred_stateINSt6thread8_InvokerISt5tupleIJPFvibPK7BoidMapPK5RulesPK8BoidListEibS7_SA_SD_EEEEvEESaIvELN9__gnu_cxx12_Lock_policyE2EED0Ev
_ZNSt23_Sp_counted_ptr_inplaceINSt13__future_base15_Deferred_stateINSt6thread8_InvokerISt5tupleIJPFvibPK7BoidMapPK5RulesPK8BoidListEibS7_SA_SD_EEEEvEESaIvELN9__gnu_cxx12_Lock_policyE2EED0Ev:
.LFB14950:
	.seh_endprologue
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:608:       ~_Sp_counted_ptr_inplace() noexcept { }
	movl	$112, %edx	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:608:       ~_Sp_counted_ptr_inplace() noexcept { }
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:608:       ~_Sp_counted_ptr_inplace() noexcept { }
	jmp	_ZdlPvy	 #
	.seh_endproc
	.section	.text$_ZNSt23_Sp_counted_ptr_inplaceINSt13__future_base17_Async_state_implINSt6thread8_InvokerISt5tupleIJPFvibPK7BoidMapPK5RulesPK8BoidListEibS7_SA_SD_EEEEvEESaIvELN9__gnu_cxx12_Lock_policyE2EED0Ev,"x"
	.linkonce discard
	.align 2
	.p2align 4
	.globl	_ZNSt23_Sp_counted_ptr_inplaceINSt13__future_base17_Async_state_implINSt6thread8_InvokerISt5tupleIJPFvibPK7BoidMapPK5RulesPK8BoidListEibS7_SA_SD_EEEEvEESaIvELN9__gnu_cxx12_Lock_policyE2EED0Ev
	.def	_ZNSt23_Sp_counted_ptr_inplaceINSt13__future_base17_Async_state_implINSt6thread8_InvokerISt5tupleIJPFvibPK7BoidMapPK5RulesPK8BoidListEibS7_SA_SD_EEEEvEESaIvELN9__gnu_cxx12_Lock_policyE2EED0Ev;	.scl	2;	.type	32;	.endef
	.seh_proc	_ZNSt23_Sp_counted_ptr_inplaceINSt13__future_base17_Async_state_implINSt6thread8_InvokerISt5tupleIJPFvibPK7BoidMapPK5RulesPK8BoidListEibS7_SA_SD_EEEEvEESaIvELN9__gnu_cxx12_Lock_policyE2EED0Ev
_ZNSt23_Sp_counted_ptr_inplaceINSt13__future_base17_Async_state_implINSt6thread8_InvokerISt5tupleIJPFvibPK7BoidMapPK5RulesPK8BoidListEibS7_SA_SD_EEEEvEESaIvELN9__gnu_cxx12_Lock_policyE2EED0Ev:
.LFB14957:
	.seh_endprologue
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:608:       ~_Sp_counted_ptr_inplace() noexcept { }
	movl	$128, %edx	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:608:       ~_Sp_counted_ptr_inplace() noexcept { }
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:608:       ~_Sp_counted_ptr_inplace() noexcept { }
	jmp	_ZdlPvy	 #
	.seh_endproc
	.section	.text$_ZNSt23_Sp_counted_ptr_inplaceINSt13__future_base15_Deferred_stateINSt6thread8_InvokerISt5tupleIJPFviPK8BoidListPK7BoidMapEiPS5_PS8_EEEEvEESaIvELN9__gnu_cxx12_Lock_policyE2EED0Ev,"x"
	.linkonce discard
	.align 2
	.p2align 4
	.globl	_ZNSt23_Sp_counted_ptr_inplaceINSt13__future_base15_Deferred_stateINSt6thread8_InvokerISt5tupleIJPFviPK8BoidListPK7BoidMapEiPS5_PS8_EEEEvEESaIvELN9__gnu_cxx12_Lock_policyE2EED0Ev
	.def	_ZNSt23_Sp_counted_ptr_inplaceINSt13__future_base15_Deferred_stateINSt6thread8_InvokerISt5tupleIJPFviPK8BoidListPK7BoidMapEiPS5_PS8_EEEEvEESaIvELN9__gnu_cxx12_Lock_policyE2EED0Ev;	.scl	2;	.type	32;	.endef
	.seh_proc	_ZNSt23_Sp_counted_ptr_inplaceINSt13__future_base15_Deferred_stateINSt6thread8_InvokerISt5tupleIJPFviPK8BoidListPK7BoidMapEiPS5_PS8_EEEEvEESaIvELN9__gnu_cxx12_Lock_policyE2EED0Ev
_ZNSt23_Sp_counted_ptr_inplaceINSt13__future_base15_Deferred_stateINSt6thread8_InvokerISt5tupleIJPFviPK8BoidListPK7BoidMapEiPS5_PS8_EEEEvEESaIvELN9__gnu_cxx12_Lock_policyE2EED0Ev:
.LFB14964:
	.seh_endprologue
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:608:       ~_Sp_counted_ptr_inplace() noexcept { }
	movl	$104, %edx	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:608:       ~_Sp_counted_ptr_inplace() noexcept { }
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:608:       ~_Sp_counted_ptr_inplace() noexcept { }
	jmp	_ZdlPvy	 #
	.seh_endproc
	.section	.text$_ZNSt6thread11_State_implINS_8_InvokerISt5tupleIJPFviPKiPK8BoidListPK7BoidMapEiPiPS5_SA_EEEEED1Ev,"x"
	.linkonce discard
	.align 2
	.p2align 4
	.globl	_ZNSt6thread11_State_implINS_8_InvokerISt5tupleIJPFviPKiPK8BoidListPK7BoidMapEiPiPS5_SA_EEEEED1Ev
	.def	_ZNSt6thread11_State_implINS_8_InvokerISt5tupleIJPFviPKiPK8BoidListPK7BoidMapEiPiPS5_SA_EEEEED1Ev;	.scl	2;	.type	32;	.endef
	.seh_proc	_ZNSt6thread11_State_implINS_8_InvokerISt5tupleIJPFviPKiPK8BoidListPK7BoidMapEiPiPS5_SA_EEEEED1Ev
_ZNSt6thread11_State_implINS_8_InvokerISt5tupleIJPFviPKiPK8BoidListPK7BoidMapEiPiPS5_SA_EEEEED1Ev:
.LFB14937:
	.seh_endprologue
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_thread.h:234:       struct _State_impl : public _State
	leaq	16+_ZTVNSt6thread11_State_implINS_8_InvokerISt5tupleIJPFviPKiPK8BoidListPK7BoidMapEiPiPS5_SA_EEEEEE(%rip), %rax	 #, tmp87
	movq	%rax, (%rcx)	 # tmp87, this_3(D)->D.186063._vptr._State
	jmp	_ZNSt6thread6_StateD2Ev	 #
	.seh_endproc
	.section	.text$_ZNSt6thread11_State_implINS_8_InvokerISt5tupleIJPFviPKiPK8BoidListPK7BoidMapEiPiPS5_SA_EEEEED0Ev,"x"
	.linkonce discard
	.align 2
	.p2align 4
	.globl	_ZNSt6thread11_State_implINS_8_InvokerISt5tupleIJPFviPKiPK8BoidListPK7BoidMapEiPiPS5_SA_EEEEED0Ev
	.def	_ZNSt6thread11_State_implINS_8_InvokerISt5tupleIJPFviPKiPK8BoidListPK7BoidMapEiPiPS5_SA_EEEEED0Ev;	.scl	2;	.type	32;	.endef
	.seh_proc	_ZNSt6thread11_State_implINS_8_InvokerISt5tupleIJPFviPKiPK8BoidListPK7BoidMapEiPiPS5_SA_EEEEED0Ev
_ZNSt6thread11_State_implINS_8_InvokerISt5tupleIJPFviPKiPK8BoidListPK7BoidMapEiPiPS5_SA_EEEEED0Ev:
.LFB14938:
	pushq	%rbx	 #
	.seh_pushreg	%rbx
	subq	$32, %rsp	 #,
	.seh_stackalloc	32
	.seh_endprologue
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_thread.h:234:       struct _State_impl : public _State
	leaq	16+_ZTVNSt6thread11_State_implINS_8_InvokerISt5tupleIJPFviPKiPK8BoidListPK7BoidMapEiPiPS5_SA_EEEEEE(%rip), %rax	 #, tmp87
	movq	%rax, (%rcx)	 # tmp87, this_2(D)->D.186063._vptr._State
	movq	%rcx, %rbx	 # tmp85, this
	call	_ZNSt6thread6_StateD2Ev	 #
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_thread.h:234:       struct _State_impl : public _State
	movl	$48, %edx	 #,
	movq	%rbx, %rcx	 # this,
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_thread.h:234:       struct _State_impl : public _State
	addq	$32, %rsp	 #,
	popq	%rbx	 #
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_thread.h:234:       struct _State_impl : public _State
	jmp	_ZdlPvy	 #
	.seh_endproc
	.section	.text$_ZNSt6thread11_State_implINS_8_InvokerISt5tupleIJMNSt13__future_base17_Async_state_implINS1_IS2_IJPFvibPK7BoidMapPK5RulesPK8BoidListEibS7_SA_SD_EEEEvEEFvvEPSI_EEEEED1Ev,"x"
	.linkonce discard
	.align 2
	.p2align 4
	.globl	_ZNSt6thread11_State_implINS_8_InvokerISt5tupleIJMNSt13__future_base17_Async_state_implINS1_IS2_IJPFvibPK7BoidMapPK5RulesPK8BoidListEibS7_SA_SD_EEEEvEEFvvEPSI_EEEEED1Ev
	.def	_ZNSt6thread11_State_implINS_8_InvokerISt5tupleIJMNSt13__future_base17_Async_state_implINS1_IS2_IJPFvibPK7BoidMapPK5RulesPK8BoidListEibS7_SA_SD_EEEEvEEFvvEPSI_EEEEED1Ev;	.scl	2;	.type	32;	.endef
	.seh_proc	_ZNSt6thread11_State_implINS_8_InvokerISt5tupleIJMNSt13__future_base17_Async_state_implINS1_IS2_IJPFvibPK7BoidMapPK5RulesPK8BoidListEibS7_SA_SD_EEEEvEEFvvEPSI_EEEEED1Ev
_ZNSt6thread11_State_implINS_8_InvokerISt5tupleIJMNSt13__future_base17_Async_state_implINS1_IS2_IJPFvibPK7BoidMapPK5RulesPK8BoidListEibS7_SA_SD_EEEEvEEFvvEPSI_EEEEED1Ev:
.LFB14921:
	.seh_endprologue
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_thread.h:234:       struct _State_impl : public _State
	leaq	16+_ZTVNSt6thread11_State_implINS_8_InvokerISt5tupleIJMNSt13__future_base17_Async_state_implINS1_IS2_IJPFvibPK7BoidMapPK5RulesPK8BoidListEibS7_SA_SD_EEEEvEEFvvEPSI_EEEEEE(%rip), %rax	 #, tmp87
	movq	%rax, (%rcx)	 # tmp87, this_3(D)->D.219460._vptr._State
	jmp	_ZNSt6thread6_StateD2Ev	 #
	.seh_endproc
	.section	.text$_ZNSt6thread11_State_implINS_8_InvokerISt5tupleIJMNSt13__future_base17_Async_state_implINS1_IS2_IJPFvibPK7BoidMapPK5RulesPK8BoidListEibS7_SA_SD_EEEEvEEFvvEPSI_EEEEED0Ev,"x"
	.linkonce discard
	.align 2
	.p2align 4
	.globl	_ZNSt6thread11_State_implINS_8_InvokerISt5tupleIJMNSt13__future_base17_Async_state_implINS1_IS2_IJPFvibPK7BoidMapPK5RulesPK8BoidListEibS7_SA_SD_EEEEvEEFvvEPSI_EEEEED0Ev
	.def	_ZNSt6thread11_State_implINS_8_InvokerISt5tupleIJMNSt13__future_base17_Async_state_implINS1_IS2_IJPFvibPK7BoidMapPK5RulesPK8BoidListEibS7_SA_SD_EEEEvEEFvvEPSI_EEEEED0Ev;	.scl	2;	.type	32;	.endef
	.seh_proc	_ZNSt6thread11_State_implINS_8_InvokerISt5tupleIJMNSt13__future_base17_Async_state_implINS1_IS2_IJPFvibPK7BoidMapPK5RulesPK8BoidListEibS7_SA_SD_EEEEvEEFvvEPSI_EEEEED0Ev
_ZNSt6thread11_State_implINS_8_InvokerISt5tupleIJMNSt13__future_base17_Async_state_implINS1_IS2_IJPFvibPK7BoidMapPK5RulesPK8BoidListEibS7_SA_SD_EEEEvEEFvvEPSI_EEEEED0Ev:
.LFB14922:
	pushq	%rbx	 #
	.seh_pushreg	%rbx
	subq	$32, %rsp	 #,
	.seh_stackalloc	32
	.seh_endprologue
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_thread.h:234:       struct _State_impl : public _State
	leaq	16+_ZTVNSt6thread11_State_implINS_8_InvokerISt5tupleIJMNSt13__future_base17_Async_state_implINS1_IS2_IJPFvibPK7BoidMapPK5RulesPK8BoidListEibS7_SA_SD_EEEEvEEFvvEPSI_EEEEEE(%rip), %rax	 #, tmp87
	movq	%rax, (%rcx)	 # tmp87, this_2(D)->D.219460._vptr._State
	movq	%rcx, %rbx	 # tmp85, this
	call	_ZNSt6thread6_StateD2Ev	 #
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_thread.h:234:       struct _State_impl : public _State
	movl	$32, %edx	 #,
	movq	%rbx, %rcx	 # this,
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_thread.h:234:       struct _State_impl : public _State
	addq	$32, %rsp	 #,
	popq	%rbx	 #
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_thread.h:234:       struct _State_impl : public _State
	jmp	_ZdlPvy	 #
	.seh_endproc
	.section	.text$_ZNSt6thread11_State_implINS_8_InvokerISt5tupleIJMNSt13__future_base17_Async_state_implINS1_IS2_IJPFviPK8BoidListPK7BoidMapEiPS5_PS8_EEEEvEEFvvEPSH_EEEEED1Ev,"x"
	.linkonce discard
	.align 2
	.p2align 4
	.globl	_ZNSt6thread11_State_implINS_8_InvokerISt5tupleIJMNSt13__future_base17_Async_state_implINS1_IS2_IJPFviPK8BoidListPK7BoidMapEiPS5_PS8_EEEEvEEFvvEPSH_EEEEED1Ev
	.def	_ZNSt6thread11_State_implINS_8_InvokerISt5tupleIJMNSt13__future_base17_Async_state_implINS1_IS2_IJPFviPK8BoidListPK7BoidMapEiPS5_PS8_EEEEvEEFvvEPSH_EEEEED1Ev;	.scl	2;	.type	32;	.endef
	.seh_proc	_ZNSt6thread11_State_implINS_8_InvokerISt5tupleIJMNSt13__future_base17_Async_state_implINS1_IS2_IJPFviPK8BoidListPK7BoidMapEiPS5_PS8_EEEEvEEFvvEPSH_EEEEED1Ev
_ZNSt6thread11_State_implINS_8_InvokerISt5tupleIJMNSt13__future_base17_Async_state_implINS1_IS2_IJPFviPK8BoidListPK7BoidMapEiPS5_PS8_EEEEvEEFvvEPSH_EEEEED1Ev:
.LFB14925:
	.seh_endprologue
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_thread.h:234:       struct _State_impl : public _State
	leaq	16+_ZTVNSt6thread11_State_implINS_8_InvokerISt5tupleIJMNSt13__future_base17_Async_state_implINS1_IS2_IJPFviPK8BoidListPK7BoidMapEiPS5_PS8_EEEEvEEFvvEPSH_EEEEEE(%rip), %rax	 #, tmp87
	movq	%rax, (%rcx)	 # tmp87, this_3(D)->D.216239._vptr._State
	jmp	_ZNSt6thread6_StateD2Ev	 #
	.seh_endproc
	.section	.text$_ZNSt6thread11_State_implINS_8_InvokerISt5tupleIJMNSt13__future_base17_Async_state_implINS1_IS2_IJPFviPK8BoidListPK7BoidMapEiPS5_PS8_EEEEvEEFvvEPSH_EEEEED0Ev,"x"
	.linkonce discard
	.align 2
	.p2align 4
	.globl	_ZNSt6thread11_State_implINS_8_InvokerISt5tupleIJMNSt13__future_base17_Async_state_implINS1_IS2_IJPFviPK8BoidListPK7BoidMapEiPS5_PS8_EEEEvEEFvvEPSH_EEEEED0Ev
	.def	_ZNSt6thread11_State_implINS_8_InvokerISt5tupleIJMNSt13__future_base17_Async_state_implINS1_IS2_IJPFviPK8BoidListPK7BoidMapEiPS5_PS8_EEEEvEEFvvEPSH_EEEEED0Ev;	.scl	2;	.type	32;	.endef
	.seh_proc	_ZNSt6thread11_State_implINS_8_InvokerISt5tupleIJMNSt13__future_base17_Async_state_implINS1_IS2_IJPFviPK8BoidListPK7BoidMapEiPS5_PS8_EEEEvEEFvvEPSH_EEEEED0Ev
_ZNSt6thread11_State_implINS_8_InvokerISt5tupleIJMNSt13__future_base17_Async_state_implINS1_IS2_IJPFviPK8BoidListPK7BoidMapEiPS5_PS8_EEEEvEEFvvEPSH_EEEEED0Ev:
.LFB14926:
	pushq	%rbx	 #
	.seh_pushreg	%rbx
	subq	$32, %rsp	 #,
	.seh_stackalloc	32
	.seh_endprologue
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_thread.h:234:       struct _State_impl : public _State
	leaq	16+_ZTVNSt6thread11_State_implINS_8_InvokerISt5tupleIJMNSt13__future_base17_Async_state_implINS1_IS2_IJPFviPK8BoidListPK7BoidMapEiPS5_PS8_EEEEvEEFvvEPSH_EEEEEE(%rip), %rax	 #, tmp87
	movq	%rax, (%rcx)	 # tmp87, this_2(D)->D.216239._vptr._State
	movq	%rcx, %rbx	 # tmp85, this
	call	_ZNSt6thread6_StateD2Ev	 #
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_thread.h:234:       struct _State_impl : public _State
	movl	$32, %edx	 #,
	movq	%rbx, %rcx	 # this,
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_thread.h:234:       struct _State_impl : public _State
	addq	$32, %rsp	 #,
	popq	%rbx	 #
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_thread.h:234:       struct _State_impl : public _State
	jmp	_ZdlPvy	 #
	.seh_endproc
	.section	.text$_ZNSt6thread11_State_implINS_8_InvokerISt5tupleIJPFvP10TaskMasterhES4_iEEEEED1Ev,"x"
	.linkonce discard
	.align 2
	.p2align 4
	.globl	_ZNSt6thread11_State_implINS_8_InvokerISt5tupleIJPFvP10TaskMasterhES4_iEEEEED1Ev
	.def	_ZNSt6thread11_State_implINS_8_InvokerISt5tupleIJPFvP10TaskMasterhES4_iEEEEED1Ev;	.scl	2;	.type	32;	.endef
	.seh_proc	_ZNSt6thread11_State_implINS_8_InvokerISt5tupleIJPFvP10TaskMasterhES4_iEEEEED1Ev
_ZNSt6thread11_State_implINS_8_InvokerISt5tupleIJPFvP10TaskMasterhES4_iEEEEED1Ev:
.LFB14941:
	.seh_endprologue
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_thread.h:234:       struct _State_impl : public _State
	leaq	16+_ZTVNSt6thread11_State_implINS_8_InvokerISt5tupleIJPFvP10TaskMasterhES4_iEEEEEE(%rip), %rax	 #, tmp87
	movq	%rax, (%rcx)	 # tmp87, this_3(D)->D.178931._vptr._State
	jmp	_ZNSt6thread6_StateD2Ev	 #
	.seh_endproc
	.section	.text$_ZNSt6thread11_State_implINS_8_InvokerISt5tupleIJPFvP10TaskMasterhES4_iEEEEED0Ev,"x"
	.linkonce discard
	.align 2
	.p2align 4
	.globl	_ZNSt6thread11_State_implINS_8_InvokerISt5tupleIJPFvP10TaskMasterhES4_iEEEEED0Ev
	.def	_ZNSt6thread11_State_implINS_8_InvokerISt5tupleIJPFvP10TaskMasterhES4_iEEEEED0Ev;	.scl	2;	.type	32;	.endef
	.seh_proc	_ZNSt6thread11_State_implINS_8_InvokerISt5tupleIJPFvP10TaskMasterhES4_iEEEEED0Ev
_ZNSt6thread11_State_implINS_8_InvokerISt5tupleIJPFvP10TaskMasterhES4_iEEEEED0Ev:
.LFB14942:
	pushq	%rbx	 #
	.seh_pushreg	%rbx
	subq	$32, %rsp	 #,
	.seh_stackalloc	32
	.seh_endprologue
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_thread.h:234:       struct _State_impl : public _State
	leaq	16+_ZTVNSt6thread11_State_implINS_8_InvokerISt5tupleIJPFvP10TaskMasterhES4_iEEEEEE(%rip), %rax	 #, tmp87
	movq	%rax, (%rcx)	 # tmp87, this_2(D)->D.178931._vptr._State
	movq	%rcx, %rbx	 # tmp85, this
	call	_ZNSt6thread6_StateD2Ev	 #
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_thread.h:234:       struct _State_impl : public _State
	movl	$32, %edx	 #,
	movq	%rbx, %rcx	 # this,
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_thread.h:234:       struct _State_impl : public _State
	addq	$32, %rsp	 #,
	popq	%rbx	 #
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_thread.h:234:       struct _State_impl : public _State
	jmp	_ZdlPvy	 #
	.seh_endproc
	.section	.text$_ZNSt23_Sp_counted_ptr_inplaceINSt13__future_base17_Async_state_implINSt6thread8_InvokerISt5tupleIJPFviPK8BoidListPK7BoidMapEiPS5_PS8_EEEEvEESaIvELN9__gnu_cxx12_Lock_policyE2EE14_M_get_deleterERKSt9type_info,"x"
	.linkonce discard
	.align 2
	.p2align 4
	.globl	_ZNSt23_Sp_counted_ptr_inplaceINSt13__future_base17_Async_state_implINSt6thread8_InvokerISt5tupleIJPFviPK8BoidListPK7BoidMapEiPS5_PS8_EEEEvEESaIvELN9__gnu_cxx12_Lock_policyE2EE14_M_get_deleterERKSt9type_info
	.def	_ZNSt23_Sp_counted_ptr_inplaceINSt13__future_base17_Async_state_implINSt6thread8_InvokerISt5tupleIJPFviPK8BoidListPK7BoidMapEiPS5_PS8_EEEEvEESaIvELN9__gnu_cxx12_Lock_policyE2EE14_M_get_deleterERKSt9type_info;	.scl	2;	.type	32;	.endef
	.seh_proc	_ZNSt23_Sp_counted_ptr_inplaceINSt13__future_base17_Async_state_implINSt6thread8_InvokerISt5tupleIJPFviPK8BoidListPK7BoidMapEiPS5_PS8_EEEEvEESaIvELN9__gnu_cxx12_Lock_policyE2EE14_M_get_deleterERKSt9type_info
_ZNSt23_Sp_counted_ptr_inplaceINSt13__future_base17_Async_state_implINSt6thread8_InvokerISt5tupleIJPFviPK8BoidListPK7BoidMapEiPS5_PS8_EEEEvEESaIvELN9__gnu_cxx12_Lock_policyE2EE14_M_get_deleterERKSt9type_info:
.LFB14974:
	pushq	%rbx	 #
	.seh_pushreg	%rbx
	subq	$32, %rsp	 #,
	.seh_stackalloc	32
	.seh_endprologue
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:631:       _M_get_deleter(const std::type_info& __ti) noexcept override
	movq	%rdx, %rax	 # tmp91, __ti
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:639: 	    ||
	leaq	_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag(%rip), %rdx	 #, tmp86
 # C:/msys64/ucrt64/include/c++/13.1.0/ext/aligned_buffer.h:106:         return static_cast<void*>(&_M_storage);
	leaq	16(%rcx), %rbx	 #, <retval>
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:639: 	    ||
	cmpq	%rdx, %rax	 # tmp86, __ti
	je	.L38	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:641: 	    __ti == typeid(_Sp_make_shared_tag)
	leaq	_ZTISt19_Sp_make_shared_tag(%rip), %rdx	 #, tmp87
	movq	%rax, %rcx	 # __ti,
	call	_ZNKSt9type_infoeqERKS_	 #
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:647: 	return nullptr;
	testb	%al, %al	 # tmp92
	movl	$0, %eax	 #, tmp89
	cmove	%rax, %rbx	 # <retval>,, tmp89, <retval>
.L38:
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:648:       }
	movq	%rbx, %rax	 # <retval>,
	addq	$32, %rsp	 #,
	popq	%rbx	 #
	ret	
	.seh_endproc
	.section	.text$_ZNSt23_Sp_counted_ptr_inplaceINSt13__future_base15_Deferred_stateINSt6thread8_InvokerISt5tupleIJPFviPK8BoidListPK7BoidMapEiPS5_PS8_EEEEvEESaIvELN9__gnu_cxx12_Lock_policyE2EE14_M_get_deleterERKSt9type_info,"x"
	.linkonce discard
	.align 2
	.p2align 4
	.globl	_ZNSt23_Sp_counted_ptr_inplaceINSt13__future_base15_Deferred_stateINSt6thread8_InvokerISt5tupleIJPFviPK8BoidListPK7BoidMapEiPS5_PS8_EEEEvEESaIvELN9__gnu_cxx12_Lock_policyE2EE14_M_get_deleterERKSt9type_info
	.def	_ZNSt23_Sp_counted_ptr_inplaceINSt13__future_base15_Deferred_stateINSt6thread8_InvokerISt5tupleIJPFviPK8BoidListPK7BoidMapEiPS5_PS8_EEEEvEESaIvELN9__gnu_cxx12_Lock_policyE2EE14_M_get_deleterERKSt9type_info;	.scl	2;	.type	32;	.endef
	.seh_proc	_ZNSt23_Sp_counted_ptr_inplaceINSt13__future_base15_Deferred_stateINSt6thread8_InvokerISt5tupleIJPFviPK8BoidListPK7BoidMapEiPS5_PS8_EEEEvEESaIvELN9__gnu_cxx12_Lock_policyE2EE14_M_get_deleterERKSt9type_info
_ZNSt23_Sp_counted_ptr_inplaceINSt13__future_base15_Deferred_stateINSt6thread8_InvokerISt5tupleIJPFviPK8BoidListPK7BoidMapEiPS5_PS8_EEEEvEESaIvELN9__gnu_cxx12_Lock_policyE2EE14_M_get_deleterERKSt9type_info:
.LFB14967:
	pushq	%rbx	 #
	.seh_pushreg	%rbx
	subq	$32, %rsp	 #,
	.seh_stackalloc	32
	.seh_endprologue
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:631:       _M_get_deleter(const std::type_info& __ti) noexcept override
	movq	%rdx, %rax	 # tmp91, __ti
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:639: 	    ||
	leaq	_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag(%rip), %rdx	 #, tmp86
 # C:/msys64/ucrt64/include/c++/13.1.0/ext/aligned_buffer.h:106:         return static_cast<void*>(&_M_storage);
	leaq	16(%rcx), %rbx	 #, <retval>
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:639: 	    ||
	cmpq	%rdx, %rax	 # tmp86, __ti
	je	.L42	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:641: 	    __ti == typeid(_Sp_make_shared_tag)
	leaq	_ZTISt19_Sp_make_shared_tag(%rip), %rdx	 #, tmp87
	movq	%rax, %rcx	 # __ti,
	call	_ZNKSt9type_infoeqERKS_	 #
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:647: 	return nullptr;
	testb	%al, %al	 # tmp92
	movl	$0, %eax	 #, tmp89
	cmove	%rax, %rbx	 # <retval>,, tmp89, <retval>
.L42:
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:648:       }
	movq	%rbx, %rax	 # <retval>,
	addq	$32, %rsp	 #,
	popq	%rbx	 #
	ret	
	.seh_endproc
	.section	.text$_ZNSt23_Sp_counted_ptr_inplaceINSt13__future_base17_Async_state_implINSt6thread8_InvokerISt5tupleIJPFvibPK7BoidMapPK5RulesPK8BoidListEibS7_SA_SD_EEEEvEESaIvELN9__gnu_cxx12_Lock_policyE2EE14_M_get_deleterERKSt9type_info,"x"
	.linkonce discard
	.align 2
	.p2align 4
	.globl	_ZNSt23_Sp_counted_ptr_inplaceINSt13__future_base17_Async_state_implINSt6thread8_InvokerISt5tupleIJPFvibPK7BoidMapPK5RulesPK8BoidListEibS7_SA_SD_EEEEvEESaIvELN9__gnu_cxx12_Lock_policyE2EE14_M_get_deleterERKSt9type_info
	.def	_ZNSt23_Sp_counted_ptr_inplaceINSt13__future_base17_Async_state_implINSt6thread8_InvokerISt5tupleIJPFvibPK7BoidMapPK5RulesPK8BoidListEibS7_SA_SD_EEEEvEESaIvELN9__gnu_cxx12_Lock_policyE2EE14_M_get_deleterERKSt9type_info;	.scl	2;	.type	32;	.endef
	.seh_proc	_ZNSt23_Sp_counted_ptr_inplaceINSt13__future_base17_Async_state_implINSt6thread8_InvokerISt5tupleIJPFvibPK7BoidMapPK5RulesPK8BoidListEibS7_SA_SD_EEEEvEESaIvELN9__gnu_cxx12_Lock_policyE2EE14_M_get_deleterERKSt9type_info
_ZNSt23_Sp_counted_ptr_inplaceINSt13__future_base17_Async_state_implINSt6thread8_InvokerISt5tupleIJPFvibPK7BoidMapPK5RulesPK8BoidListEibS7_SA_SD_EEEEvEESaIvELN9__gnu_cxx12_Lock_policyE2EE14_M_get_deleterERKSt9type_info:
.LFB14960:
	pushq	%rbx	 #
	.seh_pushreg	%rbx
	subq	$32, %rsp	 #,
	.seh_stackalloc	32
	.seh_endprologue
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:631:       _M_get_deleter(const std::type_info& __ti) noexcept override
	movq	%rdx, %rax	 # tmp91, __ti
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:639: 	    ||
	leaq	_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag(%rip), %rdx	 #, tmp86
 # C:/msys64/ucrt64/include/c++/13.1.0/ext/aligned_buffer.h:106:         return static_cast<void*>(&_M_storage);
	leaq	16(%rcx), %rbx	 #, <retval>
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:639: 	    ||
	cmpq	%rdx, %rax	 # tmp86, __ti
	je	.L46	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:641: 	    __ti == typeid(_Sp_make_shared_tag)
	leaq	_ZTISt19_Sp_make_shared_tag(%rip), %rdx	 #, tmp87
	movq	%rax, %rcx	 # __ti,
	call	_ZNKSt9type_infoeqERKS_	 #
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:647: 	return nullptr;
	testb	%al, %al	 # tmp92
	movl	$0, %eax	 #, tmp89
	cmove	%rax, %rbx	 # <retval>,, tmp89, <retval>
.L46:
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:648:       }
	movq	%rbx, %rax	 # <retval>,
	addq	$32, %rsp	 #,
	popq	%rbx	 #
	ret	
	.seh_endproc
	.section	.text$_ZNSt23_Sp_counted_ptr_inplaceINSt13__future_base15_Deferred_stateINSt6thread8_InvokerISt5tupleIJPFvibPK7BoidMapPK5RulesPK8BoidListEibS7_SA_SD_EEEEvEESaIvELN9__gnu_cxx12_Lock_policyE2EE14_M_get_deleterERKSt9type_info,"x"
	.linkonce discard
	.align 2
	.p2align 4
	.globl	_ZNSt23_Sp_counted_ptr_inplaceINSt13__future_base15_Deferred_stateINSt6thread8_InvokerISt5tupleIJPFvibPK7BoidMapPK5RulesPK8BoidListEibS7_SA_SD_EEEEvEESaIvELN9__gnu_cxx12_Lock_policyE2EE14_M_get_deleterERKSt9type_info
	.def	_ZNSt23_Sp_counted_ptr_inplaceINSt13__future_base15_Deferred_stateINSt6thread8_InvokerISt5tupleIJPFvibPK7BoidMapPK5RulesPK8BoidListEibS7_SA_SD_EEEEvEESaIvELN9__gnu_cxx12_Lock_policyE2EE14_M_get_deleterERKSt9type_info;	.scl	2;	.type	32;	.endef
	.seh_proc	_ZNSt23_Sp_counted_ptr_inplaceINSt13__future_base15_Deferred_stateINSt6thread8_InvokerISt5tupleIJPFvibPK7BoidMapPK5RulesPK8BoidListEibS7_SA_SD_EEEEvEESaIvELN9__gnu_cxx12_Lock_policyE2EE14_M_get_deleterERKSt9type_info
_ZNSt23_Sp_counted_ptr_inplaceINSt13__future_base15_Deferred_stateINSt6thread8_InvokerISt5tupleIJPFvibPK7BoidMapPK5RulesPK8BoidListEibS7_SA_SD_EEEEvEESaIvELN9__gnu_cxx12_Lock_policyE2EE14_M_get_deleterERKSt9type_info:
.LFB14953:
	pushq	%rbx	 #
	.seh_pushreg	%rbx
	subq	$32, %rsp	 #,
	.seh_stackalloc	32
	.seh_endprologue
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:631:       _M_get_deleter(const std::type_info& __ti) noexcept override
	movq	%rdx, %rax	 # tmp91, __ti
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:639: 	    ||
	leaq	_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag(%rip), %rdx	 #, tmp86
 # C:/msys64/ucrt64/include/c++/13.1.0/ext/aligned_buffer.h:106:         return static_cast<void*>(&_M_storage);
	leaq	16(%rcx), %rbx	 #, <retval>
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:639: 	    ||
	cmpq	%rdx, %rax	 # tmp86, __ti
	je	.L50	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:641: 	    __ti == typeid(_Sp_make_shared_tag)
	leaq	_ZTISt19_Sp_make_shared_tag(%rip), %rdx	 #, tmp87
	movq	%rax, %rcx	 # __ti,
	call	_ZNKSt9type_infoeqERKS_	 #
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:647: 	return nullptr;
	testb	%al, %al	 # tmp92
	movl	$0, %eax	 #, tmp89
	cmove	%rax, %rbx	 # <retval>,, tmp89, <retval>
.L50:
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:648:       }
	movq	%rbx, %rax	 # <retval>,
	addq	$32, %rsp	 #,
	popq	%rbx	 #
	ret	
	.seh_endproc
	.section	.text$_ZNSt13__future_base7_ResultIvED1Ev,"x"
	.linkonce discard
	.align 2
	.p2align 4
	.globl	_ZNSt13__future_base7_ResultIvED1Ev
	.def	_ZNSt13__future_base7_ResultIvED1Ev;	.scl	2;	.type	32;	.endef
	.seh_proc	_ZNSt13__future_base7_ResultIvED1Ev
_ZNSt13__future_base7_ResultIvED1Ev:
.LFB11729:
	.seh_endprologue
 # C:/msys64/ucrt64/include/c++/13.1.0/future:667:     struct __future_base::_Result<void> : __future_base::_Result_base
	leaq	16+_ZTVNSt13__future_base7_ResultIvEE(%rip), %rax	 #, tmp87
	movq	%rax, (%rcx)	 # tmp87, this_3(D)->D.147292._vptr._Result_base
	jmp	_ZNSt13__future_base12_Result_baseD2Ev	 #
	.seh_endproc
	.section	.text$_ZNSt13__future_base7_ResultIvED0Ev,"x"
	.linkonce discard
	.align 2
	.p2align 4
	.globl	_ZNSt13__future_base7_ResultIvED0Ev
	.def	_ZNSt13__future_base7_ResultIvED0Ev;	.scl	2;	.type	32;	.endef
	.seh_proc	_ZNSt13__future_base7_ResultIvED0Ev
_ZNSt13__future_base7_ResultIvED0Ev:
.LFB11730:
	pushq	%rbx	 #
	.seh_pushreg	%rbx
	subq	$32, %rsp	 #,
	.seh_stackalloc	32
	.seh_endprologue
 # C:/msys64/ucrt64/include/c++/13.1.0/future:667:     struct __future_base::_Result<void> : __future_base::_Result_base
	leaq	16+_ZTVNSt13__future_base7_ResultIvEE(%rip), %rax	 #, tmp87
	movq	%rax, (%rcx)	 # tmp87, this_2(D)->D.147292._vptr._Result_base
	movq	%rcx, %rbx	 # tmp85, this
	call	_ZNSt13__future_base12_Result_baseD2Ev	 #
 # C:/msys64/ucrt64/include/c++/13.1.0/future:667:     struct __future_base::_Result<void> : __future_base::_Result_base
	movl	$16, %edx	 #,
	movq	%rbx, %rcx	 # this,
 # C:/msys64/ucrt64/include/c++/13.1.0/future:667:     struct __future_base::_Result<void> : __future_base::_Result_base
	addq	$32, %rsp	 #,
	popq	%rbx	 #
 # C:/msys64/ucrt64/include/c++/13.1.0/future:667:     struct __future_base::_Result<void> : __future_base::_Result_base
	jmp	_ZdlPvy	 #
	.seh_endproc
	.section	.text$_ZNSt17_Function_handlerIFSt10unique_ptrINSt13__future_base12_Result_baseENS2_8_DeleterEEvENS1_12_Task_setterIS0_INS1_7_ResultIvEES3_ENSt6thread8_InvokerISt5tupleIJPFviPK8BoidListPK7BoidMapEiPSD_PSG_EEEEvEEE9_M_invokeERKSt9_Any_data,"x"
	.linkonce discard
	.p2align 4
	.globl	_ZNSt17_Function_handlerIFSt10unique_ptrINSt13__future_base12_Result_baseENS2_8_DeleterEEvENS1_12_Task_setterIS0_INS1_7_ResultIvEES3_ENSt6thread8_InvokerISt5tupleIJPFviPK8BoidListPK7BoidMapEiPSD_PSG_EEEEvEEE9_M_invokeERKSt9_Any_data
	.def	_ZNSt17_Function_handlerIFSt10unique_ptrINSt13__future_base12_Result_baseENS2_8_DeleterEEvENS1_12_Task_setterIS0_INS1_7_ResultIvEES3_ENSt6thread8_InvokerISt5tupleIJPFviPK8BoidListPK7BoidMapEiPSD_PSG_EEEEvEEE9_M_invokeERKSt9_Any_data;	.scl	2;	.type	32;	.endef
	.seh_proc	_ZNSt17_Function_handlerIFSt10unique_ptrINSt13__future_base12_Result_baseENS2_8_DeleterEEvENS1_12_Task_setterIS0_INS1_7_ResultIvEES3_ENSt6thread8_InvokerISt5tupleIJPFviPK8BoidListPK7BoidMapEiPSD_PSG_EEEEvEEE9_M_invokeERKSt9_Any_data
_ZNSt17_Function_handlerIFSt10unique_ptrINSt13__future_base12_Result_baseENS2_8_DeleterEEvENS1_12_Task_setterIS0_INS1_7_ResultIvEES3_ENSt6thread8_InvokerISt5tupleIJPFviPK8BoidListPK7BoidMapEiPSD_PSG_EEEEvEEE9_M_invokeERKSt9_Any_data:
.LFB14718:
	pushq	%rdi	 #
	.seh_pushreg	%rdi
	pushq	%rsi	 #
	.seh_pushreg	%rsi
	pushq	%rbx	 #
	.seh_pushreg	%rbx
	subq	$48, %rsp	 #,
	.seh_stackalloc	48
	.seh_endprologue
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1432: 	    (*_M_fn)();
	movq	8(%rdx), %rax	 # MEM[(const struct _Task_setter *)__functor_2(D)]._M_fn, _11
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/invoke.h:61:     { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
	movq	(%rax), %r8	 # MEM[(struct BoidMap * &)_11],
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_function.h:288:       _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
	movq	%rcx, %rsi	 # tmp112, <retval>
	movq	%rdx, %rbx	 # tmp113, __functor
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/invoke.h:61:     { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
	movl	16(%rax), %ecx	 # MEM[(int &)_11 + 16], MEM[(int &)_11 + 16]
	movq	8(%rax), %rdx	 # MEM[(struct BoidList * &)_11 + 8], MEM[(struct BoidList * &)_11 + 8]
.LEHB0:
	call	*24(%rax)	 # MEM[(void (*<T14ef1>) (int, const struct BoidList *, const struct BoidMap *) &)_11 + 24]
.LEHE0:
.L61:
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1442: 	return std::move(*_M_result);
	movq	(%rbx), %rax	 # MEM[(const struct _Task_setter *)__functor_2(D)]._M_result, _16
 # C:/msys64/ucrt64/include/c++/13.1.0/tuple:302:       _Tuple_impl(_Tuple_impl&&) = default;
	movq	(%rax), %rdx	 # MEM[(struct _Tuple_impl &)_16], SR.1395
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/unique_ptr.h:186:       { __u._M_ptr() = nullptr; }
	movq	$0, (%rax)	 #, MEM[(struct _Result * &)_16]
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_function.h:292:       }
	movq	%rsi, %rax	 # <retval>,
 # C:/msys64/ucrt64/include/c++/13.1.0/tuple:201: 	: _M_head_impl(std::forward<_UHead>(__h)) { }
	movq	%rdx, (%rsi)	 # SR.1395, MEM[(struct _Head_base *)_3(D)]._M_head_impl
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_function.h:292:       }
	addq	$48, %rsp	 #,
	popq	%rbx	 #
	popq	%rsi	 #
	popq	%rdi	 #
	ret	
.L64:
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1434: 	__catch(const __cxxabiv1::__forced_unwind&)
	subq	$1, %rdx	 #, tmp115
	movq	%rax, %rcx	 # tmp114, tmp105
	jne	.L58	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1434: 	__catch(const __cxxabiv1::__forced_unwind&)
	vzeroupper
	call	__cxa_begin_catch	 #
.LEHB1:
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1436: 	    __throw_exception_again; // will cause broken_promise
	call	__cxa_rethrow	 #
.LEHE1:
.L58:
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1440: 	    (*_M_result)->_M_error = current_exception();
	leaq	40(%rsp), %rdi	 #, tmp111
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1438: 	__catch(...)
	vzeroupper
	call	__cxa_begin_catch	 #
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1440: 	    (*_M_result)->_M_error = current_exception();
	movq	%rdi, %rcx	 # tmp111,
	call	_ZSt17current_exceptionv	 #
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/unique_ptr.h:199:       pointer    _M_ptr() const noexcept { return std::get<0>(_M_t); }
	movq	(%rbx), %rax	 # MEM[(const struct _Task_setter *)__functor_2(D)]._M_result, MEM[(const struct _Task_setter *)__functor_2(D)]._M_result
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/exception_ptr.h:124:       : _M_exception_object(__o._M_exception_object)
	movq	40(%rsp), %rcx	 # D.231673._M_exception_object, _21
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/unique_ptr.h:199:       pointer    _M_ptr() const noexcept { return std::get<0>(_M_t); }
	movq	(%rax), %rdx	 # MEM[(struct _Result * const &)_19], _20
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/exception_ptr.h:125:       { __o._M_exception_object = nullptr; }
	xorl	%eax, %eax	 #
	movq	%rax, 40(%rsp)	 #, D.231673._M_exception_object
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/exception_ptr.h:224:       _M_exception_object = __other._M_exception_object;
	movq	8(%rdx), %rax	 # MEM[(struct exception_ptr &)_20 + 8]._M_exception_object, _22
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/exception_ptr.h:225:       __other._M_exception_object = __tmp;
	movq	%rcx, 8(%rdx)	 # _21, MEM[(struct exception_ptr &)_20 + 8]._M_exception_object
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/exception_ptr.h:224:       _M_exception_object = __other._M_exception_object;
	movq	%rax, 32(%rsp)	 # _22, D.231672._M_exception_object
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/exception_ptr.h:207:       if (_M_exception_object)
	testq	%rax, %rax	 # _22
	je	.L59	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/exception_ptr.h:208: 	_M_release();
	leaq	32(%rsp), %rcx	 #, tmp108
	call	_ZNSt15__exception_ptr13exception_ptr10_M_releaseEv	 #
.L59:
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/exception_ptr.h:207:       if (_M_exception_object)
	cmpq	$0, 40(%rsp)	 #, D.231673._M_exception_object
	je	.L60	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/exception_ptr.h:208: 	_M_release();
	movq	%rdi, %rcx	 # tmp111,
	call	_ZNSt15__exception_ptr13exception_ptr10_M_releaseEv	 #
.L60:
.LEHB2:
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1438: 	__catch(...)
	call	__cxa_end_catch	 #
	jmp	.L61	 #
.L63:
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1434: 	__catch(const __cxxabiv1::__forced_unwind&)
	movq	%rax, %rbx	 # tmp116, tmp110
	vzeroupper
	call	__cxa_end_catch	 #
	movq	%rbx, %rcx	 # tmp110,
	call	_Unwind_Resume	 #
	nop	
.LEHE2:
	.def	__gxx_personality_seh0;	.scl	2;	.type	32;	.endef
	.seh_handler	__gxx_personality_seh0, @unwind, @except
	.seh_handlerdata
	.align 4
.LLSDA14718:
	.byte	0xff
	.byte	0x9b
	.uleb128 .LLSDATT14718-.LLSDATTD14718
.LLSDATTD14718:
	.byte	0x1
	.uleb128 .LLSDACSE14718-.LLSDACSB14718
.LLSDACSB14718:
	.uleb128 .LEHB0-.LFB14718
	.uleb128 .LEHE0-.LEHB0
	.uleb128 .L64-.LFB14718
	.uleb128 0x3
	.uleb128 .LEHB1-.LFB14718
	.uleb128 .LEHE1-.LEHB1
	.uleb128 .L63-.LFB14718
	.uleb128 0
	.uleb128 .LEHB2-.LFB14718
	.uleb128 .LEHE2-.LEHB2
	.uleb128 0
	.uleb128 0
.LLSDACSE14718:
	.byte	0x2
	.byte	0
	.byte	0x1
	.byte	0x7d
	.align 4
	.long	0

	.long	.LDFCM0-.
.LLSDATT14718:
	.section	.text$_ZNSt17_Function_handlerIFSt10unique_ptrINSt13__future_base12_Result_baseENS2_8_DeleterEEvENS1_12_Task_setterIS0_INS1_7_ResultIvEES3_ENSt6thread8_InvokerISt5tupleIJPFviPK8BoidListPK7BoidMapEiPSD_PSG_EEEEvEEE9_M_invokeERKSt9_Any_data,"x"
	.linkonce discard
	.seh_endproc
	.section	.text$_ZNSt17_Function_handlerIFSt10unique_ptrINSt13__future_base12_Result_baseENS2_8_DeleterEEvENS1_12_Task_setterIS0_INS1_7_ResultIvEES3_ENSt6thread8_InvokerISt5tupleIJPFvibPK7BoidMapPK5RulesPK8BoidListEibSF_SI_SL_EEEEvEEE9_M_invokeERKSt9_Any_data,"x"
	.linkonce discard
	.p2align 4
	.globl	_ZNSt17_Function_handlerIFSt10unique_ptrINSt13__future_base12_Result_baseENS2_8_DeleterEEvENS1_12_Task_setterIS0_INS1_7_ResultIvEES3_ENSt6thread8_InvokerISt5tupleIJPFvibPK7BoidMapPK5RulesPK8BoidListEibSF_SI_SL_EEEEvEEE9_M_invokeERKSt9_Any_data
	.def	_ZNSt17_Function_handlerIFSt10unique_ptrINSt13__future_base12_Result_baseENS2_8_DeleterEEvENS1_12_Task_setterIS0_INS1_7_ResultIvEES3_ENSt6thread8_InvokerISt5tupleIJPFvibPK7BoidMapPK5RulesPK8BoidListEibSF_SI_SL_EEEEvEEE9_M_invokeERKSt9_Any_data;	.scl	2;	.type	32;	.endef
	.seh_proc	_ZNSt17_Function_handlerIFSt10unique_ptrINSt13__future_base12_Result_baseENS2_8_DeleterEEvENS1_12_Task_setterIS0_INS1_7_ResultIvEES3_ENSt6thread8_InvokerISt5tupleIJPFvibPK7BoidMapPK5RulesPK8BoidListEibSF_SI_SL_EEEEvEEE9_M_invokeERKSt9_Any_data
_ZNSt17_Function_handlerIFSt10unique_ptrINSt13__future_base12_Result_baseENS2_8_DeleterEEvENS1_12_Task_setterIS0_INS1_7_ResultIvEES3_ENSt6thread8_InvokerISt5tupleIJPFvibPK7BoidMapPK5RulesPK8BoidListEibSF_SI_SL_EEEEvEEE9_M_invokeERKSt9_Any_data:
.LFB14741:
	pushq	%rdi	 #
	.seh_pushreg	%rdi
	pushq	%rsi	 #
	.seh_pushreg	%rsi
	pushq	%rbx	 #
	.seh_pushreg	%rbx
	subq	$64, %rsp	 #,
	.seh_stackalloc	64
	.seh_endprologue
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1432: 	    (*_M_fn)();
	movq	8(%rdx), %rax	 # MEM[(const struct _Task_setter *)__functor_2(D)]._M_fn, _11
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/invoke.h:61:     { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
	movq	(%rax), %r10	 # MEM[(const struct BoidList * &)_11], MEM[(const struct BoidList * &)_11]
	movq	8(%rax), %r9	 # MEM[(const struct Rules * &)_11 + 8], MEM[(const struct Rules * &)_11 + 8]
	movq	16(%rax), %r8	 # MEM[(const struct BoidMap * &)_11 + 16], MEM[(const struct BoidMap * &)_11 + 16]
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_function.h:288:       _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
	movq	%rcx, %rsi	 # tmp117, <retval>
	movq	%rdx, %rbx	 # tmp118, __functor
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/invoke.h:61:     { return std::forward<_Fn>(__f)(std::forward<_Args>(__args)...); }
	movl	28(%rax), %ecx	 # MEM[(int &)_11 + 28], MEM[(int &)_11 + 28]
	movzbl	24(%rax), %edx	 # MEM[(bool &)_11 + 24], MEM[(bool &)_11 + 24]
	movq	%r10, 32(%rsp)	 # MEM[(const struct BoidList * &)_11],
.LEHB3:
	call	*32(%rax)	 # MEM[(void (*<T150d1>) (int, bool, const struct BoidMap *, const struct Rules *, const struct BoidList *) &)_11 + 32]
.LEHE3:
.L74:
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1442: 	return std::move(*_M_result);
	movq	(%rbx), %rax	 # MEM[(const struct _Task_setter *)__functor_2(D)]._M_result, _19
 # C:/msys64/ucrt64/include/c++/13.1.0/tuple:302:       _Tuple_impl(_Tuple_impl&&) = default;
	movq	(%rax), %rdx	 # MEM[(struct _Tuple_impl &)_19], SR.1400
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/unique_ptr.h:186:       { __u._M_ptr() = nullptr; }
	movq	$0, (%rax)	 #, MEM[(struct _Result * &)_19]
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_function.h:292:       }
	movq	%rsi, %rax	 # <retval>,
 # C:/msys64/ucrt64/include/c++/13.1.0/tuple:201: 	: _M_head_impl(std::forward<_UHead>(__h)) { }
	movq	%rdx, (%rsi)	 # SR.1400, MEM[(struct _Head_base *)_3(D)]._M_head_impl
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_function.h:292:       }
	addq	$64, %rsp	 #,
	popq	%rbx	 #
	popq	%rsi	 #
	popq	%rdi	 #
	ret	
.L77:
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1434: 	__catch(const __cxxabiv1::__forced_unwind&)
	subq	$1, %rdx	 #, tmp120
	movq	%rax, %rcx	 # tmp119, tmp110
	jne	.L71	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1434: 	__catch(const __cxxabiv1::__forced_unwind&)
	vzeroupper
	call	__cxa_begin_catch	 #
.LEHB4:
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1436: 	    __throw_exception_again; // will cause broken_promise
	call	__cxa_rethrow	 #
.LEHE4:
.L71:
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1440: 	    (*_M_result)->_M_error = current_exception();
	leaq	56(%rsp), %rdi	 #, tmp116
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1438: 	__catch(...)
	vzeroupper
	call	__cxa_begin_catch	 #
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1440: 	    (*_M_result)->_M_error = current_exception();
	movq	%rdi, %rcx	 # tmp116,
	call	_ZSt17current_exceptionv	 #
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/unique_ptr.h:199:       pointer    _M_ptr() const noexcept { return std::get<0>(_M_t); }
	movq	(%rbx), %rax	 # MEM[(const struct _Task_setter *)__functor_2(D)]._M_result, MEM[(const struct _Task_setter *)__functor_2(D)]._M_result
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/exception_ptr.h:124:       : _M_exception_object(__o._M_exception_object)
	movq	56(%rsp), %rcx	 # D.231690._M_exception_object, _24
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/unique_ptr.h:199:       pointer    _M_ptr() const noexcept { return std::get<0>(_M_t); }
	movq	(%rax), %rdx	 # MEM[(struct _Result * const &)_22], _23
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/exception_ptr.h:125:       { __o._M_exception_object = nullptr; }
	xorl	%eax, %eax	 #
	movq	%rax, 56(%rsp)	 #, D.231690._M_exception_object
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/exception_ptr.h:224:       _M_exception_object = __other._M_exception_object;
	movq	8(%rdx), %rax	 # MEM[(struct exception_ptr &)_23 + 8]._M_exception_object, _25
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/exception_ptr.h:225:       __other._M_exception_object = __tmp;
	movq	%rcx, 8(%rdx)	 # _24, MEM[(struct exception_ptr &)_23 + 8]._M_exception_object
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/exception_ptr.h:224:       _M_exception_object = __other._M_exception_object;
	movq	%rax, 48(%rsp)	 # _25, D.231689._M_exception_object
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/exception_ptr.h:207:       if (_M_exception_object)
	testq	%rax, %rax	 # _25
	je	.L72	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/exception_ptr.h:208: 	_M_release();
	leaq	48(%rsp), %rcx	 #, tmp113
	call	_ZNSt15__exception_ptr13exception_ptr10_M_releaseEv	 #
.L72:
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/exception_ptr.h:207:       if (_M_exception_object)
	cmpq	$0, 56(%rsp)	 #, D.231690._M_exception_object
	je	.L73	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/exception_ptr.h:208: 	_M_release();
	movq	%rdi, %rcx	 # tmp116,
	call	_ZNSt15__exception_ptr13exception_ptr10_M_releaseEv	 #
.L73:
.LEHB5:
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1438: 	__catch(...)
	call	__cxa_end_catch	 #
	jmp	.L74	 #
.L76:
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1434: 	__catch(const __cxxabiv1::__forced_unwind&)
	movq	%rax, %rbx	 # tmp121, tmp115
	vzeroupper
	call	__cxa_end_catch	 #
	movq	%rbx, %rcx	 # tmp115,
	call	_Unwind_Resume	 #
	nop	
.LEHE5:
	.seh_handler	__gxx_personality_seh0, @unwind, @except
	.seh_handlerdata
	.align 4
.LLSDA14741:
	.byte	0xff
	.byte	0x9b
	.uleb128 .LLSDATT14741-.LLSDATTD14741
.LLSDATTD14741:
	.byte	0x1
	.uleb128 .LLSDACSE14741-.LLSDACSB14741
.LLSDACSB14741:
	.uleb128 .LEHB3-.LFB14741
	.uleb128 .LEHE3-.LEHB3
	.uleb128 .L77-.LFB14741
	.uleb128 0x3
	.uleb128 .LEHB4-.LFB14741
	.uleb128 .LEHE4-.LEHB4
	.uleb128 .L76-.LFB14741
	.uleb128 0
	.uleb128 .LEHB5-.LFB14741
	.uleb128 .LEHE5-.LEHB5
	.uleb128 0
	.uleb128 0
.LLSDACSE14741:
	.byte	0x2
	.byte	0
	.byte	0x1
	.byte	0x7d
	.align 4
	.long	0

	.long	.LDFCM0-.
.LLSDATT14741:
	.section	.text$_ZNSt17_Function_handlerIFSt10unique_ptrINSt13__future_base12_Result_baseENS2_8_DeleterEEvENS1_12_Task_setterIS0_INS1_7_ResultIvEES3_ENSt6thread8_InvokerISt5tupleIJPFvibPK7BoidMapPK5RulesPK8BoidListEibSF_SI_SL_EEEEvEEE9_M_invokeERKSt9_Any_data,"x"
	.linkonce discard
	.seh_endproc
	.section	.text$_ZNSt17_Function_handlerIFSt10unique_ptrINSt13__future_base12_Result_baseENS2_8_DeleterEEvENS1_12_Task_setterIS0_INS1_7_ResultIvEES3_ENSt6thread8_InvokerISt5tupleIJPFviPK8BoidListPK7BoidMapEiPSD_PSG_EEEEvEEE10_M_managerERSt9_Any_dataRKSR_St18_Manager_operation,"x"
	.linkonce discard
	.p2align 4
	.globl	_ZNSt17_Function_handlerIFSt10unique_ptrINSt13__future_base12_Result_baseENS2_8_DeleterEEvENS1_12_Task_setterIS0_INS1_7_ResultIvEES3_ENSt6thread8_InvokerISt5tupleIJPFviPK8BoidListPK7BoidMapEiPSD_PSG_EEEEvEEE10_M_managerERSt9_Any_dataRKSR_St18_Manager_operation
	.def	_ZNSt17_Function_handlerIFSt10unique_ptrINSt13__future_base12_Result_baseENS2_8_DeleterEEvENS1_12_Task_setterIS0_INS1_7_ResultIvEES3_ENSt6thread8_InvokerISt5tupleIJPFviPK8BoidListPK7BoidMapEiPSD_PSG_EEEEvEEE10_M_managerERSt9_Any_dataRKSR_St18_Manager_operation;	.scl	2;	.type	32;	.endef
	.seh_proc	_ZNSt17_Function_handlerIFSt10unique_ptrINSt13__future_base12_Result_baseENS2_8_DeleterEEvENS1_12_Task_setterIS0_INS1_7_ResultIvEES3_ENSt6thread8_InvokerISt5tupleIJPFviPK8BoidListPK7BoidMapEiPSD_PSG_EEEEvEEE10_M_managerERSt9_Any_dataRKSR_St18_Manager_operation
_ZNSt17_Function_handlerIFSt10unique_ptrINSt13__future_base12_Result_baseENS2_8_DeleterEEvENS1_12_Task_setterIS0_INS1_7_ResultIvEES3_ENSt6thread8_InvokerISt5tupleIJPFviPK8BoidListPK7BoidMapEiPSD_PSG_EEEEvEEE10_M_managerERSt9_Any_dataRKSR_St18_Manager_operation:
.LFB14721:
	.seh_endprologue
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_function.h:270: 	switch (__op)
	testl	%r8d, %r8d	 # __op
	je	.L83	 #,
	cmpl	$1, %r8d	 #, __op
	jne	.L88	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_function.h:278: 	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
	movq	%rdx, (%rcx)	 # __source, MEM[(struct _Task_setter * &)__dest_5(D)]
.L86:
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_function.h:285:       }
	xorl	%eax, %eax	 #
	ret	
	.p2align 4,,10
	.p2align 3
.L88:
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_function.h:183: 	  switch (__op)
	cmpl	$2, %r8d	 #, __op
	jne	.L86	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_function.h:152: 	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
	movq	(%rdx), %rax	 # MEM[(const struct _Task_setter &)__source_4(D)], MEM[(const struct _Task_setter &)__source_4(D)]
	movq	8(%rdx), %rdx	 # MEM[(const struct _Task_setter &)__source_4(D)], MEM[(const struct _Task_setter &)__source_4(D)]
	movq	%rax, (%rcx)	 # MEM[(const struct _Task_setter &)__source_4(D)], MEM[(struct _Task_setter *)__dest_5(D)]
	movq	%rdx, 8(%rcx)	 # MEM[(const struct _Task_setter &)__source_4(D)], MEM[(struct _Task_setter *)__dest_5(D)]
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_function.h:216: 	  }
	jmp	.L86	 #
	.p2align 4,,10
	.p2align 3
.L83:
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_function.h:274: 	    __dest._M_access<const type_info*>() = &typeid(_Functor);
	leaq	_ZTINSt13__future_base12_Task_setterISt10unique_ptrINS_7_ResultIvEENS_12_Result_base8_DeleterEENSt6thread8_InvokerISt5tupleIJPFviPK8BoidListPK7BoidMapEiPSA_PSD_EEEEvEE(%rip), %rax	 #, tmp94
	movq	%rax, (%rcx)	 # tmp94, MEM[(const struct type_info * &)__dest_5(D)]
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_function.h:285:       }
	xorl	%eax, %eax	 #
	ret	
	.seh_endproc
	.section	.text$_ZNSt17_Function_handlerIFSt10unique_ptrINSt13__future_base12_Result_baseENS2_8_DeleterEEvENS1_12_Task_setterIS0_INS1_7_ResultIvEES3_ENSt6thread8_InvokerISt5tupleIJPFvibPK7BoidMapPK5RulesPK8BoidListEibSF_SI_SL_EEEEvEEE10_M_managerERSt9_Any_dataRKSS_St18_Manager_operation,"x"
	.linkonce discard
	.p2align 4
	.globl	_ZNSt17_Function_handlerIFSt10unique_ptrINSt13__future_base12_Result_baseENS2_8_DeleterEEvENS1_12_Task_setterIS0_INS1_7_ResultIvEES3_ENSt6thread8_InvokerISt5tupleIJPFvibPK7BoidMapPK5RulesPK8BoidListEibSF_SI_SL_EEEEvEEE10_M_managerERSt9_Any_dataRKSS_St18_Manager_operation
	.def	_ZNSt17_Function_handlerIFSt10unique_ptrINSt13__future_base12_Result_baseENS2_8_DeleterEEvENS1_12_Task_setterIS0_INS1_7_ResultIvEES3_ENSt6thread8_InvokerISt5tupleIJPFvibPK7BoidMapPK5RulesPK8BoidListEibSF_SI_SL_EEEEvEEE10_M_managerERSt9_Any_dataRKSS_St18_Manager_operation;	.scl	2;	.type	32;	.endef
	.seh_proc	_ZNSt17_Function_handlerIFSt10unique_ptrINSt13__future_base12_Result_baseENS2_8_DeleterEEvENS1_12_Task_setterIS0_INS1_7_ResultIvEES3_ENSt6thread8_InvokerISt5tupleIJPFvibPK7BoidMapPK5RulesPK8BoidListEibSF_SI_SL_EEEEvEEE10_M_managerERSt9_Any_dataRKSS_St18_Manager_operation
_ZNSt17_Function_handlerIFSt10unique_ptrINSt13__future_base12_Result_baseENS2_8_DeleterEEvENS1_12_Task_setterIS0_INS1_7_ResultIvEES3_ENSt6thread8_InvokerISt5tupleIJPFvibPK7BoidMapPK5RulesPK8BoidListEibSF_SI_SL_EEEEvEEE10_M_managerERSt9_Any_dataRKSS_St18_Manager_operation:
.LFB14744:
	.seh_endprologue
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_function.h:270: 	switch (__op)
	testl	%r8d, %r8d	 # __op
	je	.L90	 #,
	cmpl	$1, %r8d	 #, __op
	jne	.L95	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_function.h:278: 	    __dest._M_access<_Functor*>() = _Base::_M_get_pointer(__source);
	movq	%rdx, (%rcx)	 # __source, MEM[(struct _Task_setter * &)__dest_5(D)]
.L93:
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_function.h:285:       }
	xorl	%eax, %eax	 #
	ret	
	.p2align 4,,10
	.p2align 3
.L95:
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_function.h:183: 	  switch (__op)
	cmpl	$2, %r8d	 #, __op
	jne	.L93	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_function.h:152: 	    ::new (__dest._M_access()) _Functor(std::forward<_Fn>(__f));
	movq	(%rdx), %rax	 # MEM[(const struct _Task_setter &)__source_4(D)], MEM[(const struct _Task_setter &)__source_4(D)]
	movq	8(%rdx), %rdx	 # MEM[(const struct _Task_setter &)__source_4(D)], MEM[(const struct _Task_setter &)__source_4(D)]
	movq	%rax, (%rcx)	 # MEM[(const struct _Task_setter &)__source_4(D)], MEM[(struct _Task_setter *)__dest_5(D)]
	movq	%rdx, 8(%rcx)	 # MEM[(const struct _Task_setter &)__source_4(D)], MEM[(struct _Task_setter *)__dest_5(D)]
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_function.h:216: 	  }
	jmp	.L93	 #
	.p2align 4,,10
	.p2align 3
.L90:
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_function.h:274: 	    __dest._M_access<const type_info*>() = &typeid(_Functor);
	leaq	_ZTINSt13__future_base12_Task_setterISt10unique_ptrINS_7_ResultIvEENS_12_Result_base8_DeleterEENSt6thread8_InvokerISt5tupleIJPFvibPK7BoidMapPK5RulesPK8BoidListEibSC_SF_SI_EEEEvEE(%rip), %rax	 #, tmp94
	movq	%rax, (%rcx)	 # tmp94, MEM[(const struct type_info * &)__dest_5(D)]
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_function.h:285:       }
	xorl	%eax, %eax	 #
	ret	
	.seh_endproc
	.section	.text$_ZZNSt9once_flag18_Prepare_executionC4IZSt9call_onceIMNSt13__future_base13_State_baseV2EFvPSt8functionIFSt10unique_ptrINS3_12_Result_baseENS7_8_DeleterEEvEEPbEJPS4_SC_SD_EEvRS_OT_DpOT0_EUlvE_EERSI_ENUlvE_4_FUNEv,"x"
	.linkonce discard
	.p2align 4
	.globl	_ZZNSt9once_flag18_Prepare_executionC4IZSt9call_onceIMNSt13__future_base13_State_baseV2EFvPSt8functionIFSt10unique_ptrINS3_12_Result_baseENS7_8_DeleterEEvEEPbEJPS4_SC_SD_EEvRS_OT_DpOT0_EUlvE_EERSI_ENUlvE_4_FUNEv
	.def	_ZZNSt9once_flag18_Prepare_executionC4IZSt9call_onceIMNSt13__future_base13_State_baseV2EFvPSt8functionIFSt10unique_ptrINS3_12_Result_baseENS7_8_DeleterEEvEEPbEJPS4_SC_SD_EEvRS_OT_DpOT0_EUlvE_EERSI_ENUlvE_4_FUNEv;	.scl	2;	.type	32;	.endef
	.seh_proc	_ZZNSt9once_flag18_Prepare_executionC4IZSt9call_onceIMNSt13__future_base13_State_baseV2EFvPSt8functionIFSt10unique_ptrINS3_12_Result_baseENS7_8_DeleterEEvEEPbEJPS4_SC_SD_EEvRS_OT_DpOT0_EUlvE_EERSI_ENUlvE_4_FUNEv
_ZZNSt9once_flag18_Prepare_executionC4IZSt9call_onceIMNSt13__future_base13_State_baseV2EFvPSt8functionIFSt10unique_ptrINS3_12_Result_baseENS7_8_DeleterEEvEEPbEJPS4_SC_SD_EEvRS_OT_DpOT0_EUlvE_EERSI_ENUlvE_4_FUNEv:
.LFB13554:
	subq	$40, %rsp	 #,
	.seh_stackalloc	40
	.seh_endprologue
 # C:/msys64/ucrt64/include/c++/13.1.0/mutex:836: 	__once_call = [] { (*static_cast<_Callable*>(__once_callable))(); };
	movq	.refptr.__emutls_v._ZSt15__once_callable(%rip), %rcx	 #,
	call	__emutls_get_address	 #
	movq	(%rax), %rax	 # *_4, __once_callable.78_2
 # C:/msys64/ucrt64/include/c++/13.1.0/mutex:900: 	  std::__invoke(std::forward<_Callable>(__f),
	movq	(%rax), %rdx	 # MEM[(const struct ._anon_310 *)__once_callable.78_2].____f, _8
	movq	24(%rax), %r8	 # MEM[(const struct ._anon_310 *)__once_callable.78_2].____args#2, _5
	movq	16(%rax), %r10	 # MEM[(const struct ._anon_310 *)__once_callable.78_2].____args#1, _6
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/invoke.h:74:       return ((*std::forward<_Tp>(__t)).*__f)(std::forward<_Args>(__args)...);
	movq	8(%rax), %rax	 # MEM[(const struct ._anon_310 *)__once_callable.78_2].____args#0, MEM[(const struct ._anon_310 *)__once_callable.78_2].____args#0
	movq	(%rdx), %r9	 # _8->__pfn, _10
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/invoke.h:74:       return ((*std::forward<_Tp>(__t)).*__f)(std::forward<_Args>(__args)...);
	movq	8(%rdx), %rcx	 # _8->__delta, _8->__delta
	addq	(%rax), %rcx	 # *_7, _35
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/invoke.h:74:       return ((*std::forward<_Tp>(__t)).*__f)(std::forward<_Args>(__args)...);
	testb	$1, %r9b	 #, _10
	je	.L97	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/invoke.h:74:       return ((*std::forward<_Tp>(__t)).*__f)(std::forward<_Args>(__args)...);
	movq	(%rcx), %rax	 # MEM[(int (*) () * *)_35], MEM[(int (*) () * *)_35]
	movq	-1(%rax,%r9), %r9	 # *_19, _10
.L97:
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/invoke.h:74:       return ((*std::forward<_Tp>(__t)).*__f)(std::forward<_Args>(__args)...);
	movq	(%r10), %rdx	 # *_6, *_6
	movq	(%r8), %r8	 # *_5,
 # C:/msys64/ucrt64/include/c++/13.1.0/mutex:836: 	__once_call = [] { (*static_cast<_Callable*>(__once_callable))(); };
	addq	$40, %rsp	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/invoke.h:74:       return ((*std::forward<_Tp>(__t)).*__f)(std::forward<_Args>(__args)...);
	rex.W jmp	*%r9	 # _10
	.seh_endproc
	.section	.text$_ZNSt13__future_base21_Async_state_commonV217_M_complete_asyncEv,"x"
	.linkonce discard
	.align 2
	.p2align 4
	.globl	_ZNSt13__future_base21_Async_state_commonV217_M_complete_asyncEv
	.def	_ZNSt13__future_base21_Async_state_commonV217_M_complete_asyncEv;	.scl	2;	.type	32;	.endef
	.seh_proc	_ZNSt13__future_base21_Async_state_commonV217_M_complete_asyncEv
_ZNSt13__future_base21_Async_state_commonV217_M_complete_asyncEv:
.LFB11909:
	pushq	%rdi	 #
	.seh_pushreg	%rdi
	pushq	%rsi	 #
	.seh_pushreg	%rsi
	pushq	%rbx	 #
	.seh_pushreg	%rbx
	subq	$80, %rsp	 #,
	.seh_stackalloc	80
	.seh_endprologue
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1737:     void _M_join() { std::call_once(_M_once, &thread::join, &_M_thread); }
	movq	$0, 56(%rsp)	 #, D.228275.__delta
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1737:     void _M_join() { std::call_once(_M_once, &thread::join, &_M_thread); }
	leaq	48(%rcx), %rax	 #, tmp92
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1735:     virtual void _M_complete_async() { _M_join(); }
	movq	%rcx, %rbx	 # tmp105, this
 # C:/msys64/ucrt64/include/c++/13.1.0/mutex:834: 	__once_callable = std::__addressof(__c);
	movq	.refptr.__emutls_v._ZSt15__once_callable(%rip), %rcx	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1737:     void _M_join() { std::call_once(_M_once, &thread::join, &_M_thread); }
	movq	%rax, 40(%rsp)	 # tmp92, D.228276
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1737:     void _M_join() { std::call_once(_M_once, &thread::join, &_M_thread); }
	movq	.refptr._ZNSt6thread4joinEv(%rip), %rax	 #, tmp93
	movq	%rax, 48(%rsp)	 # tmp93, D.228275.__pfn
 # C:/msys64/ucrt64/include/c++/13.1.0/mutex:899:       auto __callable = [&] {
	leaq	48(%rsp), %rax	 #, tmp95
	vmovq	%rax, %xmm0	 # tmp95, tmp95
	leaq	40(%rsp), %rax	 #, tmp96
	vpinsrq	$1, %rax, %xmm0, %xmm0	 # tmp96, tmp95, tmp94
	vmovdqu	%xmm0, 64(%rsp)	 # tmp94, MEM <vector(2) long long unsigned int> [(void *)&__callable]
 # C:/msys64/ucrt64/include/c++/13.1.0/mutex:834: 	__once_callable = std::__addressof(__c);
	call	__emutls_get_address	 #
 # C:/msys64/ucrt64/include/c++/13.1.0/mutex:836: 	__once_call = [] { (*static_cast<_Callable*>(__once_callable))(); };
	movq	.refptr.__emutls_v._ZSt11__once_call(%rip), %rcx	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/mutex:834: 	__once_callable = std::__addressof(__c);
	movq	%rax, %rdi	 # tmp106, _11
	leaq	64(%rsp), %rax	 #, tmp98
	movq	%rax, (%rdi)	 # tmp98, *_11
 # C:/msys64/ucrt64/include/c++/13.1.0/mutex:836: 	__once_call = [] { (*static_cast<_Callable*>(__once_callable))(); };
	call	__emutls_get_address	 #
 # C:/msys64/ucrt64/include/c++/13.1.0/x86_64-w64-mingw32/bits/gthr-default.h:700:     return __gthrw_(pthread_once) (__once, __func);
	movq	.refptr.__once_proxy(%rip), %rdx	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/mutex:907:       if (int __e = __gthread_once(&__once._M_once, &__once_proxy))
	leaq	56(%rbx), %rcx	 #, tmp102
 # C:/msys64/ucrt64/include/c++/13.1.0/mutex:836: 	__once_call = [] { (*static_cast<_Callable*>(__once_callable))(); };
	movq	%rax, %rsi	 # tmp107, _12
	leaq	_ZZNSt9once_flag18_Prepare_executionC4IZSt9call_onceIMSt6threadFvvEJPS3_EEvRS_OT_DpOT0_EUlvE_EERS8_ENUlvE_4_FUNEv(%rip), %rax	 #, tmp101
	movq	%rax, (%rsi)	 # tmp101, *_12
.LEHB6:
 # C:/msys64/ucrt64/include/c++/13.1.0/x86_64-w64-mingw32/bits/gthr-default.h:700:     return __gthrw_(pthread_once) (__once, __func);
	call	pthread_once	 #
 # C:/msys64/ucrt64/include/c++/13.1.0/mutex:907:       if (int __e = __gthread_once(&__once._M_once, &__once_proxy))
	testl	%eax, %eax	 # _14
	jne	.L107	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/mutex:842:       __once_callable = nullptr;
	movq	$0, (%rdi)	 #, *_11
 # C:/msys64/ucrt64/include/c++/13.1.0/mutex:843:       __once_call = nullptr;
	movq	$0, (%rsi)	 #, *_12
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1735:     virtual void _M_complete_async() { _M_join(); }
	addq	$80, %rsp	 #,
	popq	%rbx	 #
	popq	%rsi	 #
	popq	%rdi	 #
	ret	
.L107:
 # C:/msys64/ucrt64/include/c++/13.1.0/mutex:908: 	__throw_system_error(__e);
	movl	%eax, %ecx	 # _14,
	call	_ZSt20__throw_system_errori	 #
.LEHE6:
.L104:
 # C:/msys64/ucrt64/include/c++/13.1.0/mutex:842:       __once_callable = nullptr;
	movq	%rax, %rcx	 # tmp109, tmp104
 # C:/msys64/ucrt64/include/c++/13.1.0/mutex:843:       __once_call = nullptr;
	xorl	%eax, %eax	 #
	movq	%rax, (%rdi)	 #, *_11
	movq	%rax, (%rsi)	 #, *_12
	vzeroupper
.LEHB7:
	call	_Unwind_Resume	 #
	nop	
.LEHE7:
	.seh_handler	__gxx_personality_seh0, @unwind, @except
	.seh_handlerdata
.LLSDA11909:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE11909-.LLSDACSB11909
.LLSDACSB11909:
	.uleb128 .LEHB6-.LFB11909
	.uleb128 .LEHE6-.LEHB6
	.uleb128 .L104-.LFB11909
	.uleb128 0
	.uleb128 .LEHB7-.LFB11909
	.uleb128 .LEHE7-.LEHB7
	.uleb128 0
	.uleb128 0
.LLSDACSE11909:
	.section	.text$_ZNSt13__future_base21_Async_state_commonV217_M_complete_asyncEv,"x"
	.linkonce discard
	.seh_endproc
	.text
	.p2align 4
	.def	_ZZ13update_boids2RK7BoidMapP15row_runner_argsP10TaskMasterP8TaskSyncENUlS5_P4TaskE_4_FUNES5_S9_;	.scl	3;	.type	32;	.endef
	.seh_proc	_ZZ13update_boids2RK7BoidMapP15row_runner_argsP10TaskMasterP8TaskSyncENUlS5_P4TaskE_4_FUNES5_S9_
_ZZ13update_boids2RK7BoidMapP15row_runner_argsP10TaskMasterP8TaskSyncENUlS5_P4TaskE_4_FUNES5_S9_:
.LFB12626:
	pushq	%rdi	 #
	.seh_pushreg	%rdi
	pushq	%rsi	 #
	.seh_pushreg	%rsi
	pushq	%rbx	 #
	.seh_pushreg	%rbx
	.seh_endprologue
 # .\src\main.cpp:1215:                 .on_complete = (void *) (+[](TaskMaster *task_master, Task *current_task)
	movq	%rdx, %rbx	 # tmp120, D.170077
 # .\src\main.cpp:1217:                     auto old_args = ((row_runner_args *)current_task->argument_struct);
	movq	8(%rdx), %rdx	 # _3(D)->argument_struct, old_args
	leaq	66144(%rcx), %rax	 #, _6
	.p2align 4,,10
	.p2align 3
.L109:
 # C:/msys64/ucrt64/include/psdk_inc/intrin-impl.h:1800: __buildbittesti(_interlockedbittestandset, __LONG32, "lock bts{l %[Offset],%[Base] | %[Base],%[Offset]}" __FLAGSET, "I")
/APP
 # 1800 "C:/msys64/ucrt64/include/psdk_inc/intrin-impl.h" 1
	lock btsl $0,(%rax) 	 #, MEM[(volatile long int *)_6]
 # 0 "" 2
 # .\src\.\task_master\lock.h:40:         while (_interlockedbittestandset(&lock_internal, 0)) {}
/NO_APP
	jc	.L109	 #,
 # .\src\main.cpp:1221:                     for (int y = 1; y < old_args->boid_map->m_ysize; y += 2) {
	movq	(%rdx), %rax	 # old_args_5->boid_map, old_args_5->boid_map
 # .\src\main.cpp:1237:                     current_task->sync->task_counter = tasks_added;
	movq	16(%rbx), %r11	 # _3(D)->sync, prephitmp_19
 # .\src\main.cpp:1221:                     for (int y = 1; y < old_args->boid_map->m_ysize; y += 2) {
	movl	(%rax), %r10d	 # _28->m_ysize, _41
 # .\src\main.cpp:1221:                     for (int y = 1; y < old_args->boid_map->m_ysize; y += 2) {
	cmpl	$1, %r10d	 #, _41
	jle	.L114	 #,
 # .\src\.\task_master\ringbuffer.h:18:         size_t next = (head + 1) % capacity;
	movq	65552(%rcx), %rax	 # MEM[(struct RingBuffer *)_2(D) + 16B].head, pretmp_61
	movq	24(%rdx), %r9	 # old_args_5->arg_store, old_args_5->arg_store
 # .\src\main.cpp:1221:                     for (int y = 1; y < old_args->boid_map->m_ysize; y += 2) {
	movl	$1, %r8d	 #, y
 # .\src\.\task_master\ringbuffer.h:21:             data[head] = item;
	leaq	_ZZZ13update_boids2RK7BoidMapP15row_runner_argsP10TaskMasterP8TaskSyncENKUlS5_P4TaskE_clES5_S9_ENUlS5_S9_E_4_FUNES5_S9_(%rip), %rsi	 #, tmp118
 # .\src\.\task_master\ringbuffer.h:19:         if (next != tail)
	movq	65560(%rcx), %rdi	 # MEM[(struct RingBuffer *)_2(D) + 16B].tail, _17
 # .\src\.\task_master\ringbuffer.h:18:         size_t next = (head + 1) % capacity;
	leaq	1(%rax), %rdx	 #, tmp112
	addq	$40, %r9	 #, ivtmp.1431
 # .\src\.\task_master\ringbuffer.h:18:         size_t next = (head + 1) % capacity;
	andl	$2047, %edx	 #, next
 # .\src\.\task_master\ringbuffer.h:19:         if (next != tail)
	cmpq	%rdi, %rdx	 # _17, next
	je	.L111	 #,
.L118:
	salq	$5, %rax	 #, _22
 # .\src\main.cpp:1221:                     for (int y = 1; y < old_args->boid_map->m_ysize; y += 2) {
	addl	$2, %r8d	 #, y
 # .\src\.\task_master\ringbuffer.h:21:             data[head] = item;
	movl	$2, 16(%rcx,%rax)	 #, MEM <unsigned int> [(struct Task *)_18]
	addq	%rcx, %rax	 # D.170076, _49
	movq	%r9, 24(%rax)	 # ivtmp.1431, MEM <void *> [(struct RingBuffer *)_49 + 24B]
	movq	%r11, 32(%rax)	 # prephitmp_19, MEM <struct TaskSync *> [(struct RingBuffer *)_49 + 32B]
	movq	%rsi, 40(%rax)	 # tmp118, MEM <void *> [(struct RingBuffer *)_49 + 40B]
 # .\src\main.cpp:1237:                     current_task->sync->task_counter = tasks_added;
	movq	16(%rbx), %r11	 # _3(D)->sync, prephitmp_19
 # .\src\.\task_master\ringbuffer.h:22:             head = next;
	movq	%rdx, 65552(%rcx)	 # next, MEM[(struct RingBuffer *)_2(D) + 16B].head
 # .\src\main.cpp:1221:                     for (int y = 1; y < old_args->boid_map->m_ysize; y += 2) {
	cmpl	%r10d, %r8d	 # _41, y
	jge	.L111	 #,
	movq	%rdx, %rax	 # next, pretmp_61
	addq	$80, %r9	 #, ivtmp.1431
 # .\src\.\task_master\ringbuffer.h:18:         size_t next = (head + 1) % capacity;
	leaq	1(%rax), %rdx	 #, tmp112
 # .\src\.\task_master\ringbuffer.h:18:         size_t next = (head + 1) % capacity;
	andl	$2047, %edx	 #, next
 # .\src\.\task_master\ringbuffer.h:19:         if (next != tail)
	cmpq	%rdi, %rdx	 # _17, next
	jne	.L118	 #,
.L111:
 # .\src\main.cpp:1237:                     current_task->sync->task_counter = tasks_added;
	subl	$2, %r10d	 #, tmp114
	shrl	%r10d	 # tmp115
	addl	$1, %r10d	 #, _57
.L110:
 # .\src\main.cpp:1237:                     current_task->sync->task_counter = tasks_added;
	movl	%r10d, 4(%r11)	 # _57, prephitmp_56->task_counter
 # C:/msys64/ucrt64/include/psdk_inc/intrin-impl.h:1809: __buildbittesti(_interlockedbittestandreset, __LONG32, "lock btr{l %[Offset],%[Base] | %[Base],%[Offset]}" __FLAGSET, "I")
/APP
 # 1809 "C:/msys64/ucrt64/include/psdk_inc/intrin-impl.h" 1
	lock btrl $0,66144(%rcx) 	 #, MEM[(volatile long int *)_6]
 # 0 "" 2
 # .\src\main.cpp:1239:                 }),
/NO_APP
	popq	%rbx	 #
	popq	%rsi	 #
	popq	%rdi	 #
	ret	
	.p2align 4,,10
	.p2align 3
.L114:
 # .\src\main.cpp:1221:                     for (int y = 1; y < old_args->boid_map->m_ysize; y += 2) {
	xorl	%r10d, %r10d	 # _57
	jmp	.L110	 #
	.seh_endproc
	.section	.text$_ZNSt23_Sp_counted_ptr_inplaceINSt13__future_base17_Async_state_implINSt6thread8_InvokerISt5tupleIJPFvibPK7BoidMapPK5RulesPK8BoidListEibS7_SA_SD_EEEEvEESaIvELN9__gnu_cxx12_Lock_policyE2EE10_M_destroyEv,"x"
	.linkonce discard
	.align 2
	.p2align 4
	.globl	_ZNSt23_Sp_counted_ptr_inplaceINSt13__future_base17_Async_state_implINSt6thread8_InvokerISt5tupleIJPFvibPK7BoidMapPK5RulesPK8BoidListEibS7_SA_SD_EEEEvEESaIvELN9__gnu_cxx12_Lock_policyE2EE10_M_destroyEv
	.def	_ZNSt23_Sp_counted_ptr_inplaceINSt13__future_base17_Async_state_implINSt6thread8_InvokerISt5tupleIJPFvibPK7BoidMapPK5RulesPK8BoidListEibS7_SA_SD_EEEEvEESaIvELN9__gnu_cxx12_Lock_policyE2EE10_M_destroyEv;	.scl	2;	.type	32;	.endef
	.seh_proc	_ZNSt23_Sp_counted_ptr_inplaceINSt13__future_base17_Async_state_implINSt6thread8_InvokerISt5tupleIJPFvibPK7BoidMapPK5RulesPK8BoidListEibS7_SA_SD_EEEEvEESaIvELN9__gnu_cxx12_Lock_policyE2EE10_M_destroyEv
_ZNSt23_Sp_counted_ptr_inplaceINSt13__future_base17_Async_state_implINSt6thread8_InvokerISt5tupleIJPFvibPK7BoidMapPK5RulesPK8BoidListEibS7_SA_SD_EEEEvEESaIvELN9__gnu_cxx12_Lock_policyE2EE10_M_destroyEv:
.LFB14959:
	.seh_endprologue
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/new_allocator.h:168: 	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
	movl	$128, %edx	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:623:       }
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/new_allocator.h:168: 	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
	jmp	_ZdlPvy	 #
	.seh_endproc
	.section	.text$_ZZNSt9once_flag18_Prepare_executionC4IZSt9call_onceIMSt6threadFvvEJPS3_EEvRS_OT_DpOT0_EUlvE_EERS8_ENUlvE_4_FUNEv,"x"
	.linkonce discard
	.p2align 4
	.globl	_ZZNSt9once_flag18_Prepare_executionC4IZSt9call_onceIMSt6threadFvvEJPS3_EEvRS_OT_DpOT0_EUlvE_EERS8_ENUlvE_4_FUNEv
	.def	_ZZNSt9once_flag18_Prepare_executionC4IZSt9call_onceIMSt6threadFvvEJPS3_EEvRS_OT_DpOT0_EUlvE_EERS8_ENUlvE_4_FUNEv;	.scl	2;	.type	32;	.endef
	.seh_proc	_ZZNSt9once_flag18_Prepare_executionC4IZSt9call_onceIMSt6threadFvvEJPS3_EEvRS_OT_DpOT0_EUlvE_EERS8_ENUlvE_4_FUNEv
_ZZNSt9once_flag18_Prepare_executionC4IZSt9call_onceIMSt6threadFvvEJPS3_EEvRS_OT_DpOT0_EUlvE_EERS8_ENUlvE_4_FUNEv:
.LFB13642:
	subq	$40, %rsp	 #,
	.seh_stackalloc	40
	.seh_endprologue
 # C:/msys64/ucrt64/include/c++/13.1.0/mutex:836: 	__once_call = [] { (*static_cast<_Callable*>(__once_callable))(); };
	movq	.refptr.__emutls_v._ZSt15__once_callable(%rip), %rcx	 #,
	call	__emutls_get_address	 #
	movq	(%rax), %rcx	 # *_4, __once_callable.65_2
	movq	(%rcx), %rdx	 # MEM[(struct  & *)__once_callable.65_2], _5
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/invoke.h:74:       return ((*std::forward<_Tp>(__t)).*__f)(std::forward<_Args>(__args)...);
	movq	8(%rcx), %r8	 # MEM[(struct thread * & *)__once_callable.65_2 + 8B], MEM[(struct thread * & *)__once_callable.65_2 + 8B]
	movq	(%rdx), %rax	 # _5->__pfn, _10
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/invoke.h:74:       return ((*std::forward<_Tp>(__t)).*__f)(std::forward<_Args>(__args)...);
	movq	8(%rdx), %rcx	 # _5->__delta, _5->__delta
	addq	(%r8), %rcx	 # *_6, _31
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/invoke.h:74:       return ((*std::forward<_Tp>(__t)).*__f)(std::forward<_Args>(__args)...);
	testb	$1, %al	 #, _10
	je	.L121	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/invoke.h:74:       return ((*std::forward<_Tp>(__t)).*__f)(std::forward<_Args>(__args)...);
	movq	(%rcx), %rdx	 # MEM[(int (*) () * *)_31], MEM[(int (*) () * *)_31]
	movq	-1(%rdx,%rax), %rax	 # *_19, _10
.L121:
 # C:/msys64/ucrt64/include/c++/13.1.0/mutex:836: 	__once_call = [] { (*static_cast<_Callable*>(__once_callable))(); };
	addq	$40, %rsp	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/invoke.h:74:       return ((*std::forward<_Tp>(__t)).*__f)(std::forward<_Args>(__args)...);
	rex.W jmp	*%rax	 # _10
	.seh_endproc
	.section	.text$_ZNSt23_Sp_counted_ptr_inplaceINSt13__future_base15_Deferred_stateINSt6thread8_InvokerISt5tupleIJPFvibPK7BoidMapPK5RulesPK8BoidListEibS7_SA_SD_EEEEvEESaIvELN9__gnu_cxx12_Lock_policyE2EE10_M_destroyEv,"x"
	.linkonce discard
	.align 2
	.p2align 4
	.globl	_ZNSt23_Sp_counted_ptr_inplaceINSt13__future_base15_Deferred_stateINSt6thread8_InvokerISt5tupleIJPFvibPK7BoidMapPK5RulesPK8BoidListEibS7_SA_SD_EEEEvEESaIvELN9__gnu_cxx12_Lock_policyE2EE10_M_destroyEv
	.def	_ZNSt23_Sp_counted_ptr_inplaceINSt13__future_base15_Deferred_stateINSt6thread8_InvokerISt5tupleIJPFvibPK7BoidMapPK5RulesPK8BoidListEibS7_SA_SD_EEEEvEESaIvELN9__gnu_cxx12_Lock_policyE2EE10_M_destroyEv;	.scl	2;	.type	32;	.endef
	.seh_proc	_ZNSt23_Sp_counted_ptr_inplaceINSt13__future_base15_Deferred_stateINSt6thread8_InvokerISt5tupleIJPFvibPK7BoidMapPK5RulesPK8BoidListEibS7_SA_SD_EEEEvEESaIvELN9__gnu_cxx12_Lock_policyE2EE10_M_destroyEv
_ZNSt23_Sp_counted_ptr_inplaceINSt13__future_base15_Deferred_stateINSt6thread8_InvokerISt5tupleIJPFvibPK7BoidMapPK5RulesPK8BoidListEibS7_SA_SD_EEEEvEESaIvELN9__gnu_cxx12_Lock_policyE2EE10_M_destroyEv:
.LFB14952:
	.seh_endprologue
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/new_allocator.h:168: 	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
	movl	$112, %edx	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:623:       }
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/new_allocator.h:168: 	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
	jmp	_ZdlPvy	 #
	.seh_endproc
	.section	.text$_ZNSt23_Sp_counted_ptr_inplaceINSt13__future_base17_Async_state_implINSt6thread8_InvokerISt5tupleIJPFviPK8BoidListPK7BoidMapEiPS5_PS8_EEEEvEESaIvELN9__gnu_cxx12_Lock_policyE2EE10_M_destroyEv,"x"
	.linkonce discard
	.align 2
	.p2align 4
	.globl	_ZNSt23_Sp_counted_ptr_inplaceINSt13__future_base17_Async_state_implINSt6thread8_InvokerISt5tupleIJPFviPK8BoidListPK7BoidMapEiPS5_PS8_EEEEvEESaIvELN9__gnu_cxx12_Lock_policyE2EE10_M_destroyEv
	.def	_ZNSt23_Sp_counted_ptr_inplaceINSt13__future_base17_Async_state_implINSt6thread8_InvokerISt5tupleIJPFviPK8BoidListPK7BoidMapEiPS5_PS8_EEEEvEESaIvELN9__gnu_cxx12_Lock_policyE2EE10_M_destroyEv;	.scl	2;	.type	32;	.endef
	.seh_proc	_ZNSt23_Sp_counted_ptr_inplaceINSt13__future_base17_Async_state_implINSt6thread8_InvokerISt5tupleIJPFviPK8BoidListPK7BoidMapEiPS5_PS8_EEEEvEESaIvELN9__gnu_cxx12_Lock_policyE2EE10_M_destroyEv
_ZNSt23_Sp_counted_ptr_inplaceINSt13__future_base17_Async_state_implINSt6thread8_InvokerISt5tupleIJPFviPK8BoidListPK7BoidMapEiPS5_PS8_EEEEvEESaIvELN9__gnu_cxx12_Lock_policyE2EE10_M_destroyEv:
.LFB14973:
	.seh_endprologue
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/new_allocator.h:168: 	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
	movl	$120, %edx	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:623:       }
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/new_allocator.h:168: 	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
	jmp	_ZdlPvy	 #
	.seh_endproc
	.section	.text$_ZNSt23_Sp_counted_ptr_inplaceINSt13__future_base15_Deferred_stateINSt6thread8_InvokerISt5tupleIJPFviPK8BoidListPK7BoidMapEiPS5_PS8_EEEEvEESaIvELN9__gnu_cxx12_Lock_policyE2EE10_M_destroyEv,"x"
	.linkonce discard
	.align 2
	.p2align 4
	.globl	_ZNSt23_Sp_counted_ptr_inplaceINSt13__future_base15_Deferred_stateINSt6thread8_InvokerISt5tupleIJPFviPK8BoidListPK7BoidMapEiPS5_PS8_EEEEvEESaIvELN9__gnu_cxx12_Lock_policyE2EE10_M_destroyEv
	.def	_ZNSt23_Sp_counted_ptr_inplaceINSt13__future_base15_Deferred_stateINSt6thread8_InvokerISt5tupleIJPFviPK8BoidListPK7BoidMapEiPS5_PS8_EEEEvEESaIvELN9__gnu_cxx12_Lock_policyE2EE10_M_destroyEv;	.scl	2;	.type	32;	.endef
	.seh_proc	_ZNSt23_Sp_counted_ptr_inplaceINSt13__future_base15_Deferred_stateINSt6thread8_InvokerISt5tupleIJPFviPK8BoidListPK7BoidMapEiPS5_PS8_EEEEvEESaIvELN9__gnu_cxx12_Lock_policyE2EE10_M_destroyEv
_ZNSt23_Sp_counted_ptr_inplaceINSt13__future_base15_Deferred_stateINSt6thread8_InvokerISt5tupleIJPFviPK8BoidListPK7BoidMapEiPS5_PS8_EEEEvEESaIvELN9__gnu_cxx12_Lock_policyE2EE10_M_destroyEv:
.LFB14966:
	.seh_endprologue
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/new_allocator.h:168: 	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
	movl	$104, %edx	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:623:       }
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/new_allocator.h:168: 	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
	jmp	_ZdlPvy	 #
	.seh_endproc
	.section	.text$_ZNSt13__future_base13_State_baseV2D1Ev,"x"
	.linkonce discard
	.align 2
	.p2align 4
	.globl	_ZNSt13__future_base13_State_baseV2D1Ev
	.def	_ZNSt13__future_base13_State_baseV2D1Ev;	.scl	2;	.type	32;	.endef
	.seh_proc	_ZNSt13__future_base13_State_baseV2D1Ev
_ZNSt13__future_base13_State_baseV2D1Ev:
.LFB14608:
	pushq	%rbx	 #
	.seh_pushreg	%rbx
	subq	$32, %rsp	 #,
	.seh_stackalloc	32
	.seh_endprologue
 # C:/msys64/ucrt64/include/c++/13.1.0/future:344:       virtual ~_State_baseV2() = default;
	leaq	16+_ZTVNSt13__future_base13_State_baseV2E(%rip), %rax	 #, tmp99
	movq	%rax, (%rcx)	 # tmp99, this_2(D)->_vptr._State_baseV2
	movq	%rcx, %rbx	 # tmp97, this
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/atomic_futex.h:288:   class __atomic_futex_unsigned
	leaq	32(%rcx), %rcx	 #, tmp92
	call	_ZNSt18condition_variableD1Ev	 #
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_mutex.h:77:     ~__mutex_base() noexcept { __gthread_mutex_destroy(&_M_mutex); }
	leaq	24(%rbx), %rcx	 #, tmp93
 # C:/msys64/ucrt64/include/c++/13.1.0/x86_64-w64-mingw32/bits/gthr-default.h:740:     return __gthrw_(pthread_mutex_destroy) (__mutex);
	call	pthread_mutex_destroy	 #
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/unique_ptr.h:403: 	if (__ptr != nullptr)
	movq	8(%rbx), %rcx	 # MEM[(struct _Result_base * &)this_2(D) + 8], _5
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/unique_ptr.h:403: 	if (__ptr != nullptr)
	testq	%rcx, %rcx	 # _5
	je	.L134	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/future:229: 	void operator()(_Result_base* __fr) const { __fr->_M_destroy(); }
	movq	(%rcx), %rax	 # _5->_vptr._Result_base, _6
	leaq	_ZNSt13__future_base7_ResultIvE10_M_destroyEv(%rip), %r8	 #, tmp95
	movq	(%rax), %rdx	 # *_6, _7
	cmpq	%r8, %rdx	 # tmp95, _7
	jne	.L130	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/future:672:       void _M_destroy() { delete this; }
	movq	16(%rax), %rax	 # MEM[(int (*) () *)_6 + 16B], MEM[(int (*) () *)_6 + 16B]
 # C:/msys64/ucrt64/include/c++/13.1.0/future:344:       virtual ~_State_baseV2() = default;
	addq	$32, %rsp	 #,
	popq	%rbx	 #
 # C:/msys64/ucrt64/include/c++/13.1.0/future:672:       void _M_destroy() { delete this; }
	rex.W jmp	*%rax	 # MEM[(int (*) () *)_6 + 16B]
	.p2align 4,,10
	.p2align 3
.L130:
 # C:/msys64/ucrt64/include/c++/13.1.0/future:229: 	void operator()(_Result_base* __fr) const { __fr->_M_destroy(); }
	call	*%rdx	 # _7
	nop	
.L134:
 # C:/msys64/ucrt64/include/c++/13.1.0/future:344:       virtual ~_State_baseV2() = default;
	addq	$32, %rsp	 #,
	popq	%rbx	 #
	ret	
	.seh_handler	__gxx_personality_seh0, @unwind, @except
	.seh_handlerdata
.LLSDA14608:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE14608-.LLSDACSB14608
.LLSDACSB14608:
.LLSDACSE14608:
	.section	.text$_ZNSt13__future_base13_State_baseV2D1Ev,"x"
	.linkonce discard
	.seh_endproc
	.section	.text$_ZNSt13__future_base13_State_baseV2D0Ev,"x"
	.linkonce discard
	.align 2
	.p2align 4
	.globl	_ZNSt13__future_base13_State_baseV2D0Ev
	.def	_ZNSt13__future_base13_State_baseV2D0Ev;	.scl	2;	.type	32;	.endef
	.seh_proc	_ZNSt13__future_base13_State_baseV2D0Ev
_ZNSt13__future_base13_State_baseV2D0Ev:
.LFB14609:
	pushq	%rbx	 #
	.seh_pushreg	%rbx
	subq	$32, %rsp	 #,
	.seh_stackalloc	32
	.seh_endprologue
 # C:/msys64/ucrt64/include/c++/13.1.0/future:344:       virtual ~_State_baseV2() = default;
	leaq	16+_ZTVNSt13__future_base13_State_baseV2E(%rip), %rax	 #, tmp99
	movq	%rax, (%rcx)	 # tmp99, this_2(D)->_vptr._State_baseV2
	movq	%rcx, %rbx	 # tmp97, this
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/atomic_futex.h:288:   class __atomic_futex_unsigned
	leaq	32(%rcx), %rcx	 #, tmp92
	call	_ZNSt18condition_variableD1Ev	 #
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_mutex.h:77:     ~__mutex_base() noexcept { __gthread_mutex_destroy(&_M_mutex); }
	leaq	24(%rbx), %rcx	 #, tmp93
 # C:/msys64/ucrt64/include/c++/13.1.0/x86_64-w64-mingw32/bits/gthr-default.h:740:     return __gthrw_(pthread_mutex_destroy) (__mutex);
	call	pthread_mutex_destroy	 #
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/unique_ptr.h:403: 	if (__ptr != nullptr)
	movq	8(%rbx), %rcx	 # MEM[(struct _Result_base * &)this_2(D) + 8], _7
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/unique_ptr.h:403: 	if (__ptr != nullptr)
	testq	%rcx, %rcx	 # _7
	je	.L136	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/future:229: 	void operator()(_Result_base* __fr) const { __fr->_M_destroy(); }
	movq	(%rcx), %rax	 # _7->_vptr._Result_base, _8
	leaq	_ZNSt13__future_base7_ResultIvE10_M_destroyEv(%rip), %r8	 #, tmp95
	movq	(%rax), %rdx	 # *_8, _9
	cmpq	%r8, %rdx	 # tmp95, _9
	jne	.L137	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/future:672:       void _M_destroy() { delete this; }
	call	*16(%rax)	 # MEM[(int (*) () *)_8 + 16B]
.L136:
 # C:/msys64/ucrt64/include/c++/13.1.0/future:344:       virtual ~_State_baseV2() = default;
	movl	$48, %edx	 #,
	movq	%rbx, %rcx	 # this,
 # C:/msys64/ucrt64/include/c++/13.1.0/future:344:       virtual ~_State_baseV2() = default;
	addq	$32, %rsp	 #,
	popq	%rbx	 #
 # C:/msys64/ucrt64/include/c++/13.1.0/future:344:       virtual ~_State_baseV2() = default;
	jmp	_ZdlPvy	 #
	.p2align 4,,10
	.p2align 3
.L137:
 # C:/msys64/ucrt64/include/c++/13.1.0/future:229: 	void operator()(_Result_base* __fr) const { __fr->_M_destroy(); }
	call	*%rdx	 # _9
	jmp	.L136	 #
	.seh_handler	__gxx_personality_seh0, @unwind, @except
	.seh_handlerdata
.LLSDA14609:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE14609-.LLSDACSB14609
.LLSDACSB14609:
.LLSDACSE14609:
	.section	.text$_ZNSt13__future_base13_State_baseV2D0Ev,"x"
	.linkonce discard
	.seh_endproc
	.section	.text$_ZNSt13__future_base13_State_baseV29_M_do_setEPSt8functionIFSt10unique_ptrINS_12_Result_baseENS3_8_DeleterEEvEEPb,"x"
	.linkonce discard
	.align 2
	.p2align 4
	.globl	_ZNSt13__future_base13_State_baseV29_M_do_setEPSt8functionIFSt10unique_ptrINS_12_Result_baseENS3_8_DeleterEEvEEPb
	.def	_ZNSt13__future_base13_State_baseV29_M_do_setEPSt8functionIFSt10unique_ptrINS_12_Result_baseENS3_8_DeleterEEvEEPb;	.scl	2;	.type	32;	.endef
	.seh_proc	_ZNSt13__future_base13_State_baseV29_M_do_setEPSt8functionIFSt10unique_ptrINS_12_Result_baseENS3_8_DeleterEEvEEPb
_ZNSt13__future_base13_State_baseV29_M_do_setEPSt8functionIFSt10unique_ptrINS_12_Result_baseENS3_8_DeleterEEvEEPb:
.LFB11718:
	pushq	%rsi	 #
	.seh_pushreg	%rsi
	pushq	%rbx	 #
	.seh_pushreg	%rbx
	subq	$56, %rsp	 #,
	.seh_stackalloc	56
	.seh_endprologue
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_function.h:589: 	if (_M_empty())
	cmpq	$0, 16(%rdx)	 #, MEM[(const struct _Function_base *)__f_2(D)]._M_manager
 # C:/msys64/ucrt64/include/c++/13.1.0/future:587:       _M_do_set(function<_Ptr_type()>* __f, bool* __did_set)
	movq	%rcx, %rbx	 # tmp100, this
	movq	%r8, %rsi	 # tmp102, __did_set
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_function.h:589: 	if (_M_empty())
	je	.L149	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_function.h:591: 	return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
	leaq	40(%rsp), %rcx	 #, tmp94
.LEHB8:
	call	*24(%rdx)	 # MEM[(const struct function *)__f_2(D)]._M_invoker
.LEHE8:
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/move.h:204:       _Tp __tmp = _GLIBCXX_MOVE(__a);
	movq	8(%rbx), %rcx	 # MEM[(struct _Result_base * &)this_5(D) + 8], _12
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/move.h:205:       __a = _GLIBCXX_MOVE(__b);
	movq	40(%rsp), %rax	 # MEM[(struct _Result_base * &)&__res], MEM[(struct _Result_base * &)&__res]
 # C:/msys64/ucrt64/include/c++/13.1.0/future:593: 	*__did_set = true;
	movb	$1, (%rsi)	 #, *__did_set_3(D)
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/move.h:206:       __b = _GLIBCXX_MOVE(__tmp);
	movq	%rcx, 40(%rsp)	 # _12, MEM[(struct _Result_base * &)&__res]
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/move.h:205:       __a = _GLIBCXX_MOVE(__b);
	movq	%rax, 8(%rbx)	 # MEM[(struct _Result_base * &)&__res], MEM[(struct _Result_base * &)this_5(D) + 8]
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/unique_ptr.h:403: 	if (__ptr != nullptr)
	testq	%rcx, %rcx	 # _12
	je	.L148	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/future:229: 	void operator()(_Result_base* __fr) const { __fr->_M_destroy(); }
	movq	(%rcx), %rax	 # _12->_vptr._Result_base, _10
	leaq	_ZNSt13__future_base7_ResultIvE10_M_destroyEv(%rip), %r8	 #, tmp98
	movq	(%rax), %rdx	 # *_10, _11
	cmpq	%r8, %rdx	 # tmp98, _11
	jne	.L144	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/future:672:       void _M_destroy() { delete this; }
	call	*16(%rax)	 # MEM[(int (*) () *)_10 + 16B]
	nop	
.L148:
 # C:/msys64/ucrt64/include/c++/13.1.0/future:595:       }
	addq	$56, %rsp	 #,
	popq	%rbx	 #
	popq	%rsi	 #
	ret	
	.p2align 4,,10
	.p2align 3
.L144:
 # C:/msys64/ucrt64/include/c++/13.1.0/future:229: 	void operator()(_Result_base* __fr) const { __fr->_M_destroy(); }
	call	*%rdx	 # _11
	nop	
 # C:/msys64/ucrt64/include/c++/13.1.0/future:595:       }
	addq	$56, %rsp	 #,
	popq	%rbx	 #
	popq	%rsi	 #
	ret	
.L149:
.LEHB9:
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_function.h:590: 	  __throw_bad_function_call();
	call	_ZSt25__throw_bad_function_callv	 #
	nop	
.LEHE9:
	.seh_handler	__gxx_personality_seh0, @unwind, @except
	.seh_handlerdata
.LLSDA11718:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE11718-.LLSDACSB11718
.LLSDACSB11718:
	.uleb128 .LEHB8-.LFB11718
	.uleb128 .LEHE8-.LEHB8
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB9-.LFB11718
	.uleb128 .LEHE9-.LEHB9
	.uleb128 0
	.uleb128 0
.LLSDACSE11718:
	.section	.text$_ZNSt13__future_base13_State_baseV29_M_do_setEPSt8functionIFSt10unique_ptrINS_12_Result_baseENS3_8_DeleterEEvEEPb,"x"
	.linkonce discard
	.seh_endproc
	.text
	.p2align 4
	.def	__tcf_0;	.scl	3;	.type	32;	.endef
	.seh_proc	__tcf_0
__tcf_0:
.LFB14944:
	subq	$40, %rsp	 #,
	.seh_stackalloc	40
	.seh_endprologue
 # C:/msys64/ucrt64/include/c++/13.1.0/fstream:870:       { }
	movq	.refptr._ZTVSt14basic_ofstreamIcSt11char_traitsIcEE(%rip), %rax	 #, tmp92
 # C:/msys64/ucrt64/include/c++/13.1.0/fstream:256: 	  { this->close(); }
	leaq	8+myfile(%rip), %rcx	 #, tmp100
 # C:/msys64/ucrt64/include/c++/13.1.0/fstream:870:       { }
	leaq	64(%rax), %rdx	 #, tmp93
	addq	$24, %rax	 #, tmp98
	movq	%rdx, 216+myfile(%rip)	 # tmp93, MEM[(struct basic_ios *)&myfile + 216B].D.49179._vptr.ios_base
	movq	.refptr._ZTVSt13basic_filebufIcSt11char_traitsIcEE(%rip), %rdx	 #, tmp119
	vmovq	%rax, %xmm1	 # tmp98, tmp98
	addq	$16, %rdx	 #, tmp96
	vpinsrq	$1, %rdx, %xmm1, %xmm0	 # tmp96, tmp98, tmp95
	vmovdqu	%xmm0, myfile(%rip)	 # tmp95, MEM <vector(2) long long unsigned int> [(int (*) () * *)&myfile]
.LEHB10:
 # C:/msys64/ucrt64/include/c++/13.1.0/fstream:256: 	  { this->close(); }
	call	_ZNSt13basic_filebufIcSt11char_traitsIcEE5closeEv	 #
.LEHE10:
.L152:
 # C:/msys64/ucrt64/include/c++/13.1.0/fstream:259:       }
	leaq	80+myfile(%rip), %rcx	 #, tmp101
	call	_ZNSt12__basic_fileIcED1Ev	 #
 # C:/msys64/ucrt64/include/c++/13.1.0/streambuf:205:       { }
	movq	.refptr._ZTVSt15basic_streambufIcSt11char_traitsIcEE(%rip), %rax	 #, tmp121
	leaq	64+myfile(%rip), %rcx	 #, tmp105
	addq	$16, %rax	 #, tmp104
	movq	%rax, 8+myfile(%rip)	 # tmp104, MEM[(struct basic_streambuf *)&myfile + 8B]._vptr.basic_streambuf
	call	_ZNSt6localeD1Ev	 #
 # C:/msys64/ucrt64/include/c++/13.1.0/ostream:95:       ~basic_ostream() { }
	movq	.refptr._ZTTSt14basic_ofstreamIcSt11char_traitsIcEE(%rip), %rax	 #, tmp106
	movq	8(%rax), %rdx	 # MEM[(const void * *)&_ZTTSt14basic_ofstreamIcSt11char_traitsIcEE + 8B], _5
	movq	16(%rax), %rcx	 # MEM[(const void * *)&_ZTTSt14basic_ofstreamIcSt11char_traitsIcEE + 16B], MEM[(const void * *)&_ZTTSt14basic_ofstreamIcSt11char_traitsIcEE + 16B]
	leaq	myfile(%rip), %rax	 #, tmp102
	movq	%rdx, myfile(%rip)	 # _5, MEM[(struct basic_ostream *)&myfile]._vptr.basic_ostream
	movq	-24(%rdx), %rdx	 # MEM[(long long int *)_5 + -24B], MEM[(long long int *)_5 + -24B]
	movq	%rcx, (%rax,%rdx)	 # MEM[(const void * *)&_ZTTSt14basic_ofstreamIcSt11char_traitsIcEE + 16B], MEM[(struct basic_ios *)_8].D.49179._vptr.ios_base
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/basic_ios.h:282:       ~basic_ios() { }
	movq	.refptr._ZTVSt9basic_iosIcSt11char_traitsIcEE(%rip), %rax	 #, tmp122
	leaq	216+myfile(%rip), %rcx	 #, tmp115
	addq	$16, %rax	 #, tmp114
	movq	%rax, 216+myfile(%rip)	 # tmp114, MEM[(struct basic_ios *)&myfile + 216B].D.49179._vptr.ios_base
 # .\src\main.cpp:31: std::ofstream myfile;
	addq	$40, %rsp	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/basic_ios.h:282:       ~basic_ios() { }
	jmp	_ZNSt8ios_baseD2Ev	 #
.L153:
 # C:/msys64/ucrt64/include/c++/13.1.0/fstream:257: 	__catch(...)
	movq	%rax, %rcx	 # tmp117, tmp116
	vzeroupper
	call	__cxa_begin_catch	 #
 # C:/msys64/ucrt64/include/c++/13.1.0/fstream:257: 	__catch(...)
	call	__cxa_end_catch	 #
	jmp	.L152	 #
	.seh_handler	__gxx_personality_seh0, @unwind, @except
	.seh_handlerdata
	.align 4
.LLSDA14944:
	.byte	0xff
	.byte	0x9b
	.uleb128 .LLSDATT14944-.LLSDATTD14944
.LLSDATTD14944:
	.byte	0x1
	.uleb128 .LLSDACSE14944-.LLSDACSB14944
.LLSDACSB14944:
	.uleb128 .LEHB10-.LFB14944
	.uleb128 .LEHE10-.LEHB10
	.uleb128 .L153-.LFB14944
	.uleb128 0x1
.LLSDACSE14944:
	.byte	0x1
	.byte	0
	.align 4
	.long	0

.LLSDATT14944:
	.text
	.seh_endproc
	.p2align 4
	.globl	_Z14block_populateiPK8BoidListPK7BoidMap
	.def	_Z14block_populateiPK8BoidListPK7BoidMap;	.scl	2;	.type	32;	.endef
	.seh_proc	_Z14block_populateiPK8BoidListPK7BoidMap
_Z14block_populateiPK8BoidListPK7BoidMap:
.LFB12587:
	pushq	%r14	 #
	.seh_pushreg	%r14
	pushq	%r13	 #
	.seh_pushreg	%r13
	pushq	%r12	 #
	.seh_pushreg	%r12
	pushq	%rbp	 #
	.seh_pushreg	%rbp
	pushq	%rdi	 #
	.seh_pushreg	%rdi
	pushq	%rsi	 #
	.seh_pushreg	%rsi
	pushq	%rbx	 #
	.seh_pushreg	%rbx
	subq	$32, %rsp	 #,
	.seh_stackalloc	32
	.seh_endprologue
 # .\src\main.cpp:229: void block_populate(int thread_start_pos, const BoidList *boid_list, const BoidMap *boid_map) {
	movslq	%ecx, %rbx	 # tmp172,
 # .\src\main.cpp:233:     auto t = thread_start_pos == ((NUM_THREADS - 1) * (boid_list->m_size / NUM_THREADS));
	movl	16(%rdx), %ecx	 # boid_list_21(D)->m_size, _4
 # .\src\main.cpp:229: void block_populate(int thread_start_pos, const BoidList *boid_list, const BoidMap *boid_map) {
	movq	%r8, %r13	 # tmp174, boid_map
 # .\src\main.cpp:233:     auto t = thread_start_pos == ((NUM_THREADS - 1) * (boid_list->m_size / NUM_THREADS));
	movl	_ZL11num_threads(%rip), %r8d	 # num_threads, num_threads.29_1
 # .\src\main.cpp:229: void block_populate(int thread_start_pos, const BoidList *boid_list, const BoidMap *boid_map) {
	movq	%rdx, %r12	 # tmp173, boid_list
 # .\src\main.cpp:233:     auto t = thread_start_pos == ((NUM_THREADS - 1) * (boid_list->m_size / NUM_THREADS));
	xorl	%edx, %edx	 # tmp143
 # .\src\main.cpp:229: void block_populate(int thread_start_pos, const BoidList *boid_list, const BoidMap *boid_map) {
	movq	%rbx, %rsi	 #,
 # .\src\main.cpp:233:     auto t = thread_start_pos == ((NUM_THREADS - 1) * (boid_list->m_size / NUM_THREADS));
	movl	%ecx, %eax	 # _4, tmp142
	divl	%r8d	 # num_threads.29_1
 # .\src\main.cpp:233:     auto t = thread_start_pos == ((NUM_THREADS - 1) * (boid_list->m_size / NUM_THREADS));
	subl	$1, %r8d	 #, tmp144
 # .\src\main.cpp:233:     auto t = thread_start_pos == ((NUM_THREADS - 1) * (boid_list->m_size / NUM_THREADS));
	imull	%eax, %r8d	 # tmp142, tmp145
 # .\src\main.cpp:233:     auto t = thread_start_pos == ((NUM_THREADS - 1) * (boid_list->m_size / NUM_THREADS));
	cmpl	%ebx, %r8d	 # thread_start_pos, tmp145
	sete	%dl	 #, tmp146
	subl	%ebx, %ecx	 # thread_start_pos, _76
 # .\src\main.cpp:234:     auto correction = boid_list->m_size - (thread_start_pos + (boid_list->m_size / NUM_THREADS));
	movl	%ecx, %edi	 # _76, correction
	subl	%eax, %edi	 # tmp142, correction
 # .\src\main.cpp:236:     for (int i = 0; i < (boid_list->m_size) / NUM_THREADS + correction * t; i++) {
	testb	%dl, %dl	 # tmp146
	movl	$0, %edx	 #, tmp148
 # .\src\main.cpp:236:     for (int i = 0; i < (boid_list->m_size) / NUM_THREADS + correction * t; i++) {
	cmove	%eax, %ecx	 # _76,, tmp142, tmp149
 # .\src\main.cpp:236:     for (int i = 0; i < (boid_list->m_size) / NUM_THREADS + correction * t; i++) {
	cmove	%edx, %edi	 # correction,, tmp148, _78
	salq	$2, %rbx	 #, ivtmp.1472
 # .\src\main.cpp:236:     for (int i = 0; i < (boid_list->m_size) / NUM_THREADS + correction * t; i++) {
	xorl	%ebp, %ebp	 # i
 # .\src\main.cpp:236:     for (int i = 0; i < (boid_list->m_size) / NUM_THREADS + correction * t; i++) {
	testl	%ecx, %ecx	 # tmp149
	je	.L165	 #,
	.p2align 4,,10
	.p2align 3
.L158:
 # .\src\main.cpp:215:     Boid map_pos = map.get_map_pos_nearest(boid_list.m_boid_store->xs[boid_to_place], boid_list.m_boid_store->ys[boid_to_place]);
	movq	(%r12), %rax	 # boid_list_21(D)->m_boid_store, _28
 # .\src\main.cpp:237:         place_boid(*boid_map, *boid_list, thread_start_pos + i);
	leal	0(%rbp,%rsi), %r14d	 #, _9
 # .\src\main.cpp:215:     Boid map_pos = map.get_map_pos_nearest(boid_list.m_boid_store->xs[boid_to_place], boid_list.m_boid_store->ys[boid_to_place]);
	movq	8(%rax), %rcx	 # _28->ys, _28->ys
 # .\src\main.cpp:215:     Boid map_pos = map.get_map_pos_nearest(boid_list.m_boid_store->xs[boid_to_place], boid_list.m_boid_store->ys[boid_to_place]);
	movq	(%rax), %rax	 # _28->xs, _28->xs
 # .\src\main.cpp:215:     Boid map_pos = map.get_map_pos_nearest(boid_list.m_boid_store->xs[boid_to_place], boid_list.m_boid_store->ys[boid_to_place]);
	vcvttss2sil	(%rcx,%rbx), %r8d	 # *_32,
	movq	%r13, %rcx	 # boid_map,
	vcvttss2sil	(%rax,%rbx), %edx	 # *_36, tmp155
	call	_ZNK7BoidMap19get_map_pos_nearestEii	 #
 # .\src\main.cpp:219:     map.safety[map_pos].lock();
	cltq
 # .\src\main.cpp:219:     map.safety[map_pos].lock();
	leaq	0(,%rax,4), %rdx	 #, _42
 # .\src\main.cpp:219:     map.safety[map_pos].lock();
	movq	32(%r13), %rax	 # boid_map_25(D)->safety, _43
	addq	%rdx, %rax	 # _42, _43
	.p2align 4,,10
	.p2align 3
.L156:
 # C:/msys64/ucrt64/include/psdk_inc/intrin-impl.h:1800: __buildbittesti(_interlockedbittestandset, __LONG32, "lock bts{l %[Offset],%[Base] | %[Base],%[Offset]}" __FLAGSET, "I")
/APP
 # 1800 "C:/msys64/ucrt64/include/psdk_inc/intrin-impl.h" 1
	lock btsl $0,(%rax) 	 #, MEM[(volatile long int *)_44]
 # 0 "" 2
 # .\src\.\task_master\lock.h:40:         while (_interlockedbittestandset(&lock_internal, 0)) {}
/NO_APP
	jc	.L156	 #,
 # .\src\main.cpp:220:         Boid old_head = map.m_boid_map[map_pos];
	movq	16(%r13), %rcx	 # boid_map_25(D)->m_boid_map, _47
	addq	%rdx, %rcx	 # _42, _47
 # .\src\main.cpp:220:         Boid old_head = map.m_boid_map[map_pos];
	movslq	(%rcx), %rax	 # *_47,
 # .\src\main.cpp:221:         map.m_boid_map[map_pos] = boid_to_place;
	movl	%r14d, (%rcx)	 # _9, *_47
 # .\src\main.cpp:222:         boid_list.m_boid_store->index_next[boid_to_place] = old_head;
	movq	(%r12), %rcx	 # boid_list_21(D)->m_boid_store, _49
 # .\src\main.cpp:222:         boid_list.m_boid_store->index_next[boid_to_place] = old_head;
	movq	32(%rcx), %r8	 # _49->index_next, _49->index_next
	movl	%eax, (%r8,%rbx)	 # old_head, *_51
 # .\src\main.cpp:223:         boid_list.m_boid_store->depth[boid_to_place] = (old_head != -1) ? boid_list.m_boid_store->depth[old_head] + 1 : 1;
	movq	48(%rcx), %r8	 # _49->depth, pretmp_96
 # .\src\main.cpp:223:         boid_list.m_boid_store->depth[boid_to_place] = (old_head != -1) ? boid_list.m_boid_store->depth[old_head] + 1 : 1;
	movl	$1, %ecx	 #, iftmp.36_57
 # .\src\main.cpp:223:         boid_list.m_boid_store->depth[boid_to_place] = (old_head != -1) ? boid_list.m_boid_store->depth[old_head] + 1 : 1;
	cmpl	$-1, %eax	 #, old_head
	je	.L157	 #,
 # .\src\main.cpp:223:         boid_list.m_boid_store->depth[boid_to_place] = (old_head != -1) ? boid_list.m_boid_store->depth[old_head] + 1 : 1;
	movl	(%r8,%rax,4), %ecx	 # *_55, *_55
	addl	$1, %ecx	 #, iftmp.36_57
.L157:
 # .\src\main.cpp:224:     map.safety[map_pos].unlock();
	movq	32(%r13), %rax	 # boid_map_25(D)->safety, _42
 # .\src\main.cpp:223:         boid_list.m_boid_store->depth[boid_to_place] = (old_head != -1) ? boid_list.m_boid_store->depth[old_head] + 1 : 1;
	movl	%ecx, (%r8,%rbx)	 # iftmp.36_57, *_59
 # .\src\main.cpp:224:     map.safety[map_pos].unlock();
	addq	%rdx, %rax	 # _42, _42
 # C:/msys64/ucrt64/include/psdk_inc/intrin-impl.h:1809: __buildbittesti(_interlockedbittestandreset, __LONG32, "lock btr{l %[Offset],%[Base] | %[Base],%[Offset]}" __FLAGSET, "I")
/APP
 # 1809 "C:/msys64/ucrt64/include/psdk_inc/intrin-impl.h" 1
	lock btrl $0,(%rax) 	 #, MEM[(volatile long int *)_63]
 # 0 "" 2
 # .\src\main.cpp:236:     for (int i = 0; i < (boid_list->m_size) / NUM_THREADS + correction * t; i++) {
/NO_APP
	movl	16(%r12), %eax	 # boid_list_21(D)->m_size, boid_list_21(D)->m_size
	xorl	%edx, %edx	 # tmp168
 # .\src\main.cpp:236:     for (int i = 0; i < (boid_list->m_size) / NUM_THREADS + correction * t; i++) {
	addl	$1, %ebp	 #, i
 # .\src\main.cpp:236:     for (int i = 0; i < (boid_list->m_size) / NUM_THREADS + correction * t; i++) {
	addq	$4, %rbx	 #, ivtmp.1472
 # .\src\main.cpp:236:     for (int i = 0; i < (boid_list->m_size) / NUM_THREADS + correction * t; i++) {
	divl	_ZL11num_threads(%rip)	 # num_threads
 # .\src\main.cpp:236:     for (int i = 0; i < (boid_list->m_size) / NUM_THREADS + correction * t; i++) {
	addl	%edi, %eax	 # _78, tmp170
 # .\src\main.cpp:236:     for (int i = 0; i < (boid_list->m_size) / NUM_THREADS + correction * t; i++) {
	cmpl	%eax, %ebp	 # tmp170, i
	jb	.L158	 #,
.L165:
 # .\src\main.cpp:239: }
	addq	$32, %rsp	 #,
	popq	%rbx	 #
	popq	%rsi	 #
	popq	%rdi	 #
	popq	%rbp	 #
	popq	%r12	 #
	popq	%r13	 #
	popq	%r14	 #
	ret	
	.seh_endproc
	.p2align 4
	.def	_ZZZ13update_boids2RK7BoidMapP15row_runner_argsP10TaskMasterP8TaskSyncENKUlS5_P4TaskE_clES5_S9_ENUlS5_S9_E_4_FUNES5_S9_;	.scl	3;	.type	32;	.endef
	.seh_proc	_ZZZ13update_boids2RK7BoidMapP15row_runner_argsP10TaskMasterP8TaskSyncENKUlS5_P4TaskE_clES5_S9_ENUlS5_S9_E_4_FUNES5_S9_
_ZZZ13update_boids2RK7BoidMapP15row_runner_argsP10TaskMasterP8TaskSyncENKUlS5_P4TaskE_clES5_S9_ENUlS5_S9_E_4_FUNES5_S9_:
.LFB12624:
	pushq	%r15	 #
	.seh_pushreg	%r15
	pushq	%r14	 #
	.seh_pushreg	%r14
	pushq	%r13	 #
	.seh_pushreg	%r13
	pushq	%r12	 #
	.seh_pushreg	%r12
	pushq	%rbp	 #
	.seh_pushreg	%rbp
	pushq	%rdi	 #
	.seh_pushreg	%rdi
	pushq	%rsi	 #
	.seh_pushreg	%rsi
	pushq	%rbx	 #
	.seh_pushreg	%rbx
	subq	$120, %rsp	 #,
	.seh_stackalloc	120
	vmovups	%xmm6, 48(%rsp)	 #,
	.seh_savexmm	%xmm6, 48
	vmovups	%xmm7, 64(%rsp)	 #,
	.seh_savexmm	%xmm7, 64
	vmovups	%xmm8, 80(%rsp)	 #,
	.seh_savexmm	%xmm8, 80
	vmovups	%xmm9, 96(%rsp)	 #,
	.seh_savexmm	%xmm9, 96
	.seh_endprologue
	movq	8(%rdx), %rax	 # MEM[(void * *)_3(D) + 8B], _5
 # .\src\main.cpp:1229:                                     update_non_interacting2(old_args->boid_map, old_args->rules, old_args->boid_list);
	movq	32(%rax), %rdx	 # MEM[(struct row_runner_args *)_5].boid_list, _7
 # .\src\main.cpp:1229:                                     update_non_interacting2(old_args->boid_map, old_args->rules, old_args->boid_list);
	movq	(%rax), %rbp	 # MEM[(struct row_runner_args *)_5].boid_map, _9
 # .\src\main.cpp:1229:                                     update_non_interacting2(old_args->boid_map, old_args->rules, old_args->boid_list);
	movq	16(%rax), %r10	 # MEM[(struct row_runner_args *)_5].rules, _8
	movq	(%rdx), %r11	 # MEM[(struct BoidStore * *)_7], _13
	movl	8(%rbp), %esi	 # MEM[(int *)_9 + 8B], _12
 # .\src\main.cpp:1227:                                 .on_complete = (void *) (+[](TaskMaster *task_master, Task *current_task) {
	movq	%rcx, %r8	 # tmp630, D.170046
	movl	16(%rdx), %r14d	 # MEM[(int *)_7 + 16B], _14
 # .\src\main.cpp:983:     const auto world_height = boid_map->m_cell_size * boid_map->m_ysize;
	movl	0(%rbp), %edi	 # MEM[(int *)_9], world_height
 # .\src\main.cpp:977:     const auto xs = boid_list->m_boid_store->xs;
	movq	(%r11), %r9	 # _13->xs, xs
 # .\src\main.cpp:978:     const auto ys = boid_list->m_boid_store->ys;
	movq	8(%r11), %rdx	 # _13->ys, ys
 # .\src\main.cpp:983:     const auto world_height = boid_map->m_cell_size * boid_map->m_ysize;
	imull	%esi, %edi	 # _12, world_height
 # .\src\main.cpp:979:     const auto vxs = boid_list->m_boid_store->vxs;
	movq	16(%r11), %rax	 # _13->vxs, vxs
 # .\src\main.cpp:980:     const auto vys = boid_list->m_boid_store->vys;
	movq	24(%r11), %rcx	 # _13->vys, vys
	movl	%r14d, 4(%rsp)	 # _14, %sfp
 # .\src\main.cpp:984:     const auto world_width = boid_map->m_cell_size * boid_map->m_xsize;
	imull	4(%rbp), %esi	 # MEM[(int *)_9 + 4B], world_width
 # .\src\main.cpp:981:     const auto homes = boid_list->m_boid_store->homes;
	movq	40(%r11), %rbx	 # _13->homes, homes
 # .\src\main.cpp:987:     for (Boid boid = 0; boid < boid_list->m_size; boid++) {     
	testl	%r14d, %r14d	 # _14
	jle	.L173	 #,
 # .\src\main.cpp:991:         float home_loc_x = home_index_x * ((world_width - rules->edge_width * 2) /  16) + rules->edge_width;
	movl	24(%r10), %r11d	 # MEM[(const struct Rules *)_8].edge_width, _46
	vxorps	%xmm2, %xmm2, %xmm2	 # tmp632
 # .\src\main.cpp:991:         float home_loc_x = home_index_x * ((world_width - rules->edge_width * 2) /  16) + rules->edge_width;
	leal	(%r11,%r11), %ebp	 #, _47
 # .\src\main.cpp:991:         float home_loc_x = home_index_x * ((world_width - rules->edge_width * 2) /  16) + rules->edge_width;
	subl	%ebp, %esi	 # _47, tmp383
 # .\src\main.cpp:991:         float home_loc_x = home_index_x * ((world_width - rules->edge_width * 2) /  16) + rules->edge_width;
	leal	15(%rsi), %r12d	 #, tmp385
	cmovs	%r12d, %esi	 # tmp385,, tmp384
 # .\src\main.cpp:992:         float home_loc_y = home_index_y * ((world_height - rules->edge_width * 2) /  9) + rules->edge_width;
	subl	%ebp, %edi	 # _47, world_height
 # .\src\main.cpp:991:         float home_loc_x = home_index_x * ((world_width - rules->edge_width * 2) /  16) + rules->edge_width;
	sarl	$4, %esi	 #, tmp384
	movl	%esi, %r14d	 # tmp384, tmp386
 # .\src\main.cpp:992:         float home_loc_y = home_index_y * ((world_height - rules->edge_width * 2) /  9) + rules->edge_width;
	movl	%edi, %esi	 # world_height, tmp387
 # .\src\main.cpp:992:         float home_loc_y = home_index_y * ((world_height - rules->edge_width * 2) /  9) + rules->edge_width;
	movslq	%edi, %rdi	 # tmp387, tmp388
	imulq	$954437177, %rdi, %rdi	 #, tmp388, tmp389
	sarl	$31, %esi	 #, tmp392
	sarq	$33, %rdi	 #, tmp391
	subl	%esi, %edi	 # tmp392, tmp391
	movl	%edi, %r15d	 # tmp391, _54
	movl	4(%rsp), %edi	 # %sfp, _14
	movl	%edi, 8(%rsp)	 # _14, %sfp
	subl	$1, %edi	 #, _113
	movl	%edi, 44(%rsp)	 # _113, %sfp
	cmpl	$2, %edi	 #, _113
	jbe	.L204	 #,
	movslq	4(%rsp), %rdi	 # %sfp, _14
	leaq	31(%r9), %rbp	 #, _176
	leaq	40(%r10), %r13	 #, _111
	movq	%rbp, 16(%rsp)	 # _176, %sfp
	leaq	31(%rdx), %r12	 #, _191
	leaq	0(,%rdi,4), %rsi	 #, _107
	movq	%rdi, 32(%rsp)	 # _14, %sfp
	leaq	36(%r10), %rdi	 #, _105
	leaq	(%rdx,%rsi), %rbp	 #, tmp394
	movq	%r12, 24(%rsp)	 # _191, %sfp
	cmpq	%rbp, %rdi	 # tmp394, _105
	setnb	%bpl	 #, tmp396
	cmpq	%r13, %rdx	 # _111, ys
	setnb	%r12b	 #, tmp398
	orl	%r12d, %ebp	 # tmp398, tmp399
	leaq	(%r9,%rsi), %r12	 #, tmp400
	cmpq	%r12, %rdi	 # tmp400, _105
	setnb	%r12b	 #, tmp402
	cmpq	%r13, %r9	 # _111, xs
	setnb	43(%rsp)	 #, %sfp
	orb	43(%rsp), %r12b	 # %sfp, tmp405
	andl	%ebp, %r12d	 # tmp399, tmp406
	leaq	(%rax,%rsi), %rbp	 #, tmp407
	cmpq	%rbp, %rdi	 # tmp407, _105
	setnb	%bpl	 #, tmp409
	cmpq	%r13, %rax	 # _111, vxs
	setnb	43(%rsp)	 #, %sfp
	addq	%rcx, %rsi	 # vys, tmp414
	orb	43(%rsp), %bpl	 # %sfp, tmp412
	andl	%r12d, %ebp	 # tmp406, tmp413
	cmpq	%rsi, %rdi	 # tmp414, _105
	movq	16(%rsp), %rdi	 # %sfp, _176
	setnb	%sil	 #, tmp416
	cmpq	%r13, %rcx	 # _111, vys
	setnb	%r12b	 #, tmp418
	orl	%r12d, %esi	 # tmp418, tmp419
	andl	%ebp, %esi	 # tmp413, tmp420
	movq	%rdi, %rbp	 # _176, tmp421
	subq	%rdx, %rbp	 # ys, tmp421
	cmpq	$62, %rbp	 #, tmp421
	seta	%bpl	 #, tmp423
	andl	%ebp, %esi	 # tmp423, tmp424
	movq	%rdi, %rbp	 # _176, tmp425
	subq	%rax, %rbp	 # vxs, tmp425
	cmpq	$62, %rbp	 #, tmp425
	seta	%bpl	 #, tmp427
	subq	%rcx, %rdi	 # vys, _176
	andl	%esi, %ebp	 # tmp424, tmp428
	cmpq	$62, %rdi	 #, tmp429
	seta	%dil	 #, tmp431
	andl	%ebp, %edi	 # tmp428, tmp432
	movq	24(%rsp), %rbp	 # %sfp, _191
	movq	%rbp, %rsi	 # _191, tmp433
	subq	%rax, %rsi	 # vxs, tmp433
	cmpq	$62, %rsi	 #, tmp433
	seta	%sil	 #, tmp435
	andl	%edi, %esi	 # tmp432, tmp436
	movq	%rbp, %rdi	 # _191, _191
	subq	%rcx, %rdi	 # vys, _191
	cmpq	$62, %rdi	 #, tmp437
	seta	%dil	 #, tmp439
	testb	%dil, %sil	 # tmp439, tmp436
	je	.L169	 #,
	leaq	31(%rax), %rsi	 #, tmp441
	subq	%rcx, %rsi	 # vys, tmp442
	cmpq	$62, %rsi	 #, tmp442
	jbe	.L169	 #,
	cmpl	$6, 44(%rsp)	 #, %sfp
	jbe	.L183	 #,
	movl	4(%rsp), %edi	 # %sfp, bnd.1486
	movl	$15, %ebp	 #, tmp456
	vmovd	%r14d, %xmm8	 # tmp386, vect_cst__322
	xorl	%esi, %esi	 # ivtmp.1630
	vmovd	%r11d, %xmm5	 # _46, vect_cst__324
	vmovd	%r15d, %xmm7	 # _54, vect_cst__327
	vmovd	%ebp, %xmm3	 # tmp456, tmp455
	vbroadcastss	36(%r10), %ymm4	 # MEM[(const struct Rules *)_8].homing, vect_cst__344
	shrl	$3, %edi	 #,
	vpbroadcastd	%xmm8, %ymm8	 # vect_cst__322, vect_cst__322
	vpbroadcastd	%xmm5, %ymm5	 # vect_cst__324, vect_cst__324
	vpbroadcastd	%xmm7, %ymm7	 # vect_cst__327, vect_cst__327
	salq	$5, %rdi	 #, _255
	vpxor	%xmm6, %xmm6, %xmm6	 # tmp452
	vpbroadcastd	%xmm3, %ymm3	 # tmp455, tmp455
	.p2align 4,,10
	.p2align 3
.L171:
	vpcmpgtd	(%rbx,%rsi), %ymm6, %ymm9	 # MEM <vector(8) int> [(int *)homes_33 + ivtmp.1630_555 * 1], tmp452, tmp453
	vpand	%ymm3, %ymm9, %ymm9	 # tmp455, tmp453, vect_patt_131.1492
 # .\src\main.cpp:992:         float home_loc_y = home_index_y * ((world_height - rules->edge_width * 2) /  9) + rules->edge_width;
	vpaddd	(%rbx,%rsi), %ymm9, %ymm0	 # MEM <vector(8) int> [(int *)homes_33 + ivtmp.1630_555 * 1], vect_patt_131.1492, vect_patt_146.1493
	vpsrad	$4, %ymm0, %ymm1	 #, vect_patt_146.1493, vect_patt_148.1494
 # .\src\main.cpp:991:         float home_loc_x = home_index_x * ((world_width - rules->edge_width * 2) /  16) + rules->edge_width;
	vpand	%ymm3, %ymm0, %ymm0	 # tmp455, vect_patt_146.1493, vect_patt_134.1499
	vpsubd	%ymm9, %ymm0, %ymm0	 # vect_patt_131.1492, vect_patt_134.1499, vect_patt_135.1500
 # .\src\main.cpp:992:         float home_loc_y = home_index_y * ((world_height - rules->edge_width * 2) /  9) + rules->edge_width;
	vpmulld	%ymm7, %ymm1, %ymm1	 # vect_cst__327, vect_patt_148.1494, vect__55.1504
 # .\src\main.cpp:991:         float home_loc_x = home_index_x * ((world_width - rules->edge_width * 2) /  16) + rules->edge_width;
	vpmulld	%ymm8, %ymm0, %ymm0	 # vect_cst__322, vect_patt_135.1500, vect__50.1501
 # .\src\main.cpp:992:         float home_loc_y = home_index_y * ((world_height - rules->edge_width * 2) /  9) + rules->edge_width;
	vpaddd	%ymm5, %ymm1, %ymm1	 # vect_cst__324, vect__55.1504, vect__56.1505
 # .\src\main.cpp:991:         float home_loc_x = home_index_x * ((world_width - rules->edge_width * 2) /  16) + rules->edge_width;
	vpaddd	%ymm5, %ymm0, %ymm0	 # vect_cst__324, vect__50.1501, vect__51.1502
 # .\src\main.cpp:992:         float home_loc_y = home_index_y * ((world_height - rules->edge_width * 2) /  9) + rules->edge_width;
	vcvtdq2ps	%ymm1, %ymm1	 # vect__56.1505, vect_home_loc_y_57.1506
 # .\src\main.cpp:995:         float dy = home_loc_y - ys[boid];
	vsubps	(%rdx,%rsi), %ymm1, %ymm1	 # MEM <vector(8) float> [(float *)ys_30 + ivtmp.1630_555 * 1], vect_home_loc_y_57.1506, vect_dy_63.1514
 # .\src\main.cpp:991:         float home_loc_x = home_index_x * ((world_width - rules->edge_width * 2) /  16) + rules->edge_width;
	vcvtdq2ps	%ymm0, %ymm0	 # vect__51.1502, vect_home_loc_x_52.1503
 # .\src\main.cpp:994:         float dx = home_loc_x - xs[boid];
	vsubps	(%r9,%rsi), %ymm0, %ymm0	 # MEM <vector(8) float> [(float *)xs_29 + ivtmp.1630_555 * 1], vect_home_loc_x_52.1503, vect_dx_60.1510
 # .\src\main.cpp:997:         vxs[boid] += dx * rules->homing;
	vfmadd213ps	(%rax,%rsi), %ymm4, %ymm0	 # MEM <vector(8) float> [(float *)vxs_31 + ivtmp.1630_555 * 1], vect_cst__344, vect__68.1519
	vmovups	%ymm0, (%rax,%rsi)	 # vect__68.1519, MEM <vector(8) float> [(float *)vxs_31 + ivtmp.1630_555 * 1]
 # .\src\main.cpp:998:         vys[boid] += dy * rules->homing;
	vfmadd213ps	(%rcx,%rsi), %ymm4, %ymm1	 # MEM <vector(8) float> [(float *)vys_32 + ivtmp.1630_555 * 1], vect_cst__344, vect__73.1526
	vmovups	%ymm1, (%rcx,%rsi)	 # vect__73.1526, MEM <vector(8) float> [(float *)vys_32 + ivtmp.1630_555 * 1]
 # .\src\main.cpp:1000:         xs[boid] += vxs[boid];
	vmovups	(%r9,%rsi), %ymm1	 # MEM <vector(8) float> [(float *)xs_29 + ivtmp.1630_555 * 1], tmp702
	vaddps	(%rax,%rsi), %ymm1, %ymm0	 # MEM <vector(8) float> [(float *)vxs_31 + ivtmp.1630_555 * 1], tmp702, vect__76.1535
	vmovups	%ymm0, (%r9,%rsi)	 # vect__76.1535, MEM <vector(8) float> [(float *)xs_29 + ivtmp.1630_555 * 1]
 # .\src\main.cpp:1001:         ys[boid] += vys[boid];        
	vmovups	(%rdx,%rsi), %ymm1	 # MEM <vector(8) float> [(float *)ys_30 + ivtmp.1630_555 * 1], tmp703
	vaddps	(%rcx,%rsi), %ymm1, %ymm0	 # MEM <vector(8) float> [(float *)vys_32 + ivtmp.1630_555 * 1], tmp703, vect__79.1544
	vmovups	%ymm0, (%rdx,%rsi)	 # vect__79.1544, MEM <vector(8) float> [(float *)ys_30 + ivtmp.1630_555 * 1]
	addq	$32, %rsi	 #, ivtmp.1630
	cmpq	%rdi, %rsi	 # _255, ivtmp.1630
	jne	.L171	 #,
	movl	4(%rsp), %esi	 # %sfp, _14
	movl	%esi, %ebp	 # _14, tmp.1550
	andl	$-8, %ebp	 #, tmp.1550
	movl	%ebp, 16(%rsp)	 # tmp.1550, %sfp
	movl	%ebp, %edi	 # tmp.1550,
	cmpl	%ebp, %esi	 # tmp.1550, _14
	je	.L201	 #,
	subl	%ebp, %esi	 # tmp.1550, niters.1547
	movl	%esi, 8(%rsp)	 # niters.1547, %sfp
	subl	$1, %esi	 #, tmp485
	cmpl	$2, %esi	 #, tmp485
	jbe	.L205	 #,
	vzeroupper
.L170:
 # .\src\main.cpp:988:         int home_index_y = homes[boid] / 16;
	vmovdqu	(%rbx,%rdi,4), %xmm0	 # MEM <vector(4) int> [(int *)vectp_homes.1552_437], MEM <vector(4) int> [(int *)vectp_homes.1552_437]
	vpxor	%xmm4, %xmm4, %xmm4	 # tmp492
 # .\src\main.cpp:992:         float home_loc_y = home_index_y * ((world_height - rules->edge_width * 2) /  9) + rules->edge_width;
	vmovd	%r15d, %xmm5	 # _54, _54
	leaq	0(,%rdi,4), %rsi	 #, _439
	movl	$15, %edi	 #, tmp496
	vpshufd	$0, %xmm5, %xmm5	 # _54, tmp489
	leaq	(%r9,%rsi), %r12	 #, vectp_xs.1570
	vbroadcastss	36(%r10), %xmm3	 # MEM[(const struct Rules *)_8].homing, tmp490
	vpcmpgtd	%xmm0, %xmm4, %xmm4	 # MEM <vector(4) int> [(int *)vectp_homes.1552_437], tmp492, tmp493
	vmovd	%edi, %xmm6	 # tmp496, tmp496
	leaq	(%rax,%rsi), %r13	 #, vectp_vxs.1578
	movl	8(%rsp), %edi	 # %sfp, niters.1547
	vpshufd	$0, %xmm6, %xmm6	 # tmp496, tmp495
	leaq	(%rdx,%rsi), %rbp	 #, vectp_ys.1574
	addq	%rcx, %rsi	 # vys, vectp_vys.1585
	vpand	%xmm6, %xmm4, %xmm4	 # tmp495, tmp493, vect_patt_123.1554
	vpaddd	%xmm4, %xmm0, %xmm0	 # vect_patt_123.1554, MEM <vector(4) int> [(int *)vectp_homes.1552_437], vect_patt_122.1555
	vpsrad	$4, %xmm0, %xmm1	 #, vect_patt_122.1555, vect_patt_121.1556
 # .\src\main.cpp:991:         float home_loc_x = home_index_x * ((world_width - rules->edge_width * 2) /  16) + rules->edge_width;
	vpand	%xmm6, %xmm0, %xmm0	 # tmp495, vect_patt_122.1555, vect_patt_116.1561
	vpsubd	%xmm4, %xmm0, %xmm0	 # vect_patt_123.1554, vect_patt_116.1561, vect_patt_115.1562
 # .\src\main.cpp:992:         float home_loc_y = home_index_y * ((world_height - rules->edge_width * 2) /  9) + rules->edge_width;
	vpmulld	%xmm5, %xmm1, %xmm1	 # tmp489, vect_patt_121.1556, vect__260.1566
 # .\src\main.cpp:991:         float home_loc_x = home_index_x * ((world_width - rules->edge_width * 2) /  16) + rules->edge_width;
	vmovd	%r14d, %xmm4	 # tmp386, tmp386
	vpshufd	$0, %xmm4, %xmm4	 # tmp386, tmp487
 # .\src\main.cpp:992:         float home_loc_y = home_index_y * ((world_height - rules->edge_width * 2) /  9) + rules->edge_width;
	vmovd	%r11d, %xmm5	 # _46, _46
 # .\src\main.cpp:991:         float home_loc_x = home_index_x * ((world_width - rules->edge_width * 2) /  16) + rules->edge_width;
	vpmulld	%xmm4, %xmm0, %xmm0	 # tmp487, vect_patt_115.1562, vect__257.1563
 # .\src\main.cpp:992:         float home_loc_y = home_index_y * ((world_height - rules->edge_width * 2) /  9) + rules->edge_width;
	vpshufd	$0, %xmm5, %xmm5	 # _46, tmp488
	vpaddd	%xmm5, %xmm1, %xmm1	 # tmp488, vect__260.1566, vect__261.1567
 # .\src\main.cpp:992:         float home_loc_y = home_index_y * ((world_height - rules->edge_width * 2) /  9) + rules->edge_width;
	vcvtdq2ps	%xmm1, %xmm1	 # vect__261.1567, vect_home_loc_y_262.1568
 # .\src\main.cpp:995:         float dy = home_loc_y - ys[boid];
	vsubps	0(%rbp), %xmm1, %xmm1	 # MEM <vector(4) float> [(float *)vectp_ys.1574_478], vect_home_loc_y_262.1568, vect_dy_268.1576
 # .\src\main.cpp:991:         float home_loc_x = home_index_x * ((world_width - rules->edge_width * 2) /  16) + rules->edge_width;
	vpaddd	%xmm5, %xmm0, %xmm0	 # tmp488, vect__257.1563, vect__258.1564
 # .\src\main.cpp:991:         float home_loc_x = home_index_x * ((world_width - rules->edge_width * 2) /  16) + rules->edge_width;
	vcvtdq2ps	%xmm0, %xmm0	 # vect__258.1564, vect_home_loc_x_259.1565
 # .\src\main.cpp:994:         float dx = home_loc_x - xs[boid];
	vsubps	(%r12), %xmm0, %xmm0	 # MEM <vector(4) float> [(float *)vectp_xs.1570_471], vect_home_loc_x_259.1565, vect_dx_265.1572
 # .\src\main.cpp:997:         vxs[boid] += dx * rules->homing;
	vfmadd213ps	0(%r13), %xmm3, %xmm0	 # MEM <vector(4) float> [(float *)vectp_vxs.1578_485], tmp490, vect__273.1581
	vmovups	%xmm0, 0(%r13)	 # vect__273.1581, MEM <vector(4) float> [(float *)vectp_vxs.1578_485]
 # .\src\main.cpp:998:         vys[boid] += dy * rules->homing;
	vfmadd213ps	(%rsi), %xmm3, %xmm1	 # MEM <vector(4) float> [(float *)vectp_vys.1585_501], tmp490, vect_dy_268.1576
	vmovups	%xmm1, (%rsi)	 # vect__279.1588, MEM <vector(4) float> [(float *)vectp_vys.1585_501]
 # .\src\main.cpp:1000:         xs[boid] += vxs[boid];
	vmovups	0(%r13), %xmm0	 # MEM <vector(4) float> [(float *)vectp_vxs.1578_485], vect__282.1596
 # .\src\main.cpp:1000:         xs[boid] += vxs[boid];
	vaddps	(%r12), %xmm0, %xmm0	 # MEM <vector(4) float> [(float *)vectp_xs.1570_471], vect__282.1596, vect__283.1597
	vmovups	%xmm0, (%r12)	 # vect__283.1597, MEM <vector(4) float> [(float *)vectp_xs.1570_471]
 # .\src\main.cpp:1001:         ys[boid] += vys[boid];        
	vmovups	(%rsi), %xmm0	 # MEM <vector(4) float> [(float *)vectp_vys.1585_501], vect__286.1605
 # .\src\main.cpp:1001:         ys[boid] += vys[boid];        
	vaddps	0(%rbp), %xmm0, %xmm0	 # MEM <vector(4) float> [(float *)vectp_ys.1574_478], vect__286.1605, vect__287.1606
	movl	%edi, %esi	 # niters.1547, niters_vector_mult_vf.1549
	andl	$-4, %esi	 #, niters_vector_mult_vf.1549
	addl	%esi, 16(%rsp)	 # niters_vector_mult_vf.1549, %sfp
	andl	$3, %edi	 #, niters.1547
	vmovups	%xmm0, 0(%rbp)	 # vect__287.1606, MEM <vector(4) float> [(float *)vectp_ys.1574_478]
	je	.L173	 #,
.L175:
 # .\src\main.cpp:988:         int home_index_y = homes[boid] / 16;
	movslq	16(%rsp), %rsi	 # %sfp, tmp.1550
 # .\src\main.cpp:988:         int home_index_y = homes[boid] / 16;
	leaq	0(,%rsi,4), %r13	 #, _42
	movl	(%rbx,%rsi,4), %esi	 # *_43, _44
 # .\src\main.cpp:994:         float dx = home_loc_x - xs[boid];
	leaq	(%r9,%r13), %r12	 #, _59
 # .\src\main.cpp:995:         float dy = home_loc_y - ys[boid];
	leaq	(%rdx,%r13), %rbp	 #, _62
 # .\src\main.cpp:988:         int home_index_y = homes[boid] / 16;
	testl	%esi, %esi	 # _44
	leal	15(%rsi), %edi	 #, tmp530
	cmovns	%esi, %edi	 # tmp530,, _44, _44
	sarl	$4, %edi	 #, home_index_y
 # .\src\main.cpp:992:         float home_loc_y = home_index_y * ((world_height - rules->edge_width * 2) /  9) + rules->edge_width;
	imull	%r15d, %edi	 # _54, tmp532
 # .\src\main.cpp:992:         float home_loc_y = home_index_y * ((world_height - rules->edge_width * 2) /  9) + rules->edge_width;
	addl	%r11d, %edi	 # _46, tmp533
 # .\src\main.cpp:992:         float home_loc_y = home_index_y * ((world_height - rules->edge_width * 2) /  9) + rules->edge_width;
	vcvtsi2ssl	%edi, %xmm2, %xmm0	 # tmp533, tmp632, tmp633
 # .\src\main.cpp:997:         vxs[boid] += dx * rules->homing;
	leaq	(%rax,%r13), %rdi	 #, _65
	movq	%rdi, 8(%rsp)	 # _65, %sfp
 # .\src\main.cpp:989:         int home_index_x = homes[boid] % 16;
	movl	%esi, %edi	 # _44, tmp536
 # .\src\main.cpp:995:         float dy = home_loc_y - ys[boid];
	vsubss	0(%rbp), %xmm0, %xmm0	 # *_62, home_loc_y, dy
 # .\src\main.cpp:989:         int home_index_x = homes[boid] % 16;
	sarl	$31, %edi	 #, tmp536
	shrl	$28, %edi	 #, tmp537
	addl	%edi, %esi	 # tmp537, tmp538
	andl	$15, %esi	 #, tmp539
	subl	%edi, %esi	 # tmp537, home_index_x
 # .\src\main.cpp:997:         vxs[boid] += dx * rules->homing;
	movq	8(%rsp), %rdi	 # %sfp, _65
 # .\src\main.cpp:991:         float home_loc_x = home_index_x * ((world_width - rules->edge_width * 2) /  16) + rules->edge_width;
	imull	%r14d, %esi	 # tmp386, tmp541
 # .\src\main.cpp:997:         vxs[boid] += dx * rules->homing;
	vmovss	(%rdi), %xmm3	 # *_65, tmp722
 # .\src\main.cpp:991:         float home_loc_x = home_index_x * ((world_width - rules->edge_width * 2) /  16) + rules->edge_width;
	addl	%r11d, %esi	 # _46, tmp542
 # .\src\main.cpp:991:         float home_loc_x = home_index_x * ((world_width - rules->edge_width * 2) /  16) + rules->edge_width;
	vcvtsi2ssl	%esi, %xmm2, %xmm1	 # tmp542, tmp632, tmp634
 # .\src\main.cpp:994:         float dx = home_loc_x - xs[boid];
	vsubss	(%r12), %xmm1, %xmm1	 # *_59, home_loc_x, dx
 # .\src\main.cpp:997:         vxs[boid] += dx * rules->homing;
	vfmadd132ss	36(%r10), %xmm3, %xmm1	 # MEM[(const struct Rules *)_8].homing, tmp722, _69
 # .\src\main.cpp:998:         vys[boid] += dy * rules->homing;
	leaq	(%rcx,%r13), %rsi	 #, _71
 # .\src\main.cpp:997:         vxs[boid] += dx * rules->homing;
	vmovss	%xmm1, (%rdi)	 # _69, *_65
 # .\src\main.cpp:998:         vys[boid] += dy * rules->homing;
	vmovss	(%rsi), %xmm3	 # *_71, tmp724
	vfmadd132ss	36(%r10), %xmm3, %xmm0	 # MEM[(const struct Rules *)_8].homing, tmp724, _75
	vmovss	%xmm0, (%rsi)	 # _75, *_71
 # .\src\main.cpp:1000:         xs[boid] += vxs[boid];
	vmovss	(%r12), %xmm0	 # *_59, *_59
	vaddss	(%rdi), %xmm0, %xmm0	 # *_65, *_59, tmp545
 # .\src\main.cpp:987:     for (Boid boid = 0; boid < boid_list->m_size; boid++) {     
	movl	16(%rsp), %edi	 # %sfp, tmp.1550
 # .\src\main.cpp:1000:         xs[boid] += vxs[boid];
	vmovss	%xmm0, (%r12)	 # tmp545, *_59
 # .\src\main.cpp:1001:         ys[boid] += vys[boid];        
	vmovss	0(%rbp), %xmm0	 # *_62, *_62
	vaddss	(%rsi), %xmm0, %xmm0	 # *_71, *_62, tmp547
 # .\src\main.cpp:987:     for (Boid boid = 0; boid < boid_list->m_size; boid++) {     
	leal	1(%rdi), %esi	 #, boid
 # .\src\main.cpp:1001:         ys[boid] += vys[boid];        
	vmovss	%xmm0, 0(%rbp)	 # tmp547, *_62
 # .\src\main.cpp:987:     for (Boid boid = 0; boid < boid_list->m_size; boid++) {     
	cmpl	%esi, 4(%rsp)	 # boid, %sfp
	jle	.L173	 #,
 # .\src\main.cpp:988:         int home_index_y = homes[boid] / 16;
	movl	4(%rbx,%r13), %esi	 # *_259, _260
	leaq	4(%r13), %rdi	 #, _258
 # .\src\main.cpp:994:         float dx = home_loc_x - xs[boid];
	leaq	(%r9,%rdi), %rbp	 #, _269
 # .\src\main.cpp:995:         float dy = home_loc_y - ys[boid];
	leaq	(%rdx,%rdi), %r12	 #, _272
 # .\src\main.cpp:988:         int home_index_y = homes[boid] / 16;
	testl	%esi, %esi	 # _260
 # .\src\main.cpp:994:         float dx = home_loc_x - xs[boid];
	movq	%rbp, 8(%rsp)	 # _269, %sfp
 # .\src\main.cpp:988:         int home_index_y = homes[boid] / 16;
	leal	15(%rsi), %ebp	 #, tmp552
	cmovns	%esi, %ebp	 # tmp552,, _260, _260
	sarl	$4, %ebp	 #, home_index_y
 # .\src\main.cpp:992:         float home_loc_y = home_index_y * ((world_height - rules->edge_width * 2) /  9) + rules->edge_width;
	imull	%r15d, %ebp	 # _54, tmp554
 # .\src\main.cpp:992:         float home_loc_y = home_index_y * ((world_height - rules->edge_width * 2) /  9) + rules->edge_width;
	addl	%r11d, %ebp	 # _46, tmp555
 # .\src\main.cpp:992:         float home_loc_y = home_index_y * ((world_height - rules->edge_width * 2) /  9) + rules->edge_width;
	vcvtsi2ssl	%ebp, %xmm2, %xmm0	 # tmp555, tmp632, tmp635
 # .\src\main.cpp:997:         vxs[boid] += dx * rules->homing;
	leaq	(%rax,%rdi), %rbp	 #, _276
 # .\src\main.cpp:998:         vys[boid] += dy * rules->homing;
	addq	%rcx, %rdi	 # vys, _283
 # .\src\main.cpp:997:         vxs[boid] += dx * rules->homing;
	movq	%rbp, 24(%rsp)	 # _276, %sfp
 # .\src\main.cpp:989:         int home_index_x = homes[boid] % 16;
	movl	%esi, %ebp	 # _260, tmp558
 # .\src\main.cpp:995:         float dy = home_loc_y - ys[boid];
	vsubss	(%r12), %xmm0, %xmm0	 # *_272, home_loc_y, dy
 # .\src\main.cpp:989:         int home_index_x = homes[boid] % 16;
	sarl	$31, %ebp	 #, tmp558
	shrl	$28, %ebp	 #, tmp559
	addl	%ebp, %esi	 # tmp559, tmp560
	andl	$15, %esi	 #, tmp561
	subl	%ebp, %esi	 # tmp559, home_index_x
 # .\src\main.cpp:994:         float dx = home_loc_x - xs[boid];
	movq	8(%rsp), %rbp	 # %sfp, _269
 # .\src\main.cpp:991:         float home_loc_x = home_index_x * ((world_width - rules->edge_width * 2) /  16) + rules->edge_width;
	imull	%r14d, %esi	 # tmp386, tmp563
 # .\src\main.cpp:991:         float home_loc_x = home_index_x * ((world_width - rules->edge_width * 2) /  16) + rules->edge_width;
	addl	%r11d, %esi	 # _46, tmp564
 # .\src\main.cpp:991:         float home_loc_x = home_index_x * ((world_width - rules->edge_width * 2) /  16) + rules->edge_width;
	vcvtsi2ssl	%esi, %xmm2, %xmm1	 # tmp564, tmp632, tmp636
 # .\src\main.cpp:997:         vxs[boid] += dx * rules->homing;
	movq	24(%rsp), %rsi	 # %sfp, _276
 # .\src\main.cpp:994:         float dx = home_loc_x - xs[boid];
	vsubss	0(%rbp), %xmm1, %xmm1	 # *_269, home_loc_x, dx
 # .\src\main.cpp:997:         vxs[boid] += dx * rules->homing;
	vmovss	(%rsi), %xmm3	 # *_276, tmp733
	vfmadd132ss	36(%r10), %xmm3, %xmm1	 # MEM[(const struct Rules *)_8].homing, tmp733, _281
	vmovss	%xmm1, (%rsi)	 # _281, *_276
 # .\src\main.cpp:998:         vys[boid] += dy * rules->homing;
	vmovss	(%rdi), %xmm3	 # *_283, tmp735
	vfmadd132ss	36(%r10), %xmm3, %xmm0	 # MEM[(const struct Rules *)_8].homing, tmp735, _289
	vmovss	%xmm0, (%rdi)	 # _289, *_283
 # .\src\main.cpp:1000:         xs[boid] += vxs[boid];
	vmovss	0(%rbp), %xmm0	 # *_269, *_269
	vaddss	(%rsi), %xmm0, %xmm0	 # *_276, *_269, tmp567
 # .\src\main.cpp:987:     for (Boid boid = 0; boid < boid_list->m_size; boid++) {     
	movl	16(%rsp), %esi	 # %sfp, tmp.1550
 # .\src\main.cpp:1000:         xs[boid] += vxs[boid];
	vmovss	%xmm0, 0(%rbp)	 # tmp567, *_269
 # .\src\main.cpp:1001:         ys[boid] += vys[boid];        
	vmovss	(%r12), %xmm0	 # *_272, *_272
	vaddss	(%rdi), %xmm0, %xmm0	 # *_283, *_272, tmp569
 # .\src\main.cpp:987:     for (Boid boid = 0; boid < boid_list->m_size; boid++) {     
	addl	$2, %esi	 #, tmp.1550
 # .\src\main.cpp:1001:         ys[boid] += vys[boid];        
	vmovss	%xmm0, (%r12)	 # tmp569, *_272
 # .\src\main.cpp:987:     for (Boid boid = 0; boid < boid_list->m_size; boid++) {     
	cmpl	%esi, 4(%rsp)	 # boid, %sfp
	jle	.L173	 #,
 # .\src\main.cpp:988:         int home_index_y = homes[boid] / 16;
	movl	8(%rbx,%r13), %ebx	 # *_389, _390
	leaq	8(%r13), %rsi	 #, _388
 # .\src\main.cpp:994:         float dx = home_loc_x - xs[boid];
	addq	%rsi, %r9	 # _388, _399
 # .\src\main.cpp:995:         float dy = home_loc_y - ys[boid];
	addq	%rsi, %rdx	 # _388, _402
 # .\src\main.cpp:988:         int home_index_y = homes[boid] / 16;
	leal	15(%rbx), %edi	 #, tmp574
	testl	%ebx, %ebx	 # _390
	cmovns	%ebx, %edi	 # tmp574,, _390, _390
 # .\src\main.cpp:997:         vxs[boid] += dx * rules->homing;
	addq	%rsi, %rax	 # _388, _405
 # .\src\main.cpp:998:         vys[boid] += dy * rules->homing;
	addq	%rcx, %rsi	 # vys, _411
 # .\src\main.cpp:997:         vxs[boid] += dx * rules->homing;
	vmovss	(%rax), %xmm3	 # *_405, tmp742
 # .\src\main.cpp:988:         int home_index_y = homes[boid] / 16;
	sarl	$4, %edi	 #, home_index_y
 # .\src\main.cpp:992:         float home_loc_y = home_index_y * ((world_height - rules->edge_width * 2) /  9) + rules->edge_width;
	imull	%r15d, %edi	 # _54, tmp576
 # .\src\main.cpp:992:         float home_loc_y = home_index_y * ((world_height - rules->edge_width * 2) /  9) + rules->edge_width;
	addl	%r11d, %edi	 # _46, tmp577
 # .\src\main.cpp:992:         float home_loc_y = home_index_y * ((world_height - rules->edge_width * 2) /  9) + rules->edge_width;
	vcvtsi2ssl	%edi, %xmm2, %xmm0	 # tmp577, tmp632, tmp637
 # .\src\main.cpp:989:         int home_index_x = homes[boid] % 16;
	movl	%ebx, %edi	 # _390, tmp580
 # .\src\main.cpp:995:         float dy = home_loc_y - ys[boid];
	vsubss	(%rdx), %xmm0, %xmm0	 # *_402, home_loc_y, dy
 # .\src\main.cpp:989:         int home_index_x = homes[boid] % 16;
	sarl	$31, %edi	 #, tmp580
	shrl	$28, %edi	 #, tmp581
	addl	%edi, %ebx	 # tmp581, tmp582
	andl	$15, %ebx	 #, tmp583
	subl	%edi, %ebx	 # tmp581, home_index_x
 # .\src\main.cpp:991:         float home_loc_x = home_index_x * ((world_width - rules->edge_width * 2) /  16) + rules->edge_width;
	imull	%r14d, %ebx	 # tmp386, tmp585
 # .\src\main.cpp:991:         float home_loc_x = home_index_x * ((world_width - rules->edge_width * 2) /  16) + rules->edge_width;
	addl	%ebx, %r11d	 # tmp585, tmp586
 # .\src\main.cpp:991:         float home_loc_x = home_index_x * ((world_width - rules->edge_width * 2) /  16) + rules->edge_width;
	vcvtsi2ssl	%r11d, %xmm2, %xmm2	 # tmp586, tmp632, tmp638
 # .\src\main.cpp:994:         float dx = home_loc_x - xs[boid];
	vsubss	(%r9), %xmm2, %xmm2	 # *_399, home_loc_x, dx
 # .\src\main.cpp:997:         vxs[boid] += dx * rules->homing;
	vfmadd132ss	36(%r10), %xmm3, %xmm2	 # MEM[(const struct Rules *)_8].homing, tmp742, _409
	vmovss	%xmm2, (%rax)	 # _409, *_405
 # .\src\main.cpp:998:         vys[boid] += dy * rules->homing;
	vmovss	(%rsi), %xmm3	 # *_411, tmp743
	vfmadd132ss	36(%r10), %xmm3, %xmm0	 # MEM[(const struct Rules *)_8].homing, tmp743, _415
	vmovss	%xmm0, (%rsi)	 # _415, *_411
 # .\src\main.cpp:1000:         xs[boid] += vxs[boid];
	vmovss	(%r9), %xmm0	 # *_399, *_399
	vaddss	(%rax), %xmm0, %xmm0	 # *_405, *_399, tmp589
	vmovss	%xmm0, (%r9)	 # tmp589, *_399
 # .\src\main.cpp:1001:         ys[boid] += vys[boid];        
	vmovss	(%rdx), %xmm0	 # *_402, *_402
	vaddss	(%rsi), %xmm0, %xmm0	 # *_411, *_402, tmp591
	vmovss	%xmm0, (%rdx)	 # tmp591, *_402
	.p2align 4,,10
	.p2align 3
.L173:
	leaq	66144(%r8), %rax	 #, _15
	.p2align 4,,10
	.p2align 3
.L168:
 # C:/msys64/ucrt64/include/psdk_inc/intrin-impl.h:1800: __buildbittesti(_interlockedbittestandset, __LONG32, "lock bts{l %[Offset],%[Base] | %[Base],%[Offset]}" __FLAGSET, "I")
/APP
 # 1800 "C:/msys64/ucrt64/include/psdk_inc/intrin-impl.h" 1
	lock btsl $0,(%rax) 	 #, MEM[(volatile long int *)_15]
 # 0 "" 2
 # .\src\.\task_master\lock.h:40:         while (_interlockedbittestandset(&lock_internal, 0)) {}
/NO_APP
	jc	.L168	 #,
 # .\src\.\task_master\taskmaster.h:87:         for (int i = 0; i < num_threads; i++) {
	movl	8(%r8), %r10d	 # _2(D)->num_threads, _34
 # .\src\.\task_master\taskmaster.h:87:         for (int i = 0; i < num_threads; i++) {
	testl	%r10d, %r10d	 # _34
	je	.L182	 #,
 # .\src\.\task_master\ringbuffer.h:19:         if (next != tail)
	movq	65560(%r8), %r11	 # MEM[(struct RingBuffer *)_2(D) + 16B].tail, _20
 # .\src\.\task_master\ringbuffer.h:18:         size_t next = (head + 1) % capacity;
	movq	65552(%r8), %rax	 # MEM[(struct RingBuffer *)_2(D) + 16B].head, next
 # .\src\.\task_master\taskmaster.h:87:         for (int i = 0; i < num_threads; i++) {
	xorl	%ecx, %ecx	 # i
 # .\src\.\task_master\ringbuffer.h:21:             data[head] = item;
	vpxor	%xmm0, %xmm0, %xmm0	 # tmp629
.L181:
	movq	%rax, %rdx	 # next, prephitmp_287
 # .\src\.\task_master\ringbuffer.h:18:         size_t next = (head + 1) % capacity;
	leaq	1(%rax), %rax	 #, tmp617
 # .\src\.\task_master\ringbuffer.h:18:         size_t next = (head + 1) % capacity;
	andl	$2047, %eax	 #, next
 # .\src\.\task_master\ringbuffer.h:19:         if (next != tail)
	cmpq	%r11, %rax	 # _20, next
	je	.L182	 #,
 # .\src\.\task_master\ringbuffer.h:21:             data[head] = item;
	salq	$5, %rdx	 #, tmp618
 # .\src\.\task_master\taskmaster.h:87:         for (int i = 0; i < num_threads; i++) {
	addl	$1, %ecx	 #, i
 # .\src\.\task_master\ringbuffer.h:21:             data[head] = item;
	leaq	(%r8,%rdx), %r9	 #, tmp619
	movl	$4, 16(%r9)	 #, MEM <unsigned int> [(struct Task *)_21]
	vmovdqu	%xmm0, 24(%r8,%rdx)	 # tmp629, MEM <vector(2) long long unsigned int> [(void *)vectp.1613_520]
	movq	$0, 40(%r9)	 #, MEM[(struct RingBuffer *)_2(D) + 16B].data[prephitmp_287].on_complete
 # .\src\.\task_master\ringbuffer.h:22:             head = next;
	movq	%rax, 65552(%r8)	 # next, MEM[(struct RingBuffer *)_2(D) + 16B].head
 # .\src\.\task_master\taskmaster.h:87:         for (int i = 0; i < num_threads; i++) {
	cmpl	%r10d, %ecx	 # _34, i
	jne	.L181	 #,
.L182:
 # C:/msys64/ucrt64/include/psdk_inc/intrin-impl.h:1809: __buildbittesti(_interlockedbittestandreset, __LONG32, "lock btr{l %[Offset],%[Base] | %[Base],%[Offset]}" __FLAGSET, "I")
/APP
 # 1809 "C:/msys64/ucrt64/include/psdk_inc/intrin-impl.h" 1
	lock btrl $0,66144(%r8) 	 #, MEM[(volatile long int *)_15]
 # 0 "" 2
 # .\src\main.cpp:1231:                                 }),
/NO_APP
	vmovups	48(%rsp), %xmm6	 #,
	vmovups	64(%rsp), %xmm7	 #,
	vmovups	80(%rsp), %xmm8	 #,
	vmovups	96(%rsp), %xmm9	 #,
	addq	$120, %rsp	 #,
	popq	%rbx	 #
	popq	%rsi	 #
	popq	%rdi	 #
	popq	%rbp	 #
	popq	%r12	 #
	popq	%r13	 #
	popq	%r14	 #
	popq	%r15	 #
	ret	
	.p2align 4,,10
	.p2align 3
.L204:
	movslq	4(%rsp), %rdi	 # %sfp, _14
	movq	%rdi, 32(%rsp)	 # _14, %sfp
.L169:
	movq	32(%rsp), %rbp	 # %sfp, _14
 # .\src\main.cpp:987:     for (Boid boid = 0; boid < boid_list->m_size; boid++) {     
	xorl	%esi, %esi	 # ivtmp.1626
	salq	$2, %rbp	 #, _14
	.p2align 4,,10
	.p2align 3
.L177:
 # .\src\main.cpp:988:         int home_index_y = homes[boid] / 16;
	movl	(%rbx,%rsi), %edi	 # MEM[(int *)homes_33 + ivtmp.1626_533 * 1], _211
 # .\src\main.cpp:997:         vxs[boid] += dx * rules->homing;
	vmovss	(%rax,%rsi), %xmm7	 # MEM[(float *)vxs_31 + ivtmp.1626_533 * 1], tmp746
 # .\src\main.cpp:988:         int home_index_y = homes[boid] / 16;
	testl	%edi, %edi	 # _211
	leal	15(%rdi), %r12d	 #, tmp596
	cmovns	%edi, %r12d	 # tmp596,, _211, _211
	sarl	$4, %r12d	 #, home_index_y
 # .\src\main.cpp:992:         float home_loc_y = home_index_y * ((world_height - rules->edge_width * 2) /  9) + rules->edge_width;
	imull	%r15d, %r12d	 # _54, tmp598
 # .\src\main.cpp:992:         float home_loc_y = home_index_y * ((world_height - rules->edge_width * 2) /  9) + rules->edge_width;
	addl	%r11d, %r12d	 # _46, tmp599
 # .\src\main.cpp:992:         float home_loc_y = home_index_y * ((world_height - rules->edge_width * 2) /  9) + rules->edge_width;
	vcvtsi2ssl	%r12d, %xmm2, %xmm0	 # tmp599, tmp632, tmp639
 # .\src\main.cpp:989:         int home_index_x = homes[boid] % 16;
	movl	%edi, %r12d	 # _211, tmp602
 # .\src\main.cpp:995:         float dy = home_loc_y - ys[boid];
	vsubss	(%rdx,%rsi), %xmm0, %xmm0	 # MEM[(float *)ys_30 + ivtmp.1626_533 * 1], home_loc_y, dy
 # .\src\main.cpp:989:         int home_index_x = homes[boid] % 16;
	sarl	$31, %r12d	 #, tmp602
	shrl	$28, %r12d	 #, tmp603
	addl	%r12d, %edi	 # tmp603, tmp604
	andl	$15, %edi	 #, tmp605
	subl	%r12d, %edi	 # tmp603, home_index_x
 # .\src\main.cpp:991:         float home_loc_x = home_index_x * ((world_width - rules->edge_width * 2) /  16) + rules->edge_width;
	imull	%r14d, %edi	 # tmp386, tmp607
 # .\src\main.cpp:991:         float home_loc_x = home_index_x * ((world_width - rules->edge_width * 2) /  16) + rules->edge_width;
	addl	%r11d, %edi	 # _46, tmp608
 # .\src\main.cpp:991:         float home_loc_x = home_index_x * ((world_width - rules->edge_width * 2) /  16) + rules->edge_width;
	vcvtsi2ssl	%edi, %xmm2, %xmm1	 # tmp608, tmp632, tmp640
 # .\src\main.cpp:994:         float dx = home_loc_x - xs[boid];
	vsubss	(%r9,%rsi), %xmm1, %xmm1	 # MEM[(float *)xs_29 + ivtmp.1626_533 * 1], home_loc_x, dx
 # .\src\main.cpp:997:         vxs[boid] += dx * rules->homing;
	vfmadd132ss	36(%r10), %xmm7, %xmm1	 # MEM[(const struct Rules *)_8].homing, tmp746, _230
	vmovss	%xmm1, (%rax,%rsi)	 # _230, MEM[(float *)vxs_31 + ivtmp.1626_533 * 1]
 # .\src\main.cpp:998:         vys[boid] += dy * rules->homing;
	vmovss	(%rcx,%rsi), %xmm6	 # MEM[(float *)vys_32 + ivtmp.1626_533 * 1], tmp747
	vfmadd132ss	36(%r10), %xmm6, %xmm0	 # MEM[(const struct Rules *)_8].homing, tmp747, _236
	vmovss	%xmm0, (%rcx,%rsi)	 # _236, MEM[(float *)vys_32 + ivtmp.1626_533 * 1]
 # .\src\main.cpp:1000:         xs[boid] += vxs[boid];
	vmovss	(%r9,%rsi), %xmm0	 # MEM[(float *)xs_29 + ivtmp.1626_533 * 1], MEM[(float *)xs_29 + ivtmp.1626_533 * 1]
	vaddss	(%rax,%rsi), %xmm0, %xmm0	 # MEM[(float *)vxs_31 + ivtmp.1626_533 * 1], MEM[(float *)xs_29 + ivtmp.1626_533 * 1], tmp611
	vmovss	%xmm0, (%r9,%rsi)	 # tmp611, MEM[(float *)xs_29 + ivtmp.1626_533 * 1]
 # .\src\main.cpp:1001:         ys[boid] += vys[boid];        
	vmovss	(%rdx,%rsi), %xmm0	 # MEM[(float *)ys_30 + ivtmp.1626_533 * 1], MEM[(float *)ys_30 + ivtmp.1626_533 * 1]
	vaddss	(%rcx,%rsi), %xmm0, %xmm0	 # MEM[(float *)vys_32 + ivtmp.1626_533 * 1], MEM[(float *)ys_30 + ivtmp.1626_533 * 1], tmp613
	vmovss	%xmm0, (%rdx,%rsi)	 # tmp613, MEM[(float *)ys_30 + ivtmp.1626_533 * 1]
 # .\src\main.cpp:987:     for (Boid boid = 0; boid < boid_list->m_size; boid++) {     
	addq	$4, %rsi	 #, ivtmp.1626
	cmpq	%rbp, %rsi	 # _552, ivtmp.1626
	jne	.L177	 #,
	jmp	.L173	 #
.L201:
	vzeroupper
	jmp	.L173	 #
.L183:
 # .\src\main.cpp:987:     for (Boid boid = 0; boid < boid_list->m_size; boid++) {     
	movl	$0, 16(%rsp)	 #, %sfp
 # .\src\main.cpp:992:         float home_loc_y = home_index_y * ((world_height - rules->edge_width * 2) /  9) + rules->edge_width;
	xorl	%edi, %edi	 #
	jmp	.L170	 #
.L205:
	vzeroupper
	jmp	.L175	 #
	.seh_endproc
	.section	.text$_ZNSt13__future_base21_Async_state_commonV2D1Ev,"x"
	.linkonce discard
	.align 2
	.p2align 4
	.globl	_ZNSt13__future_base21_Async_state_commonV2D1Ev
	.def	_ZNSt13__future_base21_Async_state_commonV2D1Ev;	.scl	2;	.type	32;	.endef
	.seh_proc	_ZNSt13__future_base21_Async_state_commonV2D1Ev
_ZNSt13__future_base21_Async_state_commonV2D1Ev:
.LFB14614:
	pushq	%rbx	 #
	.seh_pushreg	%rbx
	subq	$32, %rsp	 #,
	.seh_stackalloc	32
	.seh_endprologue
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1718:     ~_Async_state_commonV2() = default;
	leaq	16+_ZTVNSt13__future_base21_Async_state_commonV2E(%rip), %rax	 #, tmp101
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_thread.h:172:       if (joinable())
	cmpq	$0, 48(%rcx)	 #, MEM[(const struct thread *)this_3(D) + 48B]._M_id._M_thread
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1718:     ~_Async_state_commonV2() = default;
	movq	%rax, (%rcx)	 # tmp101, this_3(D)->D.152781._vptr._State_baseV2
	movq	%rcx, %rbx	 # tmp99, this
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_thread.h:172:       if (joinable())
	jne	.L214	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/future:344:       virtual ~_State_baseV2() = default;
	leaq	16+_ZTVNSt13__future_base13_State_baseV2E(%rip), %rax	 #, tmp102
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/atomic_futex.h:288:   class __atomic_futex_unsigned
	leaq	32(%rcx), %rcx	 #, tmp94
 # C:/msys64/ucrt64/include/c++/13.1.0/future:344:       virtual ~_State_baseV2() = default;
	movq	%rax, -32(%rcx)	 # tmp102, MEM[(struct _State_baseV2 *)this_3(D)]._vptr._State_baseV2
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/atomic_futex.h:288:   class __atomic_futex_unsigned
	call	_ZNSt18condition_variableD1Ev	 #
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_mutex.h:77:     ~__mutex_base() noexcept { __gthread_mutex_destroy(&_M_mutex); }
	leaq	24(%rbx), %rcx	 #, tmp95
 # C:/msys64/ucrt64/include/c++/13.1.0/x86_64-w64-mingw32/bits/gthr-default.h:740:     return __gthrw_(pthread_mutex_destroy) (__mutex);
	call	pthread_mutex_destroy	 #
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/unique_ptr.h:403: 	if (__ptr != nullptr)
	movq	8(%rbx), %rcx	 # MEM[(struct _Result_base * &)this_3(D) + 8], _12
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/unique_ptr.h:403: 	if (__ptr != nullptr)
	testq	%rcx, %rcx	 # _12
	je	.L213	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/future:229: 	void operator()(_Result_base* __fr) const { __fr->_M_destroy(); }
	movq	(%rcx), %rax	 # _12->_vptr._Result_base, _13
	leaq	_ZNSt13__future_base7_ResultIvE10_M_destroyEv(%rip), %r8	 #, tmp97
	movq	(%rax), %rdx	 # *_13, _14
	cmpq	%r8, %rdx	 # tmp97, _14
	jne	.L209	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/future:672:       void _M_destroy() { delete this; }
	movq	16(%rax), %rax	 # MEM[(int (*) () *)_13 + 16B], MEM[(int (*) () *)_13 + 16B]
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1718:     ~_Async_state_commonV2() = default;
	addq	$32, %rsp	 #,
	popq	%rbx	 #
 # C:/msys64/ucrt64/include/c++/13.1.0/future:672:       void _M_destroy() { delete this; }
	rex.W jmp	*%rax	 # MEM[(int (*) () *)_13 + 16B]
	.p2align 4,,10
	.p2align 3
.L209:
 # C:/msys64/ucrt64/include/c++/13.1.0/future:229: 	void operator()(_Result_base* __fr) const { __fr->_M_destroy(); }
	call	*%rdx	 # _14
	nop	
.L213:
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1718:     ~_Async_state_commonV2() = default;
	addq	$32, %rsp	 #,
	popq	%rbx	 #
	ret	
.L214:
 # C:/msys64/ucrt64/include/c++/13.1.0/x86_64-w64-mingw32/bits/c++config.h:322:     terminate();
	call	_ZSt9terminatev	 #
	nop	
	.seh_handler	__gxx_personality_seh0, @unwind, @except
	.seh_handlerdata
.LLSDA14614:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE14614-.LLSDACSB14614
.LLSDACSB14614:
.LLSDACSE14614:
	.section	.text$_ZNSt13__future_base21_Async_state_commonV2D1Ev,"x"
	.linkonce discard
	.seh_endproc
	.section	.text$_Z11jump_runneribPK7BoidMapPK5RulesPK8BoidList,"x"
	.linkonce discard
	.p2align 4
	.globl	_Z11jump_runneribPK7BoidMapPK5RulesPK8BoidList
	.def	_Z11jump_runneribPK7BoidMapPK5RulesPK8BoidList;	.scl	2;	.type	32;	.endef
	.seh_proc	_Z11jump_runneribPK7BoidMapPK5RulesPK8BoidList
_Z11jump_runneribPK7BoidMapPK5RulesPK8BoidList:
.LFB12614:
	pushq	%r15	 #
	.seh_pushreg	%r15
	pushq	%r14	 #
	.seh_pushreg	%r14
	pushq	%r13	 #
	.seh_pushreg	%r13
	pushq	%r12	 #
	.seh_pushreg	%r12
	pushq	%rbp	 #
	.seh_pushreg	%rbp
	pushq	%rdi	 #
	.seh_pushreg	%rdi
	pushq	%rsi	 #
	.seh_pushreg	%rsi
	pushq	%rbx	 #
	.seh_pushreg	%rbx
	subq	$680, %rsp	 #,
	.seh_stackalloc	680
	vmovups	%xmm6, 512(%rsp)	 #,
	.seh_savexmm	%xmm6, 512
	vmovups	%xmm7, 528(%rsp)	 #,
	.seh_savexmm	%xmm7, 528
	vmovups	%xmm8, 544(%rsp)	 #,
	.seh_savexmm	%xmm8, 544
	vmovups	%xmm9, 560(%rsp)	 #,
	.seh_savexmm	%xmm9, 560
	vmovups	%xmm10, 576(%rsp)	 #,
	.seh_savexmm	%xmm10, 576
	vmovups	%xmm11, 592(%rsp)	 #,
	.seh_savexmm	%xmm11, 592
	vmovups	%xmm12, 608(%rsp)	 #,
	.seh_savexmm	%xmm12, 608
	vmovups	%xmm13, 624(%rsp)	 #,
	.seh_savexmm	%xmm13, 624
	vmovups	%xmm14, 640(%rsp)	 #,
	.seh_savexmm	%xmm14, 640
	vmovups	%xmm15, 656(%rsp)	 #,
	.seh_savexmm	%xmm15, 656
	.seh_endprologue
 # .\src\main.cpp:1046:     for (int y = thread_num * 2 + offset; y < boid_map->m_ysize; y += 2 * NUM_THREADS) {
	movl	(%r8), %r13d	 # boid_map_14(D)->m_ysize, prephitmp_81
 # .\src\main.cpp:1045: inline void jump_runner(int thread_num, bool offset, const BoidMap *boid_map, const Rules *rules, const BoidList *boid_list) {
	movq	784(%rsp), %rbp	 # boid_list, boid_list
 # .\src\main.cpp:1046:     for (int y = thread_num * 2 + offset; y < boid_map->m_ysize; y += 2 * NUM_THREADS) {
	movzbl	%dl, %edx	 # tmp788, offset
 # .\src\main.cpp:1045: inline void jump_runner(int thread_num, bool offset, const BoidMap *boid_map, const Rules *rules, const BoidList *boid_list) {
	movq	%r9, %r11	 # tmp790, rules
 # .\src\main.cpp:1046:     for (int y = thread_num * 2 + offset; y < boid_map->m_ysize; y += 2 * NUM_THREADS) {
	leal	(%rdx,%rcx,2), %r9d	 #, y
 # .\src\main.cpp:1046:     for (int y = thread_num * 2 + offset; y < boid_map->m_ysize; y += 2 * NUM_THREADS) {
	cmpl	%r13d, %r9d	 # prephitmp_81, y
	jge	.L244	 #,
 # .\src\main.cpp:1006:     for (int x = 0; x < boid_map->m_xsize; x++) {
	movl	4(%r8), %ebx	 # boid_map_14(D)->m_xsize, _20
	movl	%r13d, %esi	 # prephitmp_81, prephitmp_81
	movq	%rbp, %rdi	 # boid_list, boid_list
	movq	%r11, %r10	 # rules, rules
	movq	%r8, %rbp	 # boid_map, boid_map
	movl	%ebx, %r13d	 # _20, _20
.L217:
 # .\src\main.cpp:1006:     for (int x = 0; x < boid_map->m_xsize; x++) {
	testl	%r13d, %r13d	 # _20
	jle	.L244	 #,
	movq	%r10, 776(%rsp)	 # rules, rules
	movl	%esi, %r10d	 # prephitmp_81, prephitmp_81
	movl	%r13d, %ebx	 # _20, _20
	movl	$2, %r12d	 #, ivtmp.1699
	movq	776(%rsp), %rsi	 # rules, rules
	movl	%r9d, %r11d	 # y, y
	movq	%rdi, %r13	 # boid_list, boid_list
.L219:
 # .\src\main.cpp:639:     const auto world_height = map->m_cell_size * map->m_ysize;
	movl	8(%rbp), %r9d	 # boid_map_14(D)->m_cell_size, _23
 # .\src\main.cpp:642:     const Boid cell_to_update = map->get_coord(y, x);
	leal	-2(%r12), %r8d	 #,
	movl	%r11d, %edx	 # y,
	movq	%rbp, %rcx	 # boid_map,
	movl	%r10d, 96(%rsp)	 # prephitmp_81, %sfp
 # .\src\main.cpp:639:     const auto world_height = map->m_cell_size * map->m_ysize;
	movl	%r9d, 64(%rsp)	 # _23, %sfp
 # .\src\main.cpp:642:     const Boid cell_to_update = map->get_coord(y, x);
	movl	%r11d, 32(%rsp)	 # y, %sfp
	call	_ZNK7BoidMap9get_coordEii	 #
 # .\src\main.cpp:643:     if (cell_to_update == -1 ) return;
	movl	32(%rsp), %r11d	 # %sfp, y
	movl	64(%rsp), %r9d	 # %sfp, _23
	cmpl	$-1, %eax	 #, _28
	movl	96(%rsp), %r10d	 # %sfp, prephitmp_81
 # .\src\main.cpp:642:     const Boid cell_to_update = map->get_coord(y, x);
	movl	%eax, %r8d	 # tmp791, _28
 # .\src\main.cpp:643:     if (cell_to_update == -1 ) return;
	je	.L221	 #,
 # .\src\main.cpp:645:     const auto xs = boid_list->m_boid_store->xs;
	movq	0(%r13), %rax	 # boid_list_16(D)->m_boid_store, _29
 # .\src\main.cpp:655:     Boid cell_end = cell_begin + boid_list->m_boid_store->depth[cell_begin];
	movslq	%r8d, %r14	 # _28, ivtmp.1685
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:1330: 				 __A, __A, __A, __A };
	vbroadcastss	(%rsi), %ymm8	 # rules_15(D)->avoid_distance_squared, _35
	vbroadcastss	12(%rsi), %ymm4	 # rules_15(D)->sight_range_squared, _37
	vbroadcastss	4(%rsi), %ymm1	 # rules_15(D)->avoid_factor, _39
 # .\src\main.cpp:645:     const auto xs = boid_list->m_boid_store->xs;
	movq	(%rax), %rcx	 # _29->xs, xs
 # .\src\main.cpp:647:     const auto vxs = boid_list->m_boid_store->vxs;
	movq	16(%rax), %rdx	 # _29->vxs, vxs
 # .\src\main.cpp:648:     const auto vys = boid_list->m_boid_store->vys;
	movq	24(%rax), %r15	 # _29->vys, vys
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:1330: 				 __A, __A, __A, __A };
	vmovups	%ymm4, 96(%rsp)	 # _37, %sfp
 # .\src\main.cpp:645:     const auto xs = boid_list->m_boid_store->xs;
	movq	%rcx, 432(%rsp)	 # xs, %sfp
 # .\src\main.cpp:646:     const auto ys = boid_list->m_boid_store->ys;
	movq	8(%rax), %rcx	 # _29->ys, ys
 # .\src\main.cpp:655:     Boid cell_end = cell_begin + boid_list->m_boid_store->depth[cell_begin];
	movq	48(%rax), %rax	 # _29->depth, _29->depth
 # .\src\main.cpp:646:     const auto ys = boid_list->m_boid_store->ys;
	movq	%rcx, 440(%rsp)	 # ys, %sfp
 # .\src\main.cpp:655:     Boid cell_end = cell_begin + boid_list->m_boid_store->depth[cell_begin];
	movl	(%rax,%r14,4), %ecx	 # *_43, cell_end
	addl	%r8d, %ecx	 # _28, cell_end
	movl	%ecx, %eax	 # cell_end, cell_end
 # .\src\main.cpp:657:     for (Boid current_boid = cell_begin; current_boid < cell_end; current_boid += 8) {
	cmpl	%ecx, %r8d	 # cell_end, _28
	jge	.L243	 #,
 # .\src\main.cpp:639:     const auto world_height = map->m_cell_size * map->m_ysize;
	imull	%r9d, %r10d	 # _23, prephitmp_81
	leal	-1(%r11), %ecx	 #, ivtmp.1681
	vmovaps	%ymm1, %ymm5	 # _39, _39
	movq	%r14, %rdi	 # ivtmp.1685, ivtmp.1685
 # .\src\main.cpp:640:     const auto world_width = map->m_cell_size * map->m_xsize;
	imull	%r9d, %ebx	 # _23, world_width
	movl	%ecx, 496(%rsp)	 # ivtmp.1681, %sfp
	leal	2(%r11), %ecx	 #, _862
	movq	%r15, %r14	 # vys, vys
	movl	%r11d, 508(%rsp)	 # y, %sfp
 # .\src\main.cpp:639:     const auto world_height = map->m_cell_size * map->m_ysize;
	movl	%r10d, 492(%rsp)	 # prephitmp_81, %sfp
	movl	%ebx, 500(%rsp)	 # world_width, %sfp
	movl	%eax, 504(%rsp)	 # cell_end, %sfp
	movl	%ecx, 488(%rsp)	 # _862, %sfp
	leal	-3(%r12), %ecx	 #, ivtmp.1673
	movl	%ecx, 428(%rsp)	 # ivtmp.1673, %sfp
	movq	%rdx, %rcx	 # vxs, vxs
	movq	%rsi, %rdx	 # rules, rules
	vmovups	%ymm8, 288(%rsp)	 # _35, %sfp
.L229:
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:905:   return *(__m256_u *)__P;
	movq	432(%rsp), %rax	 # %sfp, xs
	movl	496(%rsp), %r15d	 # %sfp, ivtmp.1681
 # .\src\main.cpp:669:         __m256 avg_vy_vec = _mm256_set1_ps(0.);
	vxorps	%xmm3, %xmm3, %xmm3	 # avg_vy_vec
	movq	%rdi, 480(%rsp)	 # ivtmp.1685, %sfp
	movq	%rdx, 776(%rsp)	 # rules, rules
 # .\src\main.cpp:668:         __m256 avg_vx_vec = _mm256_set1_ps(0.);
	vmovaps	%ymm3, %ymm1	 #, avg_vx_vec
 # .\src\main.cpp:662:         __m256 sep_x_vec = _mm256_set1_ps(0.);
	vmovaps	%ymm3, %ymm13	 # tmp20, sep_x_vec
	vmovaps	%ymm3, %ymm15	 # avg_vy_vec, avg_vy_vec
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:905:   return *(__m256_u *)__P;
	vmovups	(%rax,%rdi,4), %ymm4	 # MEM[(__m256_u * {ref-all})xs_30 + ivtmp.1685_861 * 4], _50
	movl	%r15d, %ebx	 # ivtmp.1681, ivtmp.1681
	movq	%rcx, %rdx	 # vxs, vxs
	movq	440(%rsp), %rax	 # %sfp, ys
	vmovups	%ymm5, 448(%rsp)	 # _39, %sfp
	movq	%r14, %r15	 # vys, vys
	vmovups	%ymm4, 32(%rsp)	 # _50, %sfp
	vmovups	(%rax,%rdi,4), %ymm4	 # MEM[(__m256_u * {ref-all})ys_31 + ivtmp.1685_861 * 4], _52
	vmovups	%ymm3, 352(%rsp)	 # sep_x_vec, %sfp
	vmovups	%ymm4, 64(%rsp)	 # _52, %sfp
 # .\src\main.cpp:671:         __m256i isc = _mm256_set1_epi32(0);
	vpxor	%xmm4, %xmm4, %xmm4	 # isc
	vmovdqu	%ymm4, 320(%rsp)	 # isc, %sfp
 # .\src\main.cpp:666:         __m256 avg_y_vec = _mm256_set1_ps(0.);
	vmovaps	%ymm3, %ymm4	 # tmp21, avg_y_vec
	vmovups	%ymm3, 384(%rsp)	 # sep_y_vec, %sfp
.L222:
	movl	428(%rsp), %edi	 # %sfp, ivtmp.1673
 # .\src\main.cpp:675:             Boid row_begin = -1;
	movl	$-1, %r14d	 #, row_begin
	movq	%rdx, 128(%rsp)	 # vxs, %sfp
 # .\src\main.cpp:676:             Boid row_end = -1;
	movl	$-1, %esi	 #, row_end
	vmovups	%ymm13, 160(%rsp)	 # avg_x_vec, %sfp
	vmovups	%ymm4, 192(%rsp)	 # avg_y_vec, %sfp
	movl	%edi, %eax	 # ivtmp.1673, ivtmp.1673
	movl	%r14d, %edi	 # row_begin, row_begin
	vmovups	%ymm1, 224(%rsp)	 # avg_vx_vec, %sfp
	movl	%eax, %r14d	 # ivtmp.1673, ivtmp.1673
	vmovups	%ymm15, 256(%rsp)	 # avg_vy_vec, %sfp
	vzeroupper
.L225:
 # .\src\main.cpp:680:                 Boid current = map->get_coord(y + cy, x + cx);
	movl	%r14d, %r8d	 # ivtmp.1673,
	movl	%ebx, %edx	 # ivtmp.1681,
	movq	%rbp, %rcx	 # boid_map,
	call	_ZNK7BoidMap9get_coordEii	 #
 # .\src\main.cpp:681:                 if (current != -1) {
	cmpl	$-1, %eax	 #, _57
	je	.L223	 #,
 # .\src\main.cpp:684:                     row_end = current + boid_list->m_boid_store->depth[current];
	movq	0(%r13), %rdx	 # boid_list_16(D)->m_boid_store, boid_list_16(D)->m_boid_store
 # .\src\main.cpp:682:                     if (row_begin == -1) row_begin = current;
	cmpl	$-1, %edi	 #, row_begin
 # .\src\main.cpp:684:                     row_end = current + boid_list->m_boid_store->depth[current];
	movslq	%eax, %rcx	 # _57, _57
 # .\src\main.cpp:682:                     if (row_begin == -1) row_begin = current;
	cmove	%eax, %edi	 # row_begin,, _57, row_begin
 # .\src\main.cpp:684:                     row_end = current + boid_list->m_boid_store->depth[current];
	movq	48(%rdx), %rdx	 # _59->depth, _59->depth
 # .\src\main.cpp:684:                     row_end = current + boid_list->m_boid_store->depth[current];
	addl	(%rdx,%rcx,4), %eax	 # *_63, _57
	movl	%eax, %esi	 # _57, row_end
.L223:
 # .\src\main.cpp:679:             for (int cx = -1; cx <= 1; cx++) {
	addl	$1, %r14d	 #, ivtmp.1673
	cmpl	%r14d, %r12d	 # ivtmp.1673, ivtmp.1699
	jne	.L225	 #,
 # .\src\main.cpp:689:             for (Boid nearby_boid = row_begin; nearby_boid < row_end; nearby_boid += 8) {
	movslq	%edi, %r14	 # row_begin,
	movq	128(%rsp), %rdx	 # %sfp, vxs
	vmovups	160(%rsp), %ymm13	 # %sfp, avg_x_vec
	vmovups	192(%rsp), %ymm4	 # %sfp, avg_y_vec
	vmovups	224(%rsp), %ymm1	 # %sfp, avg_vx_vec
	vmovups	256(%rsp), %ymm15	 # %sfp, avg_vy_vec
	cmpl	%esi, %r14d	 # row_end, row_begin
	jge	.L226	 #,
	.p2align 4,,10
	.p2align 3
.L227:
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:905:   return *(__m256_u *)__P;
	movq	432(%rsp), %rax	 # %sfp, xs
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vmovups	32(%rsp), %ymm12	 # %sfp, _50
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:406:   return (__m256) __builtin_ia32_cmpps256 ((__v8sf)__X, (__v8sf)__Y,
	vmovups	288(%rsp), %ymm11	 # %sfp, _35
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vmovups	64(%rsp), %ymm6	 # %sfp, _52
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:905:   return *(__m256_u *)__P;
	vmovups	(%rax,%r14,4), %ymm3	 # MEM[(__m256_u * {ref-all})xs_30 + ivtmp.1656_844 * 4], MEM[(__m256_u * {ref-all})xs_30 + ivtmp.1656_844 * 4]
	movq	440(%rsp), %rax	 # %sfp, ys
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vsubps	%ymm3, %ymm12, %ymm2	 # MEM[(__m256_u * {ref-all})xs_30 + ivtmp.1656_844 * 4], _50, _235
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:905:   return *(__m256_u *)__P;
	vmovups	(%rax,%r14,4), %ymm5	 # MEM[(__m256_u * {ref-all})ys_31 + ivtmp.1656_844 * 4], MEM[(__m256_u * {ref-all})ys_31 + ivtmp.1656_844 * 4]
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vsubps	%ymm5, %ymm6, %ymm8	 # MEM[(__m256_u * {ref-all})ys_31 + ivtmp.1656_844 * 4], _52, _236
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:320:   return (__m256) ((__v8sf)__A * (__v8sf)__B);
	vmulps	%ymm2, %ymm2, %ymm6	 # _235, _235, tmp450
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:149:   return (__m256) ((__v8sf)__A + (__v8sf)__B);
	vfmadd231ps	%ymm8, %ymm8, %ymm6	 # _236, _236, _218
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:406:   return (__m256) __builtin_ia32_cmpps256 ((__v8sf)__X, (__v8sf)__Y,
	vcmpps	$1, %ymm11, %ymm6, %ymm7	 #, _35, _218, tmp454
	vcmpps	$1, 96(%rsp), %ymm6, %ymm0	 #, %sfp, _218, tmp451
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vsubps	%ymm6, %ymm11, %ymm6	 # _218, _35, _223
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:320:   return (__m256) ((__v8sf)__A * (__v8sf)__B);
	vmulps	%ymm6, %ymm6, %ymm6	 # _223, _223, _224
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:186:   return (__m256) __builtin_ia32_andnps256 ((__v8sf)__A, (__v8sf)__B);
	vandnps	%ymm0, %ymm7, %ymm0	 # tmp451, tmp454, tmp457
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:174:   return (__m256) __builtin_ia32_andps256 ((__v8sf)__A, (__v8sf)__B);
	vandps	.LC3(%rip), %ymm0, %ymm0	 #, tmp457, tmp458
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/fmaintrin.h:65:   return (__m256)__builtin_ia32_vfmaddps256 ((__v8sf)__A, (__v8sf)__B,
	vfmadd231ps	(%rdx,%r14,4), %ymm0, %ymm1	 # MEM[(__m256_u * {ref-all})vxs_32 + ivtmp.1656_844 * 4], tmp458, tmp465
	vfmadd231ps	(%r15,%r14,4), %ymm0, %ymm15	 # MEM[(__m256_u * {ref-all})vys_33 + ivtmp.1656_844 * 4], tmp458, tmp466
	vfmadd231ps	%ymm3, %ymm0, %ymm13	 # MEM[(__m256_u * {ref-all})xs_30 + ivtmp.1656_844 * 4], tmp458, tmp467
	vfmadd231ps	%ymm5, %ymm0, %ymm4	 # MEM[(__m256_u * {ref-all})ys_31 + ivtmp.1656_844 * 4], tmp458, tmp468
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:475:   return (__m256i)__builtin_ia32_cvtps2dq256 ((__v8sf) __A);
	vcvtps2dq	%ymm0, %ymm0	 # tmp458, tmp469
	vmovdqu	%ymm0, 128(%rsp)	 # tmp469, %sfp
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avx2intrin.h:1065:   return (__m256) __builtin_ia32_permvarsf256 ((__v8sf)__X, (__v8si)__Y);
	vmovdqu	.LC5(%rip), %ymm0	 #, tmp1060
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:320:   return (__m256) ((__v8sf)__A * (__v8sf)__B);
	vmulps	%ymm2, %ymm6, %ymm2	 # _235, _224, tmp461
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avx2intrin.h:1065:   return (__m256) __builtin_ia32_permvarsf256 ((__v8sf)__X, (__v8si)__Y);
	vpermps	%ymm3, %ymm0, %ymm0	 # MEM[(__m256_u * {ref-all})xs_30 + ivtmp.1656_844 * 4], tmp1060, tmp471
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vmovups	64(%rsp), %ymm3	 # %sfp, _52
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:320:   return (__m256) ((__v8sf)__A * (__v8sf)__B);
	vmulps	%ymm8, %ymm6, %ymm6	 # _236, _224, tmp463
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:174:   return (__m256) __builtin_ia32_andps256 ((__v8sf)__A, (__v8sf)__B);
	vandps	%ymm2, %ymm7, %ymm2	 # tmp461, tmp454, tmp462
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:149:   return (__m256) ((__v8sf)__A + (__v8sf)__B);
	vaddps	352(%rsp), %ymm2, %ymm2	 # %sfp, tmp462, _248
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:174:   return (__m256) __builtin_ia32_andps256 ((__v8sf)__A, (__v8sf)__B);
	vandps	%ymm6, %ymm7, %ymm7	 # tmp463, tmp454, tmp464
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:149:   return (__m256) ((__v8sf)__A + (__v8sf)__B);
	vaddps	384(%rsp), %ymm7, %ymm6	 # %sfp, tmp464, _251
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avx2intrin.h:1065:   return (__m256) __builtin_ia32_permvarsf256 ((__v8sf)__X, (__v8si)__Y);
	vmovdqu	.LC5(%rip), %ymm7	 #, tmp1059
	vpermps	(%rdx,%r14,4), %ymm7, %ymm10	 # MEM[(__m256_u * {ref-all})vxs_32 + ivtmp.1656_844 * 4], tmp1058, tmp475
	vpermps	(%r15,%r14,4), %ymm7, %ymm9	 # MEM[(__m256_u * {ref-all})vys_33 + ivtmp.1656_844 * 4], tmp1057, tmp477
 # .\src\main.cpp:689:             for (Boid nearby_boid = row_begin; nearby_boid < row_end; nearby_boid += 8) {
	addq	$8, %r14	 #, ivtmp.1656
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avx2intrin.h:1065:   return (__m256) __builtin_ia32_permvarsf256 ((__v8sf)__X, (__v8si)__Y);
	vpermps	%ymm5, %ymm7, %ymm14	 # MEM[(__m256_u * {ref-all})ys_31 + ivtmp.1656_844 * 4], tmp1059, tmp473
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vsubps	%ymm0, %ymm12, %ymm7	 # tmp471, _50, _278
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:406:   return (__m256) __builtin_ia32_cmpps256 ((__v8sf)__X, (__v8sf)__Y,
	vmovups	288(%rsp), %ymm12	 # %sfp, _35
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vsubps	%ymm14, %ymm3, %ymm11	 # tmp473, _52, _279
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:320:   return (__m256) ((__v8sf)__A * (__v8sf)__B);
	vmulps	%ymm7, %ymm7, %ymm5	 # _278, _278, tmp479
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:149:   return (__m256) ((__v8sf)__A + (__v8sf)__B);
	vfmadd231ps	%ymm11, %ymm11, %ymm5	 # _279, _279, _282
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:406:   return (__m256) __builtin_ia32_cmpps256 ((__v8sf)__X, (__v8sf)__Y,
	vcmpps	$1, %ymm12, %ymm5, %ymm8	 #, _35, _282, tmp483
	vcmpps	$1, 96(%rsp), %ymm5, %ymm3	 #, %sfp, _282, tmp480
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vsubps	%ymm5, %ymm12, %ymm5	 # _282, _35, _287
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:320:   return (__m256) ((__v8sf)__A * (__v8sf)__B);
	vmulps	%ymm5, %ymm5, %ymm5	 # _287, _287, _288
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:186:   return (__m256) __builtin_ia32_andnps256 ((__v8sf)__A, (__v8sf)__B);
	vandnps	%ymm3, %ymm8, %ymm3	 # tmp480, tmp483, tmp486
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:174:   return (__m256) __builtin_ia32_andps256 ((__v8sf)__A, (__v8sf)__B);
	vandps	.LC3(%rip), %ymm3, %ymm3	 #, tmp486, tmp487
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/fmaintrin.h:65:   return (__m256)__builtin_ia32_vfmaddps256 ((__v8sf)__A, (__v8sf)__B,
	vfmadd231ps	%ymm10, %ymm3, %ymm1	 # tmp475, tmp487, tmp465
	vfmadd231ps	%ymm9, %ymm3, %ymm15	 # tmp477, tmp487, tmp466
	vfmadd231ps	%ymm0, %ymm3, %ymm13	 # tmp471, tmp487, tmp496
	vfmadd231ps	%ymm14, %ymm3, %ymm4	 # tmp473, tmp487, tmp497
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:475:   return (__m256i)__builtin_ia32_cvtps2dq256 ((__v8sf) __A);
	vcvtps2dq	%ymm3, %ymm3	 # tmp487, tmp498
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:320:   return (__m256) ((__v8sf)__A * (__v8sf)__B);
	vmulps	%ymm5, %ymm7, %ymm7	 # _288, _278, tmp490
	vmulps	%ymm5, %ymm11, %ymm11	 # _288, _279, tmp492
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:174:   return (__m256) __builtin_ia32_andps256 ((__v8sf)__A, (__v8sf)__B);
	vandps	%ymm7, %ymm8, %ymm7	 # tmp490, tmp483, tmp491
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:149:   return (__m256) ((__v8sf)__A + (__v8sf)__B);
	vaddps	%ymm7, %ymm2, %ymm7	 # tmp491, _248, _291
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:174:   return (__m256) __builtin_ia32_andps256 ((__v8sf)__A, (__v8sf)__B);
	vandps	%ymm11, %ymm8, %ymm5	 # tmp492, tmp483, tmp493
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/fmaintrin.h:65:   return (__m256)__builtin_ia32_vfmaddps256 ((__v8sf)__A, (__v8sf)__B,
	vmovaps	%ymm15, %ymm8	 # tmp466, tmp495
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avx2intrin.h:1065:   return (__m256) __builtin_ia32_permvarsf256 ((__v8sf)__X, (__v8si)__Y);
	vmovdqu	.LC5(%rip), %ymm11	 #, tmp1051
	vpaddd	128(%rsp), %ymm3, %ymm2	 # %sfp, tmp498, _303
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:149:   return (__m256) ((__v8sf)__A + (__v8sf)__B);
	vaddps	%ymm5, %ymm6, %ymm5	 # tmp493, _251, _294
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/fmaintrin.h:65:   return (__m256)__builtin_ia32_vfmaddps256 ((__v8sf)__A, (__v8sf)__B,
	vmovaps	%ymm1, %ymm6	 # tmp465, tmp494
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avx2intrin.h:1065:   return (__m256) __builtin_ia32_permvarsf256 ((__v8sf)__X, (__v8si)__Y);
	vpermps	%ymm9, %ymm11, %ymm3	 # tmp477, tmp1051, tmp506
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vmovups	64(%rsp), %ymm9	 # %sfp, _52
	vmovdqu	%ymm2, 128(%rsp)	 # _303, %sfp
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avx2intrin.h:1065:   return (__m256) __builtin_ia32_permvarsf256 ((__v8sf)__X, (__v8si)__Y);
	vmovdqu	.LC5(%rip), %ymm2	 #, tmp1054
	vpermps	%ymm0, %ymm2, %ymm1	 # tmp471, tmp1054, tmp500
	vpermps	%ymm14, %ymm2, %ymm0	 # tmp473, tmp1053, tmp502
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vmovups	32(%rsp), %ymm14	 # %sfp, _50
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avx2intrin.h:1065:   return (__m256) __builtin_ia32_permvarsf256 ((__v8sf)__X, (__v8si)__Y);
	vpermps	%ymm10, %ymm2, %ymm2	 # tmp475, tmp1052, tmp504
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vsubps	%ymm1, %ymm14, %ymm15	 # tmp500, _50, _321
	vsubps	%ymm0, %ymm9, %ymm14	 # tmp502, _52, _322
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:320:   return (__m256) ((__v8sf)__A * (__v8sf)__B);
	vmulps	%ymm15, %ymm15, %ymm10	 # _321, _321, tmp508
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:149:   return (__m256) ((__v8sf)__A + (__v8sf)__B);
	vfmadd231ps	%ymm14, %ymm14, %ymm10	 # _322, _322, _325
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:406:   return (__m256) __builtin_ia32_cmpps256 ((__v8sf)__X, (__v8sf)__Y,
	vcmpps	$1, %ymm12, %ymm10, %ymm11	 #, _35, _325, tmp512
	vcmpps	$1, 96(%rsp), %ymm10, %ymm9	 #, %sfp, _325, tmp509
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vsubps	%ymm10, %ymm12, %ymm10	 # _325, _35, _330
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:320:   return (__m256) ((__v8sf)__A * (__v8sf)__B);
	vmulps	%ymm10, %ymm10, %ymm10	 # _330, _330, _331
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:186:   return (__m256) __builtin_ia32_andnps256 ((__v8sf)__A, (__v8sf)__B);
	vandnps	%ymm9, %ymm11, %ymm9	 # tmp509, tmp512, tmp515
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:174:   return (__m256) __builtin_ia32_andps256 ((__v8sf)__A, (__v8sf)__B);
	vandps	.LC3(%rip), %ymm9, %ymm9	 #, tmp515, tmp516
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/fmaintrin.h:65:   return (__m256)__builtin_ia32_vfmaddps256 ((__v8sf)__A, (__v8sf)__B,
	vfmadd231ps	%ymm1, %ymm9, %ymm13	 # tmp500, tmp516, tmp525
	vfmadd231ps	%ymm2, %ymm9, %ymm6	 # tmp504, tmp516, tmp523
	vfmadd231ps	%ymm3, %ymm9, %ymm8	 # tmp506, tmp516, tmp524
	vfmadd231ps	%ymm0, %ymm9, %ymm4	 # tmp502, tmp516, tmp526
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:320:   return (__m256) ((__v8sf)__A * (__v8sf)__B);
	vmulps	%ymm10, %ymm14, %ymm14	 # _331, _322, tmp521
	vmulps	%ymm10, %ymm15, %ymm15	 # _331, _321, tmp519
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:475:   return (__m256i)__builtin_ia32_cvtps2dq256 ((__v8sf) __A);
	vcvtps2dq	%ymm9, %ymm10	 # tmp516, tmp527
	vmovdqu	%ymm10, 160(%rsp)	 # tmp527, %sfp
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:174:   return (__m256) __builtin_ia32_andps256 ((__v8sf)__A, (__v8sf)__B);
	vandps	%ymm15, %ymm11, %ymm15	 # tmp519, tmp512, tmp520
	vandps	%ymm14, %ymm11, %ymm11	 # tmp521, tmp512, tmp522
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:149:   return (__m256) ((__v8sf)__A + (__v8sf)__B);
	vaddps	%ymm11, %ymm5, %ymm5	 # tmp522, _294, _337
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avx2intrin.h:1065:   return (__m256) __builtin_ia32_permvarsf256 ((__v8sf)__X, (__v8si)__Y);
	vmovdqu	.LC5(%rip), %ymm11	 #, tmp1049
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:149:   return (__m256) ((__v8sf)__A + (__v8sf)__B);
	vaddps	%ymm15, %ymm7, %ymm7	 # tmp520, _291, _334
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vmovups	32(%rsp), %ymm14	 # %sfp, _50
	vmovups	64(%rsp), %ymm9	 # %sfp, _52
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avx2intrin.h:1065:   return (__m256) __builtin_ia32_permvarsf256 ((__v8sf)__X, (__v8si)__Y);
	vpermps	%ymm1, %ymm11, %ymm1	 # tmp500, tmp1049, tmp529
	vpermps	%ymm0, %ymm11, %ymm0	 # tmp502, tmp1048, tmp531
	vpermps	%ymm2, %ymm11, %ymm2	 # tmp504, tmp1047, tmp533
	vpermps	%ymm3, %ymm11, %ymm3	 # tmp506, tmp1046, tmp535
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vsubps	%ymm1, %ymm14, %ymm11	 # tmp529, _50, _364
	vsubps	%ymm0, %ymm9, %ymm15	 # tmp531, _52, _365
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:320:   return (__m256) ((__v8sf)__A * (__v8sf)__B);
	vmulps	%ymm11, %ymm11, %ymm10	 # _364, _364, tmp537
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:149:   return (__m256) ((__v8sf)__A + (__v8sf)__B);
	vfmadd231ps	%ymm15, %ymm15, %ymm10	 # _365, _365, _368
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:406:   return (__m256) __builtin_ia32_cmpps256 ((__v8sf)__X, (__v8sf)__Y,
	vcmpps	$1, %ymm12, %ymm10, %ymm14	 #, _35, _368, tmp541
	vcmpps	$1, 96(%rsp), %ymm10, %ymm9	 #, %sfp, _368, tmp538
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vsubps	%ymm10, %ymm12, %ymm10	 # _368, _35, _373
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:320:   return (__m256) ((__v8sf)__A * (__v8sf)__B);
	vmulps	%ymm10, %ymm10, %ymm10	 # _373, _373, _374
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:186:   return (__m256) __builtin_ia32_andnps256 ((__v8sf)__A, (__v8sf)__B);
	vandnps	%ymm9, %ymm14, %ymm9	 # tmp538, tmp541, tmp544
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:174:   return (__m256) __builtin_ia32_andps256 ((__v8sf)__A, (__v8sf)__B);
	vandps	.LC3(%rip), %ymm9, %ymm9	 #, tmp544, tmp545
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/fmaintrin.h:65:   return (__m256)__builtin_ia32_vfmaddps256 ((__v8sf)__A, (__v8sf)__B,
	vfmadd231ps	%ymm2, %ymm9, %ymm6	 # tmp533, tmp545, tmp552
	vfmadd231ps	%ymm3, %ymm9, %ymm8	 # tmp535, tmp545, tmp553
	vfmadd231ps	%ymm1, %ymm9, %ymm13	 # tmp529, tmp545, tmp554
	vfmadd231ps	%ymm0, %ymm9, %ymm4	 # tmp531, tmp545, tmp555
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:475:   return (__m256i)__builtin_ia32_cvtps2dq256 ((__v8sf) __A);
	vcvtps2dq	%ymm9, %ymm9	 # tmp545, tmp556
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:320:   return (__m256) ((__v8sf)__A * (__v8sf)__B);
	vmulps	%ymm10, %ymm15, %ymm15	 # _374, _365, tmp550
	vmulps	%ymm10, %ymm11, %ymm11	 # _374, _364, tmp548
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:174:   return (__m256) __builtin_ia32_andps256 ((__v8sf)__A, (__v8sf)__B);
	vandps	%ymm11, %ymm14, %ymm11	 # tmp548, tmp541, tmp549
	vandps	%ymm15, %ymm14, %ymm14	 # tmp550, tmp541, tmp551
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:149:   return (__m256) ((__v8sf)__A + (__v8sf)__B);
	vaddps	%ymm14, %ymm5, %ymm5	 # tmp551, _337, _380
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avx2intrin.h:1065:   return (__m256) __builtin_ia32_permvarsf256 ((__v8sf)__X, (__v8si)__Y);
	vmovdqu	.LC5(%rip), %ymm14	 #, tmp1042
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:149:   return (__m256) ((__v8sf)__A + (__v8sf)__B);
	vaddps	%ymm11, %ymm7, %ymm11	 # tmp549, _334, _377
	vpaddd	160(%rsp), %ymm9, %ymm7	 # %sfp, tmp556, tmp558
	vpaddd	128(%rsp), %ymm7, %ymm15	 # %sfp, tmp558, _310
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avx2intrin.h:1065:   return (__m256) __builtin_ia32_permvarsf256 ((__v8sf)__X, (__v8si)__Y);
	vpermps	%ymm1, %ymm14, %ymm1	 # tmp529, tmp1042, tmp559
	vpermps	%ymm0, %ymm14, %ymm0	 # tmp531, tmp1041, tmp561
	vpermps	%ymm2, %ymm14, %ymm2	 # tmp533, tmp1040, tmp563
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vmovups	64(%rsp), %ymm7	 # %sfp, _52
	vmovdqu	%ymm15, 128(%rsp)	 # _310, %sfp
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avx2intrin.h:1065:   return (__m256) __builtin_ia32_permvarsf256 ((__v8sf)__X, (__v8si)__Y);
	vpermps	%ymm3, %ymm14, %ymm3	 # tmp535, tmp1039, tmp565
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vmovups	32(%rsp), %ymm14	 # %sfp, _50
	vsubps	%ymm0, %ymm7, %ymm15	 # tmp561, _52, _408
	vsubps	%ymm1, %ymm14, %ymm9	 # tmp559, _50, _407
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:320:   return (__m256) ((__v8sf)__A * (__v8sf)__B);
	vmulps	%ymm9, %ymm9, %ymm10	 # _407, _407, tmp567
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:149:   return (__m256) ((__v8sf)__A + (__v8sf)__B);
	vfmadd231ps	%ymm15, %ymm15, %ymm10	 # _408, _408, _411
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:406:   return (__m256) __builtin_ia32_cmpps256 ((__v8sf)__X, (__v8sf)__Y,
	vcmpps	$1, %ymm12, %ymm10, %ymm14	 #, _35, _411, tmp571
	vcmpps	$1, 96(%rsp), %ymm10, %ymm7	 #, %sfp, _411, tmp568
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vsubps	%ymm10, %ymm12, %ymm10	 # _411, _35, _416
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:320:   return (__m256) ((__v8sf)__A * (__v8sf)__B);
	vmulps	%ymm10, %ymm10, %ymm10	 # _416, _416, _417
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:186:   return (__m256) __builtin_ia32_andnps256 ((__v8sf)__A, (__v8sf)__B);
	vandnps	%ymm7, %ymm14, %ymm7	 # tmp568, tmp571, tmp574
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:174:   return (__m256) __builtin_ia32_andps256 ((__v8sf)__A, (__v8sf)__B);
	vandps	.LC3(%rip), %ymm7, %ymm7	 #, tmp574, tmp575
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/fmaintrin.h:65:   return (__m256)__builtin_ia32_vfmaddps256 ((__v8sf)__A, (__v8sf)__B,
	vfmadd231ps	%ymm1, %ymm7, %ymm13	 # tmp559, tmp575, tmp584
	vfmadd231ps	%ymm2, %ymm7, %ymm6	 # tmp563, tmp575, tmp582
	vfmadd231ps	%ymm3, %ymm7, %ymm8	 # tmp565, tmp575, tmp583
	vfmadd231ps	%ymm0, %ymm7, %ymm4	 # tmp561, tmp575, tmp585
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:320:   return (__m256) ((__v8sf)__A * (__v8sf)__B);
	vmulps	%ymm10, %ymm9, %ymm9	 # _417, _407, tmp578
	vmulps	%ymm10, %ymm15, %ymm15	 # _417, _408, tmp580
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:174:   return (__m256) __builtin_ia32_andps256 ((__v8sf)__A, (__v8sf)__B);
	vandps	%ymm9, %ymm14, %ymm9	 # tmp578, tmp571, tmp579
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:149:   return (__m256) ((__v8sf)__A + (__v8sf)__B);
	vaddps	%ymm9, %ymm11, %ymm9	 # tmp579, _377, _420
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avx2intrin.h:1065:   return (__m256) __builtin_ia32_permvarsf256 ((__v8sf)__X, (__v8si)__Y);
	vmovdqu	.LC5(%rip), %ymm11	 #, tmp1037
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:174:   return (__m256) __builtin_ia32_andps256 ((__v8sf)__A, (__v8sf)__B);
	vandps	%ymm15, %ymm14, %ymm10	 # tmp580, tmp571, tmp581
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vmovups	32(%rsp), %ymm14	 # %sfp, _50
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:149:   return (__m256) ((__v8sf)__A + (__v8sf)__B);
	vaddps	%ymm10, %ymm5, %ymm10	 # tmp581, _380, _423
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:475:   return (__m256i)__builtin_ia32_cvtps2dq256 ((__v8sf) __A);
	vcvtps2dq	%ymm7, %ymm5	 # tmp575, tmp586
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vmovups	64(%rsp), %ymm7	 # %sfp, _52
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:475:   return (__m256i)__builtin_ia32_cvtps2dq256 ((__v8sf) __A);
	vmovdqu	%ymm5, 160(%rsp)	 # tmp586, %sfp
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avx2intrin.h:1065:   return (__m256) __builtin_ia32_permvarsf256 ((__v8sf)__X, (__v8si)__Y);
	vpermps	%ymm1, %ymm11, %ymm1	 # tmp559, tmp1037, tmp588
	vpermps	%ymm0, %ymm11, %ymm0	 # tmp561, tmp1036, tmp590
	vpermps	%ymm2, %ymm11, %ymm2	 # tmp563, tmp1035, tmp592
	vpermps	%ymm3, %ymm11, %ymm3	 # tmp565, tmp1034, tmp594
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vsubps	%ymm1, %ymm14, %ymm11	 # tmp588, _50, _450
	vsubps	%ymm0, %ymm7, %ymm15	 # tmp590, _52, _451
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:320:   return (__m256) ((__v8sf)__A * (__v8sf)__B);
	vmulps	%ymm11, %ymm11, %ymm7	 # _450, _450, tmp596
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:149:   return (__m256) ((__v8sf)__A + (__v8sf)__B);
	vfmadd231ps	%ymm15, %ymm15, %ymm7	 # _451, _451, _454
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:406:   return (__m256) __builtin_ia32_cmpps256 ((__v8sf)__X, (__v8sf)__Y,
	vcmpps	$1, %ymm12, %ymm7, %ymm14	 #, _35, _454, tmp600
	vcmpps	$1, 96(%rsp), %ymm7, %ymm5	 #, %sfp, _454, tmp597
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vsubps	%ymm7, %ymm12, %ymm7	 # _454, _35, _459
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:320:   return (__m256) ((__v8sf)__A * (__v8sf)__B);
	vmulps	%ymm7, %ymm7, %ymm7	 # _459, _459, _460
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:186:   return (__m256) __builtin_ia32_andnps256 ((__v8sf)__A, (__v8sf)__B);
	vandnps	%ymm5, %ymm14, %ymm5	 # tmp597, tmp600, tmp603
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:174:   return (__m256) __builtin_ia32_andps256 ((__v8sf)__A, (__v8sf)__B);
	vandps	.LC3(%rip), %ymm5, %ymm5	 #, tmp603, tmp604
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/fmaintrin.h:65:   return (__m256)__builtin_ia32_vfmaddps256 ((__v8sf)__A, (__v8sf)__B,
	vfmadd231ps	%ymm2, %ymm5, %ymm6	 # tmp592, tmp604, tmp611
	vfmadd231ps	%ymm3, %ymm5, %ymm8	 # tmp594, tmp604, tmp612
	vfmadd231ps	%ymm1, %ymm5, %ymm13	 # tmp588, tmp604, tmp613
	vfmadd231ps	%ymm0, %ymm5, %ymm4	 # tmp590, tmp604, tmp614
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:475:   return (__m256i)__builtin_ia32_cvtps2dq256 ((__v8sf) __A);
	vcvtps2dq	%ymm5, %ymm5	 # tmp604, tmp615
	vpaddd	160(%rsp), %ymm5, %ymm5	 # %sfp, tmp615, tmp617
	vpaddd	320(%rsp), %ymm5, %ymm5	 # %sfp, tmp617, tmp618
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:320:   return (__m256) ((__v8sf)__A * (__v8sf)__B);
	vmulps	%ymm7, %ymm11, %ymm11	 # _460, _450, tmp607
	vmulps	%ymm7, %ymm15, %ymm15	 # _460, _451, tmp609
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vmovups	64(%rsp), %ymm7	 # %sfp, _52
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:174:   return (__m256) __builtin_ia32_andps256 ((__v8sf)__A, (__v8sf)__B);
	vandps	%ymm11, %ymm14, %ymm11	 # tmp607, tmp600, tmp608
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:149:   return (__m256) ((__v8sf)__A + (__v8sf)__B);
	vaddps	%ymm11, %ymm9, %ymm11	 # tmp608, _420, _463
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:174:   return (__m256) __builtin_ia32_andps256 ((__v8sf)__A, (__v8sf)__B);
	vandps	%ymm15, %ymm14, %ymm9	 # tmp609, tmp600, tmp610
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avx2intrin.h:1065:   return (__m256) __builtin_ia32_permvarsf256 ((__v8sf)__X, (__v8si)__Y);
	vmovdqu	.LC5(%rip), %ymm14	 #, tmp1030
	vpaddd	128(%rsp), %ymm5, %ymm15	 # %sfp, tmp618, _313
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:149:   return (__m256) ((__v8sf)__A + (__v8sf)__B);
	vaddps	%ymm9, %ymm10, %ymm9	 # tmp610, _423, _466
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avx2intrin.h:1065:   return (__m256) __builtin_ia32_permvarsf256 ((__v8sf)__X, (__v8si)__Y);
	vpermps	%ymm1, %ymm14, %ymm1	 # tmp588, tmp1030, tmp619
	vpermps	%ymm0, %ymm14, %ymm0	 # tmp590, tmp1029, tmp621
	vpermps	%ymm2, %ymm14, %ymm2	 # tmp592, tmp1028, tmp623
	vmovdqu	%ymm15, 128(%rsp)	 # _313, %sfp
	vpermps	%ymm3, %ymm14, %ymm3	 # tmp594, tmp1027, tmp625
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vmovups	32(%rsp), %ymm14	 # %sfp, _50
	vsubps	%ymm0, %ymm7, %ymm15	 # tmp621, _52, _494
	vsubps	%ymm1, %ymm14, %ymm5	 # tmp619, _50, _493
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:320:   return (__m256) ((__v8sf)__A * (__v8sf)__B);
	vmulps	%ymm5, %ymm5, %ymm10	 # _493, _493, tmp627
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:149:   return (__m256) ((__v8sf)__A + (__v8sf)__B);
	vfmadd231ps	%ymm15, %ymm15, %ymm10	 # _494, _494, _497
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:406:   return (__m256) __builtin_ia32_cmpps256 ((__v8sf)__X, (__v8sf)__Y,
	vcmpps	$1, %ymm12, %ymm10, %ymm14	 #, _35, _497, tmp631
	vcmpps	$1, 96(%rsp), %ymm10, %ymm7	 #, %sfp, _497, tmp628
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vsubps	%ymm10, %ymm12, %ymm10	 # _497, _35, _502
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:320:   return (__m256) ((__v8sf)__A * (__v8sf)__B);
	vmulps	%ymm10, %ymm10, %ymm10	 # _502, _502, _503
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:186:   return (__m256) __builtin_ia32_andnps256 ((__v8sf)__A, (__v8sf)__B);
	vandnps	%ymm7, %ymm14, %ymm7	 # tmp628, tmp631, tmp634
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:174:   return (__m256) __builtin_ia32_andps256 ((__v8sf)__A, (__v8sf)__B);
	vandps	.LC3(%rip), %ymm7, %ymm7	 #, tmp634, tmp635
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/fmaintrin.h:65:   return (__m256)__builtin_ia32_vfmaddps256 ((__v8sf)__A, (__v8sf)__B,
	vfmadd231ps	%ymm1, %ymm7, %ymm13	 # tmp619, tmp635, tmp644
	vfmadd231ps	%ymm0, %ymm7, %ymm4	 # tmp621, tmp635, tmp645
	vfmadd231ps	%ymm3, %ymm7, %ymm8	 # tmp625, tmp635, tmp643
	vfmadd231ps	%ymm2, %ymm7, %ymm6	 # tmp623, tmp635, tmp642
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:320:   return (__m256) ((__v8sf)__A * (__v8sf)__B);
	vmulps	%ymm10, %ymm5, %ymm5	 # _503, _493, tmp638
	vmulps	%ymm10, %ymm15, %ymm15	 # _503, _494, tmp640
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:174:   return (__m256) __builtin_ia32_andps256 ((__v8sf)__A, (__v8sf)__B);
	vandps	%ymm5, %ymm14, %ymm5	 # tmp638, tmp631, tmp639
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:149:   return (__m256) ((__v8sf)__A + (__v8sf)__B);
	vaddps	%ymm5, %ymm11, %ymm5	 # tmp639, _463, _506
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:475:   return (__m256i)__builtin_ia32_cvtps2dq256 ((__v8sf) __A);
	vcvtps2dq	%ymm7, %ymm11	 # tmp635, tmp646
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:174:   return (__m256) __builtin_ia32_andps256 ((__v8sf)__A, (__v8sf)__B);
	vandps	%ymm15, %ymm14, %ymm14	 # tmp640, tmp631, tmp641
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:475:   return (__m256i)__builtin_ia32_cvtps2dq256 ((__v8sf) __A);
	vmovdqu	%ymm11, 160(%rsp)	 # tmp646, %sfp
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avx2intrin.h:1065:   return (__m256) __builtin_ia32_permvarsf256 ((__v8sf)__X, (__v8si)__Y);
	vmovdqu	.LC5(%rip), %ymm11	 #, tmp1025
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:149:   return (__m256) ((__v8sf)__A + (__v8sf)__B);
	vaddps	%ymm14, %ymm9, %ymm9	 # tmp641, _466, _509
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vmovups	32(%rsp), %ymm14	 # %sfp, _50
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avx2intrin.h:1065:   return (__m256) __builtin_ia32_permvarsf256 ((__v8sf)__X, (__v8si)__Y);
	vpermps	%ymm1, %ymm11, %ymm11	 # tmp619, tmp1025, tmp648
	vmovdqu	.LC5(%rip), %ymm1	 #, tmp1024
	vpermps	%ymm0, %ymm1, %ymm10	 # tmp621, tmp1024, tmp650
	vmovdqu	.LC5(%rip), %ymm0	 #, tmp1022
	vpermps	%ymm2, %ymm1, %ymm1	 # tmp623, tmp1023, tmp652
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vmovups	64(%rsp), %ymm7	 # %sfp, _52
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avx2intrin.h:1065:   return (__m256) __builtin_ia32_permvarsf256 ((__v8sf)__X, (__v8si)__Y);
	vpermps	%ymm3, %ymm0, %ymm15	 # tmp625, tmp1022, tmp654
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vsubps	%ymm11, %ymm14, %ymm3	 # tmp648, _50, _536
	vsubps	%ymm10, %ymm7, %ymm14	 # tmp650, _52, _537
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:320:   return (__m256) ((__v8sf)__A * (__v8sf)__B);
	vmulps	%ymm3, %ymm3, %ymm2	 # _536, _536, tmp656
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:149:   return (__m256) ((__v8sf)__A + (__v8sf)__B);
	vfmadd231ps	%ymm14, %ymm14, %ymm2	 # _537, _537, _540
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:406:   return (__m256) __builtin_ia32_cmpps256 ((__v8sf)__X, (__v8sf)__Y,
	vcmpps	$1, %ymm12, %ymm2, %ymm7	 #, _35, _540, tmp660
	vcmpps	$1, 96(%rsp), %ymm2, %ymm0	 #, %sfp, _540, tmp657
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vsubps	%ymm2, %ymm12, %ymm2	 # _540, _35, _545
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:320:   return (__m256) ((__v8sf)__A * (__v8sf)__B);
	vmulps	%ymm2, %ymm2, %ymm2	 # _545, _545, _546
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:186:   return (__m256) __builtin_ia32_andnps256 ((__v8sf)__A, (__v8sf)__B);
	vandnps	%ymm0, %ymm7, %ymm0	 # tmp657, tmp660, tmp663
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:174:   return (__m256) __builtin_ia32_andps256 ((__v8sf)__A, (__v8sf)__B);
	vandps	.LC3(%rip), %ymm0, %ymm0	 #, tmp663, tmp664
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/fmaintrin.h:65:   return (__m256)__builtin_ia32_vfmaddps256 ((__v8sf)__A, (__v8sf)__B,
	vfmadd132ps	%ymm0, %ymm6, %ymm1	 # tmp664, tmp642, avg_vx_vec
	vfmadd132ps	%ymm0, %ymm8, %ymm15	 # tmp664, tmp643, avg_vy_vec
	vfmadd231ps	%ymm11, %ymm0, %ymm13	 # tmp648, tmp664, avg_x_vec
	vfmadd231ps	%ymm10, %ymm0, %ymm4	 # tmp650, tmp664, avg_y_vec
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:475:   return (__m256i)__builtin_ia32_cvtps2dq256 ((__v8sf) __A);
	vcvtps2dq	%ymm0, %ymm0	 # tmp664, tmp675
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avx2intrin.h:121:   return (__m256i) ((__v8su)__A + (__v8su)__B);
	vpaddd	160(%rsp), %ymm0, %ymm0	 # %sfp, tmp675, tmp677
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avx2intrin.h:121:   return (__m256i) ((__v8su)__A + (__v8su)__B);
	vpaddd	128(%rsp), %ymm0, %ymm6	 # %sfp, tmp677, tmp941
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:320:   return (__m256) ((__v8sf)__A * (__v8sf)__B);
	vmulps	%ymm2, %ymm3, %ymm3	 # _546, _536, tmp667
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avx2intrin.h:121:   return (__m256i) ((__v8su)__A + (__v8su)__B);
	vmovdqu	%ymm6, 320(%rsp)	 # tmp941, %sfp
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:320:   return (__m256) ((__v8sf)__A * (__v8sf)__B);
	vmulps	%ymm2, %ymm14, %ymm14	 # _546, _537, tmp669
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:174:   return (__m256) __builtin_ia32_andps256 ((__v8sf)__A, (__v8sf)__B);
	vandps	%ymm3, %ymm7, %ymm3	 # tmp667, tmp660, tmp668
	vandps	%ymm14, %ymm7, %ymm7	 # tmp669, tmp660, tmp670
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:149:   return (__m256) ((__v8sf)__A + (__v8sf)__B);
	vaddps	%ymm3, %ymm5, %ymm3	 # tmp668, _506, sep_x_vec
	vaddps	%ymm7, %ymm9, %ymm2	 # tmp670, _509, sep_y_vec
	vmovups	%ymm3, 352(%rsp)	 # sep_x_vec, %sfp
	vmovups	%ymm2, 384(%rsp)	 # sep_y_vec, %sfp
 # .\src\main.cpp:689:             for (Boid nearby_boid = row_begin; nearby_boid < row_end; nearby_boid += 8) {
	cmpl	%r14d, %esi	 # ivtmp.1656, row_end
	jg	.L227	 #,
.L226:
 # .\src\main.cpp:674:         for (int cy = -1; cy <= 1; cy++) {
	movl	488(%rsp), %eax	 # %sfp, _862
	addl	$1, %ebx	 #, ivtmp.1681
	cmpl	%eax, %ebx	 # _862, ivtmp.1681
	jne	.L222	 #,
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avx2intrin.h:275:   return (__m256i) ((__v8si)__A > (__v8si)__B);
	vmovaps	%ymm13, %ymm0	 # avg_x_vec, avg_x_vec
	movq	%rdx, %rcx	 # vxs, vxs
	vpxor	%xmm2, %xmm2, %xmm2	 # tmp680
	movq	%r15, %r14	 # vys, vys
	vmovdqu	320(%rsp), %ymm6	 # %sfp, isc
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vmovups	64(%rsp), %ymm12	 # %sfp, _52
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avx2intrin.h:275:   return (__m256i) ((__v8si)__A > (__v8si)__B);
	movq	480(%rsp), %rdi	 # %sfp, ivtmp.1685
	vmovups	448(%rsp), %ymm5	 # %sfp, _39
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:463:   return (__m256)__builtin_ia32_cvtdq2ps256 ((__v8si) __A);
	vcvtdq2ps	%ymm6, %ymm7	 # isc, tmp686
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:243:   return (__m256) ((__v8sf)__A / (__v8sf)__B);
	vdivps	%ymm7, %ymm1, %ymm1	 # tmp686, avg_vx_vec, tmp688
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avx2intrin.h:275:   return (__m256i) ((__v8si)__A > (__v8si)__B);
	vpcmpgtd	%ymm2, %ymm6, %ymm2	 # tmp680, tmp944, tmp681
	vmovups	384(%rsp), %ymm14	 # %sfp, sep_y_vec
	movq	776(%rsp), %rdx	 # rules, rules
 # .\src\main.cpp:789:         auto cmpx_2 = _mm256_cmp_ps(current_xs_vec, _mm256_set1_ps(world_width - rules->edge_width), _CMP_GT_OS);
	movl	500(%rsp), %r9d	 # %sfp, tmp711
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avx2intrin.h:275:   return (__m256i) ((__v8si)__A > (__v8si)__B);
	vmovups	352(%rsp), %ymm13	 # %sfp, sep_x_vec
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/fmaintrin.h:65:   return (__m256)__builtin_ia32_vfmaddps256 ((__v8sf)__A, (__v8sf)__B,
	vfmadd213ps	(%rcx,%rdi,4), %ymm5, %ymm13	 # MEM[(__m256_u * {ref-all})vxs_32 + ivtmp.1685_861 * 4], _39, sep_x_vec
	vmovaps	%ymm14, %ymm8	 # sep_y_vec, sep_y_vec
	vfmadd213ps	(%r15,%rdi,4), %ymm5, %ymm8	 # MEM[(__m256_u * {ref-all})vys_33 + ivtmp.1685_861 * 4], _39, sep_y_vec
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:1330: 				 __A, __A, __A, __A };
	vbroadcastss	16(%rdx), %ymm6	 # rules_15(D)->alignment_factor, tmp691
 # .\src\main.cpp:784:         const auto ew = _mm256_set1_ps(rules->edge_width);
	movl	24(%rdx), %eax	 # rules_15(D)->edge_width, _164
 # .\src\main.cpp:789:         auto cmpx_2 = _mm256_cmp_ps(current_xs_vec, _mm256_set1_ps(world_width - rules->edge_width), _CMP_GT_OS);
	subl	%eax, %r9d	 # _164, tmp711
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:243:   return (__m256) ((__v8sf)__A / (__v8sf)__B);
	vdivps	%ymm7, %ymm15, %ymm3	 # tmp686, avg_vy_vec, tmp693
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vsubps	%ymm13, %ymm1, %ymm1	 # tmp682, tmp688, tmp689
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:174:   return (__m256) __builtin_ia32_andps256 ((__v8sf)__A, (__v8sf)__B);
	vandps	%ymm2, %ymm1, %ymm1	 # tmp681, tmp689, tmp690
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/fmaintrin.h:65:   return (__m256)__builtin_ia32_vfmaddps256 ((__v8sf)__A, (__v8sf)__B,
	vfmadd132ps	%ymm6, %ymm13, %ymm1	 # tmp691, tmp682, tmp692
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vmovups	32(%rsp), %ymm13	 # %sfp, _50
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:243:   return (__m256) ((__v8sf)__A / (__v8sf)__B);
	vdivps	%ymm7, %ymm0, %ymm0	 # tmp686, avg_x_vec, tmp697
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vsubps	%ymm8, %ymm3, %ymm3	 # tmp684, tmp693, tmp694
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:174:   return (__m256) __builtin_ia32_andps256 ((__v8sf)__A, (__v8sf)__B);
	vandps	%ymm2, %ymm3, %ymm3	 # tmp681, tmp694, tmp695
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/fmaintrin.h:65:   return (__m256)__builtin_ia32_vfmaddps256 ((__v8sf)__A, (__v8sf)__B,
	vfmadd132ps	%ymm3, %ymm8, %ymm6	 # tmp695, tmp684, tmp696
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:1330: 				 __A, __A, __A, __A };
	vbroadcastss	20(%rdx), %ymm8	 # rules_15(D)->cohesion_factor, tmp700
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vsubps	%ymm13, %ymm0, %ymm3	 # _50, tmp697, tmp698
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:243:   return (__m256) ((__v8sf)__A / (__v8sf)__B);
	vdivps	%ymm7, %ymm4, %ymm0	 # tmp686, avg_y_vec, tmp702
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/fmaintrin.h:65:   return (__m256)__builtin_ia32_vfmaddps256 ((__v8sf)__A, (__v8sf)__B,
	vmovaps	%ymm8, %ymm4	 # tmp700, tmp700
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:174:   return (__m256) __builtin_ia32_andps256 ((__v8sf)__A, (__v8sf)__B);
	vandps	%ymm2, %ymm3, %ymm3	 # tmp681, tmp698, tmp699
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/fmaintrin.h:65:   return (__m256)__builtin_ia32_vfmaddps256 ((__v8sf)__A, (__v8sf)__B,
	vfmadd132ps	%ymm8, %ymm1, %ymm3	 # tmp700, tmp692, tmp701
 # .\src\main.cpp:784:         const auto ew = _mm256_set1_ps(rules->edge_width);
	vxorps	%xmm8, %xmm8, %xmm8	 # tmp950
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vsubps	%ymm12, %ymm0, %ymm0	 # _52, tmp702, tmp703
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:174:   return (__m256) __builtin_ia32_andps256 ((__v8sf)__A, (__v8sf)__B);
	vandps	%ymm2, %ymm0, %ymm0	 # tmp681, tmp703, tmp704
 # .\src\main.cpp:784:         const auto ew = _mm256_set1_ps(rules->edge_width);
	vcvtsi2ssl	%eax, %xmm8, %xmm2	 # _164, tmp950, tmp794
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/fmaintrin.h:65:   return (__m256)__builtin_ia32_vfmaddps256 ((__v8sf)__A, (__v8sf)__B,
	vfmadd132ps	%ymm0, %ymm6, %ymm4	 # tmp704, tmp696, tmp700
 # .\src\main.cpp:789:         auto cmpx_2 = _mm256_cmp_ps(current_xs_vec, _mm256_set1_ps(world_width - rules->edge_width), _CMP_GT_OS);
	vcvtsi2ssl	%r9d, %xmm8, %xmm0	 # tmp711, tmp953, tmp795
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:1330: 				 __A, __A, __A, __A };
	vbroadcastss	28(%rdx), %ymm6	 # rules_15(D)->edge_factor, tmp706
 # .\src\main.cpp:791:         auto cmpy_2 = _mm256_cmp_ps(current_ys_vec, _mm256_set1_ps(world_height - rules->edge_width), _CMP_GT_OS);
	movl	492(%rsp), %r9d	 # %sfp, tmp719
	subl	%eax, %r9d	 # _164, tmp719
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:1330: 				 __A, __A, __A, __A };
	vbroadcastss	%xmm2, %ymm2	 # _165, tmp707
	vbroadcastss	%xmm0, %ymm0	 # _169, tmp714
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:406:   return (__m256) __builtin_ia32_cmpps256 ((__v8sf)__X, (__v8sf)__Y,
	vcmpps	$1, %ymm2, %ymm13, %ymm7	 #, tmp707, _50, tmp708
	vcmpps	$14, %ymm0, %ymm13, %ymm1	 #, tmp714, _50, tmp712
 # .\src\main.cpp:791:         auto cmpy_2 = _mm256_cmp_ps(current_ys_vec, _mm256_set1_ps(world_height - rules->edge_width), _CMP_GT_OS);
	vcvtsi2ssl	%r9d, %xmm8, %xmm0	 # tmp719, tmp957, tmp796
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:229:   return (__m256) __builtin_ia32_blendvps256 ((__v8sf)__X,
	vbroadcastss	.LC4(%rip), %ymm8	 #, tmp960
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:406:   return (__m256) __builtin_ia32_cmpps256 ((__v8sf)__X, (__v8sf)__Y,
	vcmpps	$1, %ymm2, %ymm12, %ymm2	 #, tmp707, _52, tmp716
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:174:   return (__m256) __builtin_ia32_andps256 ((__v8sf)__A, (__v8sf)__B);
	vandps	%ymm6, %ymm7, %ymm7	 # tmp706, tmp708, tmp725
	vandps	%ymm6, %ymm1, %ymm1	 # tmp706, tmp712, tmp724
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vsubps	%ymm1, %ymm7, %ymm1	 # tmp724, tmp725, tmp726
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:1330: 				 __A, __A, __A, __A };
	vbroadcastss	%xmm0, %ymm0	 # _174, tmp722
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:406:   return (__m256) __builtin_ia32_cmpps256 ((__v8sf)__X, (__v8sf)__Y,
	vcmpps	$14, %ymm0, %ymm12, %ymm0	 #, tmp722, _52, tmp720
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:149:   return (__m256) ((__v8sf)__A + (__v8sf)__B);
	vaddps	%ymm3, %ymm1, %ymm3	 # tmp701, tmp726, _180
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:174:   return (__m256) __builtin_ia32_andps256 ((__v8sf)__A, (__v8sf)__B);
	vandps	%ymm6, %ymm2, %ymm1	 # tmp706, tmp716, tmp728
	vandps	%ymm6, %ymm0, %ymm0	 # tmp706, tmp720, tmp727
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vsubps	%ymm0, %ymm1, %ymm1	 # tmp727, tmp728, tmp729
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:320:   return (__m256) ((__v8sf)__A * (__v8sf)__B);
	vmulps	%ymm3, %ymm3, %ymm0	 # _180, _180, tmp730
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:149:   return (__m256) ((__v8sf)__A + (__v8sf)__B);
	vaddps	%ymm4, %ymm1, %ymm1	 # tmp705, tmp729, _184
	vfmadd231ps	%ymm1, %ymm1, %ymm0	 # _184, _184, _187
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:1041:   return (__m256) __builtin_ia32_rsqrtps256 ((__v8sf)__A);
	vrsqrtps	%ymm0, %ymm0	 # _187, tmp731
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:320:   return (__m256) ((__v8sf)__A * (__v8sf)__B);
	vmulps	.LC6(%rip), %ymm0, %ymm4	 #, tmp731, _189
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:406:   return (__m256) __builtin_ia32_cmpps256 ((__v8sf)__X, (__v8sf)__Y,
	vcmpps	$14, .LC8(%rip), %ymm0, %ymm7	 #,, tmp731, tmp735
	vcmpps	$1, .LC10(%rip), %ymm0, %ymm6	 #,, tmp731, tmp739
	vcmpps	$14, .LC12(%rip), %ymm0, %ymm2	 #,, tmp731, tmp743
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:320:   return (__m256) ((__v8sf)__A * (__v8sf)__B);
	vmulps	.LC14(%rip), %ymm0, %ymm0	 #, tmp731, tmp747
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:229:   return (__m256) __builtin_ia32_blendvps256 ((__v8sf)__X,
	vblendvps	%ymm7, %ymm0, %ymm8, %ymm0	 # tmp735, tmp747, tmp959, _196
	vblendvps	%ymm6, %ymm4, %ymm0, %ymm0	 # tmp739, _189, _196, _199
	vblendvps	%ymm2, .LC3(%rip), %ymm0, %ymm0	 # tmp743,, _199, _202
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:320:   return (__m256) ((__v8sf)__A * (__v8sf)__B);
	vmulps	%ymm0, %ymm3, %ymm3	 # _202, _180, tmp763
	vmulps	%ymm0, %ymm1, %ymm1	 # _202, _184, tmp764
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:911:   *(__m256_u *)__P = __A;
	vmovups	%ymm3, (%rcx,%rdi,4)	 # tmp763, MEM[(__m256_u * {ref-all})vxs_32 + ivtmp.1685_861 * 4]
	vmovups	%ymm1, (%r15,%rdi,4)	 # tmp764, MEM[(__m256_u * {ref-all})vys_33 + ivtmp.1685_861 * 4]
 # .\src\main.cpp:657:     for (Boid current_boid = cell_begin; current_boid < cell_end; current_boid += 8) {
	addq	$8, %rdi	 #, ivtmp.1685
	cmpl	%edi, 504(%rsp)	 # ivtmp.1685, %sfp
	jg	.L229	 #,
	movl	508(%rsp), %r11d	 # %sfp, y
	movq	%rdx, %rsi	 # rules, rules
	vzeroupper
.L221:
 # .\src\main.cpp:1006:     for (int x = 0; x < boid_map->m_xsize; x++) {
	movl	4(%rbp), %ebx	 # boid_map_14(D)->m_xsize, _20
 # .\src\main.cpp:1006:     for (int x = 0; x < boid_map->m_xsize; x++) {
	leal	1(%r12), %eax	 #, ivtmp.1699
	subl	$1, %r12d	 #, x
 # .\src\main.cpp:1046:     for (int y = thread_num * 2 + offset; y < boid_map->m_ysize; y += 2 * NUM_THREADS) {
	movl	0(%rbp), %r10d	 # boid_map_14(D)->m_ysize, prephitmp_81
 # .\src\main.cpp:1006:     for (int x = 0; x < boid_map->m_xsize; x++) {
	cmpl	%r12d, %ebx	 # x, _20
	jle	.L245	 #,
	movl	%eax, %r12d	 # ivtmp.1699, ivtmp.1699
	jmp	.L219	 #
.L243:
	vzeroupper
	jmp	.L221	 #
.L245:
 # .\src\main.cpp:1046:     for (int y = thread_num * 2 + offset; y < boid_map->m_ysize; y += 2 * NUM_THREADS) {
	movl	_ZL11num_threads(%rip), %eax	 # num_threads, num_threads
	movq	%rsi, 776(%rsp)	 # rules, rules
	movl	%r10d, %esi	 # prephitmp_81, prephitmp_81
	movq	%r13, %rdi	 # boid_list, boid_list
	movq	776(%rsp), %r10	 # rules, rules
	movl	%ebx, %r13d	 # _20, _20
	leal	(%r11,%rax,2), %r9d	 #, y
 # .\src\main.cpp:1046:     for (int y = thread_num * 2 + offset; y < boid_map->m_ysize; y += 2 * NUM_THREADS) {
	cmpl	%esi, %r9d	 # prephitmp_81, y
	jl	.L217	 #,
.L244:
 # .\src\main.cpp:1049: }
	vmovups	512(%rsp), %xmm6	 #,
	vmovups	528(%rsp), %xmm7	 #,
	vmovups	544(%rsp), %xmm8	 #,
	vmovups	560(%rsp), %xmm9	 #,
	vmovups	576(%rsp), %xmm10	 #,
	vmovups	592(%rsp), %xmm11	 #,
	vmovups	608(%rsp), %xmm12	 #,
	vmovups	624(%rsp), %xmm13	 #,
	vmovups	640(%rsp), %xmm14	 #,
	vmovups	656(%rsp), %xmm15	 #,
	addq	$680, %rsp	 #,
	popq	%rbx	 #
	popq	%rsi	 #
	popq	%rdi	 #
	popq	%rbp	 #
	popq	%r12	 #
	popq	%r13	 #
	popq	%r14	 #
	popq	%r15	 #
	ret	
	.seh_endproc
	.section	.text$_ZNSt13__future_base21_Async_state_commonV2D0Ev,"x"
	.linkonce discard
	.align 2
	.p2align 4
	.globl	_ZNSt13__future_base21_Async_state_commonV2D0Ev
	.def	_ZNSt13__future_base21_Async_state_commonV2D0Ev;	.scl	2;	.type	32;	.endef
	.seh_proc	_ZNSt13__future_base21_Async_state_commonV2D0Ev
_ZNSt13__future_base21_Async_state_commonV2D0Ev:
.LFB14615:
	pushq	%rbx	 #
	.seh_pushreg	%rbx
	subq	$32, %rsp	 #,
	.seh_stackalloc	32
	.seh_endprologue
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1718:     ~_Async_state_commonV2() = default;
	leaq	16+_ZTVNSt13__future_base21_Async_state_commonV2E(%rip), %rax	 #, tmp101
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_thread.h:172:       if (joinable())
	cmpq	$0, 48(%rcx)	 #, MEM[(const struct thread *)this_2(D) + 48B]._M_id._M_thread
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1718:     ~_Async_state_commonV2() = default;
	movq	%rax, (%rcx)	 # tmp101, this_2(D)->D.152781._vptr._State_baseV2
	movq	%rcx, %rbx	 # tmp99, this
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_thread.h:172:       if (joinable())
	jne	.L253	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/future:344:       virtual ~_State_baseV2() = default;
	leaq	16+_ZTVNSt13__future_base13_State_baseV2E(%rip), %rax	 #, tmp102
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/atomic_futex.h:288:   class __atomic_futex_unsigned
	leaq	32(%rcx), %rcx	 #, tmp94
 # C:/msys64/ucrt64/include/c++/13.1.0/future:344:       virtual ~_State_baseV2() = default;
	movq	%rax, -32(%rcx)	 # tmp102, MEM[(struct _State_baseV2 *)this_2(D)]._vptr._State_baseV2
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/atomic_futex.h:288:   class __atomic_futex_unsigned
	call	_ZNSt18condition_variableD1Ev	 #
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_mutex.h:77:     ~__mutex_base() noexcept { __gthread_mutex_destroy(&_M_mutex); }
	leaq	24(%rbx), %rcx	 #, tmp95
 # C:/msys64/ucrt64/include/c++/13.1.0/x86_64-w64-mingw32/bits/gthr-default.h:740:     return __gthrw_(pthread_mutex_destroy) (__mutex);
	call	pthread_mutex_destroy	 #
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/unique_ptr.h:403: 	if (__ptr != nullptr)
	movq	8(%rbx), %rcx	 # MEM[(struct _Result_base * &)this_2(D) + 8], _13
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/unique_ptr.h:403: 	if (__ptr != nullptr)
	testq	%rcx, %rcx	 # _13
	je	.L248	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/future:229: 	void operator()(_Result_base* __fr) const { __fr->_M_destroy(); }
	movq	(%rcx), %rax	 # _13->_vptr._Result_base, _14
	leaq	_ZNSt13__future_base7_ResultIvE10_M_destroyEv(%rip), %r8	 #, tmp97
	movq	(%rax), %rdx	 # *_14, _15
	cmpq	%r8, %rdx	 # tmp97, _15
	jne	.L249	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/future:672:       void _M_destroy() { delete this; }
	call	*16(%rax)	 # MEM[(int (*) () *)_14 + 16B]
.L248:
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1718:     ~_Async_state_commonV2() = default;
	movl	$64, %edx	 #,
	movq	%rbx, %rcx	 # this,
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1718:     ~_Async_state_commonV2() = default;
	addq	$32, %rsp	 #,
	popq	%rbx	 #
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1718:     ~_Async_state_commonV2() = default;
	jmp	_ZdlPvy	 #
	.p2align 4,,10
	.p2align 3
.L249:
 # C:/msys64/ucrt64/include/c++/13.1.0/future:229: 	void operator()(_Result_base* __fr) const { __fr->_M_destroy(); }
	call	*%rdx	 # _15
	jmp	.L248	 #
.L253:
 # C:/msys64/ucrt64/include/c++/13.1.0/x86_64-w64-mingw32/bits/c++config.h:322:     terminate();
	call	_ZSt9terminatev	 #
	nop	
	.seh_handler	__gxx_personality_seh0, @unwind, @except
	.seh_handlerdata
.LLSDA14615:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE14615-.LLSDACSB14615
.LLSDACSB14615:
.LLSDACSE14615:
	.section	.text$_ZNSt13__future_base21_Async_state_commonV2D0Ev,"x"
	.linkonce discard
	.seh_endproc
	.section	.text$_ZNSt23_Sp_counted_ptr_inplaceINSt13__future_base15_Deferred_stateINSt6thread8_InvokerISt5tupleIJPFviPK8BoidListPK7BoidMapEiPS5_PS8_EEEEvEESaIvELN9__gnu_cxx12_Lock_policyE2EE10_M_disposeEv,"x"
	.linkonce discard
	.align 2
	.p2align 4
	.globl	_ZNSt23_Sp_counted_ptr_inplaceINSt13__future_base15_Deferred_stateINSt6thread8_InvokerISt5tupleIJPFviPK8BoidListPK7BoidMapEiPS5_PS8_EEEEvEESaIvELN9__gnu_cxx12_Lock_policyE2EE10_M_disposeEv
	.def	_ZNSt23_Sp_counted_ptr_inplaceINSt13__future_base15_Deferred_stateINSt6thread8_InvokerISt5tupleIJPFviPK8BoidListPK7BoidMapEiPS5_PS8_EEEEvEESaIvELN9__gnu_cxx12_Lock_policyE2EE10_M_disposeEv;	.scl	2;	.type	32;	.endef
	.seh_proc	_ZNSt23_Sp_counted_ptr_inplaceINSt13__future_base15_Deferred_stateINSt6thread8_InvokerISt5tupleIJPFviPK8BoidListPK7BoidMapEiPS5_PS8_EEEEvEESaIvELN9__gnu_cxx12_Lock_policyE2EE10_M_disposeEv
_ZNSt23_Sp_counted_ptr_inplaceINSt13__future_base15_Deferred_stateINSt6thread8_InvokerISt5tupleIJPFviPK8BoidListPK7BoidMapEiPS5_PS8_EEEEvEESaIvELN9__gnu_cxx12_Lock_policyE2EE10_M_disposeEv:
.LFB14965:
	pushq	%rbx	 #
	.seh_pushreg	%rbx
	subq	$32, %rsp	 #,
	.seh_stackalloc	32
	.seh_endprologue
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1679:     class __future_base::_Deferred_state final
	leaq	16+_ZTVNSt13__future_base15_Deferred_stateINSt6thread8_InvokerISt5tupleIJPFviPK8BoidListPK7BoidMapEiPS4_PS7_EEEEvEE(%rip), %rax	 #, tmp108
	movq	%rax, 16(%rcx)	 # tmp108, MEM[(struct _Deferred_state *)this_2(D) + 16B].D.191400._vptr._State_baseV2
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:611:       _M_dispose() noexcept
	movq	%rcx, %rbx	 # tmp106, this
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/unique_ptr.h:403: 	if (__ptr != nullptr)
	movq	64(%rcx), %rcx	 # MEM[(struct _Result * &)this_2(D) + 64], _5
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/unique_ptr.h:403: 	if (__ptr != nullptr)
	testq	%rcx, %rcx	 # _5
	je	.L255	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/future:229: 	void operator()(_Result_base* __fr) const { __fr->_M_destroy(); }
	movq	(%rcx), %rax	 # MEM[(struct _Result_base *)_5]._vptr._Result_base, _6
	leaq	_ZNSt13__future_base7_ResultIvE10_M_destroyEv(%rip), %r8	 #, tmp97
	movq	(%rax), %rdx	 # *_6, _7
	cmpq	%r8, %rdx	 # tmp97, _7
	jne	.L256	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/future:672:       void _M_destroy() { delete this; }
	call	*16(%rax)	 # MEM[(int (*) () *)_6 + 16B]
.L255:
 # C:/msys64/ucrt64/include/c++/13.1.0/future:344:       virtual ~_State_baseV2() = default;
	leaq	16+_ZTVNSt13__future_base13_State_baseV2E(%rip), %rax	 #, tmp109
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/atomic_futex.h:288:   class __atomic_futex_unsigned
	leaq	48(%rbx), %rcx	 #, tmp101
 # C:/msys64/ucrt64/include/c++/13.1.0/future:344:       virtual ~_State_baseV2() = default;
	movq	%rax, 16(%rbx)	 # tmp109, MEM[(struct _State_baseV2 *)this_2(D) + 16B]._vptr._State_baseV2
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/atomic_futex.h:288:   class __atomic_futex_unsigned
	call	_ZNSt18condition_variableD1Ev	 #
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_mutex.h:77:     ~__mutex_base() noexcept { __gthread_mutex_destroy(&_M_mutex); }
	leaq	40(%rbx), %rcx	 #, tmp102
 # C:/msys64/ucrt64/include/c++/13.1.0/x86_64-w64-mingw32/bits/gthr-default.h:740:     return __gthrw_(pthread_mutex_destroy) (__mutex);
	call	pthread_mutex_destroy	 #
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/unique_ptr.h:403: 	if (__ptr != nullptr)
	movq	24(%rbx), %rcx	 # MEM[(struct _Result_base * &)this_2(D) + 24], _15
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/unique_ptr.h:403: 	if (__ptr != nullptr)
	testq	%rcx, %rcx	 # _15
	je	.L265	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/future:229: 	void operator()(_Result_base* __fr) const { __fr->_M_destroy(); }
	movq	(%rcx), %rax	 # _15->_vptr._Result_base, _16
	leaq	_ZNSt13__future_base7_ResultIvE10_M_destroyEv(%rip), %r8	 #, tmp104
	movq	(%rax), %rdx	 # *_16, _17
	cmpq	%r8, %rdx	 # tmp104, _17
	jne	.L258	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/future:672:       void _M_destroy() { delete this; }
	movq	16(%rax), %rax	 # MEM[(int (*) () *)_16 + 16B], MEM[(int (*) () *)_16 + 16B]
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:614:       }
	addq	$32, %rsp	 #,
	popq	%rbx	 #
 # C:/msys64/ucrt64/include/c++/13.1.0/future:672:       void _M_destroy() { delete this; }
	rex.W jmp	*%rax	 # MEM[(int (*) () *)_16 + 16B]
	.p2align 4,,10
	.p2align 3
.L258:
 # C:/msys64/ucrt64/include/c++/13.1.0/future:229: 	void operator()(_Result_base* __fr) const { __fr->_M_destroy(); }
	call	*%rdx	 # _17
	nop	
.L265:
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:614:       }
	addq	$32, %rsp	 #,
	popq	%rbx	 #
	ret	
	.p2align 4,,10
	.p2align 3
.L256:
 # C:/msys64/ucrt64/include/c++/13.1.0/future:229: 	void operator()(_Result_base* __fr) const { __fr->_M_destroy(); }
	call	*%rdx	 # _7
	jmp	.L255	 #
	.seh_handler	__gxx_personality_seh0, @unwind, @except
	.seh_handlerdata
.LLSDA14965:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE14965-.LLSDACSB14965
.LLSDACSB14965:
.LLSDACSE14965:
	.section	.text$_ZNSt23_Sp_counted_ptr_inplaceINSt13__future_base15_Deferred_stateINSt6thread8_InvokerISt5tupleIJPFviPK8BoidListPK7BoidMapEiPS5_PS8_EEEEvEESaIvELN9__gnu_cxx12_Lock_policyE2EE10_M_disposeEv,"x"
	.linkonce discard
	.seh_endproc
	.section	.text$_ZNSt23_Sp_counted_ptr_inplaceINSt13__future_base15_Deferred_stateINSt6thread8_InvokerISt5tupleIJPFvibPK7BoidMapPK5RulesPK8BoidListEibS7_SA_SD_EEEEvEESaIvELN9__gnu_cxx12_Lock_policyE2EE10_M_disposeEv,"x"
	.linkonce discard
	.align 2
	.p2align 4
	.globl	_ZNSt23_Sp_counted_ptr_inplaceINSt13__future_base15_Deferred_stateINSt6thread8_InvokerISt5tupleIJPFvibPK7BoidMapPK5RulesPK8BoidListEibS7_SA_SD_EEEEvEESaIvELN9__gnu_cxx12_Lock_policyE2EE10_M_disposeEv
	.def	_ZNSt23_Sp_counted_ptr_inplaceINSt13__future_base15_Deferred_stateINSt6thread8_InvokerISt5tupleIJPFvibPK7BoidMapPK5RulesPK8BoidListEibS7_SA_SD_EEEEvEESaIvELN9__gnu_cxx12_Lock_policyE2EE10_M_disposeEv;	.scl	2;	.type	32;	.endef
	.seh_proc	_ZNSt23_Sp_counted_ptr_inplaceINSt13__future_base15_Deferred_stateINSt6thread8_InvokerISt5tupleIJPFvibPK7BoidMapPK5RulesPK8BoidListEibS7_SA_SD_EEEEvEESaIvELN9__gnu_cxx12_Lock_policyE2EE10_M_disposeEv
_ZNSt23_Sp_counted_ptr_inplaceINSt13__future_base15_Deferred_stateINSt6thread8_InvokerISt5tupleIJPFvibPK7BoidMapPK5RulesPK8BoidListEibS7_SA_SD_EEEEvEESaIvELN9__gnu_cxx12_Lock_policyE2EE10_M_disposeEv:
.LFB14951:
	pushq	%rbx	 #
	.seh_pushreg	%rbx
	subq	$32, %rsp	 #,
	.seh_stackalloc	32
	.seh_endprologue
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1679:     class __future_base::_Deferred_state final
	leaq	16+_ZTVNSt13__future_base15_Deferred_stateINSt6thread8_InvokerISt5tupleIJPFvibPK7BoidMapPK5RulesPK8BoidListEibS6_S9_SC_EEEEvEE(%rip), %rax	 #, tmp108
	movq	%rax, 16(%rcx)	 # tmp108, MEM[(struct _Deferred_state *)this_2(D) + 16B].D.197963._vptr._State_baseV2
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:611:       _M_dispose() noexcept
	movq	%rcx, %rbx	 # tmp106, this
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/unique_ptr.h:403: 	if (__ptr != nullptr)
	movq	64(%rcx), %rcx	 # MEM[(struct _Result * &)this_2(D) + 64], _5
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/unique_ptr.h:403: 	if (__ptr != nullptr)
	testq	%rcx, %rcx	 # _5
	je	.L267	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/future:229: 	void operator()(_Result_base* __fr) const { __fr->_M_destroy(); }
	movq	(%rcx), %rax	 # MEM[(struct _Result_base *)_5]._vptr._Result_base, _6
	leaq	_ZNSt13__future_base7_ResultIvE10_M_destroyEv(%rip), %r8	 #, tmp97
	movq	(%rax), %rdx	 # *_6, _7
	cmpq	%r8, %rdx	 # tmp97, _7
	jne	.L268	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/future:672:       void _M_destroy() { delete this; }
	call	*16(%rax)	 # MEM[(int (*) () *)_6 + 16B]
.L267:
 # C:/msys64/ucrt64/include/c++/13.1.0/future:344:       virtual ~_State_baseV2() = default;
	leaq	16+_ZTVNSt13__future_base13_State_baseV2E(%rip), %rax	 #, tmp109
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/atomic_futex.h:288:   class __atomic_futex_unsigned
	leaq	48(%rbx), %rcx	 #, tmp101
 # C:/msys64/ucrt64/include/c++/13.1.0/future:344:       virtual ~_State_baseV2() = default;
	movq	%rax, 16(%rbx)	 # tmp109, MEM[(struct _State_baseV2 *)this_2(D) + 16B]._vptr._State_baseV2
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/atomic_futex.h:288:   class __atomic_futex_unsigned
	call	_ZNSt18condition_variableD1Ev	 #
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_mutex.h:77:     ~__mutex_base() noexcept { __gthread_mutex_destroy(&_M_mutex); }
	leaq	40(%rbx), %rcx	 #, tmp102
 # C:/msys64/ucrt64/include/c++/13.1.0/x86_64-w64-mingw32/bits/gthr-default.h:740:     return __gthrw_(pthread_mutex_destroy) (__mutex);
	call	pthread_mutex_destroy	 #
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/unique_ptr.h:403: 	if (__ptr != nullptr)
	movq	24(%rbx), %rcx	 # MEM[(struct _Result_base * &)this_2(D) + 24], _15
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/unique_ptr.h:403: 	if (__ptr != nullptr)
	testq	%rcx, %rcx	 # _15
	je	.L277	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/future:229: 	void operator()(_Result_base* __fr) const { __fr->_M_destroy(); }
	movq	(%rcx), %rax	 # _15->_vptr._Result_base, _16
	leaq	_ZNSt13__future_base7_ResultIvE10_M_destroyEv(%rip), %r8	 #, tmp104
	movq	(%rax), %rdx	 # *_16, _17
	cmpq	%r8, %rdx	 # tmp104, _17
	jne	.L270	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/future:672:       void _M_destroy() { delete this; }
	movq	16(%rax), %rax	 # MEM[(int (*) () *)_16 + 16B], MEM[(int (*) () *)_16 + 16B]
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:614:       }
	addq	$32, %rsp	 #,
	popq	%rbx	 #
 # C:/msys64/ucrt64/include/c++/13.1.0/future:672:       void _M_destroy() { delete this; }
	rex.W jmp	*%rax	 # MEM[(int (*) () *)_16 + 16B]
	.p2align 4,,10
	.p2align 3
.L270:
 # C:/msys64/ucrt64/include/c++/13.1.0/future:229: 	void operator()(_Result_base* __fr) const { __fr->_M_destroy(); }
	call	*%rdx	 # _17
	nop	
.L277:
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:614:       }
	addq	$32, %rsp	 #,
	popq	%rbx	 #
	ret	
	.p2align 4,,10
	.p2align 3
.L268:
 # C:/msys64/ucrt64/include/c++/13.1.0/future:229: 	void operator()(_Result_base* __fr) const { __fr->_M_destroy(); }
	call	*%rdx	 # _7
	jmp	.L267	 #
	.seh_handler	__gxx_personality_seh0, @unwind, @except
	.seh_handlerdata
.LLSDA14951:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE14951-.LLSDACSB14951
.LLSDACSB14951:
.LLSDACSE14951:
	.section	.text$_ZNSt23_Sp_counted_ptr_inplaceINSt13__future_base15_Deferred_stateINSt6thread8_InvokerISt5tupleIJPFvibPK7BoidMapPK5RulesPK8BoidListEibS7_SA_SD_EEEEvEESaIvELN9__gnu_cxx12_Lock_policyE2EE10_M_disposeEv,"x"
	.linkonce discard
	.seh_endproc
	.section	.text$_ZNSt13__future_base15_Deferred_stateINSt6thread8_InvokerISt5tupleIJPFvibPK7BoidMapPK5RulesPK8BoidListEibS6_S9_SC_EEEEvED1Ev,"x"
	.linkonce discard
	.align 2
	.p2align 4
	.globl	_ZNSt13__future_base15_Deferred_stateINSt6thread8_InvokerISt5tupleIJPFvibPK7BoidMapPK5RulesPK8BoidListEibS6_S9_SC_EEEEvED1Ev
	.def	_ZNSt13__future_base15_Deferred_stateINSt6thread8_InvokerISt5tupleIJPFvibPK7BoidMapPK5RulesPK8BoidListEibS6_S9_SC_EEEEvED1Ev;	.scl	2;	.type	32;	.endef
	.seh_proc	_ZNSt13__future_base15_Deferred_stateINSt6thread8_InvokerISt5tupleIJPFvibPK7BoidMapPK5RulesPK8BoidListEibS6_S9_SC_EEEEvED1Ev
_ZNSt13__future_base15_Deferred_stateINSt6thread8_InvokerISt5tupleIJPFvibPK7BoidMapPK5RulesPK8BoidListEibS6_S9_SC_EEEEvED1Ev:
.LFB14929:
	pushq	%rbx	 #
	.seh_pushreg	%rbx
	subq	$32, %rsp	 #,
	.seh_stackalloc	32
	.seh_endprologue
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1679:     class __future_base::_Deferred_state final
	leaq	16+_ZTVNSt13__future_base15_Deferred_stateINSt6thread8_InvokerISt5tupleIJPFvibPK7BoidMapPK5RulesPK8BoidListEibS6_S9_SC_EEEEvEE(%rip), %rax	 #, tmp108
	movq	%rax, (%rcx)	 # tmp108, this_3(D)->D.197963._vptr._State_baseV2
	movq	%rcx, %rbx	 # tmp106, this
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/unique_ptr.h:403: 	if (__ptr != nullptr)
	movq	48(%rcx), %rcx	 # MEM[(struct _Result * &)this_3(D) + 48], _7
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/unique_ptr.h:403: 	if (__ptr != nullptr)
	testq	%rcx, %rcx	 # _7
	je	.L279	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/future:229: 	void operator()(_Result_base* __fr) const { __fr->_M_destroy(); }
	movq	(%rcx), %rax	 # MEM[(struct _Result_base *)_7]._vptr._Result_base, _8
	leaq	_ZNSt13__future_base7_ResultIvE10_M_destroyEv(%rip), %r8	 #, tmp97
	movq	(%rax), %rdx	 # *_8, _9
	cmpq	%r8, %rdx	 # tmp97, _9
	jne	.L280	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/future:672:       void _M_destroy() { delete this; }
	call	*16(%rax)	 # MEM[(int (*) () *)_8 + 16B]
.L279:
 # C:/msys64/ucrt64/include/c++/13.1.0/future:344:       virtual ~_State_baseV2() = default;
	leaq	16+_ZTVNSt13__future_base13_State_baseV2E(%rip), %rax	 #, tmp109
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/atomic_futex.h:288:   class __atomic_futex_unsigned
	leaq	32(%rbx), %rcx	 #, tmp101
 # C:/msys64/ucrt64/include/c++/13.1.0/future:344:       virtual ~_State_baseV2() = default;
	movq	%rax, (%rbx)	 # tmp109, MEM[(struct _State_baseV2 *)this_3(D)]._vptr._State_baseV2
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/atomic_futex.h:288:   class __atomic_futex_unsigned
	call	_ZNSt18condition_variableD1Ev	 #
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_mutex.h:77:     ~__mutex_base() noexcept { __gthread_mutex_destroy(&_M_mutex); }
	leaq	24(%rbx), %rcx	 #, tmp102
 # C:/msys64/ucrt64/include/c++/13.1.0/x86_64-w64-mingw32/bits/gthr-default.h:740:     return __gthrw_(pthread_mutex_destroy) (__mutex);
	call	pthread_mutex_destroy	 #
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/unique_ptr.h:403: 	if (__ptr != nullptr)
	movq	8(%rbx), %rcx	 # MEM[(struct _Result_base * &)this_3(D) + 8], _19
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/unique_ptr.h:403: 	if (__ptr != nullptr)
	testq	%rcx, %rcx	 # _19
	je	.L289	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/future:229: 	void operator()(_Result_base* __fr) const { __fr->_M_destroy(); }
	movq	(%rcx), %rax	 # _19->_vptr._Result_base, _20
	leaq	_ZNSt13__future_base7_ResultIvE10_M_destroyEv(%rip), %r8	 #, tmp104
	movq	(%rax), %rdx	 # *_20, _21
	cmpq	%r8, %rdx	 # tmp104, _21
	jne	.L282	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/future:672:       void _M_destroy() { delete this; }
	movq	16(%rax), %rax	 # MEM[(int (*) () *)_20 + 16B], MEM[(int (*) () *)_20 + 16B]
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1679:     class __future_base::_Deferred_state final
	addq	$32, %rsp	 #,
	popq	%rbx	 #
 # C:/msys64/ucrt64/include/c++/13.1.0/future:672:       void _M_destroy() { delete this; }
	rex.W jmp	*%rax	 # MEM[(int (*) () *)_20 + 16B]
	.p2align 4,,10
	.p2align 3
.L282:
 # C:/msys64/ucrt64/include/c++/13.1.0/future:229: 	void operator()(_Result_base* __fr) const { __fr->_M_destroy(); }
	call	*%rdx	 # _21
	nop	
.L289:
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1679:     class __future_base::_Deferred_state final
	addq	$32, %rsp	 #,
	popq	%rbx	 #
	ret	
	.p2align 4,,10
	.p2align 3
.L280:
 # C:/msys64/ucrt64/include/c++/13.1.0/future:229: 	void operator()(_Result_base* __fr) const { __fr->_M_destroy(); }
	call	*%rdx	 # _9
	jmp	.L279	 #
	.seh_handler	__gxx_personality_seh0, @unwind, @except
	.seh_handlerdata
.LLSDA14929:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE14929-.LLSDACSB14929
.LLSDACSB14929:
.LLSDACSE14929:
	.section	.text$_ZNSt13__future_base15_Deferred_stateINSt6thread8_InvokerISt5tupleIJPFvibPK7BoidMapPK5RulesPK8BoidListEibS6_S9_SC_EEEEvED1Ev,"x"
	.linkonce discard
	.seh_endproc
	.section	.text$_ZNSt13__future_base15_Deferred_stateINSt6thread8_InvokerISt5tupleIJPFviPK8BoidListPK7BoidMapEiPS4_PS7_EEEEvED1Ev,"x"
	.linkonce discard
	.align 2
	.p2align 4
	.globl	_ZNSt13__future_base15_Deferred_stateINSt6thread8_InvokerISt5tupleIJPFviPK8BoidListPK7BoidMapEiPS4_PS7_EEEEvED1Ev
	.def	_ZNSt13__future_base15_Deferred_stateINSt6thread8_InvokerISt5tupleIJPFviPK8BoidListPK7BoidMapEiPS4_PS7_EEEEvED1Ev;	.scl	2;	.type	32;	.endef
	.seh_proc	_ZNSt13__future_base15_Deferred_stateINSt6thread8_InvokerISt5tupleIJPFviPK8BoidListPK7BoidMapEiPS4_PS7_EEEEvED1Ev
_ZNSt13__future_base15_Deferred_stateINSt6thread8_InvokerISt5tupleIJPFviPK8BoidListPK7BoidMapEiPS4_PS7_EEEEvED1Ev:
.LFB14933:
	pushq	%rbx	 #
	.seh_pushreg	%rbx
	subq	$32, %rsp	 #,
	.seh_stackalloc	32
	.seh_endprologue
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1679:     class __future_base::_Deferred_state final
	leaq	16+_ZTVNSt13__future_base15_Deferred_stateINSt6thread8_InvokerISt5tupleIJPFviPK8BoidListPK7BoidMapEiPS4_PS7_EEEEvEE(%rip), %rax	 #, tmp108
	movq	%rax, (%rcx)	 # tmp108, this_3(D)->D.191400._vptr._State_baseV2
	movq	%rcx, %rbx	 # tmp106, this
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/unique_ptr.h:403: 	if (__ptr != nullptr)
	movq	48(%rcx), %rcx	 # MEM[(struct _Result * &)this_3(D) + 48], _7
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/unique_ptr.h:403: 	if (__ptr != nullptr)
	testq	%rcx, %rcx	 # _7
	je	.L291	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/future:229: 	void operator()(_Result_base* __fr) const { __fr->_M_destroy(); }
	movq	(%rcx), %rax	 # MEM[(struct _Result_base *)_7]._vptr._Result_base, _8
	leaq	_ZNSt13__future_base7_ResultIvE10_M_destroyEv(%rip), %r8	 #, tmp97
	movq	(%rax), %rdx	 # *_8, _9
	cmpq	%r8, %rdx	 # tmp97, _9
	jne	.L292	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/future:672:       void _M_destroy() { delete this; }
	call	*16(%rax)	 # MEM[(int (*) () *)_8 + 16B]
.L291:
 # C:/msys64/ucrt64/include/c++/13.1.0/future:344:       virtual ~_State_baseV2() = default;
	leaq	16+_ZTVNSt13__future_base13_State_baseV2E(%rip), %rax	 #, tmp109
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/atomic_futex.h:288:   class __atomic_futex_unsigned
	leaq	32(%rbx), %rcx	 #, tmp101
 # C:/msys64/ucrt64/include/c++/13.1.0/future:344:       virtual ~_State_baseV2() = default;
	movq	%rax, (%rbx)	 # tmp109, MEM[(struct _State_baseV2 *)this_3(D)]._vptr._State_baseV2
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/atomic_futex.h:288:   class __atomic_futex_unsigned
	call	_ZNSt18condition_variableD1Ev	 #
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_mutex.h:77:     ~__mutex_base() noexcept { __gthread_mutex_destroy(&_M_mutex); }
	leaq	24(%rbx), %rcx	 #, tmp102
 # C:/msys64/ucrt64/include/c++/13.1.0/x86_64-w64-mingw32/bits/gthr-default.h:740:     return __gthrw_(pthread_mutex_destroy) (__mutex);
	call	pthread_mutex_destroy	 #
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/unique_ptr.h:403: 	if (__ptr != nullptr)
	movq	8(%rbx), %rcx	 # MEM[(struct _Result_base * &)this_3(D) + 8], _19
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/unique_ptr.h:403: 	if (__ptr != nullptr)
	testq	%rcx, %rcx	 # _19
	je	.L301	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/future:229: 	void operator()(_Result_base* __fr) const { __fr->_M_destroy(); }
	movq	(%rcx), %rax	 # _19->_vptr._Result_base, _20
	leaq	_ZNSt13__future_base7_ResultIvE10_M_destroyEv(%rip), %r8	 #, tmp104
	movq	(%rax), %rdx	 # *_20, _21
	cmpq	%r8, %rdx	 # tmp104, _21
	jne	.L294	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/future:672:       void _M_destroy() { delete this; }
	movq	16(%rax), %rax	 # MEM[(int (*) () *)_20 + 16B], MEM[(int (*) () *)_20 + 16B]
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1679:     class __future_base::_Deferred_state final
	addq	$32, %rsp	 #,
	popq	%rbx	 #
 # C:/msys64/ucrt64/include/c++/13.1.0/future:672:       void _M_destroy() { delete this; }
	rex.W jmp	*%rax	 # MEM[(int (*) () *)_20 + 16B]
	.p2align 4,,10
	.p2align 3
.L294:
 # C:/msys64/ucrt64/include/c++/13.1.0/future:229: 	void operator()(_Result_base* __fr) const { __fr->_M_destroy(); }
	call	*%rdx	 # _21
	nop	
.L301:
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1679:     class __future_base::_Deferred_state final
	addq	$32, %rsp	 #,
	popq	%rbx	 #
	ret	
	.p2align 4,,10
	.p2align 3
.L292:
 # C:/msys64/ucrt64/include/c++/13.1.0/future:229: 	void operator()(_Result_base* __fr) const { __fr->_M_destroy(); }
	call	*%rdx	 # _9
	jmp	.L291	 #
	.seh_handler	__gxx_personality_seh0, @unwind, @except
	.seh_handlerdata
.LLSDA14933:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE14933-.LLSDACSB14933
.LLSDACSB14933:
.LLSDACSE14933:
	.section	.text$_ZNSt13__future_base15_Deferred_stateINSt6thread8_InvokerISt5tupleIJPFviPK8BoidListPK7BoidMapEiPS4_PS7_EEEEvED1Ev,"x"
	.linkonce discard
	.seh_endproc
	.section	.text$_ZNSt13__future_base15_Deferred_stateINSt6thread8_InvokerISt5tupleIJPFvibPK7BoidMapPK5RulesPK8BoidListEibS6_S9_SC_EEEEvED0Ev,"x"
	.linkonce discard
	.align 2
	.p2align 4
	.globl	_ZNSt13__future_base15_Deferred_stateINSt6thread8_InvokerISt5tupleIJPFvibPK7BoidMapPK5RulesPK8BoidListEibS6_S9_SC_EEEEvED0Ev
	.def	_ZNSt13__future_base15_Deferred_stateINSt6thread8_InvokerISt5tupleIJPFvibPK7BoidMapPK5RulesPK8BoidListEibS6_S9_SC_EEEEvED0Ev;	.scl	2;	.type	32;	.endef
	.seh_proc	_ZNSt13__future_base15_Deferred_stateINSt6thread8_InvokerISt5tupleIJPFvibPK7BoidMapPK5RulesPK8BoidListEibS6_S9_SC_EEEEvED0Ev
_ZNSt13__future_base15_Deferred_stateINSt6thread8_InvokerISt5tupleIJPFvibPK7BoidMapPK5RulesPK8BoidListEibS6_S9_SC_EEEEvED0Ev:
.LFB14930:
	pushq	%rbx	 #
	.seh_pushreg	%rbx
	subq	$32, %rsp	 #,
	.seh_stackalloc	32
	.seh_endprologue
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1679:     class __future_base::_Deferred_state final
	leaq	16+_ZTVNSt13__future_base15_Deferred_stateINSt6thread8_InvokerISt5tupleIJPFvibPK7BoidMapPK5RulesPK8BoidListEibS6_S9_SC_EEEEvEE(%rip), %rax	 #, tmp108
	movq	%rax, (%rcx)	 # tmp108, this_2(D)->D.197963._vptr._State_baseV2
	movq	%rcx, %rbx	 # tmp106, this
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/unique_ptr.h:403: 	if (__ptr != nullptr)
	movq	48(%rcx), %rcx	 # MEM[(struct _Result * &)this_2(D) + 48], _5
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/unique_ptr.h:403: 	if (__ptr != nullptr)
	testq	%rcx, %rcx	 # _5
	je	.L303	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/future:229: 	void operator()(_Result_base* __fr) const { __fr->_M_destroy(); }
	movq	(%rcx), %rax	 # MEM[(struct _Result_base *)_5]._vptr._Result_base, _6
	leaq	_ZNSt13__future_base7_ResultIvE10_M_destroyEv(%rip), %r8	 #, tmp97
	movq	(%rax), %rdx	 # *_6, _7
	cmpq	%r8, %rdx	 # tmp97, _7
	jne	.L304	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/future:672:       void _M_destroy() { delete this; }
	call	*16(%rax)	 # MEM[(int (*) () *)_6 + 16B]
.L303:
 # C:/msys64/ucrt64/include/c++/13.1.0/future:344:       virtual ~_State_baseV2() = default;
	leaq	16+_ZTVNSt13__future_base13_State_baseV2E(%rip), %rax	 #, tmp109
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/atomic_futex.h:288:   class __atomic_futex_unsigned
	leaq	32(%rbx), %rcx	 #, tmp101
 # C:/msys64/ucrt64/include/c++/13.1.0/future:344:       virtual ~_State_baseV2() = default;
	movq	%rax, (%rbx)	 # tmp109, MEM[(struct _State_baseV2 *)this_2(D)]._vptr._State_baseV2
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/atomic_futex.h:288:   class __atomic_futex_unsigned
	call	_ZNSt18condition_variableD1Ev	 #
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_mutex.h:77:     ~__mutex_base() noexcept { __gthread_mutex_destroy(&_M_mutex); }
	leaq	24(%rbx), %rcx	 #, tmp102
 # C:/msys64/ucrt64/include/c++/13.1.0/x86_64-w64-mingw32/bits/gthr-default.h:740:     return __gthrw_(pthread_mutex_destroy) (__mutex);
	call	pthread_mutex_destroy	 #
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/unique_ptr.h:403: 	if (__ptr != nullptr)
	movq	8(%rbx), %rcx	 # MEM[(struct _Result_base * &)this_2(D) + 8], _15
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/unique_ptr.h:403: 	if (__ptr != nullptr)
	testq	%rcx, %rcx	 # _15
	je	.L305	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/future:229: 	void operator()(_Result_base* __fr) const { __fr->_M_destroy(); }
	movq	(%rcx), %rax	 # _15->_vptr._Result_base, _16
	leaq	_ZNSt13__future_base7_ResultIvE10_M_destroyEv(%rip), %r8	 #, tmp104
	movq	(%rax), %rdx	 # *_16, _17
	cmpq	%r8, %rdx	 # tmp104, _17
	jne	.L306	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/future:672:       void _M_destroy() { delete this; }
	call	*16(%rax)	 # MEM[(int (*) () *)_16 + 16B]
.L305:
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1679:     class __future_base::_Deferred_state final
	movl	$96, %edx	 #,
	movq	%rbx, %rcx	 # this,
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1679:     class __future_base::_Deferred_state final
	addq	$32, %rsp	 #,
	popq	%rbx	 #
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1679:     class __future_base::_Deferred_state final
	jmp	_ZdlPvy	 #
	.p2align 4,,10
	.p2align 3
.L304:
 # C:/msys64/ucrt64/include/c++/13.1.0/future:229: 	void operator()(_Result_base* __fr) const { __fr->_M_destroy(); }
	call	*%rdx	 # _7
	jmp	.L303	 #
	.p2align 4,,10
	.p2align 3
.L306:
	call	*%rdx	 # _17
	jmp	.L305	 #
	.seh_handler	__gxx_personality_seh0, @unwind, @except
	.seh_handlerdata
.LLSDA14930:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE14930-.LLSDACSB14930
.LLSDACSB14930:
.LLSDACSE14930:
	.section	.text$_ZNSt13__future_base15_Deferred_stateINSt6thread8_InvokerISt5tupleIJPFvibPK7BoidMapPK5RulesPK8BoidListEibS6_S9_SC_EEEEvED0Ev,"x"
	.linkonce discard
	.seh_endproc
	.section	.text$_ZNSt13__future_base15_Deferred_stateINSt6thread8_InvokerISt5tupleIJPFviPK8BoidListPK7BoidMapEiPS4_PS7_EEEEvED0Ev,"x"
	.linkonce discard
	.align 2
	.p2align 4
	.globl	_ZNSt13__future_base15_Deferred_stateINSt6thread8_InvokerISt5tupleIJPFviPK8BoidListPK7BoidMapEiPS4_PS7_EEEEvED0Ev
	.def	_ZNSt13__future_base15_Deferred_stateINSt6thread8_InvokerISt5tupleIJPFviPK8BoidListPK7BoidMapEiPS4_PS7_EEEEvED0Ev;	.scl	2;	.type	32;	.endef
	.seh_proc	_ZNSt13__future_base15_Deferred_stateINSt6thread8_InvokerISt5tupleIJPFviPK8BoidListPK7BoidMapEiPS4_PS7_EEEEvED0Ev
_ZNSt13__future_base15_Deferred_stateINSt6thread8_InvokerISt5tupleIJPFviPK8BoidListPK7BoidMapEiPS4_PS7_EEEEvED0Ev:
.LFB14934:
	pushq	%rbx	 #
	.seh_pushreg	%rbx
	subq	$32, %rsp	 #,
	.seh_stackalloc	32
	.seh_endprologue
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1679:     class __future_base::_Deferred_state final
	leaq	16+_ZTVNSt13__future_base15_Deferred_stateINSt6thread8_InvokerISt5tupleIJPFviPK8BoidListPK7BoidMapEiPS4_PS7_EEEEvEE(%rip), %rax	 #, tmp108
	movq	%rax, (%rcx)	 # tmp108, this_2(D)->D.191400._vptr._State_baseV2
	movq	%rcx, %rbx	 # tmp106, this
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/unique_ptr.h:403: 	if (__ptr != nullptr)
	movq	48(%rcx), %rcx	 # MEM[(struct _Result * &)this_2(D) + 48], _5
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/unique_ptr.h:403: 	if (__ptr != nullptr)
	testq	%rcx, %rcx	 # _5
	je	.L314	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/future:229: 	void operator()(_Result_base* __fr) const { __fr->_M_destroy(); }
	movq	(%rcx), %rax	 # MEM[(struct _Result_base *)_5]._vptr._Result_base, _6
	leaq	_ZNSt13__future_base7_ResultIvE10_M_destroyEv(%rip), %r8	 #, tmp97
	movq	(%rax), %rdx	 # *_6, _7
	cmpq	%r8, %rdx	 # tmp97, _7
	jne	.L315	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/future:672:       void _M_destroy() { delete this; }
	call	*16(%rax)	 # MEM[(int (*) () *)_6 + 16B]
.L314:
 # C:/msys64/ucrt64/include/c++/13.1.0/future:344:       virtual ~_State_baseV2() = default;
	leaq	16+_ZTVNSt13__future_base13_State_baseV2E(%rip), %rax	 #, tmp109
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/atomic_futex.h:288:   class __atomic_futex_unsigned
	leaq	32(%rbx), %rcx	 #, tmp101
 # C:/msys64/ucrt64/include/c++/13.1.0/future:344:       virtual ~_State_baseV2() = default;
	movq	%rax, (%rbx)	 # tmp109, MEM[(struct _State_baseV2 *)this_2(D)]._vptr._State_baseV2
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/atomic_futex.h:288:   class __atomic_futex_unsigned
	call	_ZNSt18condition_variableD1Ev	 #
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_mutex.h:77:     ~__mutex_base() noexcept { __gthread_mutex_destroy(&_M_mutex); }
	leaq	24(%rbx), %rcx	 #, tmp102
 # C:/msys64/ucrt64/include/c++/13.1.0/x86_64-w64-mingw32/bits/gthr-default.h:740:     return __gthrw_(pthread_mutex_destroy) (__mutex);
	call	pthread_mutex_destroy	 #
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/unique_ptr.h:403: 	if (__ptr != nullptr)
	movq	8(%rbx), %rcx	 # MEM[(struct _Result_base * &)this_2(D) + 8], _15
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/unique_ptr.h:403: 	if (__ptr != nullptr)
	testq	%rcx, %rcx	 # _15
	je	.L316	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/future:229: 	void operator()(_Result_base* __fr) const { __fr->_M_destroy(); }
	movq	(%rcx), %rax	 # _15->_vptr._Result_base, _16
	leaq	_ZNSt13__future_base7_ResultIvE10_M_destroyEv(%rip), %r8	 #, tmp104
	movq	(%rax), %rdx	 # *_16, _17
	cmpq	%r8, %rdx	 # tmp104, _17
	jne	.L317	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/future:672:       void _M_destroy() { delete this; }
	call	*16(%rax)	 # MEM[(int (*) () *)_16 + 16B]
.L316:
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1679:     class __future_base::_Deferred_state final
	movl	$88, %edx	 #,
	movq	%rbx, %rcx	 # this,
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1679:     class __future_base::_Deferred_state final
	addq	$32, %rsp	 #,
	popq	%rbx	 #
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1679:     class __future_base::_Deferred_state final
	jmp	_ZdlPvy	 #
	.p2align 4,,10
	.p2align 3
.L315:
 # C:/msys64/ucrt64/include/c++/13.1.0/future:229: 	void operator()(_Result_base* __fr) const { __fr->_M_destroy(); }
	call	*%rdx	 # _7
	jmp	.L314	 #
	.p2align 4,,10
	.p2align 3
.L317:
	call	*%rdx	 # _17
	jmp	.L316	 #
	.seh_handler	__gxx_personality_seh0, @unwind, @except
	.seh_handlerdata
.LLSDA14934:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE14934-.LLSDACSB14934
.LLSDACSB14934:
.LLSDACSE14934:
	.section	.text$_ZNSt13__future_base15_Deferred_stateINSt6thread8_InvokerISt5tupleIJPFviPK8BoidListPK7BoidMapEiPS4_PS7_EEEEvED0Ev,"x"
	.linkonce discard
	.seh_endproc
	.section	.text$_ZNSt23_Sp_counted_ptr_inplaceINSt13__future_base17_Async_state_implINSt6thread8_InvokerISt5tupleIJPFvibPK7BoidMapPK5RulesPK8BoidListEibS7_SA_SD_EEEEvEESaIvELN9__gnu_cxx12_Lock_policyE2EE10_M_disposeEv,"x"
	.linkonce discard
	.align 2
	.p2align 4
	.globl	_ZNSt23_Sp_counted_ptr_inplaceINSt13__future_base17_Async_state_implINSt6thread8_InvokerISt5tupleIJPFvibPK7BoidMapPK5RulesPK8BoidListEibS7_SA_SD_EEEEvEESaIvELN9__gnu_cxx12_Lock_policyE2EE10_M_disposeEv
	.def	_ZNSt23_Sp_counted_ptr_inplaceINSt13__future_base17_Async_state_implINSt6thread8_InvokerISt5tupleIJPFvibPK7BoidMapPK5RulesPK8BoidListEibS7_SA_SD_EEEEvEESaIvELN9__gnu_cxx12_Lock_policyE2EE10_M_disposeEv;	.scl	2;	.type	32;	.endef
	.seh_proc	_ZNSt23_Sp_counted_ptr_inplaceINSt13__future_base17_Async_state_implINSt6thread8_InvokerISt5tupleIJPFvibPK7BoidMapPK5RulesPK8BoidListEibS7_SA_SD_EEEEvEESaIvELN9__gnu_cxx12_Lock_policyE2EE10_M_disposeEv
_ZNSt23_Sp_counted_ptr_inplaceINSt13__future_base17_Async_state_implINSt6thread8_InvokerISt5tupleIJPFvibPK7BoidMapPK5RulesPK8BoidListEibS7_SA_SD_EEEEvEESaIvELN9__gnu_cxx12_Lock_policyE2EE10_M_disposeEv:
.LFB14958:
	pushq	%rbx	 #
	.seh_pushreg	%rbx
	subq	$32, %rsp	 #,
	.seh_stackalloc	32
	.seh_endprologue
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1766:       }
	leaq	16+_ZTVNSt13__future_base17_Async_state_implINSt6thread8_InvokerISt5tupleIJPFvibPK7BoidMapPK5RulesPK8BoidListEibS6_S9_SC_EEEEvEE(%rip), %rax	 #, tmp114
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1764: 	if (_M_thread.joinable())
	cmpq	$0, 64(%rcx)	 #, MEM[(const struct thread *)this_2(D) + 64B]._M_id._M_thread
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1766:       }
	movq	%rax, 16(%rcx)	 # tmp114, MEM[(struct _Async_state_impl *)this_2(D) + 16B].D.196832.D.152781._vptr._State_baseV2
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:611:       _M_dispose() noexcept
	movq	%rcx, %rbx	 # tmp112, this
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1764: 	if (_M_thread.joinable())
	jne	.L338	 #,
.L325:
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/unique_ptr.h:403: 	if (__ptr != nullptr)
	movq	80(%rbx), %rcx	 # MEM[(struct _Result * &)this_2(D) + 80], _7
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/unique_ptr.h:403: 	if (__ptr != nullptr)
	testq	%rcx, %rcx	 # _7
	je	.L326	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/future:229: 	void operator()(_Result_base* __fr) const { __fr->_M_destroy(); }
	movq	(%rcx), %rax	 # MEM[(struct _Result_base *)_7]._vptr._Result_base, _8
	leaq	_ZNSt13__future_base7_ResultIvE10_M_destroyEv(%rip), %r8	 #, tmp102
	movq	(%rax), %rdx	 # *_8, _9
	cmpq	%r8, %rdx	 # tmp102, _9
	jne	.L327	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/future:672:       void _M_destroy() { delete this; }
	call	*16(%rax)	 # MEM[(int (*) () *)_8 + 16B]
.L326:
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1718:     ~_Async_state_commonV2() = default;
	leaq	16+_ZTVNSt13__future_base21_Async_state_commonV2E(%rip), %rax	 #, tmp115
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_thread.h:172:       if (joinable())
	cmpq	$0, 64(%rbx)	 #, MEM[(const struct thread *)this_2(D) + 64B]._M_id._M_thread
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1718:     ~_Async_state_commonV2() = default;
	movq	%rax, 16(%rbx)	 # tmp115, MEM[(struct _Async_state_commonV2 *)this_2(D) + 16B].D.152781._vptr._State_baseV2
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_thread.h:172:       if (joinable())
	jne	.L339	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/future:344:       virtual ~_State_baseV2() = default;
	leaq	16+_ZTVNSt13__future_base13_State_baseV2E(%rip), %rax	 #, tmp116
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/atomic_futex.h:288:   class __atomic_futex_unsigned
	leaq	48(%rbx), %rcx	 #, tmp107
 # C:/msys64/ucrt64/include/c++/13.1.0/future:344:       virtual ~_State_baseV2() = default;
	movq	%rax, 16(%rbx)	 # tmp116, MEM[(struct _State_baseV2 *)this_2(D) + 16B]._vptr._State_baseV2
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/atomic_futex.h:288:   class __atomic_futex_unsigned
	call	_ZNSt18condition_variableD1Ev	 #
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_mutex.h:77:     ~__mutex_base() noexcept { __gthread_mutex_destroy(&_M_mutex); }
	leaq	40(%rbx), %rcx	 #, tmp108
 # C:/msys64/ucrt64/include/c++/13.1.0/x86_64-w64-mingw32/bits/gthr-default.h:740:     return __gthrw_(pthread_mutex_destroy) (__mutex);
	call	pthread_mutex_destroy	 #
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/unique_ptr.h:403: 	if (__ptr != nullptr)
	movq	24(%rbx), %rcx	 # MEM[(struct _Result_base * &)this_2(D) + 24], _18
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/unique_ptr.h:403: 	if (__ptr != nullptr)
	testq	%rcx, %rcx	 # _18
	je	.L337	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/future:229: 	void operator()(_Result_base* __fr) const { __fr->_M_destroy(); }
	movq	(%rcx), %rax	 # _18->_vptr._Result_base, _19
	leaq	_ZNSt13__future_base7_ResultIvE10_M_destroyEv(%rip), %r8	 #, tmp110
	movq	(%rax), %rdx	 # *_19, _20
	cmpq	%r8, %rdx	 # tmp110, _20
	jne	.L330	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/future:672:       void _M_destroy() { delete this; }
	movq	16(%rax), %rax	 # MEM[(int (*) () *)_19 + 16B], MEM[(int (*) () *)_19 + 16B]
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:614:       }
	addq	$32, %rsp	 #,
	popq	%rbx	 #
 # C:/msys64/ucrt64/include/c++/13.1.0/future:672:       void _M_destroy() { delete this; }
	rex.W jmp	*%rax	 # MEM[(int (*) () *)_19 + 16B]
	.p2align 4,,10
	.p2align 3
.L330:
 # C:/msys64/ucrt64/include/c++/13.1.0/future:229: 	void operator()(_Result_base* __fr) const { __fr->_M_destroy(); }
	call	*%rdx	 # _20
	nop	
.L337:
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:614:       }
	addq	$32, %rsp	 #,
	popq	%rbx	 #
	ret	
	.p2align 4,,10
	.p2align 3
.L338:
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1765: 	  _M_thread.join();
	leaq	64(%rcx), %rcx	 #, tmp100
	call	_ZNSt6thread4joinEv	 #
	jmp	.L325	 #
	.p2align 4,,10
	.p2align 3
.L327:
 # C:/msys64/ucrt64/include/c++/13.1.0/future:229: 	void operator()(_Result_base* __fr) const { __fr->_M_destroy(); }
	call	*%rdx	 # _9
	jmp	.L326	 #
.L339:
 # C:/msys64/ucrt64/include/c++/13.1.0/x86_64-w64-mingw32/bits/c++config.h:322:     terminate();
	call	_ZSt9terminatev	 #
	nop	
	.seh_handler	__gxx_personality_seh0, @unwind, @except
	.seh_handlerdata
.LLSDA14958:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE14958-.LLSDACSB14958
.LLSDACSB14958:
.LLSDACSE14958:
	.section	.text$_ZNSt23_Sp_counted_ptr_inplaceINSt13__future_base17_Async_state_implINSt6thread8_InvokerISt5tupleIJPFvibPK7BoidMapPK5RulesPK8BoidListEibS7_SA_SD_EEEEvEESaIvELN9__gnu_cxx12_Lock_policyE2EE10_M_disposeEv,"x"
	.linkonce discard
	.seh_endproc
	.section	.text$_ZNSt23_Sp_counted_ptr_inplaceINSt13__future_base17_Async_state_implINSt6thread8_InvokerISt5tupleIJPFviPK8BoidListPK7BoidMapEiPS5_PS8_EEEEvEESaIvELN9__gnu_cxx12_Lock_policyE2EE10_M_disposeEv,"x"
	.linkonce discard
	.align 2
	.p2align 4
	.globl	_ZNSt23_Sp_counted_ptr_inplaceINSt13__future_base17_Async_state_implINSt6thread8_InvokerISt5tupleIJPFviPK8BoidListPK7BoidMapEiPS5_PS8_EEEEvEESaIvELN9__gnu_cxx12_Lock_policyE2EE10_M_disposeEv
	.def	_ZNSt23_Sp_counted_ptr_inplaceINSt13__future_base17_Async_state_implINSt6thread8_InvokerISt5tupleIJPFviPK8BoidListPK7BoidMapEiPS5_PS8_EEEEvEESaIvELN9__gnu_cxx12_Lock_policyE2EE10_M_disposeEv;	.scl	2;	.type	32;	.endef
	.seh_proc	_ZNSt23_Sp_counted_ptr_inplaceINSt13__future_base17_Async_state_implINSt6thread8_InvokerISt5tupleIJPFviPK8BoidListPK7BoidMapEiPS5_PS8_EEEEvEESaIvELN9__gnu_cxx12_Lock_policyE2EE10_M_disposeEv
_ZNSt23_Sp_counted_ptr_inplaceINSt13__future_base17_Async_state_implINSt6thread8_InvokerISt5tupleIJPFviPK8BoidListPK7BoidMapEiPS5_PS8_EEEEvEESaIvELN9__gnu_cxx12_Lock_policyE2EE10_M_disposeEv:
.LFB14972:
	pushq	%rbx	 #
	.seh_pushreg	%rbx
	subq	$32, %rsp	 #,
	.seh_stackalloc	32
	.seh_endprologue
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1766:       }
	leaq	16+_ZTVNSt13__future_base17_Async_state_implINSt6thread8_InvokerISt5tupleIJPFviPK8BoidListPK7BoidMapEiPS4_PS7_EEEEvEE(%rip), %rax	 #, tmp114
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1764: 	if (_M_thread.joinable())
	cmpq	$0, 64(%rcx)	 #, MEM[(const struct thread *)this_2(D) + 64B]._M_id._M_thread
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1766:       }
	movq	%rax, 16(%rcx)	 # tmp114, MEM[(struct _Async_state_impl *)this_2(D) + 16B].D.190164.D.152781._vptr._State_baseV2
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:611:       _M_dispose() noexcept
	movq	%rcx, %rbx	 # tmp112, this
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1764: 	if (_M_thread.joinable())
	jne	.L354	 #,
.L341:
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/unique_ptr.h:403: 	if (__ptr != nullptr)
	movq	80(%rbx), %rcx	 # MEM[(struct _Result * &)this_2(D) + 80], _7
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/unique_ptr.h:403: 	if (__ptr != nullptr)
	testq	%rcx, %rcx	 # _7
	je	.L342	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/future:229: 	void operator()(_Result_base* __fr) const { __fr->_M_destroy(); }
	movq	(%rcx), %rax	 # MEM[(struct _Result_base *)_7]._vptr._Result_base, _8
	leaq	_ZNSt13__future_base7_ResultIvE10_M_destroyEv(%rip), %r8	 #, tmp102
	movq	(%rax), %rdx	 # *_8, _9
	cmpq	%r8, %rdx	 # tmp102, _9
	jne	.L343	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/future:672:       void _M_destroy() { delete this; }
	call	*16(%rax)	 # MEM[(int (*) () *)_8 + 16B]
.L342:
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1718:     ~_Async_state_commonV2() = default;
	leaq	16+_ZTVNSt13__future_base21_Async_state_commonV2E(%rip), %rax	 #, tmp115
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_thread.h:172:       if (joinable())
	cmpq	$0, 64(%rbx)	 #, MEM[(const struct thread *)this_2(D) + 64B]._M_id._M_thread
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1718:     ~_Async_state_commonV2() = default;
	movq	%rax, 16(%rbx)	 # tmp115, MEM[(struct _Async_state_commonV2 *)this_2(D) + 16B].D.152781._vptr._State_baseV2
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_thread.h:172:       if (joinable())
	jne	.L355	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/future:344:       virtual ~_State_baseV2() = default;
	leaq	16+_ZTVNSt13__future_base13_State_baseV2E(%rip), %rax	 #, tmp116
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/atomic_futex.h:288:   class __atomic_futex_unsigned
	leaq	48(%rbx), %rcx	 #, tmp107
 # C:/msys64/ucrt64/include/c++/13.1.0/future:344:       virtual ~_State_baseV2() = default;
	movq	%rax, 16(%rbx)	 # tmp116, MEM[(struct _State_baseV2 *)this_2(D) + 16B]._vptr._State_baseV2
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/atomic_futex.h:288:   class __atomic_futex_unsigned
	call	_ZNSt18condition_variableD1Ev	 #
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_mutex.h:77:     ~__mutex_base() noexcept { __gthread_mutex_destroy(&_M_mutex); }
	leaq	40(%rbx), %rcx	 #, tmp108
 # C:/msys64/ucrt64/include/c++/13.1.0/x86_64-w64-mingw32/bits/gthr-default.h:740:     return __gthrw_(pthread_mutex_destroy) (__mutex);
	call	pthread_mutex_destroy	 #
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/unique_ptr.h:403: 	if (__ptr != nullptr)
	movq	24(%rbx), %rcx	 # MEM[(struct _Result_base * &)this_2(D) + 24], _18
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/unique_ptr.h:403: 	if (__ptr != nullptr)
	testq	%rcx, %rcx	 # _18
	je	.L353	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/future:229: 	void operator()(_Result_base* __fr) const { __fr->_M_destroy(); }
	movq	(%rcx), %rax	 # _18->_vptr._Result_base, _19
	leaq	_ZNSt13__future_base7_ResultIvE10_M_destroyEv(%rip), %r8	 #, tmp110
	movq	(%rax), %rdx	 # *_19, _20
	cmpq	%r8, %rdx	 # tmp110, _20
	jne	.L346	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/future:672:       void _M_destroy() { delete this; }
	movq	16(%rax), %rax	 # MEM[(int (*) () *)_19 + 16B], MEM[(int (*) () *)_19 + 16B]
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:614:       }
	addq	$32, %rsp	 #,
	popq	%rbx	 #
 # C:/msys64/ucrt64/include/c++/13.1.0/future:672:       void _M_destroy() { delete this; }
	rex.W jmp	*%rax	 # MEM[(int (*) () *)_19 + 16B]
	.p2align 4,,10
	.p2align 3
.L346:
 # C:/msys64/ucrt64/include/c++/13.1.0/future:229: 	void operator()(_Result_base* __fr) const { __fr->_M_destroy(); }
	call	*%rdx	 # _20
	nop	
.L353:
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:614:       }
	addq	$32, %rsp	 #,
	popq	%rbx	 #
	ret	
	.p2align 4,,10
	.p2align 3
.L354:
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1765: 	  _M_thread.join();
	leaq	64(%rcx), %rcx	 #, tmp100
	call	_ZNSt6thread4joinEv	 #
	jmp	.L341	 #
	.p2align 4,,10
	.p2align 3
.L343:
 # C:/msys64/ucrt64/include/c++/13.1.0/future:229: 	void operator()(_Result_base* __fr) const { __fr->_M_destroy(); }
	call	*%rdx	 # _9
	jmp	.L342	 #
.L355:
 # C:/msys64/ucrt64/include/c++/13.1.0/x86_64-w64-mingw32/bits/c++config.h:322:     terminate();
	call	_ZSt9terminatev	 #
	nop	
	.seh_handler	__gxx_personality_seh0, @unwind, @except
	.seh_handlerdata
.LLSDA14972:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE14972-.LLSDACSB14972
.LLSDACSB14972:
.LLSDACSE14972:
	.section	.text$_ZNSt23_Sp_counted_ptr_inplaceINSt13__future_base17_Async_state_implINSt6thread8_InvokerISt5tupleIJPFviPK8BoidListPK7BoidMapEiPS5_PS8_EEEEvEESaIvELN9__gnu_cxx12_Lock_policyE2EE10_M_disposeEv,"x"
	.linkonce discard
	.seh_endproc
	.section	.text$_ZNSt13__future_base17_Async_state_implINSt6thread8_InvokerISt5tupleIJPFvibPK7BoidMapPK5RulesPK8BoidListEibS6_S9_SC_EEEEvED1Ev,"x"
	.linkonce discard
	.align 2
	.p2align 4
	.globl	_ZNSt13__future_base17_Async_state_implINSt6thread8_InvokerISt5tupleIJPFvibPK7BoidMapPK5RulesPK8BoidListEibS6_S9_SC_EEEEvED1Ev
	.def	_ZNSt13__future_base17_Async_state_implINSt6thread8_InvokerISt5tupleIJPFvibPK7BoidMapPK5RulesPK8BoidListEibS6_S9_SC_EEEEvED1Ev;	.scl	2;	.type	32;	.endef
	.seh_proc	_ZNSt13__future_base17_Async_state_implINSt6thread8_InvokerISt5tupleIJPFvibPK7BoidMapPK5RulesPK8BoidListEibS6_S9_SC_EEEEvED1Ev
_ZNSt13__future_base17_Async_state_implINSt6thread8_InvokerISt5tupleIJPFvibPK7BoidMapPK5RulesPK8BoidListEibS6_S9_SC_EEEEvED1Ev:
.LFB14993:
	pushq	%rbx	 #
	.seh_pushreg	%rbx
	subq	$32, %rsp	 #,
	.seh_stackalloc	32
	.seh_endprologue
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1766:       }
	leaq	16+_ZTVNSt13__future_base17_Async_state_implINSt6thread8_InvokerISt5tupleIJPFvibPK7BoidMapPK5RulesPK8BoidListEibS6_S9_SC_EEEEvEE(%rip), %rax	 #, tmp113
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1764: 	if (_M_thread.joinable())
	cmpq	$0, 48(%rcx)	 #, MEM[(const struct thread *)this_4(D) + 48B]._M_id._M_thread
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1766:       }
	movq	%rax, (%rcx)	 # tmp113, this_4(D)->D.196832.D.152781._vptr._State_baseV2
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1762:       ~_Async_state_impl()
	movq	%rcx, %rbx	 # tmp111, this
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1764: 	if (_M_thread.joinable())
	jne	.L370	 #,
.L357:
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/unique_ptr.h:403: 	if (__ptr != nullptr)
	movq	64(%rbx), %rcx	 # MEM[(struct _Result * &)this_4(D) + 64], _11
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/unique_ptr.h:403: 	if (__ptr != nullptr)
	testq	%rcx, %rcx	 # _11
	je	.L358	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/future:229: 	void operator()(_Result_base* __fr) const { __fr->_M_destroy(); }
	movq	(%rcx), %rax	 # MEM[(struct _Result_base *)_11]._vptr._Result_base, _12
	leaq	_ZNSt13__future_base7_ResultIvE10_M_destroyEv(%rip), %r8	 #, tmp101
	movq	(%rax), %rdx	 # *_12, _13
	cmpq	%r8, %rdx	 # tmp101, _13
	jne	.L359	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/future:672:       void _M_destroy() { delete this; }
	call	*16(%rax)	 # MEM[(int (*) () *)_12 + 16B]
.L358:
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1718:     ~_Async_state_commonV2() = default;
	leaq	16+_ZTVNSt13__future_base21_Async_state_commonV2E(%rip), %rax	 #, tmp114
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_thread.h:172:       if (joinable())
	cmpq	$0, 48(%rbx)	 #, MEM[(const struct thread *)this_4(D) + 48B]._M_id._M_thread
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1718:     ~_Async_state_commonV2() = default;
	movq	%rax, (%rbx)	 # tmp114, MEM[(struct _Async_state_commonV2 *)this_4(D)].D.152781._vptr._State_baseV2
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_thread.h:172:       if (joinable())
	jne	.L371	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/future:344:       virtual ~_State_baseV2() = default;
	leaq	16+_ZTVNSt13__future_base13_State_baseV2E(%rip), %rax	 #, tmp115
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/atomic_futex.h:288:   class __atomic_futex_unsigned
	leaq	32(%rbx), %rcx	 #, tmp106
 # C:/msys64/ucrt64/include/c++/13.1.0/future:344:       virtual ~_State_baseV2() = default;
	movq	%rax, (%rbx)	 # tmp115, MEM[(struct _State_baseV2 *)this_4(D)]._vptr._State_baseV2
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/atomic_futex.h:288:   class __atomic_futex_unsigned
	call	_ZNSt18condition_variableD1Ev	 #
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_mutex.h:77:     ~__mutex_base() noexcept { __gthread_mutex_destroy(&_M_mutex); }
	leaq	24(%rbx), %rcx	 #, tmp107
 # C:/msys64/ucrt64/include/c++/13.1.0/x86_64-w64-mingw32/bits/gthr-default.h:740:     return __gthrw_(pthread_mutex_destroy) (__mutex);
	call	pthread_mutex_destroy	 #
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/unique_ptr.h:403: 	if (__ptr != nullptr)
	movq	8(%rbx), %rcx	 # MEM[(struct _Result_base * &)this_4(D) + 8], _27
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/unique_ptr.h:403: 	if (__ptr != nullptr)
	testq	%rcx, %rcx	 # _27
	je	.L369	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/future:229: 	void operator()(_Result_base* __fr) const { __fr->_M_destroy(); }
	movq	(%rcx), %rax	 # _27->_vptr._Result_base, _28
	leaq	_ZNSt13__future_base7_ResultIvE10_M_destroyEv(%rip), %r8	 #, tmp109
	movq	(%rax), %rdx	 # *_28, _29
	cmpq	%r8, %rdx	 # tmp109, _29
	jne	.L362	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/future:672:       void _M_destroy() { delete this; }
	movq	16(%rax), %rax	 # MEM[(int (*) () *)_28 + 16B], MEM[(int (*) () *)_28 + 16B]
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1766:       }
	addq	$32, %rsp	 #,
	popq	%rbx	 #
 # C:/msys64/ucrt64/include/c++/13.1.0/future:672:       void _M_destroy() { delete this; }
	rex.W jmp	*%rax	 # MEM[(int (*) () *)_28 + 16B]
	.p2align 4,,10
	.p2align 3
.L362:
 # C:/msys64/ucrt64/include/c++/13.1.0/future:229: 	void operator()(_Result_base* __fr) const { __fr->_M_destroy(); }
	call	*%rdx	 # _29
	nop	
.L369:
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1766:       }
	addq	$32, %rsp	 #,
	popq	%rbx	 #
	ret	
	.p2align 4,,10
	.p2align 3
.L370:
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1765: 	  _M_thread.join();
	leaq	48(%rcx), %rcx	 #, tmp99
	call	_ZNSt6thread4joinEv	 #
	jmp	.L357	 #
	.p2align 4,,10
	.p2align 3
.L359:
 # C:/msys64/ucrt64/include/c++/13.1.0/future:229: 	void operator()(_Result_base* __fr) const { __fr->_M_destroy(); }
	call	*%rdx	 # _13
	jmp	.L358	 #
.L371:
 # C:/msys64/ucrt64/include/c++/13.1.0/x86_64-w64-mingw32/bits/c++config.h:322:     terminate();
	call	_ZSt9terminatev	 #
	nop	
	.seh_handler	__gxx_personality_seh0, @unwind, @except
	.seh_handlerdata
.LLSDA14993:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE14993-.LLSDACSB14993
.LLSDACSB14993:
.LLSDACSE14993:
	.section	.text$_ZNSt13__future_base17_Async_state_implINSt6thread8_InvokerISt5tupleIJPFvibPK7BoidMapPK5RulesPK8BoidListEibS6_S9_SC_EEEEvED1Ev,"x"
	.linkonce discard
	.seh_endproc
	.section	.text$_ZNSt13__future_base17_Async_state_implINSt6thread8_InvokerISt5tupleIJPFvibPK7BoidMapPK5RulesPK8BoidListEibS6_S9_SC_EEEEvED0Ev,"x"
	.linkonce discard
	.align 2
	.p2align 4
	.globl	_ZNSt13__future_base17_Async_state_implINSt6thread8_InvokerISt5tupleIJPFvibPK7BoidMapPK5RulesPK8BoidListEibS6_S9_SC_EEEEvED0Ev
	.def	_ZNSt13__future_base17_Async_state_implINSt6thread8_InvokerISt5tupleIJPFvibPK7BoidMapPK5RulesPK8BoidListEibS6_S9_SC_EEEEvED0Ev;	.scl	2;	.type	32;	.endef
	.seh_proc	_ZNSt13__future_base17_Async_state_implINSt6thread8_InvokerISt5tupleIJPFvibPK7BoidMapPK5RulesPK8BoidListEibS6_S9_SC_EEEEvED0Ev
_ZNSt13__future_base17_Async_state_implINSt6thread8_InvokerISt5tupleIJPFvibPK7BoidMapPK5RulesPK8BoidListEibS6_S9_SC_EEEEvED0Ev:
.LFB14994:
	pushq	%rbx	 #
	.seh_pushreg	%rbx
	subq	$32, %rsp	 #,
	.seh_stackalloc	32
	.seh_endprologue
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1766:       }
	leaq	16+_ZTVNSt13__future_base17_Async_state_implINSt6thread8_InvokerISt5tupleIJPFvibPK7BoidMapPK5RulesPK8BoidListEibS6_S9_SC_EEEEvEE(%rip), %rax	 #, tmp113
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1764: 	if (_M_thread.joinable())
	cmpq	$0, 48(%rcx)	 #, MEM[(const struct thread *)this_2(D) + 48B]._M_id._M_thread
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1766:       }
	movq	%rax, (%rcx)	 # tmp113, this_2(D)->D.196832.D.152781._vptr._State_baseV2
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1762:       ~_Async_state_impl()
	movq	%rcx, %rbx	 # tmp111, this
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1764: 	if (_M_thread.joinable())
	jne	.L385	 #,
.L373:
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/unique_ptr.h:403: 	if (__ptr != nullptr)
	movq	64(%rbx), %rcx	 # MEM[(struct _Result * &)this_2(D) + 64], _7
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/unique_ptr.h:403: 	if (__ptr != nullptr)
	testq	%rcx, %rcx	 # _7
	je	.L374	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/future:229: 	void operator()(_Result_base* __fr) const { __fr->_M_destroy(); }
	movq	(%rcx), %rax	 # MEM[(struct _Result_base *)_7]._vptr._Result_base, _8
	leaq	_ZNSt13__future_base7_ResultIvE10_M_destroyEv(%rip), %r8	 #, tmp101
	movq	(%rax), %rdx	 # *_8, _9
	cmpq	%r8, %rdx	 # tmp101, _9
	jne	.L375	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/future:672:       void _M_destroy() { delete this; }
	call	*16(%rax)	 # MEM[(int (*) () *)_8 + 16B]
.L374:
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1718:     ~_Async_state_commonV2() = default;
	leaq	16+_ZTVNSt13__future_base21_Async_state_commonV2E(%rip), %rax	 #, tmp114
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_thread.h:172:       if (joinable())
	cmpq	$0, 48(%rbx)	 #, MEM[(const struct thread *)this_2(D) + 48B]._M_id._M_thread
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1718:     ~_Async_state_commonV2() = default;
	movq	%rax, (%rbx)	 # tmp114, MEM[(struct _Async_state_commonV2 *)this_2(D)].D.152781._vptr._State_baseV2
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_thread.h:172:       if (joinable())
	jne	.L386	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/future:344:       virtual ~_State_baseV2() = default;
	leaq	16+_ZTVNSt13__future_base13_State_baseV2E(%rip), %rax	 #, tmp115
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/atomic_futex.h:288:   class __atomic_futex_unsigned
	leaq	32(%rbx), %rcx	 #, tmp106
 # C:/msys64/ucrt64/include/c++/13.1.0/future:344:       virtual ~_State_baseV2() = default;
	movq	%rax, (%rbx)	 # tmp115, MEM[(struct _State_baseV2 *)this_2(D)]._vptr._State_baseV2
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/atomic_futex.h:288:   class __atomic_futex_unsigned
	call	_ZNSt18condition_variableD1Ev	 #
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_mutex.h:77:     ~__mutex_base() noexcept { __gthread_mutex_destroy(&_M_mutex); }
	leaq	24(%rbx), %rcx	 #, tmp107
 # C:/msys64/ucrt64/include/c++/13.1.0/x86_64-w64-mingw32/bits/gthr-default.h:740:     return __gthrw_(pthread_mutex_destroy) (__mutex);
	call	pthread_mutex_destroy	 #
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/unique_ptr.h:403: 	if (__ptr != nullptr)
	movq	8(%rbx), %rcx	 # MEM[(struct _Result_base * &)this_2(D) + 8], _18
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/unique_ptr.h:403: 	if (__ptr != nullptr)
	testq	%rcx, %rcx	 # _18
	je	.L377	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/future:229: 	void operator()(_Result_base* __fr) const { __fr->_M_destroy(); }
	movq	(%rcx), %rax	 # _18->_vptr._Result_base, _19
	leaq	_ZNSt13__future_base7_ResultIvE10_M_destroyEv(%rip), %r8	 #, tmp109
	movq	(%rax), %rdx	 # *_19, _20
	cmpq	%r8, %rdx	 # tmp109, _20
	jne	.L378	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/future:672:       void _M_destroy() { delete this; }
	call	*16(%rax)	 # MEM[(int (*) () *)_19 + 16B]
.L377:
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1766:       }
	movl	$112, %edx	 #,
	movq	%rbx, %rcx	 # this,
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1766:       }
	addq	$32, %rsp	 #,
	popq	%rbx	 #
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1766:       }
	jmp	_ZdlPvy	 #
	.p2align 4,,10
	.p2align 3
.L385:
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1765: 	  _M_thread.join();
	leaq	48(%rcx), %rcx	 #, tmp99
	call	_ZNSt6thread4joinEv	 #
	jmp	.L373	 #
	.p2align 4,,10
	.p2align 3
.L375:
 # C:/msys64/ucrt64/include/c++/13.1.0/future:229: 	void operator()(_Result_base* __fr) const { __fr->_M_destroy(); }
	call	*%rdx	 # _9
	jmp	.L374	 #
	.p2align 4,,10
	.p2align 3
.L378:
	call	*%rdx	 # _20
	jmp	.L377	 #
.L386:
 # C:/msys64/ucrt64/include/c++/13.1.0/x86_64-w64-mingw32/bits/c++config.h:322:     terminate();
	call	_ZSt9terminatev	 #
	nop	
	.seh_handler	__gxx_personality_seh0, @unwind, @except
	.seh_handlerdata
.LLSDA14994:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE14994-.LLSDACSB14994
.LLSDACSB14994:
.LLSDACSE14994:
	.section	.text$_ZNSt13__future_base17_Async_state_implINSt6thread8_InvokerISt5tupleIJPFvibPK7BoidMapPK5RulesPK8BoidListEibS6_S9_SC_EEEEvED0Ev,"x"
	.linkonce discard
	.seh_endproc
	.section	.text$_ZNSt13__future_base17_Async_state_implINSt6thread8_InvokerISt5tupleIJPFviPK8BoidListPK7BoidMapEiPS4_PS7_EEEEvED0Ev,"x"
	.linkonce discard
	.align 2
	.p2align 4
	.globl	_ZNSt13__future_base17_Async_state_implINSt6thread8_InvokerISt5tupleIJPFviPK8BoidListPK7BoidMapEiPS4_PS7_EEEEvED0Ev
	.def	_ZNSt13__future_base17_Async_state_implINSt6thread8_InvokerISt5tupleIJPFviPK8BoidListPK7BoidMapEiPS4_PS7_EEEEvED0Ev;	.scl	2;	.type	32;	.endef
	.seh_proc	_ZNSt13__future_base17_Async_state_implINSt6thread8_InvokerISt5tupleIJPFviPK8BoidListPK7BoidMapEiPS4_PS7_EEEEvED0Ev
_ZNSt13__future_base17_Async_state_implINSt6thread8_InvokerISt5tupleIJPFviPK8BoidListPK7BoidMapEiPS4_PS7_EEEEvED0Ev:
.LFB15000:
	pushq	%rbx	 #
	.seh_pushreg	%rbx
	subq	$32, %rsp	 #,
	.seh_stackalloc	32
	.seh_endprologue
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1766:       }
	leaq	16+_ZTVNSt13__future_base17_Async_state_implINSt6thread8_InvokerISt5tupleIJPFviPK8BoidListPK7BoidMapEiPS4_PS7_EEEEvEE(%rip), %rax	 #, tmp113
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1764: 	if (_M_thread.joinable())
	cmpq	$0, 48(%rcx)	 #, MEM[(const struct thread *)this_2(D) + 48B]._M_id._M_thread
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1766:       }
	movq	%rax, (%rcx)	 # tmp113, this_2(D)->D.190164.D.152781._vptr._State_baseV2
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1762:       ~_Async_state_impl()
	movq	%rcx, %rbx	 # tmp111, this
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1764: 	if (_M_thread.joinable())
	jne	.L400	 #,
.L388:
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/unique_ptr.h:403: 	if (__ptr != nullptr)
	movq	64(%rbx), %rcx	 # MEM[(struct _Result * &)this_2(D) + 64], _7
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/unique_ptr.h:403: 	if (__ptr != nullptr)
	testq	%rcx, %rcx	 # _7
	je	.L389	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/future:229: 	void operator()(_Result_base* __fr) const { __fr->_M_destroy(); }
	movq	(%rcx), %rax	 # MEM[(struct _Result_base *)_7]._vptr._Result_base, _8
	leaq	_ZNSt13__future_base7_ResultIvE10_M_destroyEv(%rip), %r8	 #, tmp101
	movq	(%rax), %rdx	 # *_8, _9
	cmpq	%r8, %rdx	 # tmp101, _9
	jne	.L390	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/future:672:       void _M_destroy() { delete this; }
	call	*16(%rax)	 # MEM[(int (*) () *)_8 + 16B]
.L389:
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1718:     ~_Async_state_commonV2() = default;
	leaq	16+_ZTVNSt13__future_base21_Async_state_commonV2E(%rip), %rax	 #, tmp114
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_thread.h:172:       if (joinable())
	cmpq	$0, 48(%rbx)	 #, MEM[(const struct thread *)this_2(D) + 48B]._M_id._M_thread
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1718:     ~_Async_state_commonV2() = default;
	movq	%rax, (%rbx)	 # tmp114, MEM[(struct _Async_state_commonV2 *)this_2(D)].D.152781._vptr._State_baseV2
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_thread.h:172:       if (joinable())
	jne	.L401	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/future:344:       virtual ~_State_baseV2() = default;
	leaq	16+_ZTVNSt13__future_base13_State_baseV2E(%rip), %rax	 #, tmp115
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/atomic_futex.h:288:   class __atomic_futex_unsigned
	leaq	32(%rbx), %rcx	 #, tmp106
 # C:/msys64/ucrt64/include/c++/13.1.0/future:344:       virtual ~_State_baseV2() = default;
	movq	%rax, (%rbx)	 # tmp115, MEM[(struct _State_baseV2 *)this_2(D)]._vptr._State_baseV2
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/atomic_futex.h:288:   class __atomic_futex_unsigned
	call	_ZNSt18condition_variableD1Ev	 #
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_mutex.h:77:     ~__mutex_base() noexcept { __gthread_mutex_destroy(&_M_mutex); }
	leaq	24(%rbx), %rcx	 #, tmp107
 # C:/msys64/ucrt64/include/c++/13.1.0/x86_64-w64-mingw32/bits/gthr-default.h:740:     return __gthrw_(pthread_mutex_destroy) (__mutex);
	call	pthread_mutex_destroy	 #
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/unique_ptr.h:403: 	if (__ptr != nullptr)
	movq	8(%rbx), %rcx	 # MEM[(struct _Result_base * &)this_2(D) + 8], _18
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/unique_ptr.h:403: 	if (__ptr != nullptr)
	testq	%rcx, %rcx	 # _18
	je	.L392	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/future:229: 	void operator()(_Result_base* __fr) const { __fr->_M_destroy(); }
	movq	(%rcx), %rax	 # _18->_vptr._Result_base, _19
	leaq	_ZNSt13__future_base7_ResultIvE10_M_destroyEv(%rip), %r8	 #, tmp109
	movq	(%rax), %rdx	 # *_19, _20
	cmpq	%r8, %rdx	 # tmp109, _20
	jne	.L393	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/future:672:       void _M_destroy() { delete this; }
	call	*16(%rax)	 # MEM[(int (*) () *)_19 + 16B]
.L392:
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1766:       }
	movl	$104, %edx	 #,
	movq	%rbx, %rcx	 # this,
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1766:       }
	addq	$32, %rsp	 #,
	popq	%rbx	 #
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1766:       }
	jmp	_ZdlPvy	 #
	.p2align 4,,10
	.p2align 3
.L400:
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1765: 	  _M_thread.join();
	leaq	48(%rcx), %rcx	 #, tmp99
	call	_ZNSt6thread4joinEv	 #
	jmp	.L388	 #
	.p2align 4,,10
	.p2align 3
.L390:
 # C:/msys64/ucrt64/include/c++/13.1.0/future:229: 	void operator()(_Result_base* __fr) const { __fr->_M_destroy(); }
	call	*%rdx	 # _9
	jmp	.L389	 #
	.p2align 4,,10
	.p2align 3
.L393:
	call	*%rdx	 # _20
	jmp	.L392	 #
.L401:
 # C:/msys64/ucrt64/include/c++/13.1.0/x86_64-w64-mingw32/bits/c++config.h:322:     terminate();
	call	_ZSt9terminatev	 #
	nop	
	.seh_handler	__gxx_personality_seh0, @unwind, @except
	.seh_handlerdata
.LLSDA15000:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE15000-.LLSDACSB15000
.LLSDACSB15000:
.LLSDACSE15000:
	.section	.text$_ZNSt13__future_base17_Async_state_implINSt6thread8_InvokerISt5tupleIJPFviPK8BoidListPK7BoidMapEiPS4_PS7_EEEEvED0Ev,"x"
	.linkonce discard
	.seh_endproc
	.section	.text$_ZNSt13__future_base17_Async_state_implINSt6thread8_InvokerISt5tupleIJPFviPK8BoidListPK7BoidMapEiPS4_PS7_EEEEvED1Ev,"x"
	.linkonce discard
	.align 2
	.p2align 4
	.globl	_ZNSt13__future_base17_Async_state_implINSt6thread8_InvokerISt5tupleIJPFviPK8BoidListPK7BoidMapEiPS4_PS7_EEEEvED1Ev
	.def	_ZNSt13__future_base17_Async_state_implINSt6thread8_InvokerISt5tupleIJPFviPK8BoidListPK7BoidMapEiPS4_PS7_EEEEvED1Ev;	.scl	2;	.type	32;	.endef
	.seh_proc	_ZNSt13__future_base17_Async_state_implINSt6thread8_InvokerISt5tupleIJPFviPK8BoidListPK7BoidMapEiPS4_PS7_EEEEvED1Ev
_ZNSt13__future_base17_Async_state_implINSt6thread8_InvokerISt5tupleIJPFviPK8BoidListPK7BoidMapEiPS4_PS7_EEEEvED1Ev:
.LFB14999:
	pushq	%rbx	 #
	.seh_pushreg	%rbx
	subq	$32, %rsp	 #,
	.seh_stackalloc	32
	.seh_endprologue
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1766:       }
	leaq	16+_ZTVNSt13__future_base17_Async_state_implINSt6thread8_InvokerISt5tupleIJPFviPK8BoidListPK7BoidMapEiPS4_PS7_EEEEvEE(%rip), %rax	 #, tmp113
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1764: 	if (_M_thread.joinable())
	cmpq	$0, 48(%rcx)	 #, MEM[(const struct thread *)this_4(D) + 48B]._M_id._M_thread
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1766:       }
	movq	%rax, (%rcx)	 # tmp113, this_4(D)->D.190164.D.152781._vptr._State_baseV2
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1762:       ~_Async_state_impl()
	movq	%rcx, %rbx	 # tmp111, this
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1764: 	if (_M_thread.joinable())
	jne	.L416	 #,
.L403:
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/unique_ptr.h:403: 	if (__ptr != nullptr)
	movq	64(%rbx), %rcx	 # MEM[(struct _Result * &)this_4(D) + 64], _11
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/unique_ptr.h:403: 	if (__ptr != nullptr)
	testq	%rcx, %rcx	 # _11
	je	.L404	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/future:229: 	void operator()(_Result_base* __fr) const { __fr->_M_destroy(); }
	movq	(%rcx), %rax	 # MEM[(struct _Result_base *)_11]._vptr._Result_base, _12
	leaq	_ZNSt13__future_base7_ResultIvE10_M_destroyEv(%rip), %r8	 #, tmp101
	movq	(%rax), %rdx	 # *_12, _13
	cmpq	%r8, %rdx	 # tmp101, _13
	jne	.L405	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/future:672:       void _M_destroy() { delete this; }
	call	*16(%rax)	 # MEM[(int (*) () *)_12 + 16B]
.L404:
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1718:     ~_Async_state_commonV2() = default;
	leaq	16+_ZTVNSt13__future_base21_Async_state_commonV2E(%rip), %rax	 #, tmp114
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_thread.h:172:       if (joinable())
	cmpq	$0, 48(%rbx)	 #, MEM[(const struct thread *)this_4(D) + 48B]._M_id._M_thread
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1718:     ~_Async_state_commonV2() = default;
	movq	%rax, (%rbx)	 # tmp114, MEM[(struct _Async_state_commonV2 *)this_4(D)].D.152781._vptr._State_baseV2
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_thread.h:172:       if (joinable())
	jne	.L417	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/future:344:       virtual ~_State_baseV2() = default;
	leaq	16+_ZTVNSt13__future_base13_State_baseV2E(%rip), %rax	 #, tmp115
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/atomic_futex.h:288:   class __atomic_futex_unsigned
	leaq	32(%rbx), %rcx	 #, tmp106
 # C:/msys64/ucrt64/include/c++/13.1.0/future:344:       virtual ~_State_baseV2() = default;
	movq	%rax, (%rbx)	 # tmp115, MEM[(struct _State_baseV2 *)this_4(D)]._vptr._State_baseV2
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/atomic_futex.h:288:   class __atomic_futex_unsigned
	call	_ZNSt18condition_variableD1Ev	 #
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_mutex.h:77:     ~__mutex_base() noexcept { __gthread_mutex_destroy(&_M_mutex); }
	leaq	24(%rbx), %rcx	 #, tmp107
 # C:/msys64/ucrt64/include/c++/13.1.0/x86_64-w64-mingw32/bits/gthr-default.h:740:     return __gthrw_(pthread_mutex_destroy) (__mutex);
	call	pthread_mutex_destroy	 #
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/unique_ptr.h:403: 	if (__ptr != nullptr)
	movq	8(%rbx), %rcx	 # MEM[(struct _Result_base * &)this_4(D) + 8], _27
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/unique_ptr.h:403: 	if (__ptr != nullptr)
	testq	%rcx, %rcx	 # _27
	je	.L415	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/future:229: 	void operator()(_Result_base* __fr) const { __fr->_M_destroy(); }
	movq	(%rcx), %rax	 # _27->_vptr._Result_base, _28
	leaq	_ZNSt13__future_base7_ResultIvE10_M_destroyEv(%rip), %r8	 #, tmp109
	movq	(%rax), %rdx	 # *_28, _29
	cmpq	%r8, %rdx	 # tmp109, _29
	jne	.L408	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/future:672:       void _M_destroy() { delete this; }
	movq	16(%rax), %rax	 # MEM[(int (*) () *)_28 + 16B], MEM[(int (*) () *)_28 + 16B]
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1766:       }
	addq	$32, %rsp	 #,
	popq	%rbx	 #
 # C:/msys64/ucrt64/include/c++/13.1.0/future:672:       void _M_destroy() { delete this; }
	rex.W jmp	*%rax	 # MEM[(int (*) () *)_28 + 16B]
	.p2align 4,,10
	.p2align 3
.L408:
 # C:/msys64/ucrt64/include/c++/13.1.0/future:229: 	void operator()(_Result_base* __fr) const { __fr->_M_destroy(); }
	call	*%rdx	 # _29
	nop	
.L415:
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1766:       }
	addq	$32, %rsp	 #,
	popq	%rbx	 #
	ret	
	.p2align 4,,10
	.p2align 3
.L416:
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1765: 	  _M_thread.join();
	leaq	48(%rcx), %rcx	 #, tmp99
	call	_ZNSt6thread4joinEv	 #
	jmp	.L403	 #
	.p2align 4,,10
	.p2align 3
.L405:
 # C:/msys64/ucrt64/include/c++/13.1.0/future:229: 	void operator()(_Result_base* __fr) const { __fr->_M_destroy(); }
	call	*%rdx	 # _13
	jmp	.L404	 #
.L417:
 # C:/msys64/ucrt64/include/c++/13.1.0/x86_64-w64-mingw32/bits/c++config.h:322:     terminate();
	call	_ZSt9terminatev	 #
	nop	
	.seh_handler	__gxx_personality_seh0, @unwind, @except
	.seh_handlerdata
.LLSDA14999:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE14999-.LLSDACSB14999
.LLSDACSB14999:
.LLSDACSE14999:
	.section	.text$_ZNSt13__future_base17_Async_state_implINSt6thread8_InvokerISt5tupleIJPFviPK8BoidListPK7BoidMapEiPS4_PS7_EEEEvED1Ev,"x"
	.linkonce discard
	.seh_endproc
	.section	.text$_ZNSt13__future_base15_Deferred_stateINSt6thread8_InvokerISt5tupleIJPFviPK8BoidListPK7BoidMapEiPS4_PS7_EEEEvE17_M_complete_asyncEv,"x"
	.linkonce discard
	.align 2
	.p2align 4
	.globl	_ZNSt13__future_base15_Deferred_stateINSt6thread8_InvokerISt5tupleIJPFviPK8BoidListPK7BoidMapEiPS4_PS7_EEEEvE17_M_complete_asyncEv
	.def	_ZNSt13__future_base15_Deferred_stateINSt6thread8_InvokerISt5tupleIJPFviPK8BoidListPK7BoidMapEiPS4_PS7_EEEEvE17_M_complete_asyncEv;	.scl	2;	.type	32;	.endef
	.seh_proc	_ZNSt13__future_base15_Deferred_stateINSt6thread8_InvokerISt5tupleIJPFviPK8BoidListPK7BoidMapEiPS4_PS7_EEEEvE17_M_complete_asyncEv
_ZNSt13__future_base15_Deferred_stateINSt6thread8_InvokerISt5tupleIJPFviPK8BoidListPK7BoidMapEiPS4_PS7_EEEEvE17_M_complete_asyncEv:
.LFB14995:
	pushq	%rbp	 #
	.seh_pushreg	%rbp
	pushq	%rdi	 #
	.seh_pushreg	%rdi
	pushq	%rsi	 #
	.seh_pushreg	%rsi
	pushq	%rbx	 #
	.seh_pushreg	%rbx
	subq	$152, %rsp	 #,
	.seh_stackalloc	152
	.seh_endprologue
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_function.h:452: 	      _M_manager = &_My_handler::_M_manager;
	leaq	_ZNSt17_Function_handlerIFSt10unique_ptrINSt13__future_base12_Result_baseENS2_8_DeleterEEvENS1_12_Task_setterIS0_INS1_7_ResultIvEES3_ENSt6thread8_InvokerISt5tupleIJPFviPK8BoidListPK7BoidMapEiPSD_PSG_EEEEvEEE10_M_managerERSt9_Any_dataRKSR_St18_Manager_operation(%rip), %rdi	 #, tmp111
	vmovq	%rdi, %xmm0	 # tmp111, tmp111
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1705:         _M_set_result(_S_task_setter(_M_result, _M_fn), true);
	leaq	48(%rcx), %rax	 #, tmp105
 # C:/msys64/ucrt64/include/c++/13.1.0/mutex:899:       auto __callable = [&] {
	leaq	48(%rsp), %rdx	 #, tmp119
 # C:/msys64/ucrt64/include/c++/13.1.0/future:428: 	call_once(_M_once, &_State_baseV2::_M_do_set, this,
	movq	%rcx, 40(%rsp)	 # this, D.232371
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1697:       _M_complete_async()
	movq	%rcx, %rbx	 # tmp142, this
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1705:         _M_set_result(_S_task_setter(_M_result, _M_fn), true);
	movq	%rax, 80(%rsp)	 # tmp105, MEM[(struct _Task_setter *)&D.223279]._M_result
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1705:         _M_set_result(_S_task_setter(_M_result, _M_fn), true);
	leaq	56(%rcx), %rax	 #, tmp106
 # C:/msys64/ucrt64/include/c++/13.1.0/mutex:899:       auto __callable = [&] {
	vmovq	%rdx, %xmm1	 # tmp119, tmp119
 # C:/msys64/ucrt64/include/c++/13.1.0/future:429: 		  std::__addressof(__res), std::__addressof(__did_set));
	leaq	80(%rsp), %rbp	 #, tmp141
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1705:         _M_set_result(_S_task_setter(_M_result, _M_fn), true);
	movq	%rax, 88(%rsp)	 # tmp106, MEM[(struct _Task_setter *)&D.223279]._M_fn
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_function.h:452: 	      _M_manager = &_My_handler::_M_manager;
	leaq	_ZNSt17_Function_handlerIFSt10unique_ptrINSt13__future_base12_Result_baseENS2_8_DeleterEEvENS1_12_Task_setterIS0_INS1_7_ResultIvEES3_ENSt6thread8_InvokerISt5tupleIJPFviPK8BoidListPK7BoidMapEiPSD_PSG_EEEEvEEE9_M_invokeERKSt9_Any_data(%rip), %rax	 #, tmp109
 # C:/msys64/ucrt64/include/c++/13.1.0/mutex:899:       auto __callable = [&] {
	leaq	56(%rsp), %rdx	 #, tmp120
 # C:/msys64/ucrt64/include/c++/13.1.0/mutex:834: 	__once_callable = std::__addressof(__c);
	movq	.refptr.__emutls_v._ZSt15__once_callable(%rip), %rcx	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_function.h:452: 	      _M_manager = &_My_handler::_M_manager;
	vpinsrq	$1, %rax, %xmm0, %xmm0	 # tmp109, tmp111, tmp107
 # C:/msys64/ucrt64/include/c++/13.1.0/future:429: 		  std::__addressof(__res), std::__addressof(__did_set));
	leaq	39(%rsp), %rax	 #, tmp112
 # C:/msys64/ucrt64/include/c++/13.1.0/mutex:899:       auto __callable = [&] {
	vpinsrq	$1, %rdx, %xmm1, %xmm1	 # tmp120, tmp119, tmp121
 # C:/msys64/ucrt64/include/c++/13.1.0/future:425: 	bool __did_set = false;
	movb	$0, 39(%rsp)	 #, __did_set
 # C:/msys64/ucrt64/include/c++/13.1.0/future:429: 		  std::__addressof(__res), std::__addressof(__did_set));
	movq	%rax, 56(%rsp)	 # tmp112, D.232373
 # C:/msys64/ucrt64/include/c++/13.1.0/future:428: 	call_once(_M_once, &_State_baseV2::_M_do_set, this,
	leaq	_ZNSt13__future_base13_State_baseV29_M_do_setEPSt8functionIFSt10unique_ptrINS_12_Result_baseENS3_8_DeleterEEvEEPb(%rip), %rax	 #, tmp115
	movq	%rax, 64(%rsp)	 # tmp115, D.232370.__pfn
 # C:/msys64/ucrt64/include/c++/13.1.0/mutex:899:       auto __callable = [&] {
	leaq	64(%rsp), %rax	 #, tmp117
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_function.h:452: 	      _M_manager = &_My_handler::_M_manager;
	vmovdqu	%xmm0, 96(%rsp)	 # tmp107, MEM <vector(2) long long unsigned int> [(void *)&D.223279 + 16B]
 # C:/msys64/ucrt64/include/c++/13.1.0/mutex:899:       auto __callable = [&] {
	vmovq	%rax, %xmm0	 # tmp117, tmp117
	leaq	40(%rsp), %rax	 #, tmp118
	vpinsrq	$1, %rax, %xmm0, %xmm0	 # tmp118, tmp117, tmp122
 # C:/msys64/ucrt64/include/c++/13.1.0/future:429: 		  std::__addressof(__res), std::__addressof(__did_set));
	movq	%rbp, 48(%rsp)	 # tmp141, D.232372
 # C:/msys64/ucrt64/include/c++/13.1.0/future:428: 	call_once(_M_once, &_State_baseV2::_M_do_set, this,
	movq	$0, 72(%rsp)	 #, D.232370.__delta
 # C:/msys64/ucrt64/include/c++/13.1.0/mutex:899:       auto __callable = [&] {
	vinserti128	$0x1, %xmm1, %ymm0, %ymm0	 # tmp121, tmp122, tmp116
	vmovdqu	%ymm0, 112(%rsp)	 # tmp116, MEM <vector(4) long long unsigned int> [(void *)&__callable]
 # C:/msys64/ucrt64/include/c++/13.1.0/mutex:834: 	__once_callable = std::__addressof(__c);
	vzeroupper
	call	__emutls_get_address	 #
 # C:/msys64/ucrt64/include/c++/13.1.0/mutex:836: 	__once_call = [] { (*static_cast<_Callable*>(__once_callable))(); };
	movq	.refptr.__emutls_v._ZSt11__once_call(%rip), %rcx	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/mutex:834: 	__once_callable = std::__addressof(__c);
	movq	%rax, %rdi	 # tmp143, _23
	leaq	112(%rsp), %rax	 #, tmp124
	movq	%rax, (%rdi)	 # tmp124, *_23
 # C:/msys64/ucrt64/include/c++/13.1.0/mutex:836: 	__once_call = [] { (*static_cast<_Callable*>(__once_callable))(); };
	call	__emutls_get_address	 #
 # C:/msys64/ucrt64/include/c++/13.1.0/x86_64-w64-mingw32/bits/gthr-default.h:700:     return __gthrw_(pthread_once) (__once, __func);
	movq	.refptr.__once_proxy(%rip), %rdx	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/mutex:907:       if (int __e = __gthread_once(&__once._M_once, &__once_proxy))
	leaq	44(%rbx), %rcx	 #, tmp128
 # C:/msys64/ucrt64/include/c++/13.1.0/mutex:836: 	__once_call = [] { (*static_cast<_Callable*>(__once_callable))(); };
	movq	%rax, %rsi	 # tmp144, _24
	leaq	_ZZNSt9once_flag18_Prepare_executionC4IZSt9call_onceIMNSt13__future_base13_State_baseV2EFvPSt8functionIFSt10unique_ptrINS3_12_Result_baseENS7_8_DeleterEEvEEPbEJPS4_SC_SD_EEvRS_OT_DpOT0_EUlvE_EERSI_ENUlvE_4_FUNEv(%rip), %rax	 #, tmp127
	movq	%rax, (%rsi)	 # tmp127, *_24
.LEHB11:
 # C:/msys64/ucrt64/include/c++/13.1.0/x86_64-w64-mingw32/bits/gthr-default.h:700:     return __gthrw_(pthread_once) (__once, __func);
	call	pthread_once	 #
.LEHE11:
 # C:/msys64/ucrt64/include/c++/13.1.0/mutex:907:       if (int __e = __gthread_once(&__once._M_once, &__once_proxy))
	testl	%eax, %eax	 # _26
	jne	.L437	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/future:430: 	if (__did_set)
	cmpb	$0, 39(%rsp)	 #, __did_set
 # C:/msys64/ucrt64/include/c++/13.1.0/mutex:842:       __once_callable = nullptr;
	movq	$0, (%rdi)	 #, *_23
 # C:/msys64/ucrt64/include/c++/13.1.0/mutex:843:       __once_call = nullptr;
	movq	$0, (%rsi)	 #, *_24
 # C:/msys64/ucrt64/include/c++/13.1.0/future:430: 	if (__did_set)
	jne	.L438	 #,
.L421:
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_function.h:243:       if (_M_manager)
	movq	96(%rsp), %rax	 # MEM[(struct _Function_base *)&D.223279]._M_manager, _10
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_function.h:243:       if (_M_manager)
	testq	%rax, %rax	 # _10
	je	.L436	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_function.h:244: 	_M_manager(_M_functor, _M_functor, __destroy_functor);
	movl	$3, %r8d	 #,
	movq	%rbp, %rdx	 # tmp141,
	movq	%rbp, %rcx	 # tmp141,
	call	*%rax	 # _10
	nop	
.L436:
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1706:       }
	addq	$152, %rsp	 #,
	popq	%rbx	 #
	popq	%rsi	 #
	popq	%rdi	 #
	popq	%rbp	 #
	ret	
	.p2align 4,,10
	.p2align 3
.L438:
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/atomic_futex.h:348:       unique_lock<mutex> __lock(_M_mutex);
	leaq	24(%rbx), %rsi	 #, _44
 # C:/msys64/ucrt64/include/c++/13.1.0/x86_64-w64-mingw32/bits/gthr-default.h:749:     return __gthrw_(pthread_mutex_lock) (__mutex);
	movq	%rsi, %rcx	 # _44,
.LEHB12:
	call	pthread_mutex_lock	 #
.LEHE12:
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_mutex.h:116:       if (__e)
	testl	%eax, %eax	 # _36
	jne	.L439	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/atomic_futex.h:349:       _M_data = __val;
	movl	$1, 16(%rbx)	 #, MEM[(struct __atomic_futex_unsigned *)this_4(D) + 16B]._M_data
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/atomic_futex.h:350:       _M_condvar.notify_all();
	leaq	32(%rbx), %rcx	 #, tmp136
	call	_ZNSt18condition_variable10notify_allEv	 #
 # C:/msys64/ucrt64/include/c++/13.1.0/x86_64-w64-mingw32/bits/gthr-default.h:779:     return __gthrw_(pthread_mutex_unlock) (__mutex);
	movq	%rsi, %rcx	 # _44,
	call	pthread_mutex_unlock	 #
 # C:/msys64/ucrt64/include/c++/13.1.0/future:436:       }
	jmp	.L421	 #
.L437:
 # C:/msys64/ucrt64/include/c++/13.1.0/mutex:908: 	__throw_system_error(__e);
	movl	%eax, %ecx	 # _26,
.LEHB13:
	call	_ZSt20__throw_system_errori	 #
.LEHE13:
.L439:
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_mutex.h:117: 	__throw_system_error(__e);
	movl	%eax, %ecx	 # _36,
.LEHB14:
	call	_ZSt20__throw_system_errori	 #
.LEHE14:
.L428:
 # C:/msys64/ucrt64/include/c++/13.1.0/mutex:843:       __once_call = nullptr;
	xorl	%ecx, %ecx	 #
	movq	%rax, %rbx	 # tmp146, tmp130
	movq	%rcx, (%rdi)	 #, *_23
	movq	%rcx, (%rsi)	 #, *_24
.L423:
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_function.h:243:       if (_M_manager)
	movq	96(%rsp), %rax	 # MEM[(struct _Function_base *)&D.223279]._M_manager, _11
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_function.h:243:       if (_M_manager)
	testq	%rax, %rax	 # _11
	je	.L435	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_function.h:244: 	_M_manager(_M_functor, _M_functor, __destroy_functor);
	movl	$3, %r8d	 #,
	movq	%rbp, %rdx	 # tmp141,
	movq	%rbp, %rcx	 # tmp141,
	vzeroupper
	call	*%rax	 # _11
.L426:
	movq	%rbx, %rcx	 # tmp130,
.LEHB15:
	call	_Unwind_Resume	 #
.LEHE15:
.L427:
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_function.h:243:       if (_M_manager)
	movq	%rax, %rbx	 # tmp148, tmp130
	jmp	.L423	 #
.L435:
	vzeroupper
	jmp	.L426	 #
	.seh_handler	__gxx_personality_seh0, @unwind, @except
	.seh_handlerdata
.LLSDA14995:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE14995-.LLSDACSB14995
.LLSDACSB14995:
	.uleb128 .LEHB11-.LFB14995
	.uleb128 .LEHE11-.LEHB11
	.uleb128 .L428-.LFB14995
	.uleb128 0
	.uleb128 .LEHB12-.LFB14995
	.uleb128 .LEHE12-.LEHB12
	.uleb128 .L427-.LFB14995
	.uleb128 0
	.uleb128 .LEHB13-.LFB14995
	.uleb128 .LEHE13-.LEHB13
	.uleb128 .L428-.LFB14995
	.uleb128 0
	.uleb128 .LEHB14-.LFB14995
	.uleb128 .LEHE14-.LEHB14
	.uleb128 .L427-.LFB14995
	.uleb128 0
	.uleb128 .LEHB15-.LFB14995
	.uleb128 .LEHE15-.LEHB15
	.uleb128 0
	.uleb128 0
.LLSDACSE14995:
	.section	.text$_ZNSt13__future_base15_Deferred_stateINSt6thread8_InvokerISt5tupleIJPFviPK8BoidListPK7BoidMapEiPS4_PS7_EEEEvE17_M_complete_asyncEv,"x"
	.linkonce discard
	.seh_endproc
	.section	.text$_ZNSt13__future_base15_Deferred_stateINSt6thread8_InvokerISt5tupleIJPFvibPK7BoidMapPK5RulesPK8BoidListEibS6_S9_SC_EEEEvE17_M_complete_asyncEv,"x"
	.linkonce discard
	.align 2
	.p2align 4
	.globl	_ZNSt13__future_base15_Deferred_stateINSt6thread8_InvokerISt5tupleIJPFvibPK7BoidMapPK5RulesPK8BoidListEibS6_S9_SC_EEEEvE17_M_complete_asyncEv
	.def	_ZNSt13__future_base15_Deferred_stateINSt6thread8_InvokerISt5tupleIJPFvibPK7BoidMapPK5RulesPK8BoidListEibS6_S9_SC_EEEEvE17_M_complete_asyncEv;	.scl	2;	.type	32;	.endef
	.seh_proc	_ZNSt13__future_base15_Deferred_stateINSt6thread8_InvokerISt5tupleIJPFvibPK7BoidMapPK5RulesPK8BoidListEibS6_S9_SC_EEEEvE17_M_complete_asyncEv
_ZNSt13__future_base15_Deferred_stateINSt6thread8_InvokerISt5tupleIJPFvibPK7BoidMapPK5RulesPK8BoidListEibS6_S9_SC_EEEEvE17_M_complete_asyncEv:
.LFB14989:
	pushq	%rbp	 #
	.seh_pushreg	%rbp
	pushq	%rdi	 #
	.seh_pushreg	%rdi
	pushq	%rsi	 #
	.seh_pushreg	%rsi
	pushq	%rbx	 #
	.seh_pushreg	%rbx
	subq	$152, %rsp	 #,
	.seh_stackalloc	152
	.seh_endprologue
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_function.h:452: 	      _M_manager = &_My_handler::_M_manager;
	leaq	_ZNSt17_Function_handlerIFSt10unique_ptrINSt13__future_base12_Result_baseENS2_8_DeleterEEvENS1_12_Task_setterIS0_INS1_7_ResultIvEES3_ENSt6thread8_InvokerISt5tupleIJPFvibPK7BoidMapPK5RulesPK8BoidListEibSF_SI_SL_EEEEvEEE10_M_managerERSt9_Any_dataRKSS_St18_Manager_operation(%rip), %rdi	 #, tmp111
	vmovq	%rdi, %xmm0	 # tmp111, tmp111
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1705:         _M_set_result(_S_task_setter(_M_result, _M_fn), true);
	leaq	48(%rcx), %rax	 #, tmp105
 # C:/msys64/ucrt64/include/c++/13.1.0/mutex:899:       auto __callable = [&] {
	leaq	48(%rsp), %rdx	 #, tmp119
 # C:/msys64/ucrt64/include/c++/13.1.0/future:428: 	call_once(_M_once, &_State_baseV2::_M_do_set, this,
	movq	%rcx, 40(%rsp)	 # this, D.232428
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1697:       _M_complete_async()
	movq	%rcx, %rbx	 # tmp142, this
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1705:         _M_set_result(_S_task_setter(_M_result, _M_fn), true);
	movq	%rax, 80(%rsp)	 # tmp105, MEM[(struct _Task_setter *)&D.223271]._M_result
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1705:         _M_set_result(_S_task_setter(_M_result, _M_fn), true);
	leaq	56(%rcx), %rax	 #, tmp106
 # C:/msys64/ucrt64/include/c++/13.1.0/mutex:899:       auto __callable = [&] {
	vmovq	%rdx, %xmm1	 # tmp119, tmp119
 # C:/msys64/ucrt64/include/c++/13.1.0/future:429: 		  std::__addressof(__res), std::__addressof(__did_set));
	leaq	80(%rsp), %rbp	 #, tmp141
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1705:         _M_set_result(_S_task_setter(_M_result, _M_fn), true);
	movq	%rax, 88(%rsp)	 # tmp106, MEM[(struct _Task_setter *)&D.223271]._M_fn
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_function.h:452: 	      _M_manager = &_My_handler::_M_manager;
	leaq	_ZNSt17_Function_handlerIFSt10unique_ptrINSt13__future_base12_Result_baseENS2_8_DeleterEEvENS1_12_Task_setterIS0_INS1_7_ResultIvEES3_ENSt6thread8_InvokerISt5tupleIJPFvibPK7BoidMapPK5RulesPK8BoidListEibSF_SI_SL_EEEEvEEE9_M_invokeERKSt9_Any_data(%rip), %rax	 #, tmp109
 # C:/msys64/ucrt64/include/c++/13.1.0/mutex:899:       auto __callable = [&] {
	leaq	56(%rsp), %rdx	 #, tmp120
 # C:/msys64/ucrt64/include/c++/13.1.0/mutex:834: 	__once_callable = std::__addressof(__c);
	movq	.refptr.__emutls_v._ZSt15__once_callable(%rip), %rcx	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_function.h:452: 	      _M_manager = &_My_handler::_M_manager;
	vpinsrq	$1, %rax, %xmm0, %xmm0	 # tmp109, tmp111, tmp107
 # C:/msys64/ucrt64/include/c++/13.1.0/future:429: 		  std::__addressof(__res), std::__addressof(__did_set));
	leaq	39(%rsp), %rax	 #, tmp112
 # C:/msys64/ucrt64/include/c++/13.1.0/mutex:899:       auto __callable = [&] {
	vpinsrq	$1, %rdx, %xmm1, %xmm1	 # tmp120, tmp119, tmp121
 # C:/msys64/ucrt64/include/c++/13.1.0/future:425: 	bool __did_set = false;
	movb	$0, 39(%rsp)	 #, __did_set
 # C:/msys64/ucrt64/include/c++/13.1.0/future:429: 		  std::__addressof(__res), std::__addressof(__did_set));
	movq	%rax, 56(%rsp)	 # tmp112, D.232430
 # C:/msys64/ucrt64/include/c++/13.1.0/future:428: 	call_once(_M_once, &_State_baseV2::_M_do_set, this,
	leaq	_ZNSt13__future_base13_State_baseV29_M_do_setEPSt8functionIFSt10unique_ptrINS_12_Result_baseENS3_8_DeleterEEvEEPb(%rip), %rax	 #, tmp115
	movq	%rax, 64(%rsp)	 # tmp115, D.232427.__pfn
 # C:/msys64/ucrt64/include/c++/13.1.0/mutex:899:       auto __callable = [&] {
	leaq	64(%rsp), %rax	 #, tmp117
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_function.h:452: 	      _M_manager = &_My_handler::_M_manager;
	vmovdqu	%xmm0, 96(%rsp)	 # tmp107, MEM <vector(2) long long unsigned int> [(void *)&D.223271 + 16B]
 # C:/msys64/ucrt64/include/c++/13.1.0/mutex:899:       auto __callable = [&] {
	vmovq	%rax, %xmm0	 # tmp117, tmp117
	leaq	40(%rsp), %rax	 #, tmp118
	vpinsrq	$1, %rax, %xmm0, %xmm0	 # tmp118, tmp117, tmp122
 # C:/msys64/ucrt64/include/c++/13.1.0/future:429: 		  std::__addressof(__res), std::__addressof(__did_set));
	movq	%rbp, 48(%rsp)	 # tmp141, D.232429
 # C:/msys64/ucrt64/include/c++/13.1.0/future:428: 	call_once(_M_once, &_State_baseV2::_M_do_set, this,
	movq	$0, 72(%rsp)	 #, D.232427.__delta
 # C:/msys64/ucrt64/include/c++/13.1.0/mutex:899:       auto __callable = [&] {
	vinserti128	$0x1, %xmm1, %ymm0, %ymm0	 # tmp121, tmp122, tmp116
	vmovdqu	%ymm0, 112(%rsp)	 # tmp116, MEM <vector(4) long long unsigned int> [(void *)&__callable]
 # C:/msys64/ucrt64/include/c++/13.1.0/mutex:834: 	__once_callable = std::__addressof(__c);
	vzeroupper
	call	__emutls_get_address	 #
 # C:/msys64/ucrt64/include/c++/13.1.0/mutex:836: 	__once_call = [] { (*static_cast<_Callable*>(__once_callable))(); };
	movq	.refptr.__emutls_v._ZSt11__once_call(%rip), %rcx	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/mutex:834: 	__once_callable = std::__addressof(__c);
	movq	%rax, %rdi	 # tmp143, _23
	leaq	112(%rsp), %rax	 #, tmp124
	movq	%rax, (%rdi)	 # tmp124, *_23
 # C:/msys64/ucrt64/include/c++/13.1.0/mutex:836: 	__once_call = [] { (*static_cast<_Callable*>(__once_callable))(); };
	call	__emutls_get_address	 #
 # C:/msys64/ucrt64/include/c++/13.1.0/x86_64-w64-mingw32/bits/gthr-default.h:700:     return __gthrw_(pthread_once) (__once, __func);
	movq	.refptr.__once_proxy(%rip), %rdx	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/mutex:907:       if (int __e = __gthread_once(&__once._M_once, &__once_proxy))
	leaq	44(%rbx), %rcx	 #, tmp128
 # C:/msys64/ucrt64/include/c++/13.1.0/mutex:836: 	__once_call = [] { (*static_cast<_Callable*>(__once_callable))(); };
	movq	%rax, %rsi	 # tmp144, _24
	leaq	_ZZNSt9once_flag18_Prepare_executionC4IZSt9call_onceIMNSt13__future_base13_State_baseV2EFvPSt8functionIFSt10unique_ptrINS3_12_Result_baseENS7_8_DeleterEEvEEPbEJPS4_SC_SD_EEvRS_OT_DpOT0_EUlvE_EERSI_ENUlvE_4_FUNEv(%rip), %rax	 #, tmp127
	movq	%rax, (%rsi)	 # tmp127, *_24
.LEHB16:
 # C:/msys64/ucrt64/include/c++/13.1.0/x86_64-w64-mingw32/bits/gthr-default.h:700:     return __gthrw_(pthread_once) (__once, __func);
	call	pthread_once	 #
.LEHE16:
 # C:/msys64/ucrt64/include/c++/13.1.0/mutex:907:       if (int __e = __gthread_once(&__once._M_once, &__once_proxy))
	testl	%eax, %eax	 # _26
	jne	.L459	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/future:430: 	if (__did_set)
	cmpb	$0, 39(%rsp)	 #, __did_set
 # C:/msys64/ucrt64/include/c++/13.1.0/mutex:842:       __once_callable = nullptr;
	movq	$0, (%rdi)	 #, *_23
 # C:/msys64/ucrt64/include/c++/13.1.0/mutex:843:       __once_call = nullptr;
	movq	$0, (%rsi)	 #, *_24
 # C:/msys64/ucrt64/include/c++/13.1.0/future:430: 	if (__did_set)
	jne	.L460	 #,
.L443:
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_function.h:243:       if (_M_manager)
	movq	96(%rsp), %rax	 # MEM[(struct _Function_base *)&D.223271]._M_manager, _10
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_function.h:243:       if (_M_manager)
	testq	%rax, %rax	 # _10
	je	.L458	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_function.h:244: 	_M_manager(_M_functor, _M_functor, __destroy_functor);
	movl	$3, %r8d	 #,
	movq	%rbp, %rdx	 # tmp141,
	movq	%rbp, %rcx	 # tmp141,
	call	*%rax	 # _10
	nop	
.L458:
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1706:       }
	addq	$152, %rsp	 #,
	popq	%rbx	 #
	popq	%rsi	 #
	popq	%rdi	 #
	popq	%rbp	 #
	ret	
	.p2align 4,,10
	.p2align 3
.L460:
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/atomic_futex.h:348:       unique_lock<mutex> __lock(_M_mutex);
	leaq	24(%rbx), %rsi	 #, _44
 # C:/msys64/ucrt64/include/c++/13.1.0/x86_64-w64-mingw32/bits/gthr-default.h:749:     return __gthrw_(pthread_mutex_lock) (__mutex);
	movq	%rsi, %rcx	 # _44,
.LEHB17:
	call	pthread_mutex_lock	 #
.LEHE17:
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_mutex.h:116:       if (__e)
	testl	%eax, %eax	 # _36
	jne	.L461	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/atomic_futex.h:349:       _M_data = __val;
	movl	$1, 16(%rbx)	 #, MEM[(struct __atomic_futex_unsigned *)this_4(D) + 16B]._M_data
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/atomic_futex.h:350:       _M_condvar.notify_all();
	leaq	32(%rbx), %rcx	 #, tmp136
	call	_ZNSt18condition_variable10notify_allEv	 #
 # C:/msys64/ucrt64/include/c++/13.1.0/x86_64-w64-mingw32/bits/gthr-default.h:779:     return __gthrw_(pthread_mutex_unlock) (__mutex);
	movq	%rsi, %rcx	 # _44,
	call	pthread_mutex_unlock	 #
 # C:/msys64/ucrt64/include/c++/13.1.0/future:436:       }
	jmp	.L443	 #
.L459:
 # C:/msys64/ucrt64/include/c++/13.1.0/mutex:908: 	__throw_system_error(__e);
	movl	%eax, %ecx	 # _26,
.LEHB18:
	call	_ZSt20__throw_system_errori	 #
.LEHE18:
.L461:
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_mutex.h:117: 	__throw_system_error(__e);
	movl	%eax, %ecx	 # _36,
.LEHB19:
	call	_ZSt20__throw_system_errori	 #
.LEHE19:
.L450:
 # C:/msys64/ucrt64/include/c++/13.1.0/mutex:843:       __once_call = nullptr;
	xorl	%ecx, %ecx	 #
	movq	%rax, %rbx	 # tmp146, tmp130
	movq	%rcx, (%rdi)	 #, *_23
	movq	%rcx, (%rsi)	 #, *_24
.L445:
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_function.h:243:       if (_M_manager)
	movq	96(%rsp), %rax	 # MEM[(struct _Function_base *)&D.223271]._M_manager, _11
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_function.h:243:       if (_M_manager)
	testq	%rax, %rax	 # _11
	je	.L457	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_function.h:244: 	_M_manager(_M_functor, _M_functor, __destroy_functor);
	movl	$3, %r8d	 #,
	movq	%rbp, %rdx	 # tmp141,
	movq	%rbp, %rcx	 # tmp141,
	vzeroupper
	call	*%rax	 # _11
.L448:
	movq	%rbx, %rcx	 # tmp130,
.LEHB20:
	call	_Unwind_Resume	 #
.LEHE20:
.L449:
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_function.h:243:       if (_M_manager)
	movq	%rax, %rbx	 # tmp148, tmp130
	jmp	.L445	 #
.L457:
	vzeroupper
	jmp	.L448	 #
	.seh_handler	__gxx_personality_seh0, @unwind, @except
	.seh_handlerdata
.LLSDA14989:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE14989-.LLSDACSB14989
.LLSDACSB14989:
	.uleb128 .LEHB16-.LFB14989
	.uleb128 .LEHE16-.LEHB16
	.uleb128 .L450-.LFB14989
	.uleb128 0
	.uleb128 .LEHB17-.LFB14989
	.uleb128 .LEHE17-.LEHB17
	.uleb128 .L449-.LFB14989
	.uleb128 0
	.uleb128 .LEHB18-.LFB14989
	.uleb128 .LEHE18-.LEHB18
	.uleb128 .L450-.LFB14989
	.uleb128 0
	.uleb128 .LEHB19-.LFB14989
	.uleb128 .LEHE19-.LEHB19
	.uleb128 .L449-.LFB14989
	.uleb128 0
	.uleb128 .LEHB20-.LFB14989
	.uleb128 .LEHE20-.LEHB20
	.uleb128 0
	.uleb128 0
.LLSDACSE14989:
	.section	.text$_ZNSt13__future_base15_Deferred_stateINSt6thread8_InvokerISt5tupleIJPFvibPK7BoidMapPK5RulesPK8BoidListEibS6_S9_SC_EEEEvE17_M_complete_asyncEv,"x"
	.linkonce discard
	.seh_endproc
	.section	.text$_ZSteqRKSt10error_codeRKSt15error_condition,"x"
	.linkonce discard
	.p2align 4
	.globl	_ZSteqRKSt10error_codeRKSt15error_condition
	.def	_ZSteqRKSt10error_codeRKSt15error_condition;	.scl	2;	.type	32;	.endef
	.seh_proc	_ZSteqRKSt10error_codeRKSt15error_condition
_ZSteqRKSt10error_codeRKSt15error_condition:
.LFB1786:
	pushq	%rsi	 #
	.seh_pushreg	%rsi
	pushq	%rbx	 #
	.seh_pushreg	%rbx
	subq	$40, %rsp	 #,
	.seh_stackalloc	40
	.seh_endprologue
 # C:/msys64/ucrt64/include/c++/13.1.0/system_error:466:   {
	movq	%rcx, %rbx	 # tmp100, __lhs
 # C:/msys64/ucrt64/include/c++/13.1.0/system_error:267:     category() const noexcept { return *_M_cat; }
	movq	8(%rcx), %rcx	 # __lhs_11(D)->_M_cat, _16
 # C:/msys64/ucrt64/include/c++/13.1.0/system_error:466:   {
	movq	%rdx, %rsi	 # tmp101, __rhs
 # C:/msys64/ucrt64/include/c++/13.1.0/system_error:467:     return __lhs.category().equivalent(__lhs.value(), __rhs)
	movq	%rsi, %r8	 # __rhs,
	movl	(%rbx), %edx	 # __lhs_11(D)->_M_value, __lhs_11(D)->_M_value
 # C:/msys64/ucrt64/include/c++/13.1.0/system_error:467:     return __lhs.category().equivalent(__lhs.value(), __rhs)
	movq	(%rcx), %rax	 # _16->_vptr.error_category, _16->_vptr.error_category
 # C:/msys64/ucrt64/include/c++/13.1.0/system_error:467:     return __lhs.category().equivalent(__lhs.value(), __rhs)
	call	*48(%rax)	 # MEM[(int (*) () *)_1 + 48B]
 # C:/msys64/ucrt64/include/c++/13.1.0/system_error:468: 	     || __rhs.category().equivalent(__lhs, __rhs.value());
	testb	%al, %al	 # <retval>
	jne	.L462	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/system_error:404:     category() const noexcept { return *_M_cat; }
	movq	8(%rsi), %rcx	 # __rhs_14(D)->_M_cat, _12
 # C:/msys64/ucrt64/include/c++/13.1.0/system_error:468: 	     || __rhs.category().equivalent(__lhs, __rhs.value());
	movl	(%rsi), %r8d	 # __rhs_14(D)->_M_value,
	movq	%rbx, %rdx	 # __lhs,
 # C:/msys64/ucrt64/include/c++/13.1.0/system_error:468: 	     || __rhs.category().equivalent(__lhs, __rhs.value());
	movq	(%rcx), %rax	 # _12->_vptr.error_category, _12->_vptr.error_category
 # C:/msys64/ucrt64/include/c++/13.1.0/system_error:468: 	     || __rhs.category().equivalent(__lhs, __rhs.value());
	movq	56(%rax), %rax	 # MEM[(int (*) () *)_4 + 56B], MEM[(int (*) () *)_4 + 56B]
 # C:/msys64/ucrt64/include/c++/13.1.0/system_error:469:   }
	addq	$40, %rsp	 #,
	popq	%rbx	 #
	popq	%rsi	 #
 # C:/msys64/ucrt64/include/c++/13.1.0/system_error:468: 	     || __rhs.category().equivalent(__lhs, __rhs.value());
	rex.W jmp	*%rax	 # MEM[(int (*) () *)_4 + 56B]
	.p2align 4,,10
	.p2align 3
.L462:
 # C:/msys64/ucrt64/include/c++/13.1.0/system_error:469:   }
	addq	$40, %rsp	 #,
	popq	%rbx	 #
	popq	%rsi	 #
	ret	
	.seh_endproc
	.section .rdata,"dr"
.LC16:
	.ascii "std::future_error: \0"
	.section	.text$_ZNSt13__future_base13_State_baseV216_M_break_promiseESt10unique_ptrINS_12_Result_baseENS2_8_DeleterEE,"x"
	.linkonce discard
	.align 2
	.p2align 4
	.globl	_ZNSt13__future_base13_State_baseV216_M_break_promiseESt10unique_ptrINS_12_Result_baseENS2_8_DeleterEE
	.def	_ZNSt13__future_base13_State_baseV216_M_break_promiseESt10unique_ptrINS_12_Result_baseENS2_8_DeleterEE;	.scl	2;	.type	32;	.endef
	.seh_proc	_ZNSt13__future_base13_State_baseV216_M_break_promiseESt10unique_ptrINS_12_Result_baseENS2_8_DeleterEE
_ZNSt13__future_base13_State_baseV216_M_break_promiseESt10unique_ptrINS_12_Result_baseENS2_8_DeleterEE:
.LFB11708:
	pushq	%r14	 #
	.seh_pushreg	%r14
	pushq	%r13	 #
	.seh_pushreg	%r13
	pushq	%r12	 #
	.seh_pushreg	%r12
	pushq	%rbp	 #
	.seh_pushreg	%rbp
	pushq	%rdi	 #
	.seh_pushreg	%rdi
	pushq	%rsi	 #
	.seh_pushreg	%rsi
	pushq	%rbx	 #
	.seh_pushreg	%rbx
	subq	$144, %rsp	 #,
	.seh_stackalloc	144
	.seh_endprologue
 # C:/msys64/ucrt64/include/c++/13.1.0/future:462: 	if (static_cast<bool>(__res))
	cmpq	$0, (%rdx)	 #, MEM[(struct _Result_base * const &)__res_3(D)]
 # C:/msys64/ucrt64/include/c++/13.1.0/future:460:       _M_break_promise(_Ptr_type __res)
	movq	%rcx, %rbx	 # tmp176, this
	movq	%rdx, %rsi	 # tmp177, __res
 # C:/msys64/ucrt64/include/c++/13.1.0/future:462: 	if (static_cast<bool>(__res))
	je	.L496	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/future:95:   { return error_code(static_cast<int>(__errc), future_category()); }
	call	_ZSt15future_categoryv	 #
 # C:/msys64/ucrt64/include/c++/13.1.0/system_error:277:     { return category().message(value()); }
	leaq	80(%rsp), %rbp	 #, tmp172
	movl	$4, %r8d	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/future:95:   { return error_code(static_cast<int>(__errc), future_category()); }
	movq	%rax, %rdi	 # tmp178, _12
 # C:/msys64/ucrt64/include/c++/13.1.0/system_error:277:     { return category().message(value()); }
	movq	(%rax), %rax	 # *_12._vptr.error_category, *_12._vptr.error_category
 # C:/msys64/ucrt64/include/c++/13.1.0/system_error:277:     { return category().message(value()); }
	movq	%rbp, %rcx	 # tmp172,
	movq	%rdi, %rdx	 # _12,
.LEHB21:
	call	*32(%rax)	 # MEM[(int (*) () *)_52 + 32B]
.LEHE21:
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/basic_string.h:2207: 	return _M_replace(_M_check(__pos, "basic_string::replace"),
	leaq	.LC16(%rip), %r9	 #,
	xorl	%r8d, %r8d	 #
	xorl	%edx, %edx	 #
	movq	$19, 32(%rsp)	 #,
	movq	%rbp, %rcx	 # tmp172,
.LEHB22:
	call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEyyPKcy	 #
.LEHE22:
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/basic_string.h:204: 	: allocator_type(std::move(__a)), _M_p(__dat) { }
	leaq	128(%rsp), %r14	 #, tmp175
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/basic_string.h:252: 	return std::pointer_traits<const_pointer>::pointer_to(*_M_local_buf);
	leaq	16(%rax), %rcx	 #, _64
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/basic_string.h:277: 	    if (_M_string_length > _S_local_capacity)
	movq	8(%rax), %r8	 # MEM[(const struct basic_string *)_61]._M_string_length, pretmp_120
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/basic_string.h:204: 	: allocator_type(std::move(__a)), _M_p(__dat) { }
	movq	%r14, 112(%rsp)	 # tmp175, MEM[(struct _Alloc_hider *)_80]._M_p
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/basic_string.h:234:       { return _M_dataplus._M_p; }
	movq	(%rax), %rdx	 # MEM[(const struct basic_string *)_61]._M_dataplus._M_p, _63
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/basic_string.h:275: 	if (_M_data() == _M_local_data())
	cmpq	%rcx, %rdx	 # _64, _63
	je	.L497	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/basic_string.h:224:       { _M_dataplus._M_p = __p; }
	movq	%rdx, 112(%rsp)	 # _63, MEM[(struct basic_string *)_80]._M_dataplus._M_p
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/basic_string.h:261:       { _M_allocated_capacity = __capacity; }
	movq	16(%rax), %rdx	 # *_61.D.30388._M_allocated_capacity, *_61.D.30388._M_allocated_capacity
	movq	%rdx, 128(%rsp)	 # *_61.D.30388._M_allocated_capacity, MEM[(struct basic_string *)_80].D.30388._M_allocated_capacity
.L473:
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/basic_string.h:229:       { _M_string_length = __length; }
	movq	8(%rax), %rdx	 # MEM[(const struct basic_string *)_61]._M_string_length, MEM[(const struct basic_string *)_61]._M_string_length
 # C:/msys64/ucrt64/include/c++/13.1.0/future:127:     : logic_error("std::future_error: " + __ec.message()), _M_code(__ec)
	leaq	112(%rsp), %r13	 #, tmp173
	leaq	48(%rsp), %r12	 #, tmp174
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/basic_string.h:229:       { _M_string_length = __length; }
	movq	%rdx, 120(%rsp)	 # MEM[(const struct basic_string *)_61]._M_string_length, MEM[(struct basic_string *)_80]._M_string_length
 # C:/msys64/ucrt64/include/c++/13.1.0/future:127:     : logic_error("std::future_error: " + __ec.message()), _M_code(__ec)
	movq	%r13, %rdx	 # tmp173,
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/basic_string.h:224:       { _M_dataplus._M_p = __p; }
	movq	%rcx, (%rax)	 # _64, *_61._M_dataplus._M_p
 # C:/msys64/ucrt64/include/c++/13.1.0/future:127:     : logic_error("std::future_error: " + __ec.message()), _M_code(__ec)
	movq	%r12, %rcx	 # tmp174,
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/basic_string.h:229:       { _M_string_length = __length; }
	movq	$0, 8(%rax)	 #, *_61._M_string_length
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/char_traits.h:368: 	__c1 = __c2;
	movb	$0, 16(%rax)	 #, MEM[(char_type &)_61 + 16]
.LEHB23:
 # C:/msys64/ucrt64/include/c++/13.1.0/future:127:     : logic_error("std::future_error: " + __ec.message()), _M_code(__ec)
	call	_ZNSt11logic_errorC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE	 #
.LEHE23:
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/basic_string.h:234:       { return _M_dataplus._M_p; }
	movq	112(%rsp), %rcx	 # MEM[(struct basic_string *)_80]._M_dataplus._M_p, _75
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/basic_string.h:275: 	if (_M_data() == _M_local_data())
	cmpq	%r14, %rcx	 # tmp175, _75
	je	.L474	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/basic_string.h:300:       { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
	movq	128(%rsp), %rax	 # MEM[(struct basic_string *)_80].D.30388._M_allocated_capacity, tmp186
	leaq	1(%rax), %rdx	 #, tmp145
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/new_allocator.h:168: 	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
	call	_ZdlPvy	 #
.L474:
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/basic_string.h:234:       { return _M_dataplus._M_p; }
	movq	80(%rsp), %rcx	 # MEM[(struct basic_string *)_128]._M_dataplus._M_p, _69
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/basic_string.h:275: 	if (_M_data() == _M_local_data())
	leaq	96(%rsp), %rax	 #, tmp148
	cmpq	%rax, %rcx	 # tmp148, _69
	je	.L475	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/basic_string.h:300:       { _Alloc_traits::deallocate(_M_get_allocator(), _M_data(), __size + 1); }
	movq	96(%rsp), %rax	 # MEM[(struct basic_string *)_128].D.30388._M_allocated_capacity, tmp187
	leaq	1(%rax), %rdx	 #, tmp149
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/new_allocator.h:168: 	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
	call	_ZdlPvy	 #
.L475:
 # C:/msys64/ucrt64/include/c++/13.1.0/future:127:     : logic_error("std::future_error: " + __ec.message()), _M_code(__ec)
	movq	.refptr._ZTVSt12future_error(%rip), %rax	 #, tmp188
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/exception_ptr.h:253:       void* __e = __cxxabiv1::__cxa_allocate_exception(sizeof(_Ex));
	movl	$32, %ecx	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/future:127:     : logic_error("std::future_error: " + __ec.message()), _M_code(__ec)
	movq	%rdi, 72(%rsp)	 # _12, MEM <const struct error_category *> [(struct error_code *)&D.147195 + 24B]
	movl	$4, 64(%rsp)	 #, MEM <int> [(struct error_code *)&D.147195 + 16B]
 # C:/msys64/ucrt64/include/c++/13.1.0/future:127:     : logic_error("std::future_error: " + __ec.message()), _M_code(__ec)
	leaq	16(%rax), %r14	 #, tmp152
	movq	%r14, 48(%rsp)	 # tmp152, D.147195.D.139703.D.41479._vptr.exception
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/exception_ptr.h:253:       void* __e = __cxxabiv1::__cxa_allocate_exception(sizeof(_Ex));
	call	__cxa_allocate_exception	 #
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/exception_ptr.h:254:       (void) __cxxabiv1::__cxa_init_primary_exception(
	leaq	_ZNSt15__exception_ptr12__dest_thunkISt12future_errorEEvPv(%rip), %r8	 #,
	leaq	_ZTISt12future_error(%rip), %rdx	 #, tmp154
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/exception_ptr.h:253:       void* __e = __cxxabiv1::__cxa_allocate_exception(sizeof(_Ex));
	movq	%rax, %rdi	 # tmp180, __e
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/exception_ptr.h:254:       (void) __cxxabiv1::__cxa_init_primary_exception(
	movq	%rax, %rcx	 # __e,
	call	__cxa_init_primary_exception	 #
 # C:/msys64/ucrt64/include/c++/13.1.0/future:108:   class future_error : public logic_error
	movq	%r12, %rdx	 # tmp174,
	movq	%rdi, %rcx	 # __e,
	call	_ZNSt11logic_errorC2ERKS_	 #
 # C:/msys64/ucrt64/include/c++/13.1.0/future:108:   class future_error : public logic_error
	movq	%r14, (%rdi)	 # tmp152, MEM[(struct future_error *)__e_47].D.139703.D.41479._vptr.exception
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/exception_ptr.h:260: 	  return exception_ptr(__e);
	movq	%rdi, %rdx	 # __e,
	movq	%rbp, %rcx	 # tmp172,
 # C:/msys64/ucrt64/include/c++/13.1.0/future:108:   class future_error : public logic_error
	vmovdqu	64(%rsp), %xmm0	 # MEM[(const struct future_error &)&D.147195]._M_code, tmp189
	vmovdqu	%xmm0, 16(%rdi)	 # tmp189, MEM[(struct future_error *)__e_47]._M_code
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/exception_ptr.h:260: 	  return exception_ptr(__e);
	call	_ZNSt15__exception_ptr13exception_ptrC1EPv	 #
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/unique_ptr.h:199:       pointer    _M_ptr() const noexcept { return std::get<0>(_M_t); }
	movq	(%rsi), %rdx	 # MEM[(struct _Result_base * const &)__res_3(D)], _18
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/exception_ptr.h:124:       : _M_exception_object(__o._M_exception_object)
	movq	80(%rsp), %rcx	 # MEM[(struct exception_ptr &)_128]._M_exception_object, _16
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/exception_ptr.h:125:       { __o._M_exception_object = nullptr; }
	movq	$0, 80(%rsp)	 #, MEM[(struct exception_ptr &)_128]._M_exception_object
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/exception_ptr.h:224:       _M_exception_object = __other._M_exception_object;
	movq	8(%rdx), %rax	 # MEM[(struct exception_ptr &)_18 + 8]._M_exception_object, _17
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/exception_ptr.h:224:       _M_exception_object = __other._M_exception_object;
	movq	%rax, 112(%rsp)	 # _17, MEM[(struct exception_ptr *)_80]._M_exception_object
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/exception_ptr.h:225:       __other._M_exception_object = __tmp;
	movq	%rcx, 8(%rdx)	 # _16, MEM[(struct exception_ptr &)_18 + 8]._M_exception_object
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/exception_ptr.h:207:       if (_M_exception_object)
	testq	%rax, %rax	 # _17
	je	.L477	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/exception_ptr.h:208: 	_M_release();
	movq	%r13, %rcx	 # tmp173,
	call	_ZNSt15__exception_ptr13exception_ptr10_M_releaseEv	 #
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/exception_ptr.h:207:       if (_M_exception_object)
	cmpq	$0, 80(%rsp)	 #, MEM[(struct exception_ptr *)_128]._M_exception_object
	je	.L477	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/exception_ptr.h:208: 	_M_release();
	movq	%rbp, %rcx	 # tmp172,
	call	_ZNSt15__exception_ptr13exception_ptr10_M_releaseEv	 #
.L477:
 # C:/msys64/ucrt64/include/c++/13.1.0/future:465: 	      make_exception_ptr(future_error(future_errc::broken_promise));
	movq	%r12, %rcx	 # tmp174,
	call	_ZNSt12future_errorD1Ev	 #
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/move.h:205:       __a = _GLIBCXX_MOVE(__b);
	movq	(%rsi), %rdx	 # MEM[(struct _Result_base * &)__res_3(D)], _14
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/move.h:204:       _Tp __tmp = _GLIBCXX_MOVE(__a);
	movq	8(%rbx), %rax	 # MEM[(struct _Result_base * &)this_10(D) + 8], _13
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/move.h:205:       __a = _GLIBCXX_MOVE(__b);
	movq	%rdx, 8(%rbx)	 # _14, MEM[(struct _Result_base * &)this_10(D) + 8]
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/move.h:206:       __b = _GLIBCXX_MOVE(__tmp);
	movq	%rax, (%rsi)	 # _13, MEM[(struct _Result_base * &)__res_3(D)]
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/atomic_futex.h:348:       unique_lock<mutex> __lock(_M_mutex);
	leaq	24(%rbx), %rsi	 #, _6
 # C:/msys64/ucrt64/include/c++/13.1.0/x86_64-w64-mingw32/bits/gthr-default.h:749:     return __gthrw_(pthread_mutex_lock) (__mutex);
	movq	%rsi, %rcx	 # _6,
.LEHB24:
	call	pthread_mutex_lock	 #
.LEHE24:
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_mutex.h:116:       if (__e)
	testl	%eax, %eax	 # _89
	jne	.L498	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/atomic_futex.h:349:       _M_data = __val;
	movl	$1, 16(%rbx)	 #, MEM[(struct __atomic_futex_unsigned *)this_10(D) + 16B]._M_data
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/atomic_futex.h:350:       _M_condvar.notify_all();
	leaq	32(%rbx), %rcx	 #, tmp171
	call	_ZNSt18condition_variable10notify_allEv	 #
 # C:/msys64/ucrt64/include/c++/13.1.0/x86_64-w64-mingw32/bits/gthr-default.h:779:     return __gthrw_(pthread_mutex_unlock) (__mutex);
	movq	%rsi, %rcx	 # _6,
	call	pthread_mutex_unlock	 #
	nop	
.L496:
 # C:/msys64/ucrt64/include/c++/13.1.0/future:475:       }
	addq	$144, %rsp	 #,
	popq	%rbx	 #
	popq	%rsi	 #
	popq	%rdi	 #
	popq	%rbp	 #
	popq	%r12	 #
	popq	%r13	 #
	popq	%r14	 #
	ret	
	.p2align 4,,10
	.p2align 3
.L497:
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/basic_string.h:683: 	    traits_type::copy(_M_local_buf, __str._M_local_buf,
	addq	$1, %r8	 #, tmp121
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/char_traits.h:445: 	return static_cast<char_type*>(__builtin_memcpy(__s1, __s2, __n));
	movq	%r14, %r10	 # tmp175, tmp123
	movq	%rcx, %rdx	 # _64, _64
	cmpl	$8, %r8d	 #, tmp121
	jnb	.L499	 #,
.L467:
	xorl	%r9d, %r9d	 # tmp130
	testb	$4, %r8b	 #, tmp121
	jne	.L500	 #,
.L470:
	testb	$2, %r8b	 #, tmp121
	jne	.L501	 #,
.L471:
	andl	$1, %r8d	 #, tmp121
	je	.L473	 #,
	movzbl	(%rdx,%r9), %edx	 #, tmp138
	movb	%dl, (%r10,%r9)	 # tmp138,
	jmp	.L473	 #
	.p2align 4,,10
	.p2align 3
.L501:
	movzwl	(%rdx,%r9), %r11d	 #, tmp135
	movw	%r11w, (%r10,%r9)	 # tmp135,
	addq	$2, %r9	 #, tmp130
	jmp	.L471	 #
	.p2align 4,,10
	.p2align 3
.L500:
	movl	(%rdx), %r9d	 #* _64, tmp132
	movl	%r9d, (%r10)	 # tmp132,
	movl	$4, %r9d	 #, tmp130
	jmp	.L470	 #
	.p2align 4,,10
	.p2align 3
.L499:
	movl	%r8d, %r11d	 # tmp121, tmp126
	xorl	%edx, %edx	 # tmp125
	andl	$-8, %r11d	 #, tmp126
.L468:
	movl	%edx, %r9d	 # tmp125, tmp127
	addl	$8, %edx	 #,
	movq	(%rcx,%r9), %r10	 # MEM <char[1:(sizetype) _67]> [(void *)_64], tmp128
	movq	%r10, (%r14,%r9)	 # tmp128, MEM <char[1:(sizetype) _67]> [(void *)_80]
	cmpl	%r11d, %edx	 # tmp126, tmp125
	jb	.L468	 #,
	leaq	(%r14,%rdx), %r10	 #, tmp123
	addq	%rcx, %rdx	 # _64, _64
	jmp	.L467	 #
.L498:
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_mutex.h:117: 	__throw_system_error(__e);
	movl	%eax, %ecx	 # _89,
.LEHB25:
	call	_ZSt20__throw_system_errori	 #
.L481:
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/basic_string.h:803:       { _M_dispose(); }
	movq	%rax, %rbx	 # tmp182, tmp161
	vzeroupper
.L479:
	movq	%rbp, %rcx	 # tmp172,
	call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv	 #
	movq	%rbx, %rcx	 # tmp161,
	call	_Unwind_Resume	 #
.LEHE25:
.L482:
	movq	%r13, %rcx	 # tmp173,
	movq	%rax, %rbx	 # tmp181, tmp162
	vzeroupper
	call	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv	 #
	jmp	.L479	 #
	.seh_handler	__gxx_personality_seh0, @unwind, @except
	.seh_handlerdata
.LLSDA11708:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE11708-.LLSDACSB11708
.LLSDACSB11708:
	.uleb128 .LEHB21-.LFB11708
	.uleb128 .LEHE21-.LEHB21
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB22-.LFB11708
	.uleb128 .LEHE22-.LEHB22
	.uleb128 .L481-.LFB11708
	.uleb128 0
	.uleb128 .LEHB23-.LFB11708
	.uleb128 .LEHE23-.LEHB23
	.uleb128 .L482-.LFB11708
	.uleb128 0
	.uleb128 .LEHB24-.LFB11708
	.uleb128 .LEHE24-.LEHB24
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB25-.LFB11708
	.uleb128 .LEHE25-.LEHB25
	.uleb128 0
	.uleb128 0
.LLSDACSE11708:
	.section	.text$_ZNSt13__future_base13_State_baseV216_M_break_promiseESt10unique_ptrINS_12_Result_baseENS2_8_DeleterEE,"x"
	.linkonce discard
	.seh_endproc
	.section	.text$_ZNSt13__future_base17_Async_state_implINSt6thread8_InvokerISt5tupleIJPFviPK8BoidListPK7BoidMapEiPS4_PS7_EEEEvE6_M_runEv,"x"
	.linkonce discard
	.align 2
	.p2align 4
	.globl	_ZNSt13__future_base17_Async_state_implINSt6thread8_InvokerISt5tupleIJPFviPK8BoidListPK7BoidMapEiPS4_PS7_EEEEvE6_M_runEv
	.def	_ZNSt13__future_base17_Async_state_implINSt6thread8_InvokerISt5tupleIJPFviPK8BoidListPK7BoidMapEiPS4_PS7_EEEEvE6_M_runEv;	.scl	2;	.type	32;	.endef
	.seh_proc	_ZNSt13__future_base17_Async_state_implINSt6thread8_InvokerISt5tupleIJPFviPK8BoidListPK7BoidMapEiPS4_PS7_EEEEvE6_M_runEv
_ZNSt13__future_base17_Async_state_implINSt6thread8_InvokerISt5tupleIJPFviPK8BoidListPK7BoidMapEiPS4_PS7_EEEEvE6_M_runEv:
.LFB14648:
	pushq	%r12	 #
	.seh_pushreg	%r12
	pushq	%rbp	 #
	.seh_pushreg	%rbp
	pushq	%rdi	 #
	.seh_pushreg	%rdi
	pushq	%rsi	 #
	.seh_pushreg	%rsi
	pushq	%rbx	 #
	.seh_pushreg	%rbx
	subq	$144, %rsp	 #,
	.seh_stackalloc	144
	.seh_endprologue
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_function.h:452: 	      _M_manager = &_My_handler::_M_manager;
	leaq	_ZNSt17_Function_handlerIFSt10unique_ptrINSt13__future_base12_Result_baseENS2_8_DeleterEEvENS1_12_Task_setterIS0_INS1_7_ResultIvEES3_ENSt6thread8_InvokerISt5tupleIJPFviPK8BoidListPK7BoidMapEiPSD_PSG_EEEEvEEE10_M_managerERSt9_Any_dataRKSR_St18_Manager_operation(%rip), %rdi	 #, tmp121
	vmovq	%rdi, %xmm0	 # tmp121, tmp121
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1774: 	    _M_set_result(_S_task_setter(_M_result, _M_fn));
	leaq	64(%rcx), %rax	 #, tmp115
 # C:/msys64/ucrt64/include/c++/13.1.0/mutex:899:       auto __callable = [&] {
	leaq	48(%rsp), %rdx	 #, tmp129
 # C:/msys64/ucrt64/include/c++/13.1.0/future:428: 	call_once(_M_once, &_State_baseV2::_M_do_set, this,
	movq	%rcx, 40(%rsp)	 # this, D.232548
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1770:       _M_run()
	movq	%rcx, %rbx	 # tmp164, this
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1774: 	    _M_set_result(_S_task_setter(_M_result, _M_fn));
	movq	%rax, 80(%rsp)	 # tmp115, MEM[(struct _Task_setter *)&D.213882]._M_result
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1774: 	    _M_set_result(_S_task_setter(_M_result, _M_fn));
	leaq	72(%rcx), %rax	 #, tmp116
 # C:/msys64/ucrt64/include/c++/13.1.0/mutex:899:       auto __callable = [&] {
	vmovq	%rdx, %xmm1	 # tmp129, tmp129
 # C:/msys64/ucrt64/include/c++/13.1.0/future:429: 		  std::__addressof(__res), std::__addressof(__did_set));
	leaq	80(%rsp), %rbp	 #, tmp163
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1774: 	    _M_set_result(_S_task_setter(_M_result, _M_fn));
	movq	%rax, 88(%rsp)	 # tmp116, MEM[(struct _Task_setter *)&D.213882]._M_fn
 # C:/msys64/ucrt64/include/c++/13.1.0/mutex:899:       auto __callable = [&] {
	leaq	56(%rsp), %rdx	 #, tmp130
 # C:/msys64/ucrt64/include/c++/13.1.0/mutex:834: 	__once_callable = std::__addressof(__c);
	leaq	112(%rsp), %r12	 #, tmp162
	movq	.refptr.__emutls_v._ZSt15__once_callable(%rip), %rcx	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_function.h:452: 	      _M_manager = &_My_handler::_M_manager;
	leaq	_ZNSt17_Function_handlerIFSt10unique_ptrINSt13__future_base12_Result_baseENS2_8_DeleterEEvENS1_12_Task_setterIS0_INS1_7_ResultIvEES3_ENSt6thread8_InvokerISt5tupleIJPFviPK8BoidListPK7BoidMapEiPSD_PSG_EEEEvEEE9_M_invokeERKSt9_Any_data(%rip), %rax	 #, tmp119
 # C:/msys64/ucrt64/include/c++/13.1.0/mutex:899:       auto __callable = [&] {
	vpinsrq	$1, %rdx, %xmm1, %xmm1	 # tmp130, tmp129, tmp131
 # C:/msys64/ucrt64/include/c++/13.1.0/future:425: 	bool __did_set = false;
	movb	$0, 39(%rsp)	 #, __did_set
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_function.h:452: 	      _M_manager = &_My_handler::_M_manager;
	vpinsrq	$1, %rax, %xmm0, %xmm0	 # tmp119, tmp121, tmp117
 # C:/msys64/ucrt64/include/c++/13.1.0/future:429: 		  std::__addressof(__res), std::__addressof(__did_set));
	leaq	39(%rsp), %rax	 #, tmp122
 # C:/msys64/ucrt64/include/c++/13.1.0/future:429: 		  std::__addressof(__res), std::__addressof(__did_set));
	movq	%rbp, 48(%rsp)	 # tmp163, D.232549
 # C:/msys64/ucrt64/include/c++/13.1.0/future:429: 		  std::__addressof(__res), std::__addressof(__did_set));
	movq	%rax, 56(%rsp)	 # tmp122, D.232550
 # C:/msys64/ucrt64/include/c++/13.1.0/future:428: 	call_once(_M_once, &_State_baseV2::_M_do_set, this,
	leaq	_ZNSt13__future_base13_State_baseV29_M_do_setEPSt8functionIFSt10unique_ptrINS_12_Result_baseENS3_8_DeleterEEvEEPb(%rip), %rax	 #, tmp125
	movq	%rax, 64(%rsp)	 # tmp125, D.232547.__pfn
 # C:/msys64/ucrt64/include/c++/13.1.0/mutex:899:       auto __callable = [&] {
	leaq	64(%rsp), %rax	 #, tmp127
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_function.h:452: 	      _M_manager = &_My_handler::_M_manager;
	vmovdqu	%xmm0, 96(%rsp)	 # tmp117, MEM <vector(2) long long unsigned int> [(void *)&D.213882 + 16B]
 # C:/msys64/ucrt64/include/c++/13.1.0/mutex:899:       auto __callable = [&] {
	vmovq	%rax, %xmm0	 # tmp127, tmp127
	leaq	40(%rsp), %rax	 #, tmp128
 # C:/msys64/ucrt64/include/c++/13.1.0/future:428: 	call_once(_M_once, &_State_baseV2::_M_do_set, this,
	movq	$0, 72(%rsp)	 #, D.232547.__delta
 # C:/msys64/ucrt64/include/c++/13.1.0/mutex:899:       auto __callable = [&] {
	vpinsrq	$1, %rax, %xmm0, %xmm0	 # tmp128, tmp127, tmp132
	vinserti128	$0x1, %xmm1, %ymm0, %ymm0	 # tmp131, tmp132, tmp126
	vmovdqu	%ymm0, 112(%rsp)	 # tmp126, MEM <vector(4) long long unsigned int> [(void *)_95]
 # C:/msys64/ucrt64/include/c++/13.1.0/mutex:834: 	__once_callable = std::__addressof(__c);
	vzeroupper
	call	__emutls_get_address	 #
 # C:/msys64/ucrt64/include/c++/13.1.0/mutex:836: 	__once_call = [] { (*static_cast<_Callable*>(__once_callable))(); };
	movq	.refptr.__emutls_v._ZSt11__once_call(%rip), %rcx	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/mutex:834: 	__once_callable = std::__addressof(__c);
	movq	%r12, (%rax)	 # tmp162, *_49
	movq	%rax, %rdi	 # tmp165, _49
 # C:/msys64/ucrt64/include/c++/13.1.0/mutex:836: 	__once_call = [] { (*static_cast<_Callable*>(__once_callable))(); };
	call	__emutls_get_address	 #
 # C:/msys64/ucrt64/include/c++/13.1.0/x86_64-w64-mingw32/bits/gthr-default.h:700:     return __gthrw_(pthread_once) (__once, __func);
	movq	.refptr.__once_proxy(%rip), %rdx	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/mutex:907:       if (int __e = __gthread_once(&__once._M_once, &__once_proxy))
	leaq	44(%rbx), %rcx	 #, tmp138
 # C:/msys64/ucrt64/include/c++/13.1.0/mutex:836: 	__once_call = [] { (*static_cast<_Callable*>(__once_callable))(); };
	movq	%rax, %rsi	 # tmp166, _50
	leaq	_ZZNSt9once_flag18_Prepare_executionC4IZSt9call_onceIMNSt13__future_base13_State_baseV2EFvPSt8functionIFSt10unique_ptrINS3_12_Result_baseENS7_8_DeleterEEvEEPbEJPS4_SC_SD_EEvRS_OT_DpOT0_EUlvE_EERSI_ENUlvE_4_FUNEv(%rip), %rax	 #, tmp137
	movq	%rax, (%rsi)	 # tmp137, *_50
.LEHB26:
 # C:/msys64/ucrt64/include/c++/13.1.0/x86_64-w64-mingw32/bits/gthr-default.h:700:     return __gthrw_(pthread_once) (__once, __func);
	call	pthread_once	 #
.LEHE26:
 # C:/msys64/ucrt64/include/c++/13.1.0/mutex:907:       if (int __e = __gthread_once(&__once._M_once, &__once_proxy))
	testl	%eax, %eax	 # _52
	jne	.L539	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/future:430: 	if (__did_set)
	cmpb	$0, 39(%rsp)	 #, __did_set
 # C:/msys64/ucrt64/include/c++/13.1.0/mutex:842:       __once_callable = nullptr;
	movq	$0, (%rdi)	 #, *_49
 # C:/msys64/ucrt64/include/c++/13.1.0/mutex:843:       __once_call = nullptr;
	movq	$0, (%rsi)	 #, *_50
 # C:/msys64/ucrt64/include/c++/13.1.0/future:430: 	if (__did_set)
	jne	.L540	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/future:435:           __throw_future_error(int(future_errc::promise_already_satisfied));
	movl	$2, %ecx	 #,
.LEHB27:
	call	_ZSt20__throw_future_errori	 #
	.p2align 4,,10
	.p2align 3
.L540:
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/atomic_futex.h:348:       unique_lock<mutex> __lock(_M_mutex);
	leaq	24(%rbx), %rsi	 #, _69
 # C:/msys64/ucrt64/include/c++/13.1.0/x86_64-w64-mingw32/bits/gthr-default.h:749:     return __gthrw_(pthread_mutex_lock) (__mutex);
	movq	%rsi, %rcx	 # _69,
	call	pthread_mutex_lock	 #
.LEHE27:
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_mutex.h:116:       if (__e)
	testl	%eax, %eax	 # _62
	jne	.L541	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/atomic_futex.h:349:       _M_data = __val;
	movl	$1, 16(%rbx)	 #, MEM[(struct __atomic_futex_unsigned *)this_7(D) + 16B]._M_data
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/atomic_futex.h:350:       _M_condvar.notify_all();
	leaq	32(%rbx), %rcx	 #, tmp146
	call	_ZNSt18condition_variable10notify_allEv	 #
 # C:/msys64/ucrt64/include/c++/13.1.0/x86_64-w64-mingw32/bits/gthr-default.h:779:     return __gthrw_(pthread_mutex_unlock) (__mutex);
	movq	%rsi, %rcx	 # _69,
	call	pthread_mutex_unlock	 #
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_function.h:243:       if (_M_manager)
	movq	96(%rsp), %rax	 # MEM[(struct _Function_base *)&D.213882]._M_manager, _14
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_function.h:243:       if (_M_manager)
	testq	%rax, %rax	 # _14
	je	.L537	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_function.h:244: 	_M_manager(_M_functor, _M_functor, __destroy_functor);
	movl	$3, %r8d	 #,
	movq	%rbp, %rdx	 # tmp163,
	movq	%rbp, %rcx	 # tmp163,
	call	*%rax	 # _14
	nop	
.L537:
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1783:       }
	addq	$144, %rsp	 #,
	popq	%rbx	 #
	popq	%rsi	 #
	popq	%rdi	 #
	popq	%rbp	 #
	popq	%r12	 #
	ret	
.L539:
 # C:/msys64/ucrt64/include/c++/13.1.0/mutex:908: 	__throw_system_error(__e);
	movl	%eax, %ecx	 # _52,
.LEHB28:
	call	_ZSt20__throw_system_errori	 #
.LEHE28:
.L541:
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_mutex.h:117: 	__throw_system_error(__e);
	movl	%eax, %ecx	 # _62,
.LEHB29:
	call	_ZSt20__throw_system_errori	 #
.LEHE29:
.L521:
 # C:/msys64/ucrt64/include/c++/13.1.0/mutex:843:       __once_call = nullptr;
	xorl	%ecx, %ecx	 #
	movq	%rcx, (%rdi)	 #, *_49
	movq	%rdx, %rdi	 # tmp169, tmp142
	movq	%rcx, (%rsi)	 #, *_50
	movq	%rax, %rsi	 # tmp168, tmp140
.L507:
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_function.h:243:       if (_M_manager)
	movq	96(%rsp), %rax	 # MEM[(struct _Function_base *)&D.213882]._M_manager, _20
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_function.h:243:       if (_M_manager)
	testq	%rax, %rax	 # _20
	je	.L535	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_function.h:244: 	_M_manager(_M_functor, _M_functor, __destroy_functor);
	movl	$3, %r8d	 #,
	movq	%rbp, %rdx	 # tmp163,
	movq	%rbp, %rcx	 # tmp163,
	vzeroupper
	call	*%rax	 # _20
.L511:
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1776: 	__catch (const __cxxabiv1::__forced_unwind&)
	subq	$1, %rdi	 #, tmp142
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1776: 	__catch (const __cxxabiv1::__forced_unwind&)
	movq	%rsi, %rcx	 # tmp140,
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1776: 	__catch (const __cxxabiv1::__forced_unwind&)
	jne	.L538	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1776: 	__catch (const __cxxabiv1::__forced_unwind&)
	call	__cxa_begin_catch	 #
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/unique_ptr.h:199:       pointer    _M_ptr() const noexcept { return std::get<0>(_M_t); }
	movq	64(%rbx), %rax	 # MEM[(struct _Result * const &)this_7(D) + 64], _22
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1779: 	    if (static_cast<bool>(_M_result))
	testq	%rax, %rax	 # _22
	je	.L513	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/unique_ptr.h:218: 	_M_ptr() = nullptr;
	xorl	%edx, %edx	 #
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1780: 	      this->_M_break_promise(std::move(_M_result));
	movq	%rbx, %rcx	 # this,
 # C:/msys64/ucrt64/include/c++/13.1.0/tuple:201: 	: _M_head_impl(std::forward<_UHead>(__h)) { }
	movq	%rax, 112(%rsp)	 # _22, MEM[(struct _Head_base *)_95]._M_head_impl
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/unique_ptr.h:218: 	_M_ptr() = nullptr;
	movq	%rdx, 64(%rbx)	 #, MEM[(struct _Result * &)this_7(D) + 64]
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1780: 	      this->_M_break_promise(std::move(_M_result));
	movq	%r12, %rdx	 # tmp162,
.LEHB30:
	call	_ZNSt13__future_base13_State_baseV216_M_break_promiseESt10unique_ptrINS_12_Result_baseENS2_8_DeleterEE	 #
.LEHE30:
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/unique_ptr.h:403: 	if (__ptr != nullptr)
	movq	112(%rsp), %rcx	 # MEM[(struct _Result_base * &)_95], _23
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/unique_ptr.h:403: 	if (__ptr != nullptr)
	testq	%rcx, %rcx	 # _23
	je	.L513	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/future:229: 	void operator()(_Result_base* __fr) const { __fr->_M_destroy(); }
	movq	(%rcx), %rax	 # _23->_vptr._Result_base, _23->_vptr._Result_base
	call	*(%rax)	 # *_24
.L513:
.LEHB31:
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1781: 	    __throw_exception_again;
	call	__cxa_rethrow	 #
.LEHE31:
.L518:
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_function.h:243:       if (_M_manager)
	movq	%rax, %rsi	 # tmp171, tmp140
	movq	%rdx, %rdi	 # tmp172, tmp142
	jmp	.L507	 #
.L535:
	vzeroupper
	jmp	.L511	 #
.L520:
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1776: 	__catch (const __cxxabiv1::__forced_unwind&)
	movq	%rax, %rbx	 # tmp174, tmp158
	vzeroupper
.L517:
	call	__cxa_end_catch	 #
	movq	%rbx, %rcx	 # tmp158,
.L538:
.LEHB32:
	call	_Unwind_Resume	 #
.LEHE32:
.L519:
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/unique_ptr.h:403: 	if (__ptr != nullptr)
	movq	112(%rsp), %rcx	 # MEM[(struct _Result_base * &)_95], _26
	movq	%rax, %rbx	 # tmp173, tmp159
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/unique_ptr.h:403: 	if (__ptr != nullptr)
	testq	%rcx, %rcx	 # _26
	je	.L536	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/future:229: 	void operator()(_Result_base* __fr) const { __fr->_M_destroy(); }
	movq	(%rcx), %rax	 # _26->_vptr._Result_base, _26->_vptr._Result_base
	vzeroupper
	call	*(%rax)	 # *_27
 # C:/msys64/ucrt64/include/c++/13.1.0/future:229: 	void operator()(_Result_base* __fr) const { __fr->_M_destroy(); }
	jmp	.L517	 #
.L536:
	vzeroupper
	jmp	.L517	 #
	.seh_handler	__gxx_personality_seh0, @unwind, @except
	.seh_handlerdata
	.align 4
.LLSDA14648:
	.byte	0xff
	.byte	0x9b
	.uleb128 .LLSDATT14648-.LLSDATTD14648
.LLSDATTD14648:
	.byte	0x1
	.uleb128 .LLSDACSE14648-.LLSDACSB14648
.LLSDACSB14648:
	.uleb128 .LEHB26-.LFB14648
	.uleb128 .LEHE26-.LEHB26
	.uleb128 .L521-.LFB14648
	.uleb128 0x3
	.uleb128 .LEHB27-.LFB14648
	.uleb128 .LEHE27-.LEHB27
	.uleb128 .L518-.LFB14648
	.uleb128 0x3
	.uleb128 .LEHB28-.LFB14648
	.uleb128 .LEHE28-.LEHB28
	.uleb128 .L521-.LFB14648
	.uleb128 0x3
	.uleb128 .LEHB29-.LFB14648
	.uleb128 .LEHE29-.LEHB29
	.uleb128 .L518-.LFB14648
	.uleb128 0x3
	.uleb128 .LEHB30-.LFB14648
	.uleb128 .LEHE30-.LEHB30
	.uleb128 .L519-.LFB14648
	.uleb128 0
	.uleb128 .LEHB31-.LFB14648
	.uleb128 .LEHE31-.LEHB31
	.uleb128 .L520-.LFB14648
	.uleb128 0
	.uleb128 .LEHB32-.LFB14648
	.uleb128 .LEHE32-.LEHB32
	.uleb128 0
	.uleb128 0
.LLSDACSE14648:
	.byte	0x1
	.byte	0
	.byte	0
	.byte	0x7d
	.align 4
	.long	.LDFCM0-.
.LLSDATT14648:
	.section	.text$_ZNSt13__future_base17_Async_state_implINSt6thread8_InvokerISt5tupleIJPFviPK8BoidListPK7BoidMapEiPS4_PS7_EEEEvE6_M_runEv,"x"
	.linkonce discard
	.seh_endproc
	.section	.text$_ZNSt13__future_base17_Async_state_implINSt6thread8_InvokerISt5tupleIJPFvibPK7BoidMapPK5RulesPK8BoidListEibS6_S9_SC_EEEEvE6_M_runEv,"x"
	.linkonce discard
	.align 2
	.p2align 4
	.globl	_ZNSt13__future_base17_Async_state_implINSt6thread8_InvokerISt5tupleIJPFvibPK7BoidMapPK5RulesPK8BoidListEibS6_S9_SC_EEEEvE6_M_runEv
	.def	_ZNSt13__future_base17_Async_state_implINSt6thread8_InvokerISt5tupleIJPFvibPK7BoidMapPK5RulesPK8BoidListEibS6_S9_SC_EEEEvE6_M_runEv;	.scl	2;	.type	32;	.endef
	.seh_proc	_ZNSt13__future_base17_Async_state_implINSt6thread8_InvokerISt5tupleIJPFvibPK7BoidMapPK5RulesPK8BoidListEibS6_S9_SC_EEEEvE6_M_runEv
_ZNSt13__future_base17_Async_state_implINSt6thread8_InvokerISt5tupleIJPFvibPK7BoidMapPK5RulesPK8BoidListEibS6_S9_SC_EEEEvE6_M_runEv:
.LFB14673:
	pushq	%r12	 #
	.seh_pushreg	%r12
	pushq	%rbp	 #
	.seh_pushreg	%rbp
	pushq	%rdi	 #
	.seh_pushreg	%rdi
	pushq	%rsi	 #
	.seh_pushreg	%rsi
	pushq	%rbx	 #
	.seh_pushreg	%rbx
	subq	$144, %rsp	 #,
	.seh_stackalloc	144
	.seh_endprologue
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_function.h:452: 	      _M_manager = &_My_handler::_M_manager;
	leaq	_ZNSt17_Function_handlerIFSt10unique_ptrINSt13__future_base12_Result_baseENS2_8_DeleterEEvENS1_12_Task_setterIS0_INS1_7_ResultIvEES3_ENSt6thread8_InvokerISt5tupleIJPFvibPK7BoidMapPK5RulesPK8BoidListEibSF_SI_SL_EEEEvEEE10_M_managerERSt9_Any_dataRKSS_St18_Manager_operation(%rip), %rdi	 #, tmp121
	vmovq	%rdi, %xmm0	 # tmp121, tmp121
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1774: 	    _M_set_result(_S_task_setter(_M_result, _M_fn));
	leaq	64(%rcx), %rax	 #, tmp115
 # C:/msys64/ucrt64/include/c++/13.1.0/mutex:899:       auto __callable = [&] {
	leaq	48(%rsp), %rdx	 #, tmp129
 # C:/msys64/ucrt64/include/c++/13.1.0/future:428: 	call_once(_M_once, &_State_baseV2::_M_do_set, this,
	movq	%rcx, 40(%rsp)	 # this, D.232609
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1770:       _M_run()
	movq	%rcx, %rbx	 # tmp164, this
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1774: 	    _M_set_result(_S_task_setter(_M_result, _M_fn));
	movq	%rax, 80(%rsp)	 # tmp115, MEM[(struct _Task_setter *)&D.217103]._M_result
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1774: 	    _M_set_result(_S_task_setter(_M_result, _M_fn));
	leaq	72(%rcx), %rax	 #, tmp116
 # C:/msys64/ucrt64/include/c++/13.1.0/mutex:899:       auto __callable = [&] {
	vmovq	%rdx, %xmm1	 # tmp129, tmp129
 # C:/msys64/ucrt64/include/c++/13.1.0/future:429: 		  std::__addressof(__res), std::__addressof(__did_set));
	leaq	80(%rsp), %rbp	 #, tmp163
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1774: 	    _M_set_result(_S_task_setter(_M_result, _M_fn));
	movq	%rax, 88(%rsp)	 # tmp116, MEM[(struct _Task_setter *)&D.217103]._M_fn
 # C:/msys64/ucrt64/include/c++/13.1.0/mutex:899:       auto __callable = [&] {
	leaq	56(%rsp), %rdx	 #, tmp130
 # C:/msys64/ucrt64/include/c++/13.1.0/mutex:834: 	__once_callable = std::__addressof(__c);
	leaq	112(%rsp), %r12	 #, tmp162
	movq	.refptr.__emutls_v._ZSt15__once_callable(%rip), %rcx	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_function.h:452: 	      _M_manager = &_My_handler::_M_manager;
	leaq	_ZNSt17_Function_handlerIFSt10unique_ptrINSt13__future_base12_Result_baseENS2_8_DeleterEEvENS1_12_Task_setterIS0_INS1_7_ResultIvEES3_ENSt6thread8_InvokerISt5tupleIJPFvibPK7BoidMapPK5RulesPK8BoidListEibSF_SI_SL_EEEEvEEE9_M_invokeERKSt9_Any_data(%rip), %rax	 #, tmp119
 # C:/msys64/ucrt64/include/c++/13.1.0/mutex:899:       auto __callable = [&] {
	vpinsrq	$1, %rdx, %xmm1, %xmm1	 # tmp130, tmp129, tmp131
 # C:/msys64/ucrt64/include/c++/13.1.0/future:425: 	bool __did_set = false;
	movb	$0, 39(%rsp)	 #, __did_set
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_function.h:452: 	      _M_manager = &_My_handler::_M_manager;
	vpinsrq	$1, %rax, %xmm0, %xmm0	 # tmp119, tmp121, tmp117
 # C:/msys64/ucrt64/include/c++/13.1.0/future:429: 		  std::__addressof(__res), std::__addressof(__did_set));
	leaq	39(%rsp), %rax	 #, tmp122
 # C:/msys64/ucrt64/include/c++/13.1.0/future:429: 		  std::__addressof(__res), std::__addressof(__did_set));
	movq	%rbp, 48(%rsp)	 # tmp163, D.232610
 # C:/msys64/ucrt64/include/c++/13.1.0/future:429: 		  std::__addressof(__res), std::__addressof(__did_set));
	movq	%rax, 56(%rsp)	 # tmp122, D.232611
 # C:/msys64/ucrt64/include/c++/13.1.0/future:428: 	call_once(_M_once, &_State_baseV2::_M_do_set, this,
	leaq	_ZNSt13__future_base13_State_baseV29_M_do_setEPSt8functionIFSt10unique_ptrINS_12_Result_baseENS3_8_DeleterEEvEEPb(%rip), %rax	 #, tmp125
	movq	%rax, 64(%rsp)	 # tmp125, D.232608.__pfn
 # C:/msys64/ucrt64/include/c++/13.1.0/mutex:899:       auto __callable = [&] {
	leaq	64(%rsp), %rax	 #, tmp127
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_function.h:452: 	      _M_manager = &_My_handler::_M_manager;
	vmovdqu	%xmm0, 96(%rsp)	 # tmp117, MEM <vector(2) long long unsigned int> [(void *)&D.217103 + 16B]
 # C:/msys64/ucrt64/include/c++/13.1.0/mutex:899:       auto __callable = [&] {
	vmovq	%rax, %xmm0	 # tmp127, tmp127
	leaq	40(%rsp), %rax	 #, tmp128
 # C:/msys64/ucrt64/include/c++/13.1.0/future:428: 	call_once(_M_once, &_State_baseV2::_M_do_set, this,
	movq	$0, 72(%rsp)	 #, D.232608.__delta
 # C:/msys64/ucrt64/include/c++/13.1.0/mutex:899:       auto __callable = [&] {
	vpinsrq	$1, %rax, %xmm0, %xmm0	 # tmp128, tmp127, tmp132
	vinserti128	$0x1, %xmm1, %ymm0, %ymm0	 # tmp131, tmp132, tmp126
	vmovdqu	%ymm0, 112(%rsp)	 # tmp126, MEM <vector(4) long long unsigned int> [(void *)_95]
 # C:/msys64/ucrt64/include/c++/13.1.0/mutex:834: 	__once_callable = std::__addressof(__c);
	vzeroupper
	call	__emutls_get_address	 #
 # C:/msys64/ucrt64/include/c++/13.1.0/mutex:836: 	__once_call = [] { (*static_cast<_Callable*>(__once_callable))(); };
	movq	.refptr.__emutls_v._ZSt11__once_call(%rip), %rcx	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/mutex:834: 	__once_callable = std::__addressof(__c);
	movq	%r12, (%rax)	 # tmp162, *_49
	movq	%rax, %rdi	 # tmp165, _49
 # C:/msys64/ucrt64/include/c++/13.1.0/mutex:836: 	__once_call = [] { (*static_cast<_Callable*>(__once_callable))(); };
	call	__emutls_get_address	 #
 # C:/msys64/ucrt64/include/c++/13.1.0/x86_64-w64-mingw32/bits/gthr-default.h:700:     return __gthrw_(pthread_once) (__once, __func);
	movq	.refptr.__once_proxy(%rip), %rdx	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/mutex:907:       if (int __e = __gthread_once(&__once._M_once, &__once_proxy))
	leaq	44(%rbx), %rcx	 #, tmp138
 # C:/msys64/ucrt64/include/c++/13.1.0/mutex:836: 	__once_call = [] { (*static_cast<_Callable*>(__once_callable))(); };
	movq	%rax, %rsi	 # tmp166, _50
	leaq	_ZZNSt9once_flag18_Prepare_executionC4IZSt9call_onceIMNSt13__future_base13_State_baseV2EFvPSt8functionIFSt10unique_ptrINS3_12_Result_baseENS7_8_DeleterEEvEEPbEJPS4_SC_SD_EEvRS_OT_DpOT0_EUlvE_EERSI_ENUlvE_4_FUNEv(%rip), %rax	 #, tmp137
	movq	%rax, (%rsi)	 # tmp137, *_50
.LEHB33:
 # C:/msys64/ucrt64/include/c++/13.1.0/x86_64-w64-mingw32/bits/gthr-default.h:700:     return __gthrw_(pthread_once) (__once, __func);
	call	pthread_once	 #
.LEHE33:
 # C:/msys64/ucrt64/include/c++/13.1.0/mutex:907:       if (int __e = __gthread_once(&__once._M_once, &__once_proxy))
	testl	%eax, %eax	 # _52
	jne	.L579	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/future:430: 	if (__did_set)
	cmpb	$0, 39(%rsp)	 #, __did_set
 # C:/msys64/ucrt64/include/c++/13.1.0/mutex:842:       __once_callable = nullptr;
	movq	$0, (%rdi)	 #, *_49
 # C:/msys64/ucrt64/include/c++/13.1.0/mutex:843:       __once_call = nullptr;
	movq	$0, (%rsi)	 #, *_50
 # C:/msys64/ucrt64/include/c++/13.1.0/future:430: 	if (__did_set)
	jne	.L580	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/future:435:           __throw_future_error(int(future_errc::promise_already_satisfied));
	movl	$2, %ecx	 #,
.LEHB34:
	call	_ZSt20__throw_future_errori	 #
	.p2align 4,,10
	.p2align 3
.L580:
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/atomic_futex.h:348:       unique_lock<mutex> __lock(_M_mutex);
	leaq	24(%rbx), %rsi	 #, _69
 # C:/msys64/ucrt64/include/c++/13.1.0/x86_64-w64-mingw32/bits/gthr-default.h:749:     return __gthrw_(pthread_mutex_lock) (__mutex);
	movq	%rsi, %rcx	 # _69,
	call	pthread_mutex_lock	 #
.LEHE34:
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_mutex.h:116:       if (__e)
	testl	%eax, %eax	 # _62
	jne	.L581	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/atomic_futex.h:349:       _M_data = __val;
	movl	$1, 16(%rbx)	 #, MEM[(struct __atomic_futex_unsigned *)this_7(D) + 16B]._M_data
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/atomic_futex.h:350:       _M_condvar.notify_all();
	leaq	32(%rbx), %rcx	 #, tmp146
	call	_ZNSt18condition_variable10notify_allEv	 #
 # C:/msys64/ucrt64/include/c++/13.1.0/x86_64-w64-mingw32/bits/gthr-default.h:779:     return __gthrw_(pthread_mutex_unlock) (__mutex);
	movq	%rsi, %rcx	 # _69,
	call	pthread_mutex_unlock	 #
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_function.h:243:       if (_M_manager)
	movq	96(%rsp), %rax	 # MEM[(struct _Function_base *)&D.217103]._M_manager, _14
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_function.h:243:       if (_M_manager)
	testq	%rax, %rax	 # _14
	je	.L577	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_function.h:244: 	_M_manager(_M_functor, _M_functor, __destroy_functor);
	movl	$3, %r8d	 #,
	movq	%rbp, %rdx	 # tmp163,
	movq	%rbp, %rcx	 # tmp163,
	call	*%rax	 # _14
	nop	
.L577:
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1783:       }
	addq	$144, %rsp	 #,
	popq	%rbx	 #
	popq	%rsi	 #
	popq	%rdi	 #
	popq	%rbp	 #
	popq	%r12	 #
	ret	
.L579:
 # C:/msys64/ucrt64/include/c++/13.1.0/mutex:908: 	__throw_system_error(__e);
	movl	%eax, %ecx	 # _52,
.LEHB35:
	call	_ZSt20__throw_system_errori	 #
.LEHE35:
.L581:
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_mutex.h:117: 	__throw_system_error(__e);
	movl	%eax, %ecx	 # _62,
.LEHB36:
	call	_ZSt20__throw_system_errori	 #
.LEHE36:
.L561:
 # C:/msys64/ucrt64/include/c++/13.1.0/mutex:843:       __once_call = nullptr;
	xorl	%ecx, %ecx	 #
	movq	%rcx, (%rdi)	 #, *_49
	movq	%rdx, %rdi	 # tmp169, tmp142
	movq	%rcx, (%rsi)	 #, *_50
	movq	%rax, %rsi	 # tmp168, tmp140
.L547:
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_function.h:243:       if (_M_manager)
	movq	96(%rsp), %rax	 # MEM[(struct _Function_base *)&D.217103]._M_manager, _20
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_function.h:243:       if (_M_manager)
	testq	%rax, %rax	 # _20
	je	.L575	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_function.h:244: 	_M_manager(_M_functor, _M_functor, __destroy_functor);
	movl	$3, %r8d	 #,
	movq	%rbp, %rdx	 # tmp163,
	movq	%rbp, %rcx	 # tmp163,
	vzeroupper
	call	*%rax	 # _20
.L551:
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1776: 	__catch (const __cxxabiv1::__forced_unwind&)
	subq	$1, %rdi	 #, tmp142
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1776: 	__catch (const __cxxabiv1::__forced_unwind&)
	movq	%rsi, %rcx	 # tmp140,
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1776: 	__catch (const __cxxabiv1::__forced_unwind&)
	jne	.L578	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1776: 	__catch (const __cxxabiv1::__forced_unwind&)
	call	__cxa_begin_catch	 #
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/unique_ptr.h:199:       pointer    _M_ptr() const noexcept { return std::get<0>(_M_t); }
	movq	64(%rbx), %rax	 # MEM[(struct _Result * const &)this_7(D) + 64], _22
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1779: 	    if (static_cast<bool>(_M_result))
	testq	%rax, %rax	 # _22
	je	.L553	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/unique_ptr.h:218: 	_M_ptr() = nullptr;
	xorl	%edx, %edx	 #
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1780: 	      this->_M_break_promise(std::move(_M_result));
	movq	%rbx, %rcx	 # this,
 # C:/msys64/ucrt64/include/c++/13.1.0/tuple:201: 	: _M_head_impl(std::forward<_UHead>(__h)) { }
	movq	%rax, 112(%rsp)	 # _22, MEM[(struct _Head_base *)_95]._M_head_impl
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/unique_ptr.h:218: 	_M_ptr() = nullptr;
	movq	%rdx, 64(%rbx)	 #, MEM[(struct _Result * &)this_7(D) + 64]
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1780: 	      this->_M_break_promise(std::move(_M_result));
	movq	%r12, %rdx	 # tmp162,
.LEHB37:
	call	_ZNSt13__future_base13_State_baseV216_M_break_promiseESt10unique_ptrINS_12_Result_baseENS2_8_DeleterEE	 #
.LEHE37:
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/unique_ptr.h:403: 	if (__ptr != nullptr)
	movq	112(%rsp), %rcx	 # MEM[(struct _Result_base * &)_95], _23
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/unique_ptr.h:403: 	if (__ptr != nullptr)
	testq	%rcx, %rcx	 # _23
	je	.L553	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/future:229: 	void operator()(_Result_base* __fr) const { __fr->_M_destroy(); }
	movq	(%rcx), %rax	 # _23->_vptr._Result_base, _23->_vptr._Result_base
	call	*(%rax)	 # *_24
.L553:
.LEHB38:
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1781: 	    __throw_exception_again;
	call	__cxa_rethrow	 #
.LEHE38:
.L558:
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_function.h:243:       if (_M_manager)
	movq	%rax, %rsi	 # tmp171, tmp140
	movq	%rdx, %rdi	 # tmp172, tmp142
	jmp	.L547	 #
.L575:
	vzeroupper
	jmp	.L551	 #
.L560:
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1776: 	__catch (const __cxxabiv1::__forced_unwind&)
	movq	%rax, %rbx	 # tmp174, tmp158
	vzeroupper
.L557:
	call	__cxa_end_catch	 #
	movq	%rbx, %rcx	 # tmp158,
.L578:
.LEHB39:
	call	_Unwind_Resume	 #
.LEHE39:
.L559:
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/unique_ptr.h:403: 	if (__ptr != nullptr)
	movq	112(%rsp), %rcx	 # MEM[(struct _Result_base * &)_95], _26
	movq	%rax, %rbx	 # tmp173, tmp159
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/unique_ptr.h:403: 	if (__ptr != nullptr)
	testq	%rcx, %rcx	 # _26
	je	.L576	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/future:229: 	void operator()(_Result_base* __fr) const { __fr->_M_destroy(); }
	movq	(%rcx), %rax	 # _26->_vptr._Result_base, _26->_vptr._Result_base
	vzeroupper
	call	*(%rax)	 # *_27
 # C:/msys64/ucrt64/include/c++/13.1.0/future:229: 	void operator()(_Result_base* __fr) const { __fr->_M_destroy(); }
	jmp	.L557	 #
.L576:
	vzeroupper
	jmp	.L557	 #
	.seh_handler	__gxx_personality_seh0, @unwind, @except
	.seh_handlerdata
	.align 4
.LLSDA14673:
	.byte	0xff
	.byte	0x9b
	.uleb128 .LLSDATT14673-.LLSDATTD14673
.LLSDATTD14673:
	.byte	0x1
	.uleb128 .LLSDACSE14673-.LLSDACSB14673
.LLSDACSB14673:
	.uleb128 .LEHB33-.LFB14673
	.uleb128 .LEHE33-.LEHB33
	.uleb128 .L561-.LFB14673
	.uleb128 0x3
	.uleb128 .LEHB34-.LFB14673
	.uleb128 .LEHE34-.LEHB34
	.uleb128 .L558-.LFB14673
	.uleb128 0x3
	.uleb128 .LEHB35-.LFB14673
	.uleb128 .LEHE35-.LEHB35
	.uleb128 .L561-.LFB14673
	.uleb128 0x3
	.uleb128 .LEHB36-.LFB14673
	.uleb128 .LEHE36-.LEHB36
	.uleb128 .L558-.LFB14673
	.uleb128 0x3
	.uleb128 .LEHB37-.LFB14673
	.uleb128 .LEHE37-.LEHB37
	.uleb128 .L559-.LFB14673
	.uleb128 0
	.uleb128 .LEHB38-.LFB14673
	.uleb128 .LEHE38-.LEHB38
	.uleb128 .L560-.LFB14673
	.uleb128 0
	.uleb128 .LEHB39-.LFB14673
	.uleb128 .LEHE39-.LEHB39
	.uleb128 0
	.uleb128 0
.LLSDACSE14673:
	.byte	0x1
	.byte	0
	.byte	0
	.byte	0x7d
	.align 4
	.long	.LDFCM0-.
.LLSDATT14673:
	.section	.text$_ZNSt13__future_base17_Async_state_implINSt6thread8_InvokerISt5tupleIJPFvibPK7BoidMapPK5RulesPK8BoidListEibS6_S9_SC_EEEEvE6_M_runEv,"x"
	.linkonce discard
	.seh_endproc
	.text
	.p2align 4
	.globl	_Z17write_map_to_listiPKiPK8BoidListPK7BoidMap
	.def	_Z17write_map_to_listiPKiPK8BoidListPK7BoidMap;	.scl	2;	.type	32;	.endef
	.seh_proc	_Z17write_map_to_listiPKiPK8BoidListPK7BoidMap
_Z17write_map_to_listiPKiPK8BoidListPK7BoidMap:
.LFB12578:
	pushq	%r15	 #
	.seh_pushreg	%r15
	pushq	%r14	 #
	.seh_pushreg	%r14
	pushq	%r13	 #
	.seh_pushreg	%r13
	pushq	%r12	 #
	.seh_pushreg	%r12
	pushq	%rbp	 #
	.seh_pushreg	%rbp
	pushq	%rdi	 #
	.seh_pushreg	%rdi
	pushq	%rsi	 #
	.seh_pushreg	%rsi
	pushq	%rbx	 #
	.seh_pushreg	%rbx
	subq	$72, %rsp	 #,
	.seh_stackalloc	72
	.seh_endprologue
 # .\src\main.cpp:66:     auto main_buffer = boid_list->m_boid_store;
	movq	(%r8), %r12	 # boid_list_54(D)->m_boid_store, main_buffer
 # .\src\main.cpp:67:     auto back_buffer = boid_list->m_backbuffer;
	movq	8(%r8), %rbp	 # boid_list_54(D)->m_backbuffer, back_buffer
 # .\src\main.cpp:69:     int index = index_buffer[i];
	movslq	%ecx, %rdi	 # i, i
 # .\src\main.cpp:65: void write_map_to_list(int i, const Boid* index_buffer, const BoidList *boid_list, const BoidMap *boid_map) {
	movq	%r9, %rsi	 # tmp138, boid_map
 # .\src\main.cpp:69:     int index = index_buffer[i];
	movslq	(%rdx,%rdi,4), %rbx	 # *_3,
 # .\src\main.cpp:70:     Boid current = boid_map->get_absolute(i);
	movl	%ecx, %edx	 # i,
	movq	%r9, %rcx	 # boid_map,
	call	_ZNK7BoidMap12get_absoluteEi	 #
 # .\src\main.cpp:72:     if (current != -1) {
	cmpl	$-1, %eax	 #, current
	je	.L589	 #,
 # .\src\main.cpp:73:         boid_map->m_boid_map[i] = index;
	movq	16(%rsi), %rdx	 # boid_map_60(D)->m_boid_map, boid_map_60(D)->m_boid_map
 # .\src\main.cpp:81:         back_buffer->homes[index] = main_buffer->homes[current];
	movq	40(%rbp), %rcx	 # back_buffer_56->homes, _34
 # .\src\main.cpp:77:         back_buffer->xs[index] = main_buffer->xs[current];
	movq	0(%rbp), %r14	 # back_buffer_56->xs, _11
 # .\src\main.cpp:79:         back_buffer->vxs[index] = main_buffer->vxs[current];
	movq	16(%rbp), %r11	 # back_buffer_56->vxs, _24
 # .\src\main.cpp:80:         back_buffer->vys[index] = main_buffer->vys[current];
	movq	24(%rbp), %r9	 # back_buffer_56->vys, _29
 # .\src\main.cpp:77:         back_buffer->xs[index] = main_buffer->xs[current];
	movq	(%r12), %r15	 # main_buffer_55->xs, _7
 # .\src\main.cpp:73:         boid_map->m_boid_map[i] = index;
	movl	%ebx, (%rdx,%rdi,4)	 # index, *_85
 # .\src\main.cpp:82:         back_buffer->depth[index] = main_buffer->depth[current];
	movq	48(%r12), %rdx	 # main_buffer_55->depth, _37
 # .\src\main.cpp:78:         back_buffer->ys[index] = main_buffer->ys[current];
	movq	8(%rbp), %rdi	 # back_buffer_56->ys, _19
	movq	%rcx, 56(%rsp)	 # _34, %sfp
 # .\src\main.cpp:78:         back_buffer->ys[index] = main_buffer->ys[current];
	movq	8(%r12), %r13	 # main_buffer_55->ys, _16
 # .\src\main.cpp:79:         back_buffer->vxs[index] = main_buffer->vxs[current];
	movq	16(%r12), %rsi	 # main_buffer_55->vxs, _22
 # .\src\main.cpp:80:         back_buffer->vys[index] = main_buffer->vys[current];
	movq	24(%r12), %r10	 # main_buffer_55->vys, _27
 # .\src\main.cpp:81:         back_buffer->homes[index] = main_buffer->homes[current];
	movq	40(%r12), %r8	 # main_buffer_55->homes, _32
 # .\src\main.cpp:82:         back_buffer->depth[index] = main_buffer->depth[current];
	movq	%rdx, 40(%rsp)	 # _37, %sfp
 # .\src\main.cpp:82:         back_buffer->depth[index] = main_buffer->depth[current];
	movq	48(%rbp), %rdx	 # back_buffer_56->depth, _39
	movq	32(%rbp), %rbp	 # back_buffer_56->index_next, back_buffer_56->index_next
 # .\src\main.cpp:84:         Boid next = main_buffer->index_next[current];
	movq	32(%r12), %r12	 # main_buffer_55->index_next, _42
 # .\src\main.cpp:82:         back_buffer->depth[index] = main_buffer->depth[current];
	movq	%rdx, 48(%rsp)	 # _39, %sfp
	leaq	0(%rbp,%rbx,4), %rbp	 #, ivtmp.1795
	.p2align 4,,10
	.p2align 3
.L585:
 # .\src\main.cpp:77:         back_buffer->xs[index] = main_buffer->xs[current];
	cltq
 # .\src\main.cpp:81:         back_buffer->homes[index] = main_buffer->homes[current];
	movq	56(%rsp), %rcx	 # %sfp, _34
 # .\src\main.cpp:77:         back_buffer->xs[index] = main_buffer->xs[current];
	vmovss	(%r15,%rax,4), %xmm0	 # *_10, _15
 # .\src\main.cpp:81:         back_buffer->homes[index] = main_buffer->homes[current];
	movl	(%r8,%rax,4), %edx	 # *_33, tmp157
 # .\src\main.cpp:77:         back_buffer->xs[index] = main_buffer->xs[current];
	vmovss	%xmm0, (%r14,%rbx,4)	 # _15, MEM[(float *)_11 + ivtmp.1792_87 * 4]
 # .\src\main.cpp:78:         back_buffer->ys[index] = main_buffer->ys[current];
	vmovss	0(%r13,%rax,4), %xmm0	 # *_18, _21
 # .\src\main.cpp:78:         back_buffer->ys[index] = main_buffer->ys[current];
	vmovss	%xmm0, (%rdi,%rbx,4)	 # _21, MEM[(float *)_19 + ivtmp.1792_87 * 4]
 # .\src\main.cpp:79:         back_buffer->vxs[index] = main_buffer->vxs[current];
	vmovss	(%rsi,%rax,4), %xmm0	 # *_23, _26
 # .\src\main.cpp:79:         back_buffer->vxs[index] = main_buffer->vxs[current];
	vmovss	%xmm0, (%r11,%rbx,4)	 # _26, MEM[(float *)_24 + ivtmp.1792_87 * 4]
 # .\src\main.cpp:80:         back_buffer->vys[index] = main_buffer->vys[current];
	vmovss	(%r10,%rax,4), %xmm0	 # *_28, _31
 # .\src\main.cpp:80:         back_buffer->vys[index] = main_buffer->vys[current];
	vmovss	%xmm0, (%r9,%rbx,4)	 # _31, MEM[(float *)_29 + ivtmp.1792_87 * 4]
 # .\src\main.cpp:81:         back_buffer->homes[index] = main_buffer->homes[current];
	movl	%edx, (%rcx,%rbx,4)	 # tmp157, MEM[(int32_t *)_34 + ivtmp.1792_87 * 4]
 # .\src\main.cpp:82:         back_buffer->depth[index] = main_buffer->depth[current];
	movq	40(%rsp), %rcx	 # %sfp, _37
	movq	48(%rsp), %rdx	 # %sfp, _39
	movl	(%rcx,%rax,4), %ecx	 # *_38, tmp159
	movl	%ecx, (%rdx,%rbx,4)	 # tmp159, MEM[(int32_t *)_39 + ivtmp.1792_87 * 4]
 # .\src\main.cpp:84:         Boid next = main_buffer->index_next[current];
	movl	(%r12,%rax,4), %eax	 # *_43, current
 # .\src\main.cpp:86:         if (next != -1) {
	cmpl	$-1, %eax	 #, current
	je	.L584	 #,
	addq	$1, %rbx	 #, ivtmp.1792
	addq	$4, %rbp	 #, ivtmp.1795
 # .\src\main.cpp:87:             back_buffer->index_next[index] = index + 1;
	movl	%ebx, -4(%rbp)	 # ivtmp.1792, MEM[(int32_t *)_4]
	jmp	.L585	 #
	.p2align 4,,10
	.p2align 3
.L584:
 # .\src\main.cpp:89:             back_buffer->index_next[index] = -1;
	movl	$-1, 0(%rbp)	 #, *_4
.L589:
 # .\src\main.cpp:95: }
	addq	$72, %rsp	 #,
	popq	%rbx	 #
	popq	%rsi	 #
	popq	%rdi	 #
	popq	%rbp	 #
	popq	%r12	 #
	popq	%r13	 #
	popq	%r14	 #
	popq	%r15	 #
	ret	
	.seh_endproc
	.p2align 4
	.globl	_Z11jump_writeriPKiPK8BoidListPK7BoidMap
	.def	_Z11jump_writeriPKiPK8BoidListPK7BoidMap;	.scl	2;	.type	32;	.endef
	.seh_proc	_Z11jump_writeriPKiPK8BoidListPK7BoidMap
_Z11jump_writeriPKiPK8BoidListPK7BoidMap:
.LFB12580:
	pushq	%rbp	 #
	.seh_pushreg	%rbp
	pushq	%rdi	 #
	.seh_pushreg	%rdi
	pushq	%rsi	 #
	.seh_pushreg	%rsi
	pushq	%rbx	 #
	.seh_pushreg	%rbx
	subq	$40, %rsp	 #,
	.seh_stackalloc	40
	.seh_endprologue
 # .\src\main.cpp:110:     for (int i = thread_start_pos; i < (boid_map->m_xsize * boid_map->m_ysize); i += NUM_THREADS) {
	movl	4(%r9), %eax	 # boid_map_11(D)->m_xsize, boid_map_11(D)->m_xsize
	imull	(%r9), %eax	 # boid_map_11(D)->m_ysize, tmp95
 # .\src\main.cpp:109: void jump_writer(int thread_start_pos, const Boid* index_buffer, const BoidList *boid_list, const BoidMap *boid_map) {
	movl	%ecx, %ebx	 # tmp100, thread_start_pos
	movq	%rdx, %rbp	 # tmp101, index_buffer
	movq	%r8, %rdi	 # tmp102, boid_list
	movq	%r9, %rsi	 # tmp103, boid_map
 # .\src\main.cpp:110:     for (int i = thread_start_pos; i < (boid_map->m_xsize * boid_map->m_ysize); i += NUM_THREADS) {
	cmpl	%eax, %ecx	 # tmp95, thread_start_pos
	jge	.L594	 #,
	.p2align 4,,10
	.p2align 3
.L592:
 # .\src\main.cpp:111:         write_map_to_list(i, index_buffer, boid_list, boid_map);
	movl	%ebx, %ecx	 # thread_start_pos,
	movq	%rsi, %r9	 # boid_map,
	movq	%rdi, %r8	 # boid_list,
	movq	%rbp, %rdx	 # index_buffer,
	call	_Z17write_map_to_listiPKiPK8BoidListPK7BoidMap	 #
 # .\src\main.cpp:110:     for (int i = thread_start_pos; i < (boid_map->m_xsize * boid_map->m_ysize); i += NUM_THREADS) {
	movl	4(%rsi), %eax	 # boid_map_11(D)->m_xsize, boid_map_11(D)->m_xsize
	imull	(%rsi), %eax	 # boid_map_11(D)->m_ysize, tmp98
 # .\src\main.cpp:110:     for (int i = thread_start_pos; i < (boid_map->m_xsize * boid_map->m_ysize); i += NUM_THREADS) {
	addl	_ZL11num_threads(%rip), %ebx	 # num_threads, thread_start_pos
 # .\src\main.cpp:110:     for (int i = thread_start_pos; i < (boid_map->m_xsize * boid_map->m_ysize); i += NUM_THREADS) {
	cmpl	%ebx, %eax	 # thread_start_pos, tmp98
	jg	.L592	 #,
.L594:
 # .\src\main.cpp:113: }
	addq	$40, %rsp	 #,
	popq	%rbx	 #
	popq	%rsi	 #
	popq	%rdi	 #
	popq	%rbp	 #
	ret	
	.seh_endproc
	.p2align 4
	.globl	_Z6runnerP10TaskMasterh
	.def	_Z6runnerP10TaskMasterh;	.scl	2;	.type	32;	.endef
	.seh_proc	_Z6runnerP10TaskMasterh
_Z6runnerP10TaskMasterh:
.LFB12620:
	pushq	%r15	 #
	.seh_pushreg	%r15
	pushq	%r14	 #
	.seh_pushreg	%r14
	pushq	%r13	 #
	.seh_pushreg	%r13
	pushq	%r12	 #
	.seh_pushreg	%r12
	pushq	%rbp	 #
	.seh_pushreg	%rbp
	pushq	%rdi	 #
	.seh_pushreg	%rdi
	pushq	%rsi	 #
	.seh_pushreg	%rsi
	pushq	%rbx	 #
	.seh_pushreg	%rbx
	subq	$696, %rsp	 #,
	.seh_stackalloc	696
	vmovups	%xmm6, 528(%rsp)	 #,
	.seh_savexmm	%xmm6, 528
	vmovups	%xmm7, 544(%rsp)	 #,
	.seh_savexmm	%xmm7, 544
	vmovups	%xmm8, 560(%rsp)	 #,
	.seh_savexmm	%xmm8, 560
	vmovups	%xmm9, 576(%rsp)	 #,
	.seh_savexmm	%xmm9, 576
	vmovups	%xmm10, 592(%rsp)	 #,
	.seh_savexmm	%xmm10, 592
	vmovups	%xmm11, 608(%rsp)	 #,
	.seh_savexmm	%xmm11, 608
	vmovups	%xmm12, 624(%rsp)	 #,
	.seh_savexmm	%xmm12, 624
	vmovups	%xmm13, 640(%rsp)	 #,
	.seh_savexmm	%xmm13, 640
	vmovups	%xmm14, 656(%rsp)	 #,
	.seh_savexmm	%xmm14, 656
	vmovups	%xmm15, 672(%rsp)	 #,
	.seh_savexmm	%xmm15, 672
	.seh_endprologue
	leaq	66144(%rcx), %rbx	 #, _72
 # .\src\main.cpp:1159: void runner(TaskMaster *task_master, uint8_t thread_id) {
	movq	%rcx, %rdi	 # tmp899, task_master
 # .\src\.\task_master\taskmaster.h:34: struct Task {
	movl	%edx, %ebp	 # thread_id, thread_id
	movq	%rbx, %rsi	 # _72, _72
.L626:
	movq	$0, 520(%rsp)	 #, current_task.on_complete
	vpxor	%xmm1, %xmm1, %xmm1	 # tmp998
	vmovdqu	%xmm1, 504(%rsp)	 # tmp998, MEM <vector(2) long long unsigned int> [(void *)&current_task + 8B]
.L597:
 # C:/msys64/ucrt64/include/psdk_inc/intrin-impl.h:1800: __buildbittesti(_interlockedbittestandset, __LONG32, "lock bts{l %[Offset],%[Base] | %[Base],%[Offset]}" __FLAGSET, "I")
/APP
 # 1800 "C:/msys64/ucrt64/include/psdk_inc/intrin-impl.h" 1
	lock btsl $0,(%rsi) 	 #, MEM[(volatile long int *)_72]
 # 0 "" 2
 # .\src\.\task_master\lock.h:40:         while (_interlockedbittestandset(&lock_internal, 0)) {}
/NO_APP
	jc	.L597	 #,
 # .\src\.\task_master\ringbuffer.h:39:         if (tail != head)
	movq	65560(%rdi), %rax	 # MEM[(struct RingBuffer *)task_master_32(D) + 16B].tail, _74
 # .\src\.\task_master\ringbuffer.h:39:         if (tail != head)
	cmpq	65552(%rdi), %rax	 # MEM[(struct RingBuffer *)task_master_32(D) + 16B].head, _74
	je	.L651	 #,
 # .\src\.\task_master\ringbuffer.h:41:             item = data[tail];
	movq	%rax, %rdx	 # _74, tmp510
 # .\src\.\task_master\ringbuffer.h:42:             tail = (tail + 1) % capacity;
	addq	$1, %rax	 #, tmp515
 # .\src\.\task_master\ringbuffer.h:41:             item = data[tail];
	salq	$5, %rdx	 #, tmp510
 # .\src\.\task_master\ringbuffer.h:42:             tail = (tail + 1) % capacity;
	andl	$2047, %eax	 #, tmp516
 # .\src\.\task_master\ringbuffer.h:41:             item = data[tail];
	addq	%rdi, %rdx	 # task_master, tmp511
	vmovdqu	16(%rdx), %xmm1	 # MEM[(struct RingBuffer *)task_master_32(D) + 16B].data[_74], tmp1000
	vmovdqu	%xmm1, 496(%rsp)	 # tmp1000, current_task
	vmovdqu	32(%rdx), %xmm1	 # MEM[(struct RingBuffer *)task_master_32(D) + 16B].data[_74], tmp1001
 # .\src\.\task_master\ringbuffer.h:42:             tail = (tail + 1) % capacity;
	movq	%rax, 65560(%rdi)	 # tmp516, MEM[(struct RingBuffer *)task_master_32(D) + 16B].tail
 # .\src\.\task_master\ringbuffer.h:41:             item = data[tail];
	vmovdqu	%xmm1, 512(%rsp)	 # tmp1001, current_task
 # C:/msys64/ucrt64/include/psdk_inc/intrin-impl.h:1809: __buildbittesti(_interlockedbittestandreset, __LONG32, "lock btr{l %[Offset],%[Base] | %[Base],%[Offset]}" __FLAGSET, "I")
/APP
 # 1809 "C:/msys64/ucrt64/include/psdk_inc/intrin-impl.h" 1
	lock btrl $0,(%rsi) 	 #, MEM[(volatile long int *)_72]
 # 0 "" 2
 # .\src\main.cpp:1164:         switch (current_task.task_type) {
/NO_APP
	movl	496(%rsp), %r10d	 # current_task.task_type, ivtmp.1883
 # .\src\main.cpp:1164:         switch (current_task.task_type) {
	cmpl	$2, %r10d	 #, ivtmp.1883
	je	.L599	 #,
	ja	.L600	 #,
	testl	%r10d, %r10d	 # ivtmp.1883
	je	.L652	 #,
 # .\src\main.cpp:1172:                     auto s = ((rebuild_args *) current_task.argument_struct);
	movq	504(%rsp), %rax	 # current_task.argument_struct, s
 # .\src\main.cpp:1173:                     write_row_to_list(s->y, s->index_buffer, s->boid_list, s->boid_map);
	movq	(%rax), %r13	 # s_38->boid_map, _7
 # .\src\main.cpp:1173:                     write_row_to_list(s->y, s->index_buffer, s->boid_list, s->boid_map);
	movq	24(%rax), %r12	 # s_38->boid_list, _8
 # .\src\main.cpp:1173:                     write_row_to_list(s->y, s->index_buffer, s->boid_list, s->boid_map);
	movq	16(%rax), %r14	 # s_38->index_buffer, _9
 # .\src\main.cpp:1173:                     write_row_to_list(s->y, s->index_buffer, s->boid_list, s->boid_map);
	movl	8(%rax), %r15d	 # s_38->y, _10
 # .\src\main.cpp:116:     for (int x = 0; x < boid_map->m_xsize; x++) {
	movl	4(%r13), %eax	 # MEM[(const struct BoidMap *)_7].m_xsize, _47
 # .\src\main.cpp:116:     for (int x = 0; x < boid_map->m_xsize; x++) {
	testl	%eax, %eax	 # _47
	jle	.L604	 #,
 # .\src\main.cpp:116:     for (int x = 0; x < boid_map->m_xsize; x++) {
	xorl	%ebx, %ebx	 # x
.L617:
 # .\src\main.cpp:117:         write_map_to_list(boid_map->m_xsize * row + x, index_buffer, boid_list, boid_map); 
	imull	%r15d, %eax	 # _10, tmp850
 # .\src\main.cpp:117:         write_map_to_list(boid_map->m_xsize * row + x, index_buffer, boid_list, boid_map); 
	movq	%r13, %r9	 # _7,
	movq	%r12, %r8	 # _8,
	movq	%r14, %rdx	 # _9,
 # .\src\main.cpp:117:         write_map_to_list(boid_map->m_xsize * row + x, index_buffer, boid_list, boid_map); 
	leal	(%rax,%rbx), %ecx	 #, tmp851
 # .\src\main.cpp:116:     for (int x = 0; x < boid_map->m_xsize; x++) {
	addl	$1, %ebx	 #, x
.LEHB40:
 # .\src\main.cpp:117:         write_map_to_list(boid_map->m_xsize * row + x, index_buffer, boid_list, boid_map); 
	call	_Z17write_map_to_listiPKiPK8BoidListPK7BoidMap	 #
.LEHE40:
 # .\src\main.cpp:116:     for (int x = 0; x < boid_map->m_xsize; x++) {
	movl	4(%r13), %eax	 # MEM[(const struct BoidMap *)_7].m_xsize, _47
 # .\src\main.cpp:116:     for (int x = 0; x < boid_map->m_xsize; x++) {
	cmpl	%ebx, %eax	 # x, _47
	jg	.L617	 #,
.L604:
 # .\src\main.cpp:1188:         if (current_task.sync != NULL) {
	movq	512(%rsp), %rax	 # current_task.sync, _16
 # .\src\main.cpp:1188:         if (current_task.sync != NULL) {
	testq	%rax, %rax	 # _16
	je	.L626	 #,
.L623:
 # C:/msys64/ucrt64/include/psdk_inc/intrin-impl.h:1800: __buildbittesti(_interlockedbittestandset, __LONG32, "lock bts{l %[Offset],%[Base] | %[Base],%[Offset]}" __FLAGSET, "I")
/APP
 # 1800 "C:/msys64/ucrt64/include/psdk_inc/intrin-impl.h" 1
	lock btsl $0,(%rax) 	 #, MEM[(volatile long int *)_59]
 # 0 "" 2
 # .\src\.\task_master\lock.h:40:         while (_interlockedbittestandset(&lock_internal, 0)) {}
/NO_APP
	jc	.L623	 #,
 # .\src\main.cpp:1190:                 if (current_task.on_complete != NULL && current_task.sync->task_counter == 1) {
	movq	520(%rsp), %r8	 # current_task.on_complete, _17
 # .\src\main.cpp:1190:                 if (current_task.on_complete != NULL && current_task.sync->task_counter == 1) {
	movq	512(%rsp), %rax	 # current_task.sync, prephitmp_471
 # .\src\main.cpp:1190:                 if (current_task.on_complete != NULL && current_task.sync->task_counter == 1) {
	testq	%r8, %r8	 # _17
	je	.L624	 #,
 # .\src\main.cpp:1190:                 if (current_task.on_complete != NULL && current_task.sync->task_counter == 1) {
	movl	4(%rax), %edx	 # pretmp_472->task_counter, _19
 # .\src\main.cpp:1190:                 if (current_task.on_complete != NULL && current_task.sync->task_counter == 1) {
	cmpl	$1, %edx	 #, _19
	je	.L653	 #,
.L624:
 # .\src\main.cpp:1194:                     current_task.sync->task_counter -= 1;
	movl	4(%rax), %edx	 #, _24
 # .\src\main.cpp:1194:                     current_task.sync->task_counter -= 1;
	subl	$1, %edx	 #, _25
	movl	%edx, 4(%rax)	 # _25,
.L625:
 # C:/msys64/ucrt64/include/psdk_inc/intrin-impl.h:1809: __buildbittesti(_interlockedbittestandreset, __LONG32, "lock btr{l %[Offset],%[Base] | %[Base],%[Offset]}" __FLAGSET, "I")
/APP
 # 1809 "C:/msys64/ucrt64/include/psdk_inc/intrin-impl.h" 1
	lock btrl $0,(%rax) 	 #, MEM[(volatile long int *)_61]
 # 0 "" 2
 # .\src\main.cpp:1198:     }
/NO_APP
	jmp	.L626	 #
.L651:
.L596:
 # C:/msys64/ucrt64/include/psdk_inc/intrin-impl.h:1809: __buildbittesti(_interlockedbittestandreset, __LONG32, "lock btr{l %[Offset],%[Base] | %[Base],%[Offset]}" __FLAGSET, "I")
/APP
 # 1809 "C:/msys64/ucrt64/include/psdk_inc/intrin-impl.h" 1
	lock btrl $0,(%rsi) 	 #, MEM[(volatile long int *)_72]
 # 0 "" 2
 # C:/msys64/ucrt64/include/c++/13.1.0/x86_64-w64-mingw32/bits/gthr-default.h:693:   return __gthrw_(sched_yield) ();
/NO_APP
	call	sched_yield	 #
 # .\src\.\task_master\lock.h:40:         while (_interlockedbittestandset(&lock_internal, 0)) {}
	jmp	.L597	 #
.L599:
 # .\src\main.cpp:1166:                     auto s = ((row_runner_args *) current_task.argument_struct);
	movq	504(%rsp), %rax	 # current_task.argument_struct, s
 # .\src\main.cpp:1167:                     row_runner(s->boid_map, s->y, s->rules, s->boid_list);
	movq	(%rax), %r11	 # s_37->boid_map, _6
 # .\src\main.cpp:1167:                     row_runner(s->boid_map, s->y, s->rules, s->boid_list);
	movl	8(%rax), %ecx	 # s_37->y, _4
 # .\src\main.cpp:1167:                     row_runner(s->boid_map, s->y, s->rules, s->boid_list);
	movq	32(%rax), %r12	 # s_37->boid_list, _2
 # .\src\main.cpp:1167:                     row_runner(s->boid_map, s->y, s->rules, s->boid_list);
	movq	16(%rax), %r9	 # s_37->rules, _3
 # .\src\main.cpp:1006:     for (int x = 0; x < boid_map->m_xsize; x++) {
	movl	4(%r11), %ebx	 # MEM[(const struct BoidMap *)_6].m_xsize, _46
 # .\src\main.cpp:1167:                     row_runner(s->boid_map, s->y, s->rules, s->boid_list);
	movl	%ecx, 480(%rsp)	 # _4, %sfp
 # .\src\main.cpp:1006:     for (int x = 0; x < boid_map->m_xsize; x++) {
	testl	%ebx, %ebx	 # _46
	jle	.L604	 #,
	movq	%rdi, 768(%rsp)	 # task_master, task_master
	movl	%ebx, %r15d	 # _46, _46
	movl	%ebp, 484(%rsp)	 # thread_id, %sfp
	movq	%rsi, 488(%rsp)	 # _72, %sfp
	movq	%r9, %rsi	 # _3, _3
.L605:
 # .\src\main.cpp:639:     const auto world_height = map->m_cell_size * map->m_ysize;
	movl	8(%r11), %r9d	 # MEM[(const struct BoidMap *)_6].m_cell_size, _83
 # .\src\main.cpp:639:     const auto world_height = map->m_cell_size * map->m_ysize;
	movl	(%r11), %eax	 # MEM[(const struct BoidMap *)_6].m_ysize, _84
 # .\src\main.cpp:642:     const Boid cell_to_update = map->get_coord(y, x);
	leal	-2(%r10), %r8d	 #,
	movq	%r11, %rcx	 # _6,
	movl	480(%rsp), %edx	 # %sfp,
	movl	%r10d, 96(%rsp)	 # ivtmp.1883, %sfp
 # .\src\main.cpp:639:     const auto world_height = map->m_cell_size * map->m_ysize;
	movl	%r9d, 128(%rsp)	 # _83, %sfp
 # .\src\main.cpp:642:     const Boid cell_to_update = map->get_coord(y, x);
	movq	%r11, 64(%rsp)	 # _6, %sfp
 # .\src\main.cpp:639:     const auto world_height = map->m_cell_size * map->m_ysize;
	movl	%eax, 32(%rsp)	 # _84, %sfp
.LEHB41:
 # .\src\main.cpp:642:     const Boid cell_to_update = map->get_coord(y, x);
	call	_ZNK7BoidMap9get_coordEii	 #
 # .\src\main.cpp:643:     if (cell_to_update == -1 ) return;
	movq	64(%rsp), %r11	 # %sfp, _6
	movl	96(%rsp), %r10d	 # %sfp, ivtmp.1883
	cmpl	$-1, %eax	 #, _88
	movl	128(%rsp), %r9d	 # %sfp, _83
	je	.L608	 #,
 # .\src\main.cpp:645:     const auto xs = boid_list->m_boid_store->xs;
	movq	(%r12), %rcx	 # MEM[(const struct BoidList *)_2].m_boid_store, _89
 # .\src\main.cpp:655:     Boid cell_end = cell_begin + boid_list->m_boid_store->depth[cell_begin];
	movslq	%eax, %rdx	 # _88, ivtmp.1869
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:1330: 				 __A, __A, __A, __A };
	vbroadcastss	(%rsi), %ymm10	 # MEM[(const struct Rules *)_3].avoid_distance_squared, _95
	vbroadcastss	12(%rsi), %ymm1	 # MEM[(const struct Rules *)_3].sight_range_squared, _97
	vbroadcastss	4(%rsi), %ymm4	 # MEM[(const struct Rules *)_3].avoid_factor, _99
 # .\src\main.cpp:645:     const auto xs = boid_list->m_boid_store->xs;
	movq	(%rcx), %r13	 # _89->xs, xs
 # .\src\main.cpp:646:     const auto ys = boid_list->m_boid_store->ys;
	movq	8(%rcx), %r14	 # _89->ys, ys
 # .\src\main.cpp:647:     const auto vxs = boid_list->m_boid_store->vxs;
	movq	16(%rcx), %rdi	 # _89->vxs, vxs
 # .\src\main.cpp:648:     const auto vys = boid_list->m_boid_store->vys;
	movq	24(%rcx), %rbp	 # _89->vys, vys
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:1330: 				 __A, __A, __A, __A };
	vmovups	%ymm1, 64(%rsp)	 # _97, %sfp
 # .\src\main.cpp:655:     Boid cell_end = cell_begin + boid_list->m_boid_store->depth[cell_begin];
	movq	48(%rcx), %rcx	 # _89->depth, _89->depth
 # .\src\main.cpp:655:     Boid cell_end = cell_begin + boid_list->m_boid_store->depth[cell_begin];
	movl	(%rcx,%rdx,4), %ebx	 # *_103, cell_end
	addl	%eax, %ebx	 # _88, cell_end
 # .\src\main.cpp:657:     for (Boid current_boid = cell_begin; current_boid < cell_end; current_boid += 8) {
	cmpl	%ebx, %eax	 # cell_end, _88
	jge	.L648	 #,
 # .\src\main.cpp:639:     const auto world_height = map->m_cell_size * map->m_ysize;
	movl	32(%rsp), %eax	 # %sfp, _84
	movl	%r10d, 292(%rsp)	 # ivtmp.1883, %sfp
	movq	%r11, 296(%rsp)	 # _6, %sfp
	imull	%r9d, %eax	 # _83, _84
	movl	%ebx, 476(%rsp)	 # cell_end, %sfp
	movq	%r14, %rbx	 # ys, ys
	movq	%r13, %r14	 # xs, xs
	vmovups	%ymm10, 128(%rsp)	 # _95, %sfp
 # .\src\main.cpp:640:     const auto world_width = map->m_cell_size * map->m_xsize;
	imull	%r15d, %r9d	 # _46, _83
	movq	%r12, %r13	 # _2, _2
	movq	%rdx, %r15	 # ivtmp.1869, ivtmp.1869
	movq	%rsi, %rdx	 # _3, _3
 # .\src\main.cpp:639:     const auto world_height = map->m_cell_size * map->m_ysize;
	movl	%eax, 464(%rsp)	 # _84, %sfp
	movl	480(%rsp), %eax	 # %sfp, _4
 # .\src\main.cpp:640:     const auto world_width = map->m_cell_size * map->m_xsize;
	movl	%r9d, 468(%rsp)	 # _83, %sfp
	leal	-1(%rax), %ecx	 #, ivtmp.1865
	addl	$2, %eax	 #, _269
	movl	%eax, 412(%rsp)	 # _269, %sfp
	leal	-3(%r10), %eax	 #, ivtmp.1857
	movl	%ecx, 472(%rsp)	 # ivtmp.1865, %sfp
	movl	%eax, 408(%rsp)	 # ivtmp.1857, %sfp
.L616:
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:905:   return *(__m256_u *)__P;
	vmovups	(%r14,%r15,4), %ymm1	 # MEM[(__m256_u * {ref-all})xs_90 + ivtmp.1869_198 * 4], _110
 # .\src\main.cpp:669:         __m256 avg_vy_vec = _mm256_set1_ps(0.);
	vxorps	%xmm3, %xmm3, %xmm3	 # avg_vy_vec
	movq	%rbx, %r12	 # ys, ys
	movq	%rbp, %r8	 # vys, vys
	movl	472(%rsp), %esi	 # %sfp, ivtmp.1865
	movq	%rdx, 448(%rsp)	 # _3, %sfp
	vmovaps	%ymm3, %ymm7	 # avg_vx_vec, avg_vx_vec
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:905:   return *(__m256_u *)__P;
	vmovups	%ymm1, 96(%rsp)	 # _110, %sfp
	vmovups	(%rbx,%r15,4), %ymm1	 # MEM[(__m256_u * {ref-all})ys_91 + ivtmp.1869_198 * 4], _112
	movq	%r15, 456(%rsp)	 # ivtmp.1869, %sfp
	movq	%rdi, %r15	 # vxs, vxs
	movl	%esi, %edi	 # ivtmp.1865, ivtmp.1865
	vmovups	%ymm1, 32(%rsp)	 # _112, %sfp
 # .\src\main.cpp:671:         __m256i isc = _mm256_set1_epi32(0);
	vpxor	%xmm1, %xmm1, %xmm1	 # isc
	vmovdqu	%ymm1, 160(%rsp)	 # isc, %sfp
	vmovaps	%ymm3, %ymm1	 # avg_y_vec, avg_y_vec
	vmovups	%ymm4, 416(%rsp)	 # _99, %sfp
	vmovups	%ymm3, 192(%rsp)	 # sep_x_vec, %sfp
	vmovups	%ymm3, 224(%rsp)	 # sep_y_vec, %sfp
	vmovups	%ymm3, 256(%rsp)	 # avg_x_vec, %sfp
.L609:
	movl	408(%rsp), %ebx	 # %sfp, ivtmp.1857
 # .\src\main.cpp:675:             Boid row_begin = -1;
	movl	$-1, %esi	 #, row_begin
	movq	%r8, 400(%rsp)	 # vys, %sfp
 # .\src\main.cpp:676:             Boid row_end = -1;
	movl	$-1, %ebp	 #, row_end
	vmovups	%ymm7, 304(%rsp)	 # avg_vx_vec, %sfp
	vmovups	%ymm1, 336(%rsp)	 # avg_y_vec, %sfp
	movl	%ebx, %eax	 # ivtmp.1857, ivtmp.1857
	movl	%esi, %ebx	 # row_begin, row_begin
	vmovups	%ymm3, 368(%rsp)	 # avg_vy_vec, %sfp
	movl	%eax, %esi	 # ivtmp.1857, ivtmp.1857
	vzeroupper
.L612:
 # .\src\main.cpp:680:                 Boid current = map->get_coord(y + cy, x + cx);
	movq	296(%rsp), %rcx	 # %sfp,
	movl	%esi, %r8d	 # ivtmp.1857,
	movl	%edi, %edx	 # ivtmp.1865,
	call	_ZNK7BoidMap9get_coordEii	 #
 # .\src\main.cpp:681:                 if (current != -1) {
	cmpl	$-1, %eax	 #, _117
	je	.L610	 #,
 # .\src\main.cpp:684:                     row_end = current + boid_list->m_boid_store->depth[current];
	movq	0(%r13), %rdx	 # MEM[(const struct BoidList *)_2].m_boid_store, MEM[(const struct BoidList *)_2].m_boid_store
 # .\src\main.cpp:682:                     if (row_begin == -1) row_begin = current;
	cmpl	$-1, %ebx	 #, row_begin
 # .\src\main.cpp:684:                     row_end = current + boid_list->m_boid_store->depth[current];
	movslq	%eax, %rcx	 # _117, _117
 # .\src\main.cpp:682:                     if (row_begin == -1) row_begin = current;
	cmove	%eax, %ebx	 # row_begin,, _117, row_begin
 # .\src\main.cpp:684:                     row_end = current + boid_list->m_boid_store->depth[current];
	movq	48(%rdx), %rdx	 # _119->depth, _119->depth
 # .\src\main.cpp:684:                     row_end = current + boid_list->m_boid_store->depth[current];
	addl	(%rdx,%rcx,4), %eax	 # *_123, _117
	movl	%eax, %ebp	 # _117, row_end
.L610:
 # .\src\main.cpp:679:             for (int cx = -1; cx <= 1; cx++) {
	addl	$1, %esi	 #, ivtmp.1857
	cmpl	%esi, 292(%rsp)	 # ivtmp.1857, %sfp
	jne	.L612	 #,
 # .\src\main.cpp:689:             for (Boid nearby_boid = row_begin; nearby_boid < row_end; nearby_boid += 8) {
	movslq	%ebx, %rsi	 # row_begin,
	vmovups	304(%rsp), %ymm7	 # %sfp, avg_vx_vec
	movq	400(%rsp), %r8	 # %sfp, vys
	vmovups	336(%rsp), %ymm1	 # %sfp, avg_y_vec
	vmovups	368(%rsp), %ymm3	 # %sfp, avg_vy_vec
	cmpl	%ebp, %esi	 # row_end, row_begin
	jge	.L613	 #,
	vmovups	192(%rsp), %ymm4	 # %sfp, sep_x_vec
	vmovaps	%ymm3, %ymm10	 # avg_vy_vec, avg_vy_vec
	vmovups	224(%rsp), %ymm6	 # %sfp, sep_y_vec
	vmovups	256(%rsp), %ymm9	 # %sfp, avg_x_vec
	.p2align 4,,10
	.p2align 3
.L614:
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:905:   return *(__m256_u *)__P;
	vmovups	(%r14,%rsi,4), %ymm8	 # MEM[(__m256_u * {ref-all})xs_90 + ivtmp.1840_273 * 4], MEM[(__m256_u * {ref-all})xs_90 + ivtmp.1840_273 * 4]
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vmovups	96(%rsp), %ymm11	 # %sfp, _110
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:905:   return *(__m256_u *)__P;
	vmovups	(%r12,%rsi,4), %ymm12	 # MEM[(__m256_u * {ref-all})ys_91 + ivtmp.1840_273 * 4], MEM[(__m256_u * {ref-all})ys_91 + ivtmp.1840_273 * 4]
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vmovups	32(%rsp), %ymm13	 # %sfp, _112
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:406:   return (__m256) __builtin_ia32_cmpps256 ((__v8sf)__X, (__v8sf)__Y,
	vmovups	128(%rsp), %ymm14	 # %sfp, _95
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vsubps	%ymm8, %ymm11, %ymm5	 # MEM[(__m256_u * {ref-all})xs_90 + ivtmp.1840_273 * 4], _110, _292
	vsubps	%ymm12, %ymm13, %ymm3	 # MEM[(__m256_u * {ref-all})ys_91 + ivtmp.1840_273 * 4], _112, _293
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:320:   return (__m256) ((__v8sf)__A * (__v8sf)__B);
	vmulps	%ymm5, %ymm5, %ymm2	 # _292, _292, tmp535
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:149:   return (__m256) ((__v8sf)__A + (__v8sf)__B);
	vfmadd231ps	%ymm3, %ymm3, %ymm2	 # _293, _293, _296
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:406:   return (__m256) __builtin_ia32_cmpps256 ((__v8sf)__X, (__v8sf)__Y,
	vcmpps	$1, %ymm14, %ymm2, %ymm15	 #, _95, _296, tmp539
	vcmpps	$1, 64(%rsp), %ymm2, %ymm0	 #, %sfp, _296, tmp536
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vsubps	%ymm2, %ymm14, %ymm2	 # _296, _95, _280
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:320:   return (__m256) ((__v8sf)__A * (__v8sf)__B);
	vmulps	%ymm2, %ymm2, %ymm2	 # _280, _280, _281
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:186:   return (__m256) __builtin_ia32_andnps256 ((__v8sf)__A, (__v8sf)__B);
	vandnps	%ymm0, %ymm15, %ymm0	 # tmp536, tmp539, tmp542
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:174:   return (__m256) __builtin_ia32_andps256 ((__v8sf)__A, (__v8sf)__B);
	vandps	.LC3(%rip), %ymm0, %ymm0	 #, tmp542, tmp543
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/fmaintrin.h:65:   return (__m256)__builtin_ia32_vfmaddps256 ((__v8sf)__A, (__v8sf)__B,
	vfmadd231ps	(%r15,%rsi,4), %ymm0, %ymm7	 # MEM[(__m256_u * {ref-all})vxs_92 + ivtmp.1840_273 * 4], tmp543, avg_vx_vec
	vfmadd231ps	(%r8,%rsi,4), %ymm0, %ymm10	 # MEM[(__m256_u * {ref-all})vys_93 + ivtmp.1840_273 * 4], tmp543, tmp551
	vfmadd231ps	%ymm12, %ymm0, %ymm1	 # MEM[(__m256_u * {ref-all})ys_91 + ivtmp.1840_273 * 4], tmp543, avg_y_vec
	vfmadd231ps	%ymm8, %ymm0, %ymm9	 # MEM[(__m256_u * {ref-all})xs_90 + ivtmp.1840_273 * 4], tmp543, tmp552
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:320:   return (__m256) ((__v8sf)__A * (__v8sf)__B);
	vmulps	%ymm5, %ymm2, %ymm5	 # _292, _281, tmp546
	vmulps	%ymm3, %ymm2, %ymm2	 # _293, _281, tmp548
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:475:   return (__m256i)__builtin_ia32_cvtps2dq256 ((__v8sf) __A);
	vcvtps2dq	%ymm0, %ymm3	 # tmp543, tmp554
	vmovdqu	%ymm3, 192(%rsp)	 # tmp554, %sfp
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avx2intrin.h:1065:   return (__m256) __builtin_ia32_permvarsf256 ((__v8sf)__X, (__v8si)__Y);
	vmovdqu	.LC5(%rip), %ymm3	 #, tmp1213
	vpermps	%ymm12, %ymm3, %ymm0	 # MEM[(__m256_u * {ref-all})ys_91 + ivtmp.1840_273 * 4], tmp1212, tmp558
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vsubps	%ymm0, %ymm13, %ymm13	 # tmp558, _112, _389
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:174:   return (__m256) __builtin_ia32_andps256 ((__v8sf)__A, (__v8sf)__B);
	vandps	%ymm5, %ymm15, %ymm5	 # tmp546, tmp539, tmp547
	vandps	%ymm2, %ymm15, %ymm15	 # tmp548, tmp539, tmp549
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avx2intrin.h:1065:   return (__m256) __builtin_ia32_permvarsf256 ((__v8sf)__X, (__v8si)__Y);
	vpermps	%ymm8, %ymm3, %ymm2	 # MEM[(__m256_u * {ref-all})xs_90 + ivtmp.1840_273 * 4], tmp1213, tmp556
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:149:   return (__m256) ((__v8sf)__A + (__v8sf)__B);
	vaddps	%ymm5, %ymm4, %ymm4	 # tmp547, sep_x_vec, _284
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vsubps	%ymm2, %ymm11, %ymm14	 # tmp556, _110, _388
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:149:   return (__m256) ((__v8sf)__A + (__v8sf)__B);
	vaddps	%ymm6, %ymm15, %ymm15	 # sep_y_vec, tmp549, _33
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/fmaintrin.h:65:   return (__m256)__builtin_ia32_vfmaddps256 ((__v8sf)__A, (__v8sf)__B,
	vmovaps	%ymm7, %ymm5	 # avg_vx_vec, tmp550
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:406:   return (__m256) __builtin_ia32_cmpps256 ((__v8sf)__X, (__v8sf)__Y,
	vmovups	128(%rsp), %ymm11	 # %sfp, _95
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/fmaintrin.h:65:   return (__m256)__builtin_ia32_vfmaddps256 ((__v8sf)__A, (__v8sf)__B,
	vmovaps	%ymm1, %ymm7	 # avg_y_vec, tmp553
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avx2intrin.h:1065:   return (__m256) __builtin_ia32_permvarsf256 ((__v8sf)__X, (__v8si)__Y);
	vmovdqa	%ymm3, %ymm1	 # tmp1213, tmp1212
	vpermps	(%r15,%rsi,4), %ymm3, %ymm3	 # MEM[(__m256_u * {ref-all})vxs_92 + ivtmp.1840_273 * 4], tmp1211, tmp560
	vpermps	(%r8,%rsi,4), %ymm1, %ymm1	 # MEM[(__m256_u * {ref-all})vys_93 + ivtmp.1840_273 * 4], tmp1210, tmp562
 # .\src\main.cpp:689:             for (Boid nearby_boid = row_begin; nearby_boid < row_end; nearby_boid += 8) {
	addq	$8, %rsi	 #, ivtmp.1840
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:320:   return (__m256) ((__v8sf)__A * (__v8sf)__B);
	vmulps	%ymm14, %ymm14, %ymm12	 # _388, _388, tmp564
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:149:   return (__m256) ((__v8sf)__A + (__v8sf)__B);
	vfmadd231ps	%ymm13, %ymm13, %ymm12	 # _389, _389, _392
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:406:   return (__m256) __builtin_ia32_cmpps256 ((__v8sf)__X, (__v8sf)__Y,
	vcmpps	$1, %ymm11, %ymm12, %ymm8	 #, _95, _392, tmp568
	vcmpps	$1, 64(%rsp), %ymm12, %ymm6	 #, %sfp, _392, tmp565
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vsubps	%ymm12, %ymm11, %ymm12	 # _392, _95, _397
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:320:   return (__m256) ((__v8sf)__A * (__v8sf)__B);
	vmulps	%ymm12, %ymm12, %ymm12	 # _397, _397, _398
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:186:   return (__m256) __builtin_ia32_andnps256 ((__v8sf)__A, (__v8sf)__B);
	vandnps	%ymm6, %ymm8, %ymm6	 # tmp565, tmp568, tmp571
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:174:   return (__m256) __builtin_ia32_andps256 ((__v8sf)__A, (__v8sf)__B);
	vandps	.LC3(%rip), %ymm6, %ymm6	 #, tmp571, tmp572
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/fmaintrin.h:65:   return (__m256)__builtin_ia32_vfmaddps256 ((__v8sf)__A, (__v8sf)__B,
	vfmadd231ps	%ymm3, %ymm6, %ymm5	 # tmp560, tmp572, tmp579
	vfmadd231ps	%ymm1, %ymm6, %ymm10	 # tmp562, tmp572, tmp580
	vfmadd231ps	%ymm2, %ymm6, %ymm9	 # tmp556, tmp572, tmp581
	vfmadd231ps	%ymm0, %ymm6, %ymm7	 # tmp558, tmp572, tmp582
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:475:   return (__m256i)__builtin_ia32_cvtps2dq256 ((__v8sf) __A);
	vcvtps2dq	%ymm6, %ymm6	 # tmp572, tmp583
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:320:   return (__m256) ((__v8sf)__A * (__v8sf)__B);
	vmulps	%ymm12, %ymm13, %ymm13	 # _398, _389, tmp577
	vmulps	%ymm12, %ymm14, %ymm14	 # _398, _388, tmp575
	vpaddd	192(%rsp), %ymm6, %ymm12	 # %sfp, tmp583, _461
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vmovups	96(%rsp), %ymm6	 # %sfp, _110
	vmovdqu	%ymm12, 128(%rsp)	 # _461, %sfp
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avx2intrin.h:1065:   return (__m256) __builtin_ia32_permvarsf256 ((__v8sf)__X, (__v8si)__Y);
	vmovdqu	.LC5(%rip), %ymm12	 #, tmp1207
	vpermps	%ymm2, %ymm12, %ymm2	 # tmp556, tmp1207, tmp585
	vpermps	%ymm0, %ymm12, %ymm0	 # tmp558, tmp1206, tmp587
	vpermps	%ymm3, %ymm12, %ymm3	 # tmp560, tmp1205, tmp589
	vpermps	%ymm1, %ymm12, %ymm1	 # tmp562, tmp1204, tmp591
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vsubps	%ymm2, %ymm6, %ymm12	 # tmp585, _110, _431
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:174:   return (__m256) __builtin_ia32_andps256 ((__v8sf)__A, (__v8sf)__B);
	vandps	%ymm14, %ymm8, %ymm14	 # tmp575, tmp568, tmp576
	vandps	%ymm13, %ymm8, %ymm8	 # tmp577, tmp568, tmp578
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vmovups	32(%rsp), %ymm13	 # %sfp, _112
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:149:   return (__m256) ((__v8sf)__A + (__v8sf)__B);
	vaddps	%ymm14, %ymm4, %ymm14	 # tmp576, _284, _401
	vaddps	%ymm8, %ymm15, %ymm15	 # tmp578, _33, _404
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:320:   return (__m256) ((__v8sf)__A * (__v8sf)__B);
	vmulps	%ymm12, %ymm12, %ymm6	 # _431, _431, tmp593
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vsubps	%ymm0, %ymm13, %ymm8	 # tmp587, _112, _432
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:149:   return (__m256) ((__v8sf)__A + (__v8sf)__B);
	vfmadd231ps	%ymm8, %ymm8, %ymm6	 # _432, _432, _435
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:406:   return (__m256) __builtin_ia32_cmpps256 ((__v8sf)__X, (__v8sf)__Y,
	vcmpps	$1, %ymm11, %ymm6, %ymm13	 #, _95, _435, tmp597
	vcmpps	$1, 64(%rsp), %ymm6, %ymm4	 #, %sfp, _435, tmp594
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vsubps	%ymm6, %ymm11, %ymm6	 # _435, _95, _440
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:320:   return (__m256) ((__v8sf)__A * (__v8sf)__B);
	vmulps	%ymm6, %ymm6, %ymm6	 # _440, _440, _441
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:186:   return (__m256) __builtin_ia32_andnps256 ((__v8sf)__A, (__v8sf)__B);
	vandnps	%ymm4, %ymm13, %ymm4	 # tmp594, tmp597, tmp600
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:174:   return (__m256) __builtin_ia32_andps256 ((__v8sf)__A, (__v8sf)__B);
	vandps	.LC3(%rip), %ymm4, %ymm4	 #, tmp600, tmp601
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/fmaintrin.h:65:   return (__m256)__builtin_ia32_vfmaddps256 ((__v8sf)__A, (__v8sf)__B,
	vfmadd231ps	%ymm2, %ymm4, %ymm9	 # tmp585, tmp601, tmp610
	vfmadd231ps	%ymm3, %ymm4, %ymm5	 # tmp589, tmp601, tmp608
	vfmadd231ps	%ymm1, %ymm4, %ymm10	 # tmp591, tmp601, tmp609
	vfmadd231ps	%ymm0, %ymm4, %ymm7	 # tmp587, tmp601, tmp611
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:320:   return (__m256) ((__v8sf)__A * (__v8sf)__B);
	vmulps	%ymm6, %ymm12, %ymm12	 # _441, _431, tmp604
	vmulps	%ymm6, %ymm8, %ymm8	 # _441, _432, tmp606
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vmovups	96(%rsp), %ymm6	 # %sfp, _110
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:174:   return (__m256) __builtin_ia32_andps256 ((__v8sf)__A, (__v8sf)__B);
	vandps	%ymm12, %ymm13, %ymm12	 # tmp604, tmp597, tmp605
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:149:   return (__m256) ((__v8sf)__A + (__v8sf)__B);
	vaddps	%ymm12, %ymm14, %ymm12	 # tmp605, _401, _444
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avx2intrin.h:1065:   return (__m256) __builtin_ia32_permvarsf256 ((__v8sf)__X, (__v8si)__Y);
	vmovdqu	.LC5(%rip), %ymm14	 #, tmp1202
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:174:   return (__m256) __builtin_ia32_andps256 ((__v8sf)__A, (__v8sf)__B);
	vandps	%ymm8, %ymm13, %ymm13	 # tmp606, tmp597, tmp607
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:149:   return (__m256) ((__v8sf)__A + (__v8sf)__B);
	vaddps	%ymm13, %ymm15, %ymm13	 # tmp607, _404, _447
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:475:   return (__m256i)__builtin_ia32_cvtps2dq256 ((__v8sf) __A);
	vcvtps2dq	%ymm4, %ymm15	 # tmp601, tmp612
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vmovups	32(%rsp), %ymm4	 # %sfp, _112
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:475:   return (__m256i)__builtin_ia32_cvtps2dq256 ((__v8sf) __A);
	vmovdqu	%ymm15, 192(%rsp)	 # tmp612, %sfp
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avx2intrin.h:1065:   return (__m256) __builtin_ia32_permvarsf256 ((__v8sf)__X, (__v8si)__Y);
	vpermps	%ymm2, %ymm14, %ymm2	 # tmp585, tmp1202, tmp614
	vpermps	%ymm0, %ymm14, %ymm0	 # tmp587, tmp1201, tmp616
	vpermps	%ymm3, %ymm14, %ymm3	 # tmp589, tmp1200, tmp618
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vsubps	%ymm2, %ymm6, %ymm8	 # tmp614, _110, _474
	vsubps	%ymm0, %ymm4, %ymm15	 # tmp616, _112, _475
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avx2intrin.h:1065:   return (__m256) __builtin_ia32_permvarsf256 ((__v8sf)__X, (__v8si)__Y);
	vpermps	%ymm1, %ymm14, %ymm1	 # tmp591, tmp1199, tmp620
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:320:   return (__m256) ((__v8sf)__A * (__v8sf)__B);
	vmulps	%ymm8, %ymm8, %ymm6	 # _474, _474, tmp622
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:149:   return (__m256) ((__v8sf)__A + (__v8sf)__B);
	vfmadd231ps	%ymm15, %ymm15, %ymm6	 # _475, _475, _478
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:406:   return (__m256) __builtin_ia32_cmpps256 ((__v8sf)__X, (__v8sf)__Y,
	vcmpps	$1, %ymm11, %ymm6, %ymm14	 #, _95, _478, tmp626
	vcmpps	$1, 64(%rsp), %ymm6, %ymm4	 #, %sfp, _478, tmp623
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vsubps	%ymm6, %ymm11, %ymm6	 # _478, _95, _483
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:320:   return (__m256) ((__v8sf)__A * (__v8sf)__B);
	vmulps	%ymm6, %ymm6, %ymm6	 # _483, _483, _484
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:186:   return (__m256) __builtin_ia32_andnps256 ((__v8sf)__A, (__v8sf)__B);
	vandnps	%ymm4, %ymm14, %ymm4	 # tmp623, tmp626, tmp629
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:174:   return (__m256) __builtin_ia32_andps256 ((__v8sf)__A, (__v8sf)__B);
	vandps	.LC3(%rip), %ymm4, %ymm4	 #, tmp629, tmp630
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/fmaintrin.h:65:   return (__m256)__builtin_ia32_vfmaddps256 ((__v8sf)__A, (__v8sf)__B,
	vfmadd231ps	%ymm1, %ymm4, %ymm10	 # tmp620, tmp630, tmp609
	vfmadd231ps	%ymm0, %ymm4, %ymm7	 # tmp616, tmp630, tmp611
	vfmadd231ps	%ymm3, %ymm4, %ymm5	 # tmp618, tmp630, tmp637
	vfmadd231ps	%ymm2, %ymm4, %ymm9	 # tmp614, tmp630, tmp639
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:475:   return (__m256i)__builtin_ia32_cvtps2dq256 ((__v8sf) __A);
	vcvtps2dq	%ymm4, %ymm4	 # tmp630, tmp641
	vpaddd	192(%rsp), %ymm4, %ymm4	 # %sfp, tmp641, tmp643
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:320:   return (__m256) ((__v8sf)__A * (__v8sf)__B);
	vmulps	%ymm6, %ymm15, %ymm15	 # _484, _475, tmp635
	vmulps	%ymm6, %ymm8, %ymm8	 # _484, _474, tmp633
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/fmaintrin.h:65:   return (__m256)__builtin_ia32_vfmaddps256 ((__v8sf)__A, (__v8sf)__B,
	vmovaps	%ymm10, %ymm6	 # tmp609, tmp638
	vmovaps	%ymm7, %ymm10	 # tmp611, tmp640
	vpaddd	128(%rsp), %ymm4, %ymm7	 # %sfp, tmp643, _462
	vmovdqu	%ymm7, 192(%rsp)	 # _462, %sfp
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avx2intrin.h:1065:   return (__m256) __builtin_ia32_permvarsf256 ((__v8sf)__X, (__v8si)__Y);
	vmovdqu	.LC5(%rip), %ymm7	 #, tmp1195
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vmovups	32(%rsp), %ymm4	 # %sfp, _112
	vmovups	%ymm11, 128(%rsp)	 # _95, %sfp
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avx2intrin.h:1065:   return (__m256) __builtin_ia32_permvarsf256 ((__v8sf)__X, (__v8si)__Y);
	vpermps	%ymm2, %ymm7, %ymm2	 # tmp614, tmp1195, tmp644
	vpermps	%ymm0, %ymm7, %ymm0	 # tmp616, tmp1194, tmp646
	vpermps	%ymm3, %ymm7, %ymm3	 # tmp618, tmp1193, tmp648
	vpermps	%ymm1, %ymm7, %ymm1	 # tmp620, tmp1192, tmp650
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vmovups	96(%rsp), %ymm7	 # %sfp, _110
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:174:   return (__m256) __builtin_ia32_andps256 ((__v8sf)__A, (__v8sf)__B);
	vandps	%ymm8, %ymm14, %ymm8	 # tmp633, tmp626, tmp634
	vandps	%ymm15, %ymm14, %ymm14	 # tmp635, tmp626, tmp636
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:149:   return (__m256) ((__v8sf)__A + (__v8sf)__B);
	vaddps	%ymm14, %ymm13, %ymm15	 # tmp636, _447, _490
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vsubps	%ymm0, %ymm4, %ymm14	 # tmp646, _112, _518
	vsubps	%ymm2, %ymm7, %ymm7	 # tmp644, _110, _517
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:149:   return (__m256) ((__v8sf)__A + (__v8sf)__B);
	vaddps	%ymm8, %ymm12, %ymm12	 # tmp634, _444, _487
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:320:   return (__m256) ((__v8sf)__A * (__v8sf)__B);
	vmulps	%ymm7, %ymm7, %ymm13	 # _517, _517, tmp652
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:149:   return (__m256) ((__v8sf)__A + (__v8sf)__B);
	vfmadd231ps	%ymm14, %ymm14, %ymm13	 # _518, _518, _521
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:406:   return (__m256) __builtin_ia32_cmpps256 ((__v8sf)__X, (__v8sf)__Y,
	vcmpps	$1, %ymm11, %ymm13, %ymm8	 #, _95, _521, tmp656
	vcmpps	$1, 64(%rsp), %ymm13, %ymm4	 #, %sfp, _521, tmp653
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vsubps	%ymm13, %ymm11, %ymm13	 # _521, _95, _526
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:320:   return (__m256) ((__v8sf)__A * (__v8sf)__B);
	vmulps	%ymm13, %ymm13, %ymm13	 # _526, _526, _527
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:186:   return (__m256) __builtin_ia32_andnps256 ((__v8sf)__A, (__v8sf)__B);
	vandnps	%ymm4, %ymm8, %ymm4	 # tmp653, tmp656, tmp659
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:174:   return (__m256) __builtin_ia32_andps256 ((__v8sf)__A, (__v8sf)__B);
	vandps	.LC3(%rip), %ymm4, %ymm4	 #, tmp659, tmp660
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/fmaintrin.h:65:   return (__m256)__builtin_ia32_vfmaddps256 ((__v8sf)__A, (__v8sf)__B,
	vfmadd231ps	%ymm0, %ymm4, %ymm10	 # tmp646, tmp660, tmp640
	vfmadd231ps	%ymm2, %ymm4, %ymm9	 # tmp644, tmp660, tmp639
	vfmadd231ps	%ymm3, %ymm4, %ymm5	 # tmp648, tmp660, tmp667
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:320:   return (__m256) ((__v8sf)__A * (__v8sf)__B);
	vmulps	%ymm13, %ymm14, %ymm14	 # _527, _518, tmp665
	vmulps	%ymm13, %ymm7, %ymm7	 # _527, _517, tmp663
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/fmaintrin.h:65:   return (__m256)__builtin_ia32_vfmaddps256 ((__v8sf)__A, (__v8sf)__B,
	vmovaps	%ymm10, %ymm13	 # tmp640, tmp670
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:475:   return (__m256i)__builtin_ia32_cvtps2dq256 ((__v8sf) __A);
	vcvtps2dq	%ymm4, %ymm10	 # tmp660, tmp671
	vmovdqu	%ymm10, 256(%rsp)	 # tmp671, %sfp
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:174:   return (__m256) __builtin_ia32_andps256 ((__v8sf)__A, (__v8sf)__B);
	vandps	%ymm7, %ymm8, %ymm7	 # tmp663, tmp656, tmp664
	vandps	%ymm14, %ymm8, %ymm8	 # tmp665, tmp656, tmp666
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/fmaintrin.h:65:   return (__m256)__builtin_ia32_vfmaddps256 ((__v8sf)__A, (__v8sf)__B,
	vmovaps	%ymm9, %ymm14	 # tmp639, tmp669
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:149:   return (__m256) ((__v8sf)__A + (__v8sf)__B);
	vaddps	%ymm8, %ymm15, %ymm8	 # tmp666, _490, _533
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/fmaintrin.h:65:   return (__m256)__builtin_ia32_vfmaddps256 ((__v8sf)__A, (__v8sf)__B,
	vmovaps	%ymm6, %ymm15	 # tmp638, tmp638
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avx2intrin.h:1065:   return (__m256) __builtin_ia32_permvarsf256 ((__v8sf)__X, (__v8si)__Y);
	vmovdqu	.LC5(%rip), %ymm6	 #, tmp1190
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:149:   return (__m256) ((__v8sf)__A + (__v8sf)__B);
	vaddps	%ymm7, %ymm12, %ymm7	 # tmp664, _487, _530
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/fmaintrin.h:65:   return (__m256)__builtin_ia32_vfmaddps256 ((__v8sf)__A, (__v8sf)__B,
	vfmadd231ps	%ymm1, %ymm4, %ymm15	 # tmp650, tmp660, tmp638
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vmovups	96(%rsp), %ymm4	 # %sfp, _110
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avx2intrin.h:1065:   return (__m256) __builtin_ia32_permvarsf256 ((__v8sf)__X, (__v8si)__Y);
	vpermps	%ymm2, %ymm6, %ymm2	 # tmp644, tmp1190, tmp673
	vpermps	%ymm0, %ymm6, %ymm0	 # tmp646, tmp1189, tmp675
	vpermps	%ymm3, %ymm6, %ymm3	 # tmp648, tmp1188, tmp677
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vsubps	%ymm2, %ymm4, %ymm9	 # tmp673, _110, _560
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avx2intrin.h:1065:   return (__m256) __builtin_ia32_permvarsf256 ((__v8sf)__X, (__v8si)__Y);
	vpermps	%ymm1, %ymm6, %ymm1	 # tmp650, tmp1187, tmp679
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vmovups	32(%rsp), %ymm6	 # %sfp, _112
	vsubps	%ymm0, %ymm6, %ymm12	 # tmp675, _112, _561
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:320:   return (__m256) ((__v8sf)__A * (__v8sf)__B);
	vmulps	%ymm9, %ymm9, %ymm6	 # _560, _560, tmp681
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:149:   return (__m256) ((__v8sf)__A + (__v8sf)__B);
	vfmadd231ps	%ymm12, %ymm12, %ymm6	 # _561, _561, _564
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:406:   return (__m256) __builtin_ia32_cmpps256 ((__v8sf)__X, (__v8sf)__Y,
	vcmpps	$1, %ymm11, %ymm6, %ymm10	 #, _95, _564, tmp685
	vcmpps	$1, 64(%rsp), %ymm6, %ymm4	 #, %sfp, _564, tmp682
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vsubps	%ymm6, %ymm11, %ymm6	 # _564, _95, _569
	vmovups	96(%rsp), %ymm11	 # %sfp, _110
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:320:   return (__m256) ((__v8sf)__A * (__v8sf)__B);
	vmulps	%ymm6, %ymm6, %ymm6	 # _569, _569, _570
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:186:   return (__m256) __builtin_ia32_andnps256 ((__v8sf)__A, (__v8sf)__B);
	vandnps	%ymm4, %ymm10, %ymm4	 # tmp682, tmp685, tmp688
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:174:   return (__m256) __builtin_ia32_andps256 ((__v8sf)__A, (__v8sf)__B);
	vandps	.LC3(%rip), %ymm4, %ymm4	 #, tmp688, tmp689
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/fmaintrin.h:65:   return (__m256)__builtin_ia32_vfmaddps256 ((__v8sf)__A, (__v8sf)__B,
	vfmadd231ps	%ymm1, %ymm4, %ymm15	 # tmp679, tmp689, tmp668
	vfmadd231ps	%ymm2, %ymm4, %ymm14	 # tmp673, tmp689, tmp669
	vfmadd231ps	%ymm3, %ymm4, %ymm5	 # tmp677, tmp689, tmp696
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:320:   return (__m256) ((__v8sf)__A * (__v8sf)__B);
	vmulps	%ymm6, %ymm12, %ymm12	 # _570, _561, tmp694
	vmulps	%ymm6, %ymm9, %ymm9	 # _570, _560, tmp692
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/fmaintrin.h:65:   return (__m256)__builtin_ia32_vfmaddps256 ((__v8sf)__A, (__v8sf)__B,
	vmovaps	%ymm15, %ymm6	 # tmp668, tmp697
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avx2intrin.h:1065:   return (__m256) __builtin_ia32_permvarsf256 ((__v8sf)__X, (__v8si)__Y);
	vmovdqu	.LC5(%rip), %ymm15	 #, tmp1183
	vpermps	%ymm2, %ymm15, %ymm2	 # tmp673, tmp1183, tmp704
	vpermps	%ymm3, %ymm15, %ymm3	 # tmp677, tmp1181, tmp708
	vpermps	%ymm1, %ymm15, %ymm1	 # tmp679, tmp1180, tmp710
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:174:   return (__m256) __builtin_ia32_andps256 ((__v8sf)__A, (__v8sf)__B);
	vandps	%ymm9, %ymm10, %ymm9	 # tmp692, tmp685, tmp693
	vandps	%ymm12, %ymm10, %ymm10	 # tmp694, tmp685, tmp695
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:149:   return (__m256) ((__v8sf)__A + (__v8sf)__B);
	vaddps	%ymm10, %ymm8, %ymm8	 # tmp695, _533, _576
	vaddps	%ymm9, %ymm7, %ymm7	 # tmp693, _530, _573
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vmovups	32(%rsp), %ymm10	 # %sfp, _112
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:149:   return (__m256) ((__v8sf)__A + (__v8sf)__B);
	vmovups	%ymm8, 224(%rsp)	 # _576, %sfp
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/fmaintrin.h:65:   return (__m256)__builtin_ia32_vfmaddps256 ((__v8sf)__A, (__v8sf)__B,
	vmovaps	%ymm14, %ymm8	 # tmp669, tmp698
	vmovaps	%ymm13, %ymm14	 # tmp670, tmp670
	vfmadd231ps	%ymm0, %ymm4, %ymm14	 # tmp675, tmp689, tmp670
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:475:   return (__m256i)__builtin_ia32_cvtps2dq256 ((__v8sf) __A);
	vcvtps2dq	%ymm4, %ymm4	 # tmp689, tmp700
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avx2intrin.h:1065:   return (__m256) __builtin_ia32_permvarsf256 ((__v8sf)__X, (__v8si)__Y);
	vpermps	%ymm0, %ymm15, %ymm0	 # tmp675, tmp1182, tmp706
	vpaddd	256(%rsp), %ymm4, %ymm4	 # %sfp, tmp700, tmp702
	vpaddd	160(%rsp), %ymm4, %ymm4	 # %sfp, tmp702, tmp703
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vsubps	%ymm0, %ymm10, %ymm10	 # tmp706, _112, _604
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:406:   return (__m256) __builtin_ia32_cmpps256 ((__v8sf)__X, (__v8sf)__Y,
	vmovups	128(%rsp), %ymm15	 # %sfp, _95
	vpaddd	192(%rsp), %ymm4, %ymm9	 # %sfp, tmp703, _385
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vsubps	%ymm2, %ymm11, %ymm4	 # tmp704, _110, _603
	vmovdqu	%ymm9, 160(%rsp)	 # _385, %sfp
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:320:   return (__m256) ((__v8sf)__A * (__v8sf)__B);
	vmulps	%ymm4, %ymm4, %ymm9	 # _603, _603, tmp712
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:149:   return (__m256) ((__v8sf)__A + (__v8sf)__B);
	vfmadd231ps	%ymm10, %ymm10, %ymm9	 # _604, _604, _607
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:406:   return (__m256) __builtin_ia32_cmpps256 ((__v8sf)__X, (__v8sf)__Y,
	vcmpps	$1, %ymm15, %ymm9, %ymm12	 #, _95, _607, tmp716
	vcmpps	$1, 64(%rsp), %ymm9, %ymm13	 #, %sfp, _607, tmp713
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vsubps	%ymm9, %ymm15, %ymm9	 # _607, _95, _612
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:320:   return (__m256) ((__v8sf)__A * (__v8sf)__B);
	vmulps	%ymm9, %ymm9, %ymm9	 # _612, _612, _613
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:186:   return (__m256) __builtin_ia32_andnps256 ((__v8sf)__A, (__v8sf)__B);
	vandnps	%ymm13, %ymm12, %ymm13	 # tmp713, tmp716, tmp719
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:174:   return (__m256) __builtin_ia32_andps256 ((__v8sf)__A, (__v8sf)__B);
	vandps	.LC3(%rip), %ymm13, %ymm13	 #, tmp719, tmp720
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/fmaintrin.h:65:   return (__m256)__builtin_ia32_vfmaddps256 ((__v8sf)__A, (__v8sf)__B,
	vfmadd231ps	%ymm0, %ymm13, %ymm14	 # tmp706, tmp720, tmp699
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:320:   return (__m256) ((__v8sf)__A * (__v8sf)__B);
	vmulps	%ymm9, %ymm10, %ymm10	 # _613, _604, tmp725
	vmulps	%ymm9, %ymm4, %ymm4	 # _613, _603, tmp723
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/fmaintrin.h:65:   return (__m256)__builtin_ia32_vfmaddps256 ((__v8sf)__A, (__v8sf)__B,
	vmovaps	%ymm6, %ymm9	 # tmp697, tmp697
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avx2intrin.h:1065:   return (__m256) __builtin_ia32_permvarsf256 ((__v8sf)__X, (__v8si)__Y);
	vmovdqu	.LC5(%rip), %ymm6	 #, tmp1177
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/fmaintrin.h:65:   return (__m256)__builtin_ia32_vfmaddps256 ((__v8sf)__A, (__v8sf)__B,
	vfmadd231ps	%ymm1, %ymm13, %ymm9	 # tmp710, tmp720, tmp697
	vmovaps	%ymm14, %ymm15	 # tmp699, tmp730
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avx2intrin.h:1065:   return (__m256) __builtin_ia32_permvarsf256 ((__v8sf)__X, (__v8si)__Y);
	vpermps	%ymm1, %ymm6, %ymm1	 # tmp710, tmp1174, tmp739
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:174:   return (__m256) __builtin_ia32_andps256 ((__v8sf)__A, (__v8sf)__B);
	vandps	%ymm4, %ymm12, %ymm4	 # tmp723, tmp716, tmp724
	vandps	%ymm10, %ymm12, %ymm12	 # tmp725, tmp716, tmp726
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:149:   return (__m256) ((__v8sf)__A + (__v8sf)__B);
	vaddps	224(%rsp), %ymm12, %ymm12	 # %sfp, tmp726, _619
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/fmaintrin.h:65:   return (__m256)__builtin_ia32_vfmaddps256 ((__v8sf)__A, (__v8sf)__B,
	vmovaps	%ymm9, %ymm10	 # tmp697, tmp728
	vmovaps	%ymm8, %ymm9	 # tmp698, tmp698
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:149:   return (__m256) ((__v8sf)__A + (__v8sf)__B);
	vaddps	%ymm4, %ymm7, %ymm4	 # tmp724, _573, _616
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:475:   return (__m256i)__builtin_ia32_cvtps2dq256 ((__v8sf) __A);
	vcvtps2dq	%ymm13, %ymm8	 # tmp720, tmp731
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/fmaintrin.h:65:   return (__m256)__builtin_ia32_vfmaddps256 ((__v8sf)__A, (__v8sf)__B,
	vfmadd231ps	%ymm2, %ymm13, %ymm9	 # tmp704, tmp720, tmp698
	vmovaps	%ymm5, %ymm7	 # tmp696, tmp696
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avx2intrin.h:1065:   return (__m256) __builtin_ia32_permvarsf256 ((__v8sf)__X, (__v8si)__Y);
	vpermps	%ymm2, %ymm6, %ymm2	 # tmp704, tmp1177, tmp733
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:475:   return (__m256i)__builtin_ia32_cvtps2dq256 ((__v8sf) __A);
	vmovdqu	%ymm8, 192(%rsp)	 # tmp731, %sfp
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/fmaintrin.h:65:   return (__m256)__builtin_ia32_vfmaddps256 ((__v8sf)__A, (__v8sf)__B,
	vfmadd231ps	%ymm3, %ymm13, %ymm7	 # tmp708, tmp720, tmp696
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vsubps	%ymm2, %ymm11, %ymm13	 # tmp733, _110, _646
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avx2intrin.h:1065:   return (__m256) __builtin_ia32_permvarsf256 ((__v8sf)__X, (__v8si)__Y);
	vpermps	%ymm0, %ymm6, %ymm8	 # tmp706, tmp1176, tmp735
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:406:   return (__m256) __builtin_ia32_cmpps256 ((__v8sf)__X, (__v8sf)__Y,
	vmovups	128(%rsp), %ymm11	 # %sfp, _95
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avx2intrin.h:1065:   return (__m256) __builtin_ia32_permvarsf256 ((__v8sf)__X, (__v8si)__Y);
	vpermps	%ymm3, %ymm6, %ymm3	 # tmp708, tmp1175, tmp737
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vmovups	32(%rsp), %ymm6	 # %sfp, _112
	vsubps	%ymm8, %ymm6, %ymm14	 # tmp735, _112, _647
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:320:   return (__m256) ((__v8sf)__A * (__v8sf)__B);
	vmulps	%ymm13, %ymm13, %ymm6	 # _646, _646, tmp741
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:149:   return (__m256) ((__v8sf)__A + (__v8sf)__B);
	vfmadd231ps	%ymm14, %ymm14, %ymm6	 # _647, _647, _650
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:406:   return (__m256) __builtin_ia32_cmpps256 ((__v8sf)__X, (__v8sf)__Y,
	vcmpps	$1, %ymm11, %ymm6, %ymm0	 #, _95, _650, tmp745
	vcmpps	$1, 64(%rsp), %ymm6, %ymm5	 #, %sfp, _650, tmp742
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vsubps	%ymm6, %ymm11, %ymm6	 # _650, _95, _655
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:320:   return (__m256) ((__v8sf)__A * (__v8sf)__B);
	vmulps	%ymm6, %ymm6, %ymm6	 # _655, _655, _656
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:186:   return (__m256) __builtin_ia32_andnps256 ((__v8sf)__A, (__v8sf)__B);
	vandnps	%ymm5, %ymm0, %ymm5	 # tmp742, tmp745, tmp748
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:174:   return (__m256) __builtin_ia32_andps256 ((__v8sf)__A, (__v8sf)__B);
	vandps	.LC3(%rip), %ymm5, %ymm5	 #, tmp748, tmp749
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/fmaintrin.h:65:   return (__m256)__builtin_ia32_vfmaddps256 ((__v8sf)__A, (__v8sf)__B,
	vfmadd231ps	%ymm1, %ymm5, %ymm10	 # tmp739, tmp749, avg_vy_vec
	vfmadd231ps	%ymm3, %ymm5, %ymm7	 # tmp737, tmp749, avg_vx_vec
	vmovaps	%ymm8, %ymm1	 # tmp735, tmp735
	vfmadd231ps	%ymm2, %ymm5, %ymm9	 # tmp733, tmp749, avg_x_vec
	vfmadd132ps	%ymm5, %ymm15, %ymm1	 # tmp749, tmp730, tmp735
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:475:   return (__m256i)__builtin_ia32_cvtps2dq256 ((__v8sf) __A);
	vcvtps2dq	%ymm5, %ymm5	 # tmp749, tmp760
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:320:   return (__m256) ((__v8sf)__A * (__v8sf)__B);
	vmulps	%ymm6, %ymm13, %ymm13	 # _656, _646, tmp752
	vmulps	%ymm6, %ymm14, %ymm14	 # _656, _647, tmp754
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:174:   return (__m256) __builtin_ia32_andps256 ((__v8sf)__A, (__v8sf)__B);
	vandps	%ymm13, %ymm0, %ymm13	 # tmp752, tmp745, tmp753
	vandps	%ymm14, %ymm0, %ymm0	 # tmp754, tmp745, tmp755
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:149:   return (__m256) ((__v8sf)__A + (__v8sf)__B);
	vaddps	%ymm13, %ymm4, %ymm4	 # tmp753, _616, sep_x_vec
	vaddps	%ymm0, %ymm12, %ymm6	 # tmp755, _619, sep_y_vec
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avx2intrin.h:121:   return (__m256i) ((__v8su)__A + (__v8su)__B);
	vpaddd	192(%rsp), %ymm5, %ymm0	 # %sfp, tmp760, tmp762
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avx2intrin.h:121:   return (__m256i) ((__v8su)__A + (__v8su)__B);
	vpaddd	160(%rsp), %ymm0, %ymm3	 # %sfp, tmp762, tmp1088
	vmovdqu	%ymm3, 160(%rsp)	 # tmp1088, %sfp
 # .\src\main.cpp:689:             for (Boid nearby_boid = row_begin; nearby_boid < row_end; nearby_boid += 8) {
	cmpl	%esi, %ebp	 # ivtmp.1840, row_end
	jg	.L614	 #,
	vmovups	%ymm4, 192(%rsp)	 # sep_x_vec, %sfp
	vmovaps	%ymm10, %ymm3	 # avg_vy_vec, avg_vy_vec
	vmovups	%ymm6, 224(%rsp)	 # sep_y_vec, %sfp
	vmovups	%ymm9, 256(%rsp)	 # avg_x_vec, %sfp
.L613:
 # .\src\main.cpp:674:         for (int cy = -1; cy <= 1; cy++) {
	addl	$1, %edi	 #, ivtmp.1865
	cmpl	%edi, 412(%rsp)	 # ivtmp.1865, %sfp
	jne	.L609	 #,
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avx2intrin.h:275:   return (__m256i) ((__v8si)__A > (__v8si)__B);
	vmovaps	%ymm1, %ymm8	 # avg_y_vec, avg_y_vec
	vmovaps	%ymm7, %ymm2	 # avg_vx_vec, avg_vx_vec
	vpxor	%xmm0, %xmm0, %xmm0	 # tmp765
	movq	%r15, %rdi	 # vxs, vxs
	vmovdqu	160(%rsp), %ymm1	 # %sfp, isc
	movq	%r8, %rbp	 # vys, vys
 # .\src\main.cpp:784:         const auto ew = _mm256_set1_ps(rules->edge_width);
	vxorps	%xmm15, %xmm15, %xmm15	 # tmp1096
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avx2intrin.h:275:   return (__m256i) ((__v8si)__A > (__v8si)__B);
	movq	456(%rsp), %r15	 # %sfp, ivtmp.1869
	vmovups	192(%rsp), %ymm12	 # %sfp, sep_x_vec
	movq	448(%rsp), %rdx	 # %sfp, _3
	movq	%r12, %rbx	 # ys, ys
	vpcmpgtd	%ymm0, %ymm1, %ymm0	 # tmp765, tmp1091, tmp766
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:463:   return (__m256)__builtin_ia32_cvtdq2ps256 ((__v8si) __A);
	vcvtdq2ps	%ymm1, %ymm7	 # isc, tmp771
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avx2intrin.h:275:   return (__m256i) ((__v8si)__A > (__v8si)__B);
	vmovups	224(%rsp), %ymm14	 # %sfp, sep_y_vec
	vmovups	416(%rsp), %ymm4	 # %sfp, _99
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:243:   return (__m256) ((__v8sf)__A / (__v8sf)__B);
	vdivps	%ymm7, %ymm2, %ymm1	 # tmp771, avg_vx_vec, tmp773
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/fmaintrin.h:65:   return (__m256)__builtin_ia32_vfmaddps256 ((__v8sf)__A, (__v8sf)__B,
	vmovaps	%ymm12, %ymm10	 # sep_x_vec, sep_x_vec
 # .\src\main.cpp:784:         const auto ew = _mm256_set1_ps(rules->edge_width);
	movl	24(%rdx), %eax	 # MEM[(const struct Rules *)_3].edge_width, _224
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avx2intrin.h:275:   return (__m256i) ((__v8si)__A > (__v8si)__B);
	vmovups	256(%rsp), %ymm5	 # %sfp, avg_x_vec
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/fmaintrin.h:65:   return (__m256)__builtin_ia32_vfmaddps256 ((__v8sf)__A, (__v8sf)__B,
	vfmadd213ps	(%rdi,%r15,4), %ymm4, %ymm10	 # MEM[(__m256_u * {ref-all})vxs_92 + ivtmp.1869_198 * 4], _99, sep_x_vec
	vmovaps	%ymm14, %ymm9	 # sep_y_vec, sep_y_vec
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:1330: 				 __A, __A, __A, __A };
	vbroadcastss	16(%rdx), %ymm6	 # MEM[(const struct Rules *)_3].alignment_factor, tmp776
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/fmaintrin.h:65:   return (__m256)__builtin_ia32_vfmaddps256 ((__v8sf)__A, (__v8sf)__B,
	vfmadd213ps	(%r8,%r15,4), %ymm4, %ymm9	 # MEM[(__m256_u * {ref-all})vys_93 + ivtmp.1869_198 * 4], _99, sep_y_vec
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vmovups	96(%rsp), %ymm11	 # %sfp, _110
 # .\src\main.cpp:789:         auto cmpx_2 = _mm256_cmp_ps(current_xs_vec, _mm256_set1_ps(world_width - rules->edge_width), _CMP_GT_OS);
	movl	468(%rsp), %r8d	 # %sfp, tmp796
	subl	%eax, %r8d	 # _224, tmp796
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:243:   return (__m256) ((__v8sf)__A / (__v8sf)__B);
	vdivps	%ymm7, %ymm3, %ymm3	 # tmp771, avg_vy_vec, tmp778
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vsubps	%ymm10, %ymm1, %ymm1	 # tmp767, tmp773, tmp774
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:174:   return (__m256) __builtin_ia32_andps256 ((__v8sf)__A, (__v8sf)__B);
	vandps	%ymm0, %ymm1, %ymm1	 # tmp766, tmp774, tmp775
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/fmaintrin.h:65:   return (__m256)__builtin_ia32_vfmaddps256 ((__v8sf)__A, (__v8sf)__B,
	vfmadd132ps	%ymm6, %ymm10, %ymm1	 # tmp776, tmp767, tmp777
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vmovups	32(%rsp), %ymm10	 # %sfp, _112
	vsubps	%ymm9, %ymm3, %ymm2	 # tmp769, tmp778, tmp779
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:243:   return (__m256) ((__v8sf)__A / (__v8sf)__B);
	vdivps	%ymm7, %ymm5, %ymm3	 # tmp771, avg_x_vec, tmp782
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:1330: 				 __A, __A, __A, __A };
	vbroadcastss	20(%rdx), %ymm5	 # MEM[(const struct Rules *)_3].cohesion_factor, tmp785
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:174:   return (__m256) __builtin_ia32_andps256 ((__v8sf)__A, (__v8sf)__B);
	vandps	%ymm0, %ymm2, %ymm2	 # tmp766, tmp779, tmp780
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/fmaintrin.h:65:   return (__m256)__builtin_ia32_vfmaddps256 ((__v8sf)__A, (__v8sf)__B,
	vfmadd132ps	%ymm2, %ymm9, %ymm6	 # tmp780, tmp769, tmp781
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:243:   return (__m256) ((__v8sf)__A / (__v8sf)__B);
	vdivps	%ymm7, %ymm8, %ymm2	 # tmp771, avg_y_vec, tmp787
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vsubps	%ymm11, %ymm3, %ymm3	 # _110, tmp782, tmp783
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:174:   return (__m256) __builtin_ia32_andps256 ((__v8sf)__A, (__v8sf)__B);
	vandps	%ymm0, %ymm3, %ymm3	 # tmp766, tmp783, tmp784
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/fmaintrin.h:65:   return (__m256)__builtin_ia32_vfmaddps256 ((__v8sf)__A, (__v8sf)__B,
	vfmadd132ps	%ymm5, %ymm1, %ymm3	 # tmp785, tmp777, tmp786
 # .\src\main.cpp:789:         auto cmpx_2 = _mm256_cmp_ps(current_xs_vec, _mm256_set1_ps(world_width - rules->edge_width), _CMP_GT_OS);
	vcvtsi2ssl	%r8d, %xmm15, %xmm1	 # tmp796, tmp1099, tmp906
 # .\src\main.cpp:791:         auto cmpy_2 = _mm256_cmp_ps(current_ys_vec, _mm256_set1_ps(world_height - rules->edge_width), _CMP_GT_OS);
	movl	464(%rsp), %r8d	 # %sfp, tmp804
	subl	%eax, %r8d	 # _224, tmp804
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:1330: 				 __A, __A, __A, __A };
	vbroadcastss	%xmm1, %ymm1	 # _229, tmp799
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:406:   return (__m256) __builtin_ia32_cmpps256 ((__v8sf)__X, (__v8sf)__Y,
	vcmpps	$14, %ymm1, %ymm11, %ymm1	 #, tmp799, _110, tmp797
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vsubps	%ymm10, %ymm2, %ymm2	 # _112, tmp787, tmp788
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:174:   return (__m256) __builtin_ia32_andps256 ((__v8sf)__A, (__v8sf)__B);
	vandps	%ymm0, %ymm2, %ymm2	 # tmp766, tmp788, tmp789
 # .\src\main.cpp:784:         const auto ew = _mm256_set1_ps(rules->edge_width);
	vcvtsi2ssl	%eax, %xmm15, %xmm0	 # _224, tmp1096, tmp905
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/fmaintrin.h:65:   return (__m256)__builtin_ia32_vfmaddps256 ((__v8sf)__A, (__v8sf)__B,
	vfmadd132ps	%ymm5, %ymm6, %ymm2	 # tmp785, tmp781, tmp790
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:1330: 				 __A, __A, __A, __A };
	vbroadcastss	28(%rdx), %ymm5	 # MEM[(const struct Rules *)_3].edge_factor, tmp791
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:174:   return (__m256) __builtin_ia32_andps256 ((__v8sf)__A, (__v8sf)__B);
	vandps	%ymm5, %ymm1, %ymm1	 # tmp791, tmp797, tmp809
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:1330: 				 __A, __A, __A, __A };
	vbroadcastss	%xmm0, %ymm0	 # _225, tmp792
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:406:   return (__m256) __builtin_ia32_cmpps256 ((__v8sf)__X, (__v8sf)__Y,
	vcmpps	$1, %ymm0, %ymm11, %ymm7	 #, tmp792, _110, tmp793
	vcmpps	$1, %ymm0, %ymm10, %ymm6	 #, tmp792, _112, tmp801
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:229:   return (__m256) __builtin_ia32_blendvps256 ((__v8sf)__X,
	vbroadcastss	.LC4(%rip), %ymm11	 #, tmp1106
 # .\src\main.cpp:791:         auto cmpy_2 = _mm256_cmp_ps(current_ys_vec, _mm256_set1_ps(world_height - rules->edge_width), _CMP_GT_OS);
	vcvtsi2ssl	%r8d, %xmm15, %xmm0	 # tmp804, tmp1103, tmp907
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:174:   return (__m256) __builtin_ia32_andps256 ((__v8sf)__A, (__v8sf)__B);
	vandps	%ymm5, %ymm7, %ymm7	 # tmp791, tmp793, tmp810
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vsubps	%ymm1, %ymm7, %ymm1	 # tmp809, tmp810, tmp811
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:1330: 				 __A, __A, __A, __A };
	vbroadcastss	%xmm0, %ymm0	 # _234, tmp807
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:406:   return (__m256) __builtin_ia32_cmpps256 ((__v8sf)__X, (__v8sf)__Y,
	vcmpps	$14, %ymm0, %ymm10, %ymm0	 #, tmp807, _112, tmp805
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:149:   return (__m256) ((__v8sf)__A + (__v8sf)__B);
	vaddps	%ymm3, %ymm1, %ymm3	 # tmp786, tmp811, _240
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:174:   return (__m256) __builtin_ia32_andps256 ((__v8sf)__A, (__v8sf)__B);
	vandps	%ymm5, %ymm6, %ymm1	 # tmp791, tmp801, tmp813
	vandps	%ymm5, %ymm0, %ymm0	 # tmp791, tmp805, tmp812
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vsubps	%ymm0, %ymm1, %ymm1	 # tmp812, tmp813, tmp814
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:320:   return (__m256) ((__v8sf)__A * (__v8sf)__B);
	vmulps	%ymm3, %ymm3, %ymm0	 # _240, _240, tmp815
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:149:   return (__m256) ((__v8sf)__A + (__v8sf)__B);
	vaddps	%ymm2, %ymm1, %ymm1	 # tmp790, tmp814, _244
	vfmadd231ps	%ymm1, %ymm1, %ymm0	 # _244, _244, _247
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:1041:   return (__m256) __builtin_ia32_rsqrtps256 ((__v8sf)__A);
	vrsqrtps	%ymm0, %ymm0	 # _247, tmp816
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:320:   return (__m256) ((__v8sf)__A * (__v8sf)__B);
	vmulps	.LC6(%rip), %ymm0, %ymm5	 #, tmp816, _249
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:406:   return (__m256) __builtin_ia32_cmpps256 ((__v8sf)__X, (__v8sf)__Y,
	vcmpps	$14, .LC8(%rip), %ymm0, %ymm7	 #,, tmp816, tmp820
	vcmpps	$1, .LC10(%rip), %ymm0, %ymm6	 #,, tmp816, tmp824
	vcmpps	$14, .LC12(%rip), %ymm0, %ymm2	 #,, tmp816, tmp828
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:320:   return (__m256) ((__v8sf)__A * (__v8sf)__B);
	vmulps	.LC14(%rip), %ymm0, %ymm0	 #, tmp816, tmp832
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:229:   return (__m256) __builtin_ia32_blendvps256 ((__v8sf)__X,
	vblendvps	%ymm7, %ymm0, %ymm11, %ymm0	 # tmp820, tmp832, tmp1105, _256
	vblendvps	%ymm6, %ymm5, %ymm0, %ymm0	 # tmp824, _249, _256, _259
	vblendvps	%ymm2, .LC3(%rip), %ymm0, %ymm0	 # tmp828,, _259, _262
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:320:   return (__m256) ((__v8sf)__A * (__v8sf)__B);
	vmulps	%ymm0, %ymm3, %ymm3	 # _262, _240, tmp848
	vmulps	%ymm0, %ymm1, %ymm1	 # _262, _244, tmp849
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:911:   *(__m256_u *)__P = __A;
	vmovups	%ymm3, (%rdi,%r15,4)	 # tmp848, MEM[(__m256_u * {ref-all})vxs_92 + ivtmp.1869_198 * 4]
	vmovups	%ymm1, 0(%rbp,%r15,4)	 # tmp849, MEM[(__m256_u * {ref-all})vys_93 + ivtmp.1869_198 * 4]
 # .\src\main.cpp:657:     for (Boid current_boid = cell_begin; current_boid < cell_end; current_boid += 8) {
	addq	$8, %r15	 #, ivtmp.1869
	cmpl	%r15d, 476(%rsp)	 # ivtmp.1869, %sfp
	jg	.L616	 #,
	movl	292(%rsp), %r10d	 # %sfp, ivtmp.1883
	movq	296(%rsp), %r11	 # %sfp, _6
	movq	%r13, %r12	 # _2, _2
	movq	%rdx, %rsi	 # _3, _3
	vzeroupper
.L608:
 # .\src\main.cpp:1006:     for (int x = 0; x < boid_map->m_xsize; x++) {
	movl	4(%r11), %r15d	 # MEM[(const struct BoidMap *)_6].m_xsize, _46
 # .\src\main.cpp:1006:     for (int x = 0; x < boid_map->m_xsize; x++) {
	leal	-1(%r10), %edx	 #, x
	leal	1(%r10), %eax	 #, ivtmp.1883
	cmpl	%edx, %r15d	 # x, _46
	jle	.L654	 #,
	movl	%eax, %r10d	 # ivtmp.1883, ivtmp.1883
	jmp	.L605	 #
.L648:
	vzeroupper
	jmp	.L608	 #
.L654:
	movq	768(%rsp), %rdi	 # task_master, task_master
	movl	484(%rsp), %ebp	 # %sfp, thread_id
	movq	488(%rsp), %rsi	 # %sfp, _72
	jmp	.L604	 #
.L652:
 # .\src\main.cpp:1178:                     auto s = ((populate_args *) current_task.argument_struct);
	movq	504(%rsp), %rax	 # current_task.argument_struct, s
 # .\src\main.cpp:1179:                     populate_n(s->start, s->task_size, s->boid_list, s->boid_map);
	movl	8(%rax), %ebx	 # s_39->start, i
 # .\src\main.cpp:242:     for (uint32_t i = start; i < start + task_size; i++) {
	movl	12(%rax), %r14d	 # s_39->task_size, _167
 # .\src\main.cpp:1179:                     populate_n(s->start, s->task_size, s->boid_list, s->boid_map);
	movq	(%rax), %r12	 # s_39->boid_map, _11
 # .\src\main.cpp:1179:                     populate_n(s->start, s->task_size, s->boid_list, s->boid_map);
	movq	16(%rax), %r15	 # s_39->boid_list, _12
 # .\src\main.cpp:242:     for (uint32_t i = start; i < start + task_size; i++) {
	addl	%ebx, %r14d	 # i, _167
 # .\src\main.cpp:242:     for (uint32_t i = start; i < start + task_size; i++) {
	cmpl	%r14d, %ebx	 # _167, i
	jnb	.L604	 #,
.L621:
 # .\src\main.cpp:215:     Boid map_pos = map.get_map_pos_nearest(boid_list.m_boid_store->xs[boid_to_place], boid_list.m_boid_store->ys[boid_to_place]);
	movq	(%r15), %rax	 # MEM[(const struct BoidList &)_12].m_boid_store, _299
 # .\src\main.cpp:215:     Boid map_pos = map.get_map_pos_nearest(boid_list.m_boid_store->xs[boid_to_place], boid_list.m_boid_store->ys[boid_to_place]);
	movslq	%ebx, %r13	 # i, i.38_56
 # .\src\main.cpp:215:     Boid map_pos = map.get_map_pos_nearest(boid_list.m_boid_store->xs[boid_to_place], boid_list.m_boid_store->ys[boid_to_place]);
	movq	8(%rax), %rcx	 # _299->ys, _299->ys
 # .\src\main.cpp:215:     Boid map_pos = map.get_map_pos_nearest(boid_list.m_boid_store->xs[boid_to_place], boid_list.m_boid_store->ys[boid_to_place]);
	movq	(%rax), %rax	 # _299->xs, _299->xs
 # .\src\main.cpp:215:     Boid map_pos = map.get_map_pos_nearest(boid_list.m_boid_store->xs[boid_to_place], boid_list.m_boid_store->ys[boid_to_place]);
	vcvttss2sil	(%rcx,%r13,4), %r8d	 # *_303,
	movq	%r12, %rcx	 # _11,
	vcvttss2sil	(%rax,%r13,4), %edx	 # *_307, tmp858
	call	_ZNK7BoidMap19get_map_pos_nearestEii	 #
 # .\src\main.cpp:219:     map.safety[map_pos].lock();
	movslq	%eax, %rdx	 # tmp903, _310
 # .\src\main.cpp:219:     map.safety[map_pos].lock();
	movq	32(%r12), %rax	 # MEM[(const struct BoidMap &)_11].safety, _314
 # .\src\main.cpp:219:     map.safety[map_pos].lock();
	salq	$2, %rdx	 #, _313
 # .\src\main.cpp:219:     map.safety[map_pos].lock();
	addq	%rdx, %rax	 # _313, _314
.L618:
 # C:/msys64/ucrt64/include/psdk_inc/intrin-impl.h:1800: __buildbittesti(_interlockedbittestandset, __LONG32, "lock bts{l %[Offset],%[Base] | %[Base],%[Offset]}" __FLAGSET, "I")
/APP
 # 1800 "C:/msys64/ucrt64/include/psdk_inc/intrin-impl.h" 1
	lock btsl $0,(%rax) 	 #, MEM[(volatile long int *)_315]
 # 0 "" 2
 # .\src\.\task_master\lock.h:40:         while (_interlockedbittestandset(&lock_internal, 0)) {}
/NO_APP
	jc	.L618	 #,
 # .\src\main.cpp:220:         Boid old_head = map.m_boid_map[map_pos];
	movq	16(%r12), %rcx	 # MEM[(const struct BoidMap &)_11].m_boid_map, _318
	addq	%rdx, %rcx	 # _313, _318
 # .\src\main.cpp:220:         Boid old_head = map.m_boid_map[map_pos];
	movslq	(%rcx), %rax	 # *_318,
 # .\src\main.cpp:221:         map.m_boid_map[map_pos] = boid_to_place;
	movl	%ebx, (%rcx)	 # i, *_318
 # .\src\main.cpp:222:         boid_list.m_boid_store->index_next[boid_to_place] = old_head;
	movq	(%r15), %rcx	 # MEM[(const struct BoidList &)_12].m_boid_store, _320
 # .\src\main.cpp:222:         boid_list.m_boid_store->index_next[boid_to_place] = old_head;
	movq	32(%rcx), %r8	 # _320->index_next, _320->index_next
 # .\src\main.cpp:223:         boid_list.m_boid_store->depth[boid_to_place] = (old_head != -1) ? boid_list.m_boid_store->depth[old_head] + 1 : 1;
	movq	48(%rcx), %rcx	 # _320->depth, pretmp_473
 # .\src\main.cpp:222:         boid_list.m_boid_store->index_next[boid_to_place] = old_head;
	movl	%eax, (%r8,%r13,4)	 # old_head, *_322
 # .\src\main.cpp:223:         boid_list.m_boid_store->depth[boid_to_place] = (old_head != -1) ? boid_list.m_boid_store->depth[old_head] + 1 : 1;
	cmpl	$-1, %eax	 #, old_head
	je	.L619	 #,
 # .\src\main.cpp:223:         boid_list.m_boid_store->depth[boid_to_place] = (old_head != -1) ? boid_list.m_boid_store->depth[old_head] + 1 : 1;
	movl	(%rcx,%rax,4), %eax	 # *_326, *_326
	addl	$1, %eax	 #, tmp868
 # .\src\main.cpp:223:         boid_list.m_boid_store->depth[boid_to_place] = (old_head != -1) ? boid_list.m_boid_store->depth[old_head] + 1 : 1;
	movl	%eax, (%rcx,%r13,4)	 # tmp868, *_412
.L650:
 # .\src\main.cpp:224:     map.safety[map_pos].unlock();
	addq	32(%r12), %rdx	 # MEM[(const struct BoidMap &)_11].safety, _334
 # C:/msys64/ucrt64/include/psdk_inc/intrin-impl.h:1809: __buildbittesti(_interlockedbittestandreset, __LONG32, "lock btr{l %[Offset],%[Base] | %[Base],%[Offset]}" __FLAGSET, "I")
/APP
 # 1809 "C:/msys64/ucrt64/include/psdk_inc/intrin-impl.h" 1
	lock btrl $0,(%rdx) 	 #,* _334
 # 0 "" 2
 # .\src\main.cpp:242:     for (uint32_t i = start; i < start + task_size; i++) {
/NO_APP
	addl	$1, %ebx	 #, i
 # .\src\main.cpp:242:     for (uint32_t i = start; i < start + task_size; i++) {
	cmpl	%r14d, %ebx	 # _167, i
	jb	.L621	 #,
	jmp	.L604	 #
.L619:
 # .\src\main.cpp:223:         boid_list.m_boid_store->depth[boid_to_place] = (old_head != -1) ? boid_list.m_boid_store->depth[old_head] + 1 : 1;
	movl	$1, (%rcx,%r13,4)	 #, *_330
	jmp	.L650	 #
.L600:
 # .\src\main.cpp:1164:         switch (current_task.task_type) {
	cmpl	$4, %r10d	 #, ivtmp.1883
	jne	.L604	 #,
 # .\src\main.cpp:1184:                 task_master->status[thread_id] = false;
	movzbl	%bpl, %esi	 # thread_id, thread_id
	movb	$0, 66080(%rdi,%rsi)	 #, task_master_32(D)->status[_15]
 # .\src\main.cpp:1199: }
	vmovups	528(%rsp), %xmm6	 #,
	vmovups	544(%rsp), %xmm7	 #,
	vmovups	560(%rsp), %xmm8	 #,
	vmovups	576(%rsp), %xmm9	 #,
	vmovups	592(%rsp), %xmm10	 #,
	vmovups	608(%rsp), %xmm11	 #,
	vmovups	624(%rsp), %xmm12	 #,
	vmovups	640(%rsp), %xmm13	 #,
	vmovups	656(%rsp), %xmm14	 #,
	vmovups	672(%rsp), %xmm15	 #,
	addq	$696, %rsp	 #,
	popq	%rbx	 #
	popq	%rsi	 #
	popq	%rdi	 #
	popq	%rbp	 #
	popq	%r12	 #
	popq	%r13	 #
	popq	%r14	 #
	popq	%r15	 #
	ret	
.L653:
 # .\src\main.cpp:1191:                     current_task.sync->task_counter -= 1;
	movl	4(%rax), %edx	 #, _20
 # .\src\main.cpp:1192:                     ((void (*)(TaskMaster *, Task *)) current_task.on_complete)(task_master, &current_task);
	movq	%rdi, %rcx	 # task_master,
 # .\src\main.cpp:1191:                     current_task.sync->task_counter -= 1;
	subl	$1, %edx	 #, _21
	movl	%edx, 4(%rax)	 # _21,
 # .\src\main.cpp:1192:                     ((void (*)(TaskMaster *, Task *)) current_task.on_complete)(task_master, &current_task);
	leaq	496(%rsp), %rdx	 #, tmp877
	call	*%r8	 # _17
.LEHE41:
 # .\src\main.cpp:1196:             current_task.sync->tc_lock.unlock();
	movq	512(%rsp), %rax	 # current_task.sync, prephitmp_471
	jmp	.L625	 #
	.seh_handler	__gxx_personality_seh0, @unwind, @except
	.seh_handlerdata
.LLSDA12620:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE12620-.LLSDACSB12620
.LLSDACSB12620:
	.uleb128 .LEHB40-.LFB12620
	.uleb128 .LEHE40-.LEHB40
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB41-.LFB12620
	.uleb128 .LEHE41-.LEHB41
	.uleb128 0
	.uleb128 0
.LLSDACSE12620:
	.text
	.seh_endproc
	.p2align 4
	.globl	_Z12block_writeriPKiPK8BoidListPK7BoidMap
	.def	_Z12block_writeriPKiPK8BoidListPK7BoidMap;	.scl	2;	.type	32;	.endef
	.seh_proc	_Z12block_writeriPKiPK8BoidListPK7BoidMap
_Z12block_writeriPKiPK8BoidListPK7BoidMap:
.LFB12579:
	pushq	%r12	 #
	.seh_pushreg	%r12
	pushq	%rbp	 #
	.seh_pushreg	%rbp
	pushq	%rdi	 #
	.seh_pushreg	%rdi
	pushq	%rsi	 #
	.seh_pushreg	%rsi
	pushq	%rbx	 #
	.seh_pushreg	%rbx
	subq	$32, %rsp	 #,
	.seh_stackalloc	32
	.seh_endprologue
 # .\src\main.cpp:104:     for (int i = 0; i < (boid_map->m_xsize * boid_map->m_ysize) / NUM_THREADS + t * correction; i++) {
	movl	4(%r9), %eax	 # boid_map_12(D)->m_xsize, boid_map_12(D)->m_xsize
	imull	(%r9), %eax	 # boid_map_12(D)->m_ysize, tmp103
 # .\src\main.cpp:104:     for (int i = 0; i < (boid_map->m_xsize * boid_map->m_ysize) / NUM_THREADS + t * correction; i++) {
	cmpl	_ZL11num_threads(%rip), %eax	 # num_threads, tmp103
 # .\src\main.cpp:97: void block_writer(int thread_start_pos, const Boid* index_buffer, const BoidList *boid_list, const BoidMap *boid_map) {
	movl	%ecx, %edi	 # tmp111, thread_start_pos
	movq	%rdx, %rbp	 # tmp112, index_buffer
	movq	%r8, %r12	 # tmp113, boid_list
	movq	%r9, %rsi	 # tmp114, boid_map
 # .\src\main.cpp:104:     for (int i = 0; i < (boid_map->m_xsize * boid_map->m_ysize) / NUM_THREADS + t * correction; i++) {
	jb	.L659	 #,
 # .\src\main.cpp:104:     for (int i = 0; i < (boid_map->m_xsize * boid_map->m_ysize) / NUM_THREADS + t * correction; i++) {
	xorl	%ebx, %ebx	 # i
	.p2align 4,,10
	.p2align 3
.L657:
 # .\src\main.cpp:105:         write_map_to_list(thread_start_pos + i, index_buffer, boid_list, boid_map);
	leal	(%rbx,%rdi), %ecx	 #, tmp105
	movq	%rbp, %rdx	 # index_buffer,
	movq	%rsi, %r9	 # boid_map,
	movq	%r12, %r8	 # boid_list,
	call	_Z17write_map_to_listiPKiPK8BoidListPK7BoidMap	 #
 # .\src\main.cpp:104:     for (int i = 0; i < (boid_map->m_xsize * boid_map->m_ysize) / NUM_THREADS + t * correction; i++) {
	movl	4(%rsi), %eax	 # boid_map_12(D)->m_xsize, boid_map_12(D)->m_xsize
	imull	(%rsi), %eax	 # boid_map_12(D)->m_ysize, tmp106
 # .\src\main.cpp:104:     for (int i = 0; i < (boid_map->m_xsize * boid_map->m_ysize) / NUM_THREADS + t * correction; i++) {
	xorl	%edx, %edx	 # tmp110
 # .\src\main.cpp:104:     for (int i = 0; i < (boid_map->m_xsize * boid_map->m_ysize) / NUM_THREADS + t * correction; i++) {
	addl	$1, %ebx	 #, i
 # .\src\main.cpp:104:     for (int i = 0; i < (boid_map->m_xsize * boid_map->m_ysize) / NUM_THREADS + t * correction; i++) {
	divl	_ZL11num_threads(%rip)	 # num_threads
 # .\src\main.cpp:104:     for (int i = 0; i < (boid_map->m_xsize * boid_map->m_ysize) / NUM_THREADS + t * correction; i++) {
	cmpl	%eax, %ebx	 # tmp109, i
	jb	.L657	 #,
.L659:
 # .\src\main.cpp:107: }
	addq	$32, %rsp	 #,
	popq	%rbx	 #
	popq	%rsi	 #
	popq	%rdi	 #
	popq	%rbp	 #
	popq	%r12	 #
	ret	
	.seh_endproc
	.p2align 4
	.globl	_Z17write_row_to_listjPKiPK8BoidListPK7BoidMap
	.def	_Z17write_row_to_listjPKiPK8BoidListPK7BoidMap;	.scl	2;	.type	32;	.endef
	.seh_proc	_Z17write_row_to_listjPKiPK8BoidListPK7BoidMap
_Z17write_row_to_listjPKiPK8BoidListPK7BoidMap:
.LFB12581:
	pushq	%r12	 #
	.seh_pushreg	%r12
	pushq	%rbp	 #
	.seh_pushreg	%rbp
	pushq	%rdi	 #
	.seh_pushreg	%rdi
	pushq	%rsi	 #
	.seh_pushreg	%rsi
	pushq	%rbx	 #
	.seh_pushreg	%rbx
	subq	$32, %rsp	 #,
	.seh_stackalloc	32
	.seh_endprologue
 # .\src\main.cpp:115: void write_row_to_list(const uint32_t row, const Boid* index_buffer, const BoidList *boid_list, const BoidMap *boid_map) {
	movl	%ecx, %edi	 # tmp95, row
 # .\src\main.cpp:116:     for (int x = 0; x < boid_map->m_xsize; x++) {
	movl	4(%r9), %ecx	 # boid_map_10(D)->m_xsize, _6
 # .\src\main.cpp:115: void write_row_to_list(const uint32_t row, const Boid* index_buffer, const BoidList *boid_list, const BoidMap *boid_map) {
	movq	%rdx, %rbp	 # tmp96, index_buffer
	movq	%r8, %r12	 # tmp97, boid_list
	movq	%r9, %rsi	 # tmp98, boid_map
 # .\src\main.cpp:116:     for (int x = 0; x < boid_map->m_xsize; x++) {
	testl	%ecx, %ecx	 # _6
	jle	.L664	 #,
 # .\src\main.cpp:116:     for (int x = 0; x < boid_map->m_xsize; x++) {
	xorl	%ebx, %ebx	 # x
	.p2align 4,,10
	.p2align 3
.L662:
 # .\src\main.cpp:117:         write_map_to_list(boid_map->m_xsize * row + x, index_buffer, boid_list, boid_map); 
	imull	%edi, %ecx	 # row, tmp93
 # .\src\main.cpp:117:         write_map_to_list(boid_map->m_xsize * row + x, index_buffer, boid_list, boid_map); 
	movq	%rsi, %r9	 # boid_map,
	movq	%r12, %r8	 # boid_list,
	movq	%rbp, %rdx	 # index_buffer,
 # .\src\main.cpp:117:         write_map_to_list(boid_map->m_xsize * row + x, index_buffer, boid_list, boid_map); 
	addl	%ebx, %ecx	 # x, tmp94
 # .\src\main.cpp:116:     for (int x = 0; x < boid_map->m_xsize; x++) {
	addl	$1, %ebx	 #, x
 # .\src\main.cpp:117:         write_map_to_list(boid_map->m_xsize * row + x, index_buffer, boid_list, boid_map); 
	call	_Z17write_map_to_listiPKiPK8BoidListPK7BoidMap	 #
 # .\src\main.cpp:116:     for (int x = 0; x < boid_map->m_xsize; x++) {
	movl	4(%rsi), %ecx	 # boid_map_10(D)->m_xsize, _6
 # .\src\main.cpp:116:     for (int x = 0; x < boid_map->m_xsize; x++) {
	cmpl	%ebx, %ecx	 # x, _6
	jg	.L662	 #,
.L664:
 # .\src\main.cpp:119: }
	addq	$32, %rsp	 #,
	popq	%rbx	 #
	popq	%rsi	 #
	popq	%rdi	 #
	popq	%rbp	 #
	popq	%r12	 #
	ret	
	.seh_endproc
	.p2align 4
	.globl	_Z12rebuild_listR8BoidListRK7BoidMap
	.def	_Z12rebuild_listR8BoidListRK7BoidMap;	.scl	2;	.type	32;	.endef
	.seh_proc	_Z12rebuild_listR8BoidListRK7BoidMap
_Z12rebuild_listR8BoidListRK7BoidMap:
.LFB12582:
	pushq	%rbp	 #
	.seh_pushreg	%rbp
	pushq	%r15	 #
	.seh_pushreg	%r15
	pushq	%r14	 #
	.seh_pushreg	%r14
	pushq	%r13	 #
	.seh_pushreg	%r13
	pushq	%r12	 #
	.seh_pushreg	%r12
	pushq	%rdi	 #
	.seh_pushreg	%rdi
	pushq	%rsi	 #
	.seh_pushreg	%rsi
	pushq	%rbx	 #
	.seh_pushreg	%rbx
	subq	$104, %rsp	 #,
	.seh_stackalloc	104
	leaq	80(%rsp), %rbp	 #,
	.seh_setframe	%rbp, 80
	vmovups	%xmm6, 0(%rbp)	 #,
	.seh_savexmm	%xmm6, 80
	.seh_endprologue
 # .\src\main.cpp:122: void rebuild_list(BoidList& boid_list, const BoidMap& boid_map) {
	movq	%rdx, %r13	 # tmp178, boid_map
	movq	%rcx, %r12	 # tmp177, boid_list
 # .\src\main.cpp:123:     auto t_start = std::chrono::high_resolution_clock::now();
	call	_ZNSt6chrono3_V212system_clock3nowEv	 #
 # .\src\main.cpp:174:     Boid *index_buffer = (Boid *) malloc(boid_map.m_xsize * boid_map.m_ysize * sizeof(Boid)); //Weirdly this seems to be the fastest of the following options
	movl	4(%r13), %esi	 # boid_map_57(D)->m_xsize, boid_map_57(D)->m_xsize
 # .\src\main.cpp:125:     BoidStore *main_buffer = boid_list.m_boid_store;
	movq	(%r12), %rax	 # boid_list_54(D)->m_boid_store, main_buffer
 # .\src\main.cpp:174:     Boid *index_buffer = (Boid *) malloc(boid_map.m_xsize * boid_map.m_ysize * sizeof(Boid)); //Weirdly this seems to be the fastest of the following options
	imull	0(%r13), %esi	 # boid_map_57(D)->m_ysize, _3
 # .\src\main.cpp:126:     BoidStore *back_buffer = boid_list.m_backbuffer;
	vmovq	8(%r12), %xmm6	 # boid_list_54(D)->m_backbuffer, back_buffer
 # .\src\main.cpp:125:     BoidStore *main_buffer = boid_list.m_boid_store;
	movq	%rax, -40(%rbp)	 # main_buffer, %sfp
 # .\src\main.cpp:174:     Boid *index_buffer = (Boid *) malloc(boid_map.m_xsize * boid_map.m_ysize * sizeof(Boid)); //Weirdly this seems to be the fastest of the following options
	movslq	%esi, %rbx	 # _3, _3
 # .\src\main.cpp:174:     Boid *index_buffer = (Boid *) malloc(boid_map.m_xsize * boid_map.m_ysize * sizeof(Boid)); //Weirdly this seems to be the fastest of the following options
	salq	$2, %rbx	 #, _5
	movq	%rbx, %rcx	 # _5,
	call	malloc	 #
	movq	%rax, %rdi	 # tmp179, index_buffer
 # .\src\main.cpp:179:     for (int i = 0; i < boid_map.m_xsize * boid_map.m_ysize; i++) {
	testl	%esi, %esi	 # _3
	jle	.L670	 #,
 # .\src\main.cpp:182:         counter += (current != -1) * main_buffer->depth[current];   
	movq	-40(%rbp), %rax	 # %sfp, main_buffer
 # .\src\main.cpp:180:         Boid current = boid_map.m_boid_map[i];
	movq	16(%r13), %r11	 # boid_map_57(D)->m_boid_map, _6
 # .\src\main.cpp:178:     int counter = 0;
	xorl	%edx, %edx	 # counter
 # .\src\main.cpp:182:         counter += (current != -1) * main_buffer->depth[current];   
	xorl	%r9d, %r9d	 # tmp153
 # .\src\main.cpp:182:         counter += (current != -1) * main_buffer->depth[current];   
	movq	48(%rax), %r10	 # main_buffer_55->depth, _13
	xorl	%eax, %eax	 # ivtmp.1943
	.p2align 4,,10
	.p2align 3
.L669:
 # .\src\main.cpp:180:         Boid current = boid_map.m_boid_map[i];
	movslq	(%r11,%rax), %r8	 # MEM[(Boid *)_6 + ivtmp.1943_46 * 1],
 # .\src\main.cpp:182:         counter += (current != -1) * main_buffer->depth[current];   
	movl	%r9d, %ecx	 # tmp153, tmp151
 # .\src\main.cpp:181:         index_buffer[i] = counter;
	movl	%edx, (%rdi,%rax)	 # counter, MEM[(Boid *)index_buffer_59 + ivtmp.1943_46 * 1]
 # .\src\main.cpp:182:         counter += (current != -1) * main_buffer->depth[current];   
	cmpl	$-1, %r8d	 #, current
	cmovne	(%r10,%r8,4), %ecx	 # *_16,, tmp151
 # .\src\main.cpp:179:     for (int i = 0; i < boid_map.m_xsize * boid_map.m_ysize; i++) {
	addq	$4, %rax	 #, ivtmp.1943
 # .\src\main.cpp:182:         counter += (current != -1) * main_buffer->depth[current];   
	addl	%ecx, %edx	 # tmp151, counter
 # .\src\main.cpp:179:     for (int i = 0; i < boid_map.m_xsize * boid_map.m_ysize; i++) {
	cmpq	%rax, %rbx	 # ivtmp.1943, _5
	jne	.L669	 #,
.L670:
 # .\src\main.cpp:185:     auto t_mid = std::chrono::high_resolution_clock::now();
	call	_ZNSt6chrono3_V212system_clock3nowEv	 #
 # .\src\main.cpp:190:     std::thread threads[NUM_THREADS];
	movl	_ZL11num_threads(%rip), %eax	 # num_threads,
	movq	%rax, %rdx	 #,
 # .\src\main.cpp:190:     std::thread threads[NUM_THREADS];
	salq	$3, %rax	 #, _22
	movq	%rax, -32(%rbp)	 # _22, %sfp
	addq	$15, %rax	 #, tmp143
	shrq	$4, %rax	 #, tmp144
	salq	$4, %rax	 #, tmp145
	call	___chkstk_ms
	subq	%rax, %rsp	 # tmp147,
	leaq	32(%rsp), %rsi	 #, tmp150
 # .\src\main.cpp:190:     std::thread threads[NUM_THREADS];
	testl	%edx, %edx	 # num_threads.10_61
	je	.L668	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_thread.h:97:       id() noexcept : _M_thread() { }
	movq	-32(%rbp), %r8	 # %sfp,
	xorl	%edx, %edx	 #
	movq	%rsi, %rcx	 # tmp150,
	xorl	%ebx, %ebx	 # ivtmp.1933
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_thread.h:240: 	  : _M_func(std::forward<_Args>(__args)...)
	leaq	16+_ZTVNSt6thread11_State_implINS_8_InvokerISt5tupleIJPFviPKiPK8BoidListPK7BoidMapEiPiPS5_SA_EEEEEE(%rip), %r14	 #, tmp174
 # C:/msys64/ucrt64/include/c++/13.1.0/tuple:194:       : _M_head_impl(__h) { }
	leaq	_Z11jump_writeriPKiPK8BoidListPK7BoidMap(%rip), %r15	 #, tmp175
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_thread.h:97:       id() noexcept : _M_thread() { }
	call	memset	 #
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_thread.h:164: 	_M_start_thread(_State_ptr(new _State_impl<_Wrapper>(
	leaq	_ZNSt6thread24_M_thread_deps_never_runEv(%rip), %rax	 #, tmp176
	movq	%rax, -24(%rbp)	 # tmp176, %sfp
	.p2align 4,,10
	.p2align 3
.L677:
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_thread.h:164: 	_M_start_thread(_State_ptr(new _State_impl<_Wrapper>(
	movl	$48, %ecx	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_thread.h:97:       id() noexcept : _M_thread() { }
	movq	$0, -16(%rbp)	 #, MEM[(struct id *)&D.167436]._M_thread
.LEHB42:
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_thread.h:164: 	_M_start_thread(_State_ptr(new _State_impl<_Wrapper>(
	call	_Znwy	 #
.LEHE42:
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_thread.h:240: 	  : _M_func(std::forward<_Args>(__args)...)
	movq	%r14, (%rax)	 # tmp174, MEM[(struct _State_impl *)_111].D.186063._vptr._State
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_thread.h:164: 	_M_start_thread(_State_ptr(new _State_impl<_Wrapper>(
	movq	-24(%rbp), %r8	 # %sfp,
	leaq	-8(%rbp), %rdx	 #, tmp161
	leaq	-16(%rbp), %rcx	 #, tmp162
 # C:/msys64/ucrt64/include/c++/13.1.0/tuple:201: 	: _M_head_impl(std::forward<_UHead>(__h)) { }
	movq	%r13, 8(%rax)	 # boid_map, MEM[(struct _Head_base *)_111 + 8B]._M_head_impl
	movq	%r12, 16(%rax)	 # boid_list, MEM[(struct _Head_base *)_111 + 16B]._M_head_impl
	movq	%rdi, 24(%rax)	 # index_buffer, MEM[(struct _Head_base *)_111 + 24B]._M_head_impl
	movl	%ebx, 32(%rax)	 # ivtmp.1933, MEM[(struct _Head_base *)_111 + 32B]._M_head_impl
 # C:/msys64/ucrt64/include/c++/13.1.0/tuple:194:       : _M_head_impl(__h) { }
	movq	%r15, 40(%rax)	 # tmp175, MEM[(struct _Head_base *)_111 + 40B]._M_head_impl
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/unique_ptr.h:176:       __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
	movq	%rax, -8(%rbp)	 # tmp158, MEM[(struct _State * &)&D.232848]
.LEHB43:
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_thread.h:164: 	_M_start_thread(_State_ptr(new _State_impl<_Wrapper>(
	call	_ZNSt6thread15_M_start_threadESt10unique_ptrINS_6_StateESt14default_deleteIS1_EEPFvvE	 #
.LEHE43:
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/unique_ptr.h:403: 	if (__ptr != nullptr)
	movq	-8(%rbp), %rcx	 # MEM[(struct _State * &)&D.232848], _116
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/unique_ptr.h:403: 	if (__ptr != nullptr)
	testq	%rcx, %rcx	 # _116
	je	.L671	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/unique_ptr.h:99: 	delete __ptr;
	movq	(%rcx), %rax	 # _116->_vptr._State, _116->_vptr._State
	call	*8(%rax)	 # MEM[(int (*) () *)_117 + 8B]
.L671:
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_thread.h:185:       if (joinable())
	cmpq	$0, (%rsi,%rbx,8)	 #, MEM[(const struct thread *)threads.11_63 + ivtmp.1933_94 * 8]
	jne	.L672	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/move.h:205:       __a = _GLIBCXX_MOVE(__b);
	movq	-16(%rbp), %rax	 # MEM[(struct id &)&D.167436], MEM[(struct id &)&D.167436]
	movq	%rax, (%rsi,%rbx,8)	 # MEM[(struct id &)&D.167436], MEM[(struct id *)threads.11_63 + ivtmp.1933_94 * 8]
 # .\src\main.cpp:192:     for (int i = 0; i < NUM_THREADS; i++) {
	movl	_ZL11num_threads(%rip), %eax	 # num_threads, num_threads.17_32
 # .\src\main.cpp:192:     for (int i = 0; i < NUM_THREADS; i++) {
	addq	$1, %rbx	 #, ivtmp.1933
	cmpl	%eax, %ebx	 # num_threads.17_32, ivtmp.1933
	jb	.L677	 #,
 # .\src\main.cpp:201:     for (int i = 0; i < NUM_THREADS; i++) {
	testl	%eax, %eax	 # num_threads.17_32
	je	.L668	 #,
	movq	%rsi, %r13	 # tmp150, ivtmp.1931
 # .\src\main.cpp:201:     for (int i = 0; i < NUM_THREADS; i++) {
	xorl	%ebx, %ebx	 # i
	.p2align 4,,10
	.p2align 3
.L678:
 # .\src\main.cpp:202:         threads[i].join();
	movq	%r13, %rcx	 # ivtmp.1931,
.LEHB44:
	call	_ZNSt6thread4joinEv	 #
.LEHE44:
 # .\src\main.cpp:201:     for (int i = 0; i < NUM_THREADS; i++) {
	addl	$1, %ebx	 #, i
 # .\src\main.cpp:201:     for (int i = 0; i < NUM_THREADS; i++) {
	addq	$8, %r13	 #, ivtmp.1931
	cmpl	_ZL11num_threads(%rip), %ebx	 # num_threads, i
	jb	.L678	 #,
.L668:
 # .\src\main.cpp:206:     free(index_buffer);
	movq	%rdi, %rcx	 # index_buffer,
	call	free	 #
 # .\src\main.cpp:208:     boid_list.m_boid_store = back_buffer;
	vpinsrq	$1, -40(%rbp), %xmm6, %xmm0	 # %sfp, back_buffer, tmp173
	vmovdqu	%xmm0, (%r12)	 # tmp173, MEM <vector(2) long long unsigned int> [(struct BoidStore * *)boid_list_54(D)]
 # .\src\main.cpp:211:     auto t_end = std::chrono::high_resolution_clock::now();
	call	_ZNSt6chrono3_V212system_clock3nowEv	 #
 # .\src\main.cpp:190:     std::thread threads[NUM_THREADS];
	movq	-32(%rbp), %rax	 # %sfp, _22
	addq	%rsi, %rax	 # tmp150, _22
	jmp	.L701	 #
	.p2align 4,,10
	.p2align 3
.L680:
	subq	$8, %rax	 #, _71
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_thread.h:172:       if (joinable())
	cmpq	$0, (%rax)	 #, MEM[(long long unsigned int *)_71]
	jne	.L672	 #,
.L701:
 # .\src\main.cpp:212: }
	cmpq	%rax, %rsi	 # _71, tmp150
	jne	.L680	 #,
	vmovups	0(%rbp), %xmm6	 #,
	leaq	24(%rbp), %rsp	 #,
	popq	%rbx	 #
	popq	%rsi	 #
	popq	%rdi	 #
	popq	%r12	 #
	popq	%r13	 #
	popq	%r14	 #
	popq	%r15	 #
	popq	%rbp	 #
	ret	
.L683:
 # .\src\main.cpp:190:     std::thread threads[NUM_THREADS];
	movq	%rax, %rcx	 # tmp182, tmp168
	vzeroupper
.L676:
	movq	-32(%rbp), %rax	 # %sfp, _22
	addq	%rsi, %rax	 # tmp150, _22
.L682:
 # .\src\main.cpp:212: }
	cmpq	%rsi, %rax	 # tmp150, _41
	je	.L681	 #,
 # .\src\main.cpp:190:     std::thread threads[NUM_THREADS];
	subq	$8, %rax	 #, _41
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_thread.h:172:       if (joinable())
	cmpq	$0, (%rax)	 #, MEM[(long long unsigned int *)_92]
	je	.L682	 #,
.L672:
 # C:/msys64/ucrt64/include/c++/13.1.0/x86_64-w64-mingw32/bits/c++config.h:322:     terminate();
	call	_ZSt9terminatev	 #
.L684:
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/unique_ptr.h:403: 	if (__ptr != nullptr)
	movq	-8(%rbp), %rcx	 # MEM[(struct _State * &)&D.232848], _119
	movq	%rax, %rbx	 # tmp181, tmp169
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/unique_ptr.h:403: 	if (__ptr != nullptr)
	testq	%rcx, %rcx	 # _119
	jne	.L702	 #,
	vzeroupper
.L675:
	movq	%rbx, %rcx	 # tmp169, tmp168
	jmp	.L676	 #
.L702:
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/unique_ptr.h:99: 	delete __ptr;
	movq	(%rcx), %rax	 # _119->_vptr._State, _119->_vptr._State
	vzeroupper
	call	*8(%rax)	 # MEM[(int (*) () *)_120 + 8B]
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/unique_ptr.h:100:       }
	jmp	.L675	 #
.L681:
.LEHB45:
	call	_Unwind_Resume	 #
	nop	
.LEHE45:
	.seh_handler	__gxx_personality_seh0, @unwind, @except
	.seh_handlerdata
.LLSDA12582:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE12582-.LLSDACSB12582
.LLSDACSB12582:
	.uleb128 .LEHB42-.LFB12582
	.uleb128 .LEHE42-.LEHB42
	.uleb128 .L683-.LFB12582
	.uleb128 0
	.uleb128 .LEHB43-.LFB12582
	.uleb128 .LEHE43-.LEHB43
	.uleb128 .L684-.LFB12582
	.uleb128 0
	.uleb128 .LEHB44-.LFB12582
	.uleb128 .LEHE44-.LEHB44
	.uleb128 .L683-.LFB12582
	.uleb128 0
	.uleb128 .LEHB45-.LFB12582
	.uleb128 .LEHE45-.LEHB45
	.uleb128 0
	.uleb128 0
.LLSDACSE12582:
	.text
	.seh_endproc
	.p2align 4
	.globl	_Z10populate_njjPK8BoidListPK7BoidMap
	.def	_Z10populate_njjPK8BoidListPK7BoidMap;	.scl	2;	.type	32;	.endef
	.seh_proc	_Z10populate_njjPK8BoidListPK7BoidMap
_Z10populate_njjPK8BoidListPK7BoidMap:
.LFB12588:
	pushq	%r12	 #
	.seh_pushreg	%r12
	pushq	%rbp	 #
	.seh_pushreg	%rbp
	pushq	%rdi	 #
	.seh_pushreg	%rdi
	pushq	%rsi	 #
	.seh_pushreg	%rsi
	pushq	%rbx	 #
	.seh_pushreg	%rbx
	subq	$32, %rsp	 #,
	.seh_stackalloc	32
	.seh_endprologue
 # .\src\main.cpp:242:     for (uint32_t i = start; i < start + task_size; i++) {
	leal	(%rcx,%rdx), %esi	 #, _57
 # .\src\main.cpp:241: void populate_n(uint32_t start, uint32_t task_size, const BoidList *boid_list, const BoidMap *boid_map) {
	movl	%ecx, %ebx	 # tmp149, start
	movq	%r8, %rbp	 # tmp151, boid_list
	movq	%r9, %r12	 # tmp152, boid_map
 # .\src\main.cpp:242:     for (uint32_t i = start; i < start + task_size; i++) {
	cmpl	%esi, %ecx	 # _57, start
	jnb	.L711	 #,
	.p2align 4,,10
	.p2align 3
.L704:
 # .\src\main.cpp:215:     Boid map_pos = map.get_map_pos_nearest(boid_list.m_boid_store->xs[boid_to_place], boid_list.m_boid_store->ys[boid_to_place]);
	movq	0(%rbp), %rax	 # boid_list_9(D)->m_boid_store, _12
 # .\src\main.cpp:215:     Boid map_pos = map.get_map_pos_nearest(boid_list.m_boid_store->xs[boid_to_place], boid_list.m_boid_store->ys[boid_to_place]);
	movslq	%ebx, %rdi	 # start, i.38_1
 # .\src\main.cpp:215:     Boid map_pos = map.get_map_pos_nearest(boid_list.m_boid_store->xs[boid_to_place], boid_list.m_boid_store->ys[boid_to_place]);
	movq	8(%rax), %rcx	 # _12->ys, _12->ys
 # .\src\main.cpp:215:     Boid map_pos = map.get_map_pos_nearest(boid_list.m_boid_store->xs[boid_to_place], boid_list.m_boid_store->ys[boid_to_place]);
	movq	(%rax), %rax	 # _12->xs, _12->xs
 # .\src\main.cpp:215:     Boid map_pos = map.get_map_pos_nearest(boid_list.m_boid_store->xs[boid_to_place], boid_list.m_boid_store->ys[boid_to_place]);
	vcvttss2sil	(%rcx,%rdi,4), %r8d	 # *_16,
	movq	%r12, %rcx	 # boid_map,
	vcvttss2sil	(%rax,%rdi,4), %edx	 # *_20, tmp133
	call	_ZNK7BoidMap19get_map_pos_nearestEii	 #
 # .\src\main.cpp:219:     map.safety[map_pos].lock();
	movq	32(%r12), %rdx	 # boid_map_8(D)->safety, _27
 # .\src\main.cpp:219:     map.safety[map_pos].lock();
	cltq
 # .\src\main.cpp:219:     map.safety[map_pos].lock();
	salq	$2, %rax	 #, _26
 # .\src\main.cpp:219:     map.safety[map_pos].lock();
	addq	%rax, %rdx	 # _26, _27
	.p2align 4,,10
	.p2align 3
.L705:
 # C:/msys64/ucrt64/include/psdk_inc/intrin-impl.h:1800: __buildbittesti(_interlockedbittestandset, __LONG32, "lock bts{l %[Offset],%[Base] | %[Base],%[Offset]}" __FLAGSET, "I")
/APP
 # 1800 "C:/msys64/ucrt64/include/psdk_inc/intrin-impl.h" 1
	lock btsl $0,(%rdx) 	 #, MEM[(volatile long int *)_28]
 # 0 "" 2
 # .\src\.\task_master\lock.h:40:         while (_interlockedbittestandset(&lock_internal, 0)) {}
/NO_APP
	jc	.L705	 #,
 # .\src\main.cpp:220:         Boid old_head = map.m_boid_map[map_pos];
	movq	16(%r12), %rcx	 # boid_map_8(D)->m_boid_map, _31
	addq	%rax, %rcx	 # _26, _31
 # .\src\main.cpp:220:         Boid old_head = map.m_boid_map[map_pos];
	movslq	(%rcx), %rdx	 # *_31,
 # .\src\main.cpp:221:         map.m_boid_map[map_pos] = boid_to_place;
	movl	%ebx, (%rcx)	 # start, *_31
 # .\src\main.cpp:222:         boid_list.m_boid_store->index_next[boid_to_place] = old_head;
	movq	0(%rbp), %rcx	 # boid_list_9(D)->m_boid_store, _33
 # .\src\main.cpp:222:         boid_list.m_boid_store->index_next[boid_to_place] = old_head;
	movq	32(%rcx), %r8	 # _33->index_next, _33->index_next
 # .\src\main.cpp:223:         boid_list.m_boid_store->depth[boid_to_place] = (old_head != -1) ? boid_list.m_boid_store->depth[old_head] + 1 : 1;
	movq	48(%rcx), %rcx	 # _33->depth, pretmp_79
 # .\src\main.cpp:222:         boid_list.m_boid_store->index_next[boid_to_place] = old_head;
	movl	%edx, (%r8,%rdi,4)	 # old_head, *_35
 # .\src\main.cpp:223:         boid_list.m_boid_store->depth[boid_to_place] = (old_head != -1) ? boid_list.m_boid_store->depth[old_head] + 1 : 1;
	cmpl	$-1, %edx	 #, old_head
	je	.L706	 #,
 # .\src\main.cpp:223:         boid_list.m_boid_store->depth[boid_to_place] = (old_head != -1) ? boid_list.m_boid_store->depth[old_head] + 1 : 1;
	movl	(%rcx,%rdx,4), %edx	 # *_39, *_39
 # .\src\main.cpp:224:     map.safety[map_pos].unlock();
	addq	32(%r12), %rax	 # boid_map_8(D)->safety, _72
 # .\src\main.cpp:223:         boid_list.m_boid_store->depth[boid_to_place] = (old_head != -1) ? boid_list.m_boid_store->depth[old_head] + 1 : 1;
	addl	$1, %edx	 #, tmp143
 # .\src\main.cpp:223:         boid_list.m_boid_store->depth[boid_to_place] = (old_head != -1) ? boid_list.m_boid_store->depth[old_head] + 1 : 1;
	movl	%edx, (%rcx,%rdi,4)	 # tmp143, *_60
 # C:/msys64/ucrt64/include/psdk_inc/intrin-impl.h:1809: __buildbittesti(_interlockedbittestandreset, __LONG32, "lock btr{l %[Offset],%[Base] | %[Base],%[Offset]}" __FLAGSET, "I")
/APP
 # 1809 "C:/msys64/ucrt64/include/psdk_inc/intrin-impl.h" 1
	lock btrl $0,(%rax) 	 #, MEM[(volatile long int *)_72]
 # 0 "" 2
 # .\src\main.cpp:242:     for (uint32_t i = start; i < start + task_size; i++) {
/NO_APP
	addl	$1, %ebx	 #, start
 # .\src\main.cpp:242:     for (uint32_t i = start; i < start + task_size; i++) {
	cmpl	%ebx, %esi	 # start, _57
	jne	.L704	 #,
.L711:
 # .\src\main.cpp:245: }
	addq	$32, %rsp	 #,
	popq	%rbx	 #
	popq	%rsi	 #
	popq	%rdi	 #
	popq	%rbp	 #
	popq	%r12	 #
	ret	
	.p2align 4,,10
	.p2align 3
.L706:
 # .\src\main.cpp:223:         boid_list.m_boid_store->depth[boid_to_place] = (old_head != -1) ? boid_list.m_boid_store->depth[old_head] + 1 : 1;
	movl	$1, (%rcx,%rdi,4)	 #, *_43
 # .\src\main.cpp:224:     map.safety[map_pos].unlock();
	addq	32(%r12), %rax	 # boid_map_8(D)->safety, _47
 # C:/msys64/ucrt64/include/psdk_inc/intrin-impl.h:1809: __buildbittesti(_interlockedbittestandreset, __LONG32, "lock btr{l %[Offset],%[Base] | %[Base],%[Offset]}" __FLAGSET, "I")
/APP
 # 1809 "C:/msys64/ucrt64/include/psdk_inc/intrin-impl.h" 1
	lock btrl $0,(%rax) 	 #, MEM[(volatile long int *)_47]
 # 0 "" 2
 # .\src\main.cpp:242:     for (uint32_t i = start; i < start + task_size; i++) {
/NO_APP
	addl	$1, %ebx	 #, start
 # .\src\main.cpp:242:     for (uint32_t i = start; i < start + task_size; i++) {
	cmpl	%esi, %ebx	 # _57, start
	jne	.L704	 #,
 # .\src\main.cpp:245: }
	addq	$32, %rsp	 #,
	popq	%rbx	 #
	popq	%rsi	 #
	popq	%rdi	 #
	popq	%rbp	 #
	popq	%r12	 #
	ret	
	.seh_endproc
	.p2align 4
	.globl	_Z13populate_map2RK8BoidListRK7BoidMapP10TaskMasterP8TaskSyncP13populate_argsj
	.def	_Z13populate_map2RK8BoidListRK7BoidMapP10TaskMasterP8TaskSyncP13populate_argsj;	.scl	2;	.type	32;	.endef
	.seh_proc	_Z13populate_map2RK8BoidListRK7BoidMapP10TaskMasterP8TaskSyncP13populate_argsj
_Z13populate_map2RK8BoidListRK7BoidMapP10TaskMasterP8TaskSyncP13populate_argsj:
.LFB12600:
	pushq	%rdi	 #
	.seh_pushreg	%rdi
	pushq	%rsi	 #
	.seh_pushreg	%rsi
	pushq	%rbx	 #
	.seh_pushreg	%rbx
	subq	$32, %rsp	 #,
	.seh_stackalloc	32
	.seh_endprologue
 # .\src\main.cpp:292:     memset(boid_map.m_boid_map, -1, sizeof(Boid) * boid_map.m_xsize * boid_map.m_ysize);
	movslq	(%rdx), %rcx	 # boid_map_23(D)->m_ysize, boid_map_23(D)->m_ysize
 # .\src\main.cpp:292:     memset(boid_map.m_boid_map, -1, sizeof(Boid) * boid_map.m_xsize * boid_map.m_ysize);
	movslq	4(%rdx), %rax	 # boid_map_23(D)->m_xsize, boid_map_23(D)->m_xsize
 # .\src\main.cpp:291: void populate_map2(const BoidList& boid_list, const BoidMap& boid_map, TaskMaster *task_master, TaskSync *task_monitor, populate_args* arg_list, uint32_t num_tasks) {
	movl	104(%rsp), %esi	 # num_tasks, num_tasks
 # .\src\main.cpp:292:     memset(boid_map.m_boid_map, -1, sizeof(Boid) * boid_map.m_xsize * boid_map.m_ysize);
	imulq	%rcx, %rax	 # boid_map_23(D)->m_ysize, tmp130
 # .\src\main.cpp:292:     memset(boid_map.m_boid_map, -1, sizeof(Boid) * boid_map.m_xsize * boid_map.m_ysize);
	movq	16(%rdx), %rcx	 # boid_map_23(D)->m_boid_map, boid_map_23(D)->m_boid_map
	movl	$-1, %edx	 #,
 # .\src\main.cpp:291: void populate_map2(const BoidList& boid_list, const BoidMap& boid_map, TaskMaster *task_master, TaskSync *task_monitor, populate_args* arg_list, uint32_t num_tasks) {
	movq	%r8, %rdi	 # tmp146, task_master
	movq	%r9, %rbx	 # tmp147, task_monitor
 # .\src\main.cpp:292:     memset(boid_map.m_boid_map, -1, sizeof(Boid) * boid_map.m_xsize * boid_map.m_ysize);
	leaq	0(,%rax,4), %r8	 #,
	call	memset	 #
	leaq	66144(%rdi), %rax	 #, _36
	.p2align 4,,10
	.p2align 3
.L713:
 # C:/msys64/ucrt64/include/psdk_inc/intrin-impl.h:1800: __buildbittesti(_interlockedbittestandset, __LONG32, "lock bts{l %[Offset],%[Base] | %[Base],%[Offset]}" __FLAGSET, "I")
/APP
 # 1800 "C:/msys64/ucrt64/include/psdk_inc/intrin-impl.h" 1
	lock btsl $0,(%rax) 	 #, MEM[(volatile long int *)_36]
 # 0 "" 2
 # .\src\.\task_master\lock.h:40:         while (_interlockedbittestandset(&lock_internal, 0)) {}
/NO_APP
	jc	.L713	 #,
 # .\src\main.cpp:299:     for (int y = 0; y < num_tasks; y++) {
	testl	%esi, %esi	 # num_tasks
	je	.L717	 #,
 # .\src\.\task_master\ringbuffer.h:18:         size_t next = (head + 1) % capacity;
	movq	65552(%rdi), %rax	 # MEM[(struct RingBuffer *)task_master_25(D) + 16B].head, pretmp_68
	movq	96(%rsp), %rcx	 # arg_list, ivtmp.1959
	leal	-1(%rsi), %edx	 #, tmp135
	leaq	(%rdx,%rdx,2), %rdx	 #, tmp138
 # .\src\.\task_master\ringbuffer.h:19:         if (next != tail)
	movq	65560(%rdi), %r9	 # MEM[(struct RingBuffer *)task_master_25(D) + 16B].tail, _41
	leaq	(%rcx,%rdx,8), %r8	 #, _66
 # .\src\.\task_master\ringbuffer.h:18:         size_t next = (head + 1) % capacity;
	leaq	1(%rax), %rdx	 #, tmp140
 # .\src\.\task_master\ringbuffer.h:18:         size_t next = (head + 1) % capacity;
	andl	$2047, %edx	 #, next
 # .\src\.\task_master\ringbuffer.h:19:         if (next != tail)
	cmpq	%r9, %rdx	 # _41, next
	je	.L717	 #,
.L726:
	salq	$5, %rax	 #, _56
 # .\src\.\task_master\ringbuffer.h:21:             data[head] = item;
	movl	$0, 16(%rdi,%rax)	 #, MEM <unsigned int> [(struct Task *)_18]
	addq	%rdi, %rax	 # task_master, _64
	movq	%rcx, 24(%rax)	 # ivtmp.1959, MEM <void *> [(struct RingBuffer *)_64 + 24B]
	movq	%rbx, 32(%rax)	 # task_monitor, MEM <struct TaskSync *> [(struct RingBuffer *)_64 + 32B]
	movq	$0, 40(%rax)	 #, MEM <void *> [(struct RingBuffer *)_64 + 40B]
 # .\src\.\task_master\ringbuffer.h:22:             head = next;
	movq	%rdx, 65552(%rdi)	 # next, MEM[(struct RingBuffer *)task_master_25(D) + 16B].head
 # .\src\main.cpp:299:     for (int y = 0; y < num_tasks; y++) {
	cmpq	%r8, %rcx	 # _66, ivtmp.1959
	je	.L717	 #,
	movq	%rdx, %rax	 # next, pretmp_68
	addq	$24, %rcx	 #, ivtmp.1959
 # .\src\.\task_master\ringbuffer.h:18:         size_t next = (head + 1) % capacity;
	leaq	1(%rax), %rdx	 #, tmp140
 # .\src\.\task_master\ringbuffer.h:18:         size_t next = (head + 1) % capacity;
	andl	$2047, %edx	 #, next
 # .\src\.\task_master\ringbuffer.h:19:         if (next != tail)
	cmpq	%r9, %rdx	 # _41, next
	jne	.L726	 #,
	.p2align 4,,10
	.p2align 3
.L717:
 # C:/msys64/ucrt64/include/psdk_inc/intrin-impl.h:1800: __buildbittesti(_interlockedbittestandset, __LONG32, "lock bts{l %[Offset],%[Base] | %[Base],%[Offset]}" __FLAGSET, "I")
/APP
 # 1800 "C:/msys64/ucrt64/include/psdk_inc/intrin-impl.h" 1
	lock btsl $0,(%rbx) 	 #, MEM[(volatile long int *)_45]
 # 0 "" 2
 # .\src\.\task_master\lock.h:40:         while (_interlockedbittestandset(&lock_internal, 0)) {}
/NO_APP
	jc	.L717	 #,
 # .\src\main.cpp:312:     task_monitor->task_counter += tasks_added;
	movl	4(%rbx), %eax	 # task_monitor_28(D)->task_counter, _13
 # .\src\main.cpp:312:     task_monitor->task_counter += tasks_added;
	addl	%esi, %eax	 # num_tasks, _16
	movl	%eax, 4(%rbx)	 # _16, task_monitor_28(D)->task_counter
 # C:/msys64/ucrt64/include/psdk_inc/intrin-impl.h:1809: __buildbittesti(_interlockedbittestandreset, __LONG32, "lock btr{l %[Offset],%[Base] | %[Base],%[Offset]}" __FLAGSET, "I")
/APP
 # 1809 "C:/msys64/ucrt64/include/psdk_inc/intrin-impl.h" 1
	lock btrl $0,(%rbx) 	 #, MEM[(volatile long int *)_45]
 # 0 "" 2
 # 1809 "C:/msys64/ucrt64/include/psdk_inc/intrin-impl.h" 1
	lock btrl $0,66144(%rdi) 	 #, MEM[(volatile long int *)_36]
 # 0 "" 2
 # .\src\main.cpp:317: }
/NO_APP
	addq	$32, %rsp	 #,
	popq	%rbx	 #
	popq	%rsi	 #
	popq	%rdi	 #
	ret	
	.seh_endproc
	.section .rdata,"dr"
.LC18:
	.ascii "Begin matrix\0"
.LC19:
	.ascii "%f, %f, %f, %f\0"
.LC20:
	.ascii "End matrix\0"
	.text
	.p2align 4
	.globl	_Z12debug_matrix6Matrix
	.def	_Z12debug_matrix6Matrix;	.scl	2;	.type	32;	.endef
	.seh_proc	_Z12debug_matrix6Matrix
_Z12debug_matrix6Matrix:
.LFB12607:
	pushq	%rdi	 #
	.seh_pushreg	%rdi
	pushq	%rsi	 #
	.seh_pushreg	%rsi
	pushq	%rbx	 #
	.seh_pushreg	%rbx
	addq	$-128, %rsp	 #,
	.seh_stackalloc	128
	vmovups	%xmm6, 112(%rsp)	 #,
	.seh_savexmm	%xmm6, 112
	.seh_endprologue
 # include/raymath.h:1674:     result.v[0] = mat.m0;
	vmovdqu	.LC17(%rip), %ymm2	 #, tmp105
	vxorps	%xmm6, %xmm6, %xmm6	 # tmp139
	leaq	.LC19(%rip), %rsi	 #, tmp134
	vmovups	32(%rcx), %ymm3	 # MEM <vector(8) float> [(float *)&matrix + 32B], MEM <vector(8) float> [(float *)&matrix + 32B]
	vmovups	(%rcx), %ymm0	 # MEM <vector(8) float> [(float *)&matrix], MEM <vector(8) float> [(float *)&matrix]
 # .\src\main.cpp:836:     DEBUG("Begin matrix")
	leaq	.LC18(%rip), %rcx	 #, tmp111
 # include/raymath.h:1674:     result.v[0] = mat.m0;
	vunpcklps	%ymm3, %ymm0, %ymm1	 # MEM <vector(8) float> [(float *)&matrix + 32B], MEM <vector(8) float> [(float *)&matrix], tmp104
	vunpckhps	%ymm3, %ymm0, %ymm0	 # MEM <vector(8) float> [(float *)&matrix + 32B], MEM <vector(8) float> [(float *)&matrix], tmp108
	vpermd	%ymm1, %ymm2, %ymm1	 # tmp104, tmp105, tmp106
	vpermd	%ymm0, %ymm2, %ymm0	 # tmp108, tmp105, tmp110
	vmovups	%ymm1, 48(%rsp)	 # tmp106, MEM <vector(8) float> [(float *)&matrix2]
	leaq	48(%rsp), %rbx	 #, ivtmp.1978
	leaq	64(%rsp), %rdi	 #, _38
	vmovups	%ymm0, 80(%rsp)	 # tmp110, MEM <vector(8) float> [(float *)&matrix2 + 32B]
 # .\src\main.cpp:836:     DEBUG("Begin matrix")
	vzeroupper
	call	TextFormat	 #
 # .\src\main.cpp:836:     DEBUG("Begin matrix")
	movl	$2, %ecx	 #,
 # .\src\main.cpp:836:     DEBUG("Begin matrix")
	movq	%rax, %rdx	 # tmp136, _20
 # .\src\main.cpp:836:     DEBUG("Begin matrix")
	call	TraceLog	 #
.L728:
 # .\src\main.cpp:838:         DEBUG("%f, %f, %f, %f", matrix2.v[i],matrix2.v[i+4],matrix2.v[i+8],matrix2.v[i+12]);
	vcvtss2sd	(%rbx), %xmm6, %xmm0	 # MEM[(float *)_40], tmp139, tmp142
	vmovq	%xmm0, %rdx	 # tmp142, tmp124
	vcvtss2sd	32(%rbx), %xmm6, %xmm3	 # MEM[(float *)_40 + 32B], tmp139, tmp140
	vcvtss2sd	16(%rbx), %xmm6, %xmm2	 # MEM[(float *)_40 + 16B], tmp139, tmp141
	vcvtss2sd	48(%rbx), %xmm6, %xmm0	 # MEM[(float *)_40 + 48B], tmp139, tmp143
	vmovq	%rdx, %xmm1	 # tmp124,
	vmovq	%xmm3, %r9	 # tmp140, tmp112
	vmovq	%xmm2, %r8	 # tmp141, tmp118
	vmovsd	%xmm0, 32(%rsp)	 # tmp131,
	movq	%rsi, %rcx	 # tmp134,
 # .\src\main.cpp:837:     for (int i = 0; i < 4; i++) {
	addq	$4, %rbx	 #, ivtmp.1978
 # .\src\main.cpp:838:         DEBUG("%f, %f, %f, %f", matrix2.v[i],matrix2.v[i+4],matrix2.v[i+8],matrix2.v[i+12]);
	call	TextFormat	 #
 # .\src\main.cpp:838:         DEBUG("%f, %f, %f, %f", matrix2.v[i],matrix2.v[i+4],matrix2.v[i+8],matrix2.v[i+12]);
	movl	$2, %ecx	 #,
 # .\src\main.cpp:838:         DEBUG("%f, %f, %f, %f", matrix2.v[i],matrix2.v[i+4],matrix2.v[i+8],matrix2.v[i+12]);
	movq	%rax, %rdx	 # tmp137, _28
 # .\src\main.cpp:838:         DEBUG("%f, %f, %f, %f", matrix2.v[i],matrix2.v[i+4],matrix2.v[i+8],matrix2.v[i+12]);
	call	TraceLog	 #
 # .\src\main.cpp:837:     for (int i = 0; i < 4; i++) {
	cmpq	%rbx, %rdi	 # ivtmp.1978, _38
	jne	.L728	 #,
 # .\src\main.cpp:840:     DEBUG("End matrix")
	leaq	.LC20(%rip), %rcx	 #, tmp133
	call	TextFormat	 #
	nop	
 # .\src\main.cpp:841: }
	vmovups	112(%rsp), %xmm6	 #,
 # .\src\main.cpp:840:     DEBUG("End matrix")
	movl	$2, %ecx	 #,
 # .\src\main.cpp:840:     DEBUG("End matrix")
	movq	%rax, %rdx	 # tmp138, _24
 # .\src\main.cpp:841: }
	subq	$-128, %rsp	 #,
	popq	%rbx	 #
	popq	%rsi	 #
	popq	%rdi	 #
 # .\src\main.cpp:840:     DEBUG("End matrix")
	jmp	TraceLog	 #
	.seh_endproc
	.p2align 4
	.globl	_Z11full_runnerPK7BoidMapPK5RulesPK8BoidList
	.def	_Z11full_runnerPK7BoidMapPK5RulesPK8BoidList;	.scl	2;	.type	32;	.endef
	.seh_proc	_Z11full_runnerPK7BoidMapPK5RulesPK8BoidList
_Z11full_runnerPK7BoidMapPK5RulesPK8BoidList:
.LFB12611:
	pushq	%r15	 #
	.seh_pushreg	%r15
	pushq	%r14	 #
	.seh_pushreg	%r14
	pushq	%r13	 #
	.seh_pushreg	%r13
	pushq	%r12	 #
	.seh_pushreg	%r12
	pushq	%rbp	 #
	.seh_pushreg	%rbp
	pushq	%rdi	 #
	.seh_pushreg	%rdi
	pushq	%rsi	 #
	.seh_pushreg	%rsi
	pushq	%rbx	 #
	.seh_pushreg	%rbx
	subq	$872, %rsp	 #,
	.seh_stackalloc	872
	vmovups	%xmm6, 704(%rsp)	 #,
	.seh_savexmm	%xmm6, 704
	vmovups	%xmm7, 720(%rsp)	 #,
	.seh_savexmm	%xmm7, 720
	vmovups	%xmm8, 736(%rsp)	 #,
	.seh_savexmm	%xmm8, 736
	vmovups	%xmm9, 752(%rsp)	 #,
	.seh_savexmm	%xmm9, 752
	vmovups	%xmm10, 768(%rsp)	 #,
	.seh_savexmm	%xmm10, 768
	vmovups	%xmm11, 784(%rsp)	 #,
	.seh_savexmm	%xmm11, 784
	vmovups	%xmm12, 800(%rsp)	 #,
	.seh_savexmm	%xmm12, 800
	vmovups	%xmm13, 816(%rsp)	 #,
	.seh_savexmm	%xmm13, 816
	vmovups	%xmm14, 832(%rsp)	 #,
	.seh_savexmm	%xmm14, 832
	vmovups	%xmm15, 848(%rsp)	 #,
	.seh_savexmm	%xmm15, 848
	.seh_endprologue
 # .\src\main.cpp:1012:     for (int y = 0; y < boid_map->m_ysize; y += 2) {
	movl	(%rcx), %esi	 # boid_map_14(D)->m_ysize, prephitmp_225
 # .\src\main.cpp:1011: void full_runner(const BoidMap *boid_map, const Rules *rules, const BoidList *boid_list) {
	movq	%rdx, %r11	 # tmp1454, rules
 # .\src\main.cpp:1012:     for (int y = 0; y < boid_map->m_ysize; y += 2) {
	testl	%esi, %esi	 # prephitmp_225
	jle	.L791	 #,
 # .\src\main.cpp:1013:         for (int x = 0; x < boid_map->m_xsize; x++) {
	movl	4(%rcx), %ebx	 # boid_map_14(D)->m_xsize, _1
	movl	$2, %r10d	 #, ivtmp.2102
	movl	%esi, %r13d	 # prephitmp_225, prephitmp_225
	movq	%rcx, %rdi	 # boid_map, boid_map
	leal	-2(%r10), %eax	 #, y
	movq	%r8, %rbp	 # boid_list, boid_list
	movl	%ebx, %r14d	 # _1, _1
	movl	%eax, 696(%rsp)	 # y, %sfp
 # .\src\main.cpp:1013:         for (int x = 0; x < boid_map->m_xsize; x++) {
	testl	%r14d, %r14d	 # _1
	jle	.L792	 #,
.L765:
	movl	%r10d, 452(%rsp)	 # ivtmp.2102, %sfp
	movl	%r14d, %ebx	 # _1, _1
	movl	%r13d, %r10d	 # prephitmp_225, prephitmp_225
	movq	%r11, %r14	 # rules, rules
	movl	$2, %r12d	 #, ivtmp.2098
	movq	%rbp, %r13	 # boid_list, boid_list
.L734:
 # .\src\main.cpp:639:     const auto world_height = map->m_cell_size * map->m_ysize;
	movl	8(%rdi), %r9d	 # boid_map_14(D)->m_cell_size, _23
 # .\src\main.cpp:642:     const Boid cell_to_update = map->get_coord(y, x);
	leal	-2(%r12), %r8d	 #,
	movq	%rdi, %rcx	 # boid_map,
	movl	%r10d, 64(%rsp)	 # prephitmp_225, %sfp
	movl	696(%rsp), %edx	 # %sfp,
 # .\src\main.cpp:639:     const auto world_height = map->m_cell_size * map->m_ysize;
	movl	%r9d, 32(%rsp)	 # _23, %sfp
 # .\src\main.cpp:642:     const Boid cell_to_update = map->get_coord(y, x);
	call	_ZNK7BoidMap9get_coordEii	 #
 # .\src\main.cpp:643:     if (cell_to_update == -1 ) return;
	movl	32(%rsp), %r9d	 # %sfp, _23
	movl	64(%rsp), %r10d	 # %sfp, prephitmp_225
	cmpl	$-1, %eax	 #, _28
 # .\src\main.cpp:642:     const Boid cell_to_update = map->get_coord(y, x);
	movl	%eax, %r8d	 # tmp1456, _28
 # .\src\main.cpp:643:     if (cell_to_update == -1 ) return;
	je	.L736	 #,
 # .\src\main.cpp:645:     const auto xs = boid_list->m_boid_store->xs;
	movq	0(%r13), %rax	 # boid_list_17(D)->m_boid_store, _29
 # .\src\main.cpp:655:     Boid cell_end = cell_begin + boid_list->m_boid_store->depth[cell_begin];
	movslq	%r8d, %rsi	 # _28, ivtmp.2086
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:1330: 				 __A, __A, __A, __A };
	vbroadcastss	(%r14), %ymm12	 # rules_16(D)->avoid_distance_squared, _35
	vbroadcastss	12(%r14), %ymm5	 # rules_16(D)->sight_range_squared, _37
	vbroadcastss	4(%r14), %ymm1	 # rules_16(D)->avoid_factor, _39
 # .\src\main.cpp:645:     const auto xs = boid_list->m_boid_store->xs;
	movq	(%rax), %rcx	 # _29->xs, xs
 # .\src\main.cpp:647:     const auto vxs = boid_list->m_boid_store->vxs;
	movq	16(%rax), %rdx	 # _29->vxs, vxs
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:1330: 				 __A, __A, __A, __A };
	vmovups	%ymm5, 160(%rsp)	 # _37, %sfp
 # .\src\main.cpp:648:     const auto vys = boid_list->m_boid_store->vys;
	movq	24(%rax), %r15	 # _29->vys, vys
 # .\src\main.cpp:645:     const auto xs = boid_list->m_boid_store->xs;
	movq	%rcx, 456(%rsp)	 # xs, %sfp
 # .\src\main.cpp:646:     const auto ys = boid_list->m_boid_store->ys;
	movq	8(%rax), %rcx	 # _29->ys, ys
 # .\src\main.cpp:655:     Boid cell_end = cell_begin + boid_list->m_boid_store->depth[cell_begin];
	movq	48(%rax), %rax	 # _29->depth, _29->depth
 # .\src\main.cpp:646:     const auto ys = boid_list->m_boid_store->ys;
	movq	%rcx, 496(%rsp)	 # ys, %sfp
 # .\src\main.cpp:655:     Boid cell_end = cell_begin + boid_list->m_boid_store->depth[cell_begin];
	movl	(%rax,%rsi,4), %ecx	 # *_43, cell_end
	addl	%r8d, %ecx	 # _28, cell_end
	movl	%ecx, %eax	 # cell_end, cell_end
 # .\src\main.cpp:657:     for (Boid current_boid = cell_begin; current_boid < cell_end; current_boid += 8) {
	cmpl	%ecx, %r8d	 # cell_end, _28
	jge	.L789	 #,
	vbroadcastss	.LC4(%rip), %ymm5	 #, tmp1427
 # .\src\main.cpp:639:     const auto world_height = map->m_cell_size * map->m_ysize;
	imull	%r9d, %r10d	 # _23, prephitmp_225
	movl	452(%rsp), %ecx	 # %sfp, ivtmp.2102
	movl	%eax, 692(%rsp)	 # cell_end, %sfp
 # .\src\main.cpp:640:     const auto world_width = map->m_cell_size * map->m_xsize;
	imull	%r9d, %ebx	 # _23, world_width
	vmovups	%ymm12, 32(%rsp)	 # _35, %sfp
	movq	%rsi, %rbp	 # ivtmp.2086, ivtmp.2086
	vmovups	%ymm5, 128(%rsp)	 # tmp1427, %sfp
	subl	$3, %ecx	 #, ivtmp.2080
	vbroadcastss	.LC7(%rip), %ymm5	 #, tmp1428
 # .\src\main.cpp:639:     const auto world_height = map->m_cell_size * map->m_ysize;
	movl	%r10d, 512(%rsp)	 # prephitmp_225, %sfp
	vmovups	%ymm5, 656(%rsp)	 # tmp1428, %sfp
	vbroadcastss	.LC9(%rip), %ymm5	 #, tmp1429
	movl	%ebx, 688(%rsp)	 # world_width, %sfp
	vmovups	%ymm5, 624(%rsp)	 # tmp1429, %sfp
	vbroadcastss	.LC11(%rip), %ymm5	 #, tmp1424
	movl	%ecx, 524(%rsp)	 # ivtmp.2080, %sfp
	leal	-3(%r12), %ecx	 #, ivtmp.2072
	vmovups	%ymm5, 592(%rsp)	 # tmp1424, %sfp
	vbroadcastss	.LC13(%rip), %ymm5	 #, tmp1425
	movl	%ecx, 520(%rsp)	 # ivtmp.2072, %sfp
	movq	%rdx, %rcx	 # vxs, vxs
	movq	%r14, %rdx	 # rules, rules
	movq	%r15, %r14	 # vys, vys
	vmovups	%ymm5, 560(%rsp)	 # tmp1425, %sfp
	vbroadcastss	.LC15(%rip), %ymm5	 #, tmp1426
	vmovups	%ymm5, 528(%rsp)	 # tmp1426, %sfp
.L744:
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:905:   return *(__m256_u *)__P;
	movq	456(%rsp), %rax	 # %sfp, xs
	movl	524(%rsp), %r15d	 # %sfp, ivtmp.2080
 # .\src\main.cpp:669:         __m256 avg_vy_vec = _mm256_set1_ps(0.);
	vxorps	%xmm3, %xmm3, %xmm3	 # avg_vy_vec
	movq	%rbp, 504(%rsp)	 # ivtmp.2086, %sfp
	movq	%rdx, 952(%rsp)	 # rules, rules
 # .\src\main.cpp:666:         __m256 avg_y_vec = _mm256_set1_ps(0.);
	vmovaps	%ymm3, %ymm4	 # tmp22, avg_y_vec
	vmovaps	%ymm3, %ymm14	 # avg_vx_vec, avg_vx_vec
	vmovaps	%ymm3, %ymm15	 # avg_vy_vec, avg_vy_vec
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:905:   return *(__m256_u *)__P;
	vmovups	(%rax,%rbp,4), %ymm5	 # MEM[(__m256_u * {ref-all})xs_30 + ivtmp.2086_1622 * 4], _50
	movl	%r15d, %ebx	 # ivtmp.2080, ivtmp.2080
	movq	%rcx, %rdx	 # vxs, vxs
	movq	496(%rsp), %rax	 # %sfp, ys
 # .\src\main.cpp:663:         __m256 sep_y_vec = _mm256_set1_ps(0.);
	vmovups	%ymm3, 384(%rsp)	 # sep_y_vec, %sfp
	movq	%r14, %r15	 # vys, vys
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:905:   return *(__m256_u *)__P;
	vmovups	%ymm5, 64(%rsp)	 # _50, %sfp
	vmovups	(%rax,%rbp,4), %ymm5	 # MEM[(__m256_u * {ref-all})ys_31 + ivtmp.2086_1622 * 4], _52
 # .\src\main.cpp:662:         __m256 sep_x_vec = _mm256_set1_ps(0.);
	vmovups	%ymm3, 352(%rsp)	 # sep_x_vec, %sfp
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:905:   return *(__m256_u *)__P;
	vmovups	%ymm5, 96(%rsp)	 # _52, %sfp
 # .\src\main.cpp:671:         __m256i isc = _mm256_set1_epi32(0);
	vpxor	%xmm5, %xmm5, %xmm5	 # isc
	vmovdqu	%ymm5, 416(%rsp)	 # isc, %sfp
 # .\src\main.cpp:665:         __m256 avg_x_vec = _mm256_set1_ps(0.);
	vmovaps	%ymm3, %ymm5	 # tmp22, avg_x_vec
	vmovups	%ymm1, 464(%rsp)	 # _39, %sfp
.L737:
	movl	520(%rsp), %ebp	 # %sfp, ivtmp.2072
 # .\src\main.cpp:675:             Boid row_begin = -1;
	movl	$-1, %r14d	 #, row_begin
	movq	%rdx, 192(%rsp)	 # vxs, %sfp
 # .\src\main.cpp:676:             Boid row_end = -1;
	movl	$-1, %esi	 #, row_end
	vmovups	%ymm5, 224(%rsp)	 # avg_x_vec, %sfp
	vmovups	%ymm4, 256(%rsp)	 # avg_y_vec, %sfp
	movl	%ebp, %eax	 # ivtmp.2072, ivtmp.2072
	movl	%r14d, %ebp	 # row_begin, row_begin
	vmovups	%ymm14, 288(%rsp)	 # avg_vx_vec, %sfp
	movl	%eax, %r14d	 # ivtmp.2072, ivtmp.2072
	vmovups	%ymm15, 320(%rsp)	 # avg_vy_vec, %sfp
	vzeroupper
.L740:
 # .\src\main.cpp:680:                 Boid current = map->get_coord(y + cy, x + cx);
	movl	%r14d, %r8d	 # ivtmp.2072,
	movl	%ebx, %edx	 # ivtmp.2080,
	movq	%rdi, %rcx	 # boid_map,
	call	_ZNK7BoidMap9get_coordEii	 #
 # .\src\main.cpp:681:                 if (current != -1) {
	cmpl	$-1, %eax	 #, _57
	je	.L738	 #,
 # .\src\main.cpp:684:                     row_end = current + boid_list->m_boid_store->depth[current];
	movq	0(%r13), %rdx	 # boid_list_17(D)->m_boid_store, boid_list_17(D)->m_boid_store
 # .\src\main.cpp:682:                     if (row_begin == -1) row_begin = current;
	cmpl	$-1, %ebp	 #, row_begin
 # .\src\main.cpp:684:                     row_end = current + boid_list->m_boid_store->depth[current];
	movslq	%eax, %rcx	 # _57, _57
 # .\src\main.cpp:682:                     if (row_begin == -1) row_begin = current;
	cmove	%eax, %ebp	 # row_begin,, _57, row_begin
 # .\src\main.cpp:684:                     row_end = current + boid_list->m_boid_store->depth[current];
	movq	48(%rdx), %rdx	 # _59->depth, _59->depth
 # .\src\main.cpp:684:                     row_end = current + boid_list->m_boid_store->depth[current];
	addl	(%rdx,%rcx,4), %eax	 # *_63, _57
	movl	%eax, %esi	 # _57, row_end
.L738:
 # .\src\main.cpp:679:             for (int cx = -1; cx <= 1; cx++) {
	addl	$1, %r14d	 #, ivtmp.2072
	cmpl	%r12d, %r14d	 # ivtmp.2098, ivtmp.2072
	jne	.L740	 #,
 # .\src\main.cpp:689:             for (Boid nearby_boid = row_begin; nearby_boid < row_end; nearby_boid += 8) {
	movslq	%ebp, %r14	 # row_begin,
	movq	192(%rsp), %rdx	 # %sfp, vxs
	vmovups	224(%rsp), %ymm5	 # %sfp, avg_x_vec
	vmovups	256(%rsp), %ymm4	 # %sfp, avg_y_vec
	vmovups	288(%rsp), %ymm14	 # %sfp, avg_vx_vec
	vmovups	320(%rsp), %ymm15	 # %sfp, avg_vy_vec
	cmpl	%esi, %r14d	 # row_end, row_begin
	jge	.L741	 #,
	.p2align 4,,10
	.p2align 3
.L742:
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:905:   return *(__m256_u *)__P;
	movq	456(%rsp), %rax	 # %sfp, xs
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vmovups	64(%rsp), %ymm11	 # %sfp, _50
	vmovups	96(%rsp), %ymm12	 # %sfp, _52
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:406:   return (__m256) __builtin_ia32_cmpps256 ((__v8sf)__X, (__v8sf)__Y,
	vmovups	32(%rsp), %ymm13	 # %sfp, _35
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:905:   return *(__m256_u *)__P;
	vmovups	(%rax,%r14,4), %ymm2	 # MEM[(__m256_u * {ref-all})xs_30 + ivtmp.2057_1599 * 4], MEM[(__m256_u * {ref-all})xs_30 + ivtmp.2057_1599 * 4]
	movq	496(%rsp), %rax	 # %sfp, ys
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vsubps	%ymm2, %ymm11, %ymm1	 # MEM[(__m256_u * {ref-all})xs_30 + ivtmp.2057_1599 * 4], _50, _779
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:905:   return *(__m256_u *)__P;
	vmovups	(%rax,%r14,4), %ymm8	 # MEM[(__m256_u * {ref-all})ys_31 + ivtmp.2057_1599 * 4], MEM[(__m256_u * {ref-all})ys_31 + ivtmp.2057_1599 * 4]
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vsubps	%ymm8, %ymm12, %ymm7	 # MEM[(__m256_u * {ref-all})ys_31 + ivtmp.2057_1599 * 4], _52, _780
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:320:   return (__m256) ((__v8sf)__A * (__v8sf)__B);
	vmulps	%ymm1, %ymm1, %ymm3	 # _779, _779, tmp775
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:149:   return (__m256) ((__v8sf)__A + (__v8sf)__B);
	vfmadd231ps	%ymm7, %ymm7, %ymm3	 # _780, _780, _783
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:406:   return (__m256) __builtin_ia32_cmpps256 ((__v8sf)__X, (__v8sf)__Y,
	vcmpps	$1, 160(%rsp), %ymm3, %ymm0	 #, %sfp, _783, tmp776
	vcmpps	$1, %ymm13, %ymm3, %ymm6	 #, _35, _783, tmp779
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vsubps	%ymm3, %ymm13, %ymm3	 # _783, _35, _788
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:320:   return (__m256) ((__v8sf)__A * (__v8sf)__B);
	vmulps	%ymm3, %ymm3, %ymm3	 # _788, _788, _789
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:186:   return (__m256) __builtin_ia32_andnps256 ((__v8sf)__A, (__v8sf)__B);
	vandnps	%ymm0, %ymm6, %ymm0	 # tmp776, tmp779, tmp782
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:174:   return (__m256) __builtin_ia32_andps256 ((__v8sf)__A, (__v8sf)__B);
	vandps	128(%rsp), %ymm0, %ymm0	 # %sfp, tmp782, tmp783
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/fmaintrin.h:65:   return (__m256)__builtin_ia32_vfmaddps256 ((__v8sf)__A, (__v8sf)__B,
	vfmadd231ps	(%rdx,%r14,4), %ymm0, %ymm14	 # MEM[(__m256_u * {ref-all})vxs_32 + ivtmp.2057_1599 * 4], tmp783, tmp790
	vfmadd231ps	(%r15,%r14,4), %ymm0, %ymm15	 # MEM[(__m256_u * {ref-all})vys_33 + ivtmp.2057_1599 * 4], tmp783, tmp791
	vfmadd231ps	%ymm2, %ymm0, %ymm5	 # MEM[(__m256_u * {ref-all})xs_30 + ivtmp.2057_1599 * 4], tmp783, tmp792
	vfmadd231ps	%ymm8, %ymm0, %ymm4	 # MEM[(__m256_u * {ref-all})ys_31 + ivtmp.2057_1599 * 4], tmp783, tmp793
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:320:   return (__m256) ((__v8sf)__A * (__v8sf)__B);
	vmulps	%ymm3, %ymm7, %ymm7	 # _789, _780, tmp788
	vmulps	%ymm3, %ymm1, %ymm1	 # _789, _779, tmp786
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:174:   return (__m256) __builtin_ia32_andps256 ((__v8sf)__A, (__v8sf)__B);
	vandps	%ymm1, %ymm6, %ymm1	 # tmp786, tmp779, tmp787
	vandps	%ymm7, %ymm6, %ymm6	 # tmp788, tmp779, tmp789
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:475:   return (__m256i)__builtin_ia32_cvtps2dq256 ((__v8sf) __A);
	vcvtps2dq	%ymm0, %ymm7	 # tmp783, tmp794
	vmovdqu	%ymm7, 192(%rsp)	 # tmp794, %sfp
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avx2intrin.h:1065:   return (__m256) __builtin_ia32_permvarsf256 ((__v8sf)__X, (__v8si)__Y);
	vmovdqu	.LC5(%rip), %ymm7	 #, tmp2078
	vpermps	(%rdx,%r14,4), %ymm7, %ymm10	 # MEM[(__m256_u * {ref-all})vxs_32 + ivtmp.2057_1599 * 4], tmp2076, tmp800
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:149:   return (__m256) ((__v8sf)__A + (__v8sf)__B);
	vaddps	384(%rsp), %ymm6, %ymm6	 # %sfp, tmp789, _795
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avx2intrin.h:1065:   return (__m256) __builtin_ia32_permvarsf256 ((__v8sf)__X, (__v8si)__Y);
	vpermps	(%r15,%r14,4), %ymm7, %ymm9	 # MEM[(__m256_u * {ref-all})vys_33 + ivtmp.2057_1599 * 4], tmp2075, tmp802
 # .\src\main.cpp:689:             for (Boid nearby_boid = row_begin; nearby_boid < row_end; nearby_boid += 8) {
	addq	$8, %r14	 #, ivtmp.2057
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avx2intrin.h:1065:   return (__m256) __builtin_ia32_permvarsf256 ((__v8sf)__X, (__v8si)__Y);
	vpermps	%ymm2, %ymm7, %ymm0	 # MEM[(__m256_u * {ref-all})xs_30 + ivtmp.2057_1599 * 4], tmp2078, tmp796
	vpermps	%ymm8, %ymm7, %ymm13	 # MEM[(__m256_u * {ref-all})ys_31 + ivtmp.2057_1599 * 4], tmp2077, tmp798
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:149:   return (__m256) ((__v8sf)__A + (__v8sf)__B);
	vaddps	352(%rsp), %ymm1, %ymm1	 # %sfp, tmp787, _792
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vsubps	%ymm0, %ymm11, %ymm7	 # tmp796, _50, _822
	vsubps	%ymm13, %ymm12, %ymm12	 # tmp798, _52, _823
	vmovups	32(%rsp), %ymm11	 # %sfp, _35
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:320:   return (__m256) ((__v8sf)__A * (__v8sf)__B);
	vmulps	%ymm7, %ymm7, %ymm3	 # _822, _822, tmp804
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:149:   return (__m256) ((__v8sf)__A + (__v8sf)__B);
	vfmadd231ps	%ymm12, %ymm12, %ymm3	 # _823, _823, _826
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:406:   return (__m256) __builtin_ia32_cmpps256 ((__v8sf)__X, (__v8sf)__Y,
	vcmpps	$1, 32(%rsp), %ymm3, %ymm8	 #, %sfp, _826, tmp808
	vcmpps	$1, 160(%rsp), %ymm3, %ymm2	 #, %sfp, _826, tmp805
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vsubps	%ymm3, %ymm11, %ymm3	 # _826, _35, _831
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:320:   return (__m256) ((__v8sf)__A * (__v8sf)__B);
	vmulps	%ymm3, %ymm3, %ymm3	 # _831, _831, _832
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:186:   return (__m256) __builtin_ia32_andnps256 ((__v8sf)__A, (__v8sf)__B);
	vandnps	%ymm2, %ymm8, %ymm2	 # tmp805, tmp808, tmp811
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:174:   return (__m256) __builtin_ia32_andps256 ((__v8sf)__A, (__v8sf)__B);
	vandps	128(%rsp), %ymm2, %ymm2	 # %sfp, tmp811, tmp812
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/fmaintrin.h:65:   return (__m256)__builtin_ia32_vfmaddps256 ((__v8sf)__A, (__v8sf)__B,
	vfmadd231ps	%ymm9, %ymm2, %ymm15	 # tmp802, tmp812, tmp791
	vfmadd231ps	%ymm0, %ymm2, %ymm5	 # tmp796, tmp812, tmp821
	vfmadd231ps	%ymm13, %ymm2, %ymm4	 # tmp798, tmp812, tmp822
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:320:   return (__m256) ((__v8sf)__A * (__v8sf)__B);
	vmulps	%ymm3, %ymm12, %ymm12	 # _832, _823, tmp817
	vmulps	%ymm3, %ymm7, %ymm7	 # _832, _822, tmp815
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avx2intrin.h:1065:   return (__m256) __builtin_ia32_permvarsf256 ((__v8sf)__X, (__v8si)__Y);
	vmovdqu	.LC5(%rip), %ymm3	 #, tmp2069
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:174:   return (__m256) __builtin_ia32_andps256 ((__v8sf)__A, (__v8sf)__B);
	vandps	%ymm7, %ymm8, %ymm7	 # tmp815, tmp808, tmp816
	vandps	%ymm12, %ymm8, %ymm8	 # tmp817, tmp808, tmp818
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/fmaintrin.h:65:   return (__m256)__builtin_ia32_vfmaddps256 ((__v8sf)__A, (__v8sf)__B,
	vmovaps	%ymm15, %ymm12	 # tmp791, tmp820
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:149:   return (__m256) ((__v8sf)__A + (__v8sf)__B);
	vaddps	%ymm8, %ymm6, %ymm6	 # tmp818, _795, _838
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/fmaintrin.h:65:   return (__m256)__builtin_ia32_vfmaddps256 ((__v8sf)__A, (__v8sf)__B,
	vmovaps	%ymm14, %ymm8	 # tmp790, tmp790
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:149:   return (__m256) ((__v8sf)__A + (__v8sf)__B);
	vaddps	%ymm7, %ymm1, %ymm7	 # tmp816, _792, _835
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vmovups	64(%rsp), %ymm14	 # %sfp, _50
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/fmaintrin.h:65:   return (__m256)__builtin_ia32_vfmaddps256 ((__v8sf)__A, (__v8sf)__B,
	vfmadd231ps	%ymm10, %ymm2, %ymm8	 # tmp800, tmp812, tmp790
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:475:   return (__m256i)__builtin_ia32_cvtps2dq256 ((__v8sf) __A);
	vcvtps2dq	%ymm2, %ymm2	 # tmp812, tmp823
	vpaddd	192(%rsp), %ymm2, %ymm1	 # %sfp, tmp823, _556
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avx2intrin.h:1065:   return (__m256) __builtin_ia32_permvarsf256 ((__v8sf)__X, (__v8si)__Y);
	vpermps	%ymm10, %ymm3, %ymm2	 # tmp800, tmp2068, tmp829
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vmovups	96(%rsp), %ymm10	 # %sfp, _52
	vmovdqu	%ymm1, 192(%rsp)	 # _556, %sfp
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avx2intrin.h:1065:   return (__m256) __builtin_ia32_permvarsf256 ((__v8sf)__X, (__v8si)__Y);
	vmovdqu	.LC5(%rip), %ymm1	 #, tmp2070
	vpermps	%ymm0, %ymm1, %ymm1	 # tmp796, tmp2070, tmp825
	vpermps	%ymm13, %ymm3, %ymm0	 # tmp798, tmp2069, tmp827
	vpermps	%ymm9, %ymm3, %ymm3	 # tmp802, tmp2067, tmp831
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vsubps	%ymm1, %ymm14, %ymm15	 # tmp825, _50, _865
	vsubps	%ymm0, %ymm10, %ymm14	 # tmp827, _52, _866
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:320:   return (__m256) ((__v8sf)__A * (__v8sf)__B);
	vmulps	%ymm15, %ymm15, %ymm10	 # _865, _865, tmp833
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:149:   return (__m256) ((__v8sf)__A + (__v8sf)__B);
	vfmadd231ps	%ymm14, %ymm14, %ymm10	 # _866, _866, _869
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:406:   return (__m256) __builtin_ia32_cmpps256 ((__v8sf)__X, (__v8sf)__Y,
	vcmpps	$1, 160(%rsp), %ymm10, %ymm9	 #, %sfp, _869, tmp834
	vcmpps	$1, %ymm11, %ymm10, %ymm13	 #, _35, _869, tmp837
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vsubps	%ymm10, %ymm11, %ymm10	 # _869, _35, _874
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:320:   return (__m256) ((__v8sf)__A * (__v8sf)__B);
	vmulps	%ymm10, %ymm10, %ymm10	 # _874, _874, _875
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:186:   return (__m256) __builtin_ia32_andnps256 ((__v8sf)__A, (__v8sf)__B);
	vandnps	%ymm9, %ymm13, %ymm9	 # tmp834, tmp837, tmp840
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:174:   return (__m256) __builtin_ia32_andps256 ((__v8sf)__A, (__v8sf)__B);
	vandps	128(%rsp), %ymm9, %ymm9	 # %sfp, tmp840, tmp841
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/fmaintrin.h:65:   return (__m256)__builtin_ia32_vfmaddps256 ((__v8sf)__A, (__v8sf)__B,
	vfmadd231ps	%ymm1, %ymm9, %ymm5	 # tmp825, tmp841, tmp850
	vfmadd231ps	%ymm2, %ymm9, %ymm8	 # tmp829, tmp841, tmp848
	vfmadd231ps	%ymm3, %ymm9, %ymm12	 # tmp831, tmp841, tmp849
	vfmadd231ps	%ymm0, %ymm9, %ymm4	 # tmp827, tmp841, tmp851
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:320:   return (__m256) ((__v8sf)__A * (__v8sf)__B);
	vmulps	%ymm10, %ymm14, %ymm14	 # _875, _866, tmp846
	vmulps	%ymm10, %ymm15, %ymm15	 # _875, _865, tmp844
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:174:   return (__m256) __builtin_ia32_andps256 ((__v8sf)__A, (__v8sf)__B);
	vandps	%ymm15, %ymm13, %ymm15	 # tmp844, tmp837, tmp845
	vandps	%ymm14, %ymm13, %ymm13	 # tmp846, tmp837, tmp847
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vmovups	64(%rsp), %ymm14	 # %sfp, _50
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:149:   return (__m256) ((__v8sf)__A + (__v8sf)__B);
	vaddps	%ymm13, %ymm6, %ymm6	 # tmp847, _838, _881
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:475:   return (__m256i)__builtin_ia32_cvtps2dq256 ((__v8sf) __A);
	vcvtps2dq	%ymm9, %ymm13	 # tmp841, tmp852
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:149:   return (__m256) ((__v8sf)__A + (__v8sf)__B);
	vaddps	%ymm15, %ymm7, %ymm7	 # tmp845, _835, _878
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:475:   return (__m256i)__builtin_ia32_cvtps2dq256 ((__v8sf) __A);
	vmovdqu	%ymm13, 224(%rsp)	 # tmp852, %sfp
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avx2intrin.h:1065:   return (__m256) __builtin_ia32_permvarsf256 ((__v8sf)__X, (__v8si)__Y);
	vmovdqu	.LC5(%rip), %ymm13	 #, tmp2064
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vmovups	96(%rsp), %ymm10	 # %sfp, _52
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avx2intrin.h:1065:   return (__m256) __builtin_ia32_permvarsf256 ((__v8sf)__X, (__v8si)__Y);
	vpermps	%ymm1, %ymm13, %ymm1	 # tmp825, tmp2064, tmp854
	vpermps	%ymm0, %ymm13, %ymm0	 # tmp827, tmp2063, tmp856
	vpermps	%ymm2, %ymm13, %ymm2	 # tmp829, tmp2062, tmp858
	vpermps	%ymm3, %ymm13, %ymm3	 # tmp831, tmp2061, tmp860
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vsubps	%ymm1, %ymm14, %ymm13	 # tmp854, _50, _908
	vsubps	%ymm0, %ymm10, %ymm15	 # tmp856, _52, _909
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:320:   return (__m256) ((__v8sf)__A * (__v8sf)__B);
	vmulps	%ymm13, %ymm13, %ymm10	 # _908, _908, tmp862
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:149:   return (__m256) ((__v8sf)__A + (__v8sf)__B);
	vfmadd231ps	%ymm15, %ymm15, %ymm10	 # _909, _909, _912
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:406:   return (__m256) __builtin_ia32_cmpps256 ((__v8sf)__X, (__v8sf)__Y,
	vcmpps	$1, 160(%rsp), %ymm10, %ymm9	 #, %sfp, _912, tmp863
	vcmpps	$1, %ymm11, %ymm10, %ymm14	 #, _35, _912, tmp866
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vsubps	%ymm10, %ymm11, %ymm10	 # _912, _35, _917
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:320:   return (__m256) ((__v8sf)__A * (__v8sf)__B);
	vmulps	%ymm10, %ymm10, %ymm10	 # _917, _917, _918
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:186:   return (__m256) __builtin_ia32_andnps256 ((__v8sf)__A, (__v8sf)__B);
	vandnps	%ymm9, %ymm14, %ymm9	 # tmp863, tmp866, tmp869
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:174:   return (__m256) __builtin_ia32_andps256 ((__v8sf)__A, (__v8sf)__B);
	vandps	128(%rsp), %ymm9, %ymm9	 # %sfp, tmp869, tmp870
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/fmaintrin.h:65:   return (__m256)__builtin_ia32_vfmaddps256 ((__v8sf)__A, (__v8sf)__B,
	vfmadd231ps	%ymm2, %ymm9, %ymm8	 # tmp858, tmp870, tmp877
	vfmadd231ps	%ymm3, %ymm9, %ymm12	 # tmp860, tmp870, tmp878
	vfmadd231ps	%ymm1, %ymm9, %ymm5	 # tmp854, tmp870, tmp879
	vfmadd231ps	%ymm0, %ymm9, %ymm4	 # tmp856, tmp870, tmp880
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:475:   return (__m256i)__builtin_ia32_cvtps2dq256 ((__v8sf) __A);
	vcvtps2dq	%ymm9, %ymm9	 # tmp870, tmp881
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:320:   return (__m256) ((__v8sf)__A * (__v8sf)__B);
	vmulps	%ymm10, %ymm15, %ymm15	 # _918, _909, tmp875
	vmulps	%ymm10, %ymm13, %ymm13	 # _918, _908, tmp873
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vmovups	96(%rsp), %ymm10	 # %sfp, _52
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:174:   return (__m256) __builtin_ia32_andps256 ((__v8sf)__A, (__v8sf)__B);
	vandps	%ymm13, %ymm14, %ymm13	 # tmp873, tmp866, tmp874
	vandps	%ymm15, %ymm14, %ymm14	 # tmp875, tmp866, tmp876
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:149:   return (__m256) ((__v8sf)__A + (__v8sf)__B);
	vaddps	%ymm14, %ymm6, %ymm6	 # tmp876, _881, _924
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avx2intrin.h:1065:   return (__m256) __builtin_ia32_permvarsf256 ((__v8sf)__X, (__v8si)__Y);
	vmovdqu	.LC5(%rip), %ymm14	 #, tmp2056
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:149:   return (__m256) ((__v8sf)__A + (__v8sf)__B);
	vaddps	%ymm13, %ymm7, %ymm13	 # tmp874, _878, _921
	vpaddd	224(%rsp), %ymm9, %ymm7	 # %sfp, tmp881, tmp883
	vpaddd	192(%rsp), %ymm7, %ymm15	 # %sfp, tmp883, _510
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avx2intrin.h:1065:   return (__m256) __builtin_ia32_permvarsf256 ((__v8sf)__X, (__v8si)__Y);
	vpermps	%ymm1, %ymm14, %ymm1	 # tmp854, tmp2056, tmp884
	vpermps	%ymm0, %ymm14, %ymm0	 # tmp856, tmp2055, tmp886
	vpermps	%ymm2, %ymm14, %ymm2	 # tmp858, tmp2054, tmp888
	vmovdqu	%ymm15, 192(%rsp)	 # _510, %sfp
	vpermps	%ymm3, %ymm14, %ymm3	 # tmp860, tmp2053, tmp890
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vmovups	64(%rsp), %ymm14	 # %sfp, _50
	vsubps	%ymm0, %ymm10, %ymm15	 # tmp886, _52, _952
	vsubps	%ymm1, %ymm14, %ymm9	 # tmp884, _50, _951
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:320:   return (__m256) ((__v8sf)__A * (__v8sf)__B);
	vmulps	%ymm9, %ymm9, %ymm10	 # _951, _951, tmp892
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:149:   return (__m256) ((__v8sf)__A + (__v8sf)__B);
	vfmadd231ps	%ymm15, %ymm15, %ymm10	 # _952, _952, _955
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:406:   return (__m256) __builtin_ia32_cmpps256 ((__v8sf)__X, (__v8sf)__Y,
	vcmpps	$1, 160(%rsp), %ymm10, %ymm7	 #, %sfp, _955, tmp893
	vcmpps	$1, %ymm11, %ymm10, %ymm14	 #, _35, _955, tmp896
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vsubps	%ymm10, %ymm11, %ymm10	 # _955, _35, _960
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:320:   return (__m256) ((__v8sf)__A * (__v8sf)__B);
	vmulps	%ymm10, %ymm10, %ymm10	 # _960, _960, _961
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:186:   return (__m256) __builtin_ia32_andnps256 ((__v8sf)__A, (__v8sf)__B);
	vandnps	%ymm7, %ymm14, %ymm7	 # tmp893, tmp896, tmp899
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:174:   return (__m256) __builtin_ia32_andps256 ((__v8sf)__A, (__v8sf)__B);
	vandps	128(%rsp), %ymm7, %ymm7	 # %sfp, tmp899, tmp900
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/fmaintrin.h:65:   return (__m256)__builtin_ia32_vfmaddps256 ((__v8sf)__A, (__v8sf)__B,
	vfmadd231ps	%ymm1, %ymm7, %ymm5	 # tmp884, tmp900, tmp909
	vfmadd231ps	%ymm2, %ymm7, %ymm8	 # tmp888, tmp900, tmp907
	vfmadd231ps	%ymm3, %ymm7, %ymm12	 # tmp890, tmp900, tmp908
	vfmadd231ps	%ymm0, %ymm7, %ymm4	 # tmp886, tmp900, tmp910
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:320:   return (__m256) ((__v8sf)__A * (__v8sf)__B);
	vmulps	%ymm10, %ymm9, %ymm9	 # _961, _951, tmp903
	vmulps	%ymm10, %ymm15, %ymm15	 # _961, _952, tmp905
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:174:   return (__m256) __builtin_ia32_andps256 ((__v8sf)__A, (__v8sf)__B);
	vandps	%ymm9, %ymm14, %ymm9	 # tmp903, tmp896, tmp904
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:149:   return (__m256) ((__v8sf)__A + (__v8sf)__B);
	vaddps	%ymm9, %ymm13, %ymm9	 # tmp904, _921, _964
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avx2intrin.h:1065:   return (__m256) __builtin_ia32_permvarsf256 ((__v8sf)__X, (__v8si)__Y);
	vmovdqu	.LC5(%rip), %ymm13	 #, tmp2050
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:174:   return (__m256) __builtin_ia32_andps256 ((__v8sf)__A, (__v8sf)__B);
	vandps	%ymm15, %ymm14, %ymm10	 # tmp905, tmp896, tmp906
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vmovups	64(%rsp), %ymm14	 # %sfp, _50
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:149:   return (__m256) ((__v8sf)__A + (__v8sf)__B);
	vaddps	%ymm10, %ymm6, %ymm10	 # tmp906, _924, _967
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:475:   return (__m256i)__builtin_ia32_cvtps2dq256 ((__v8sf) __A);
	vcvtps2dq	%ymm7, %ymm6	 # tmp900, tmp911
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vmovups	96(%rsp), %ymm7	 # %sfp, _52
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:475:   return (__m256i)__builtin_ia32_cvtps2dq256 ((__v8sf) __A);
	vmovdqu	%ymm6, 224(%rsp)	 # tmp911, %sfp
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avx2intrin.h:1065:   return (__m256) __builtin_ia32_permvarsf256 ((__v8sf)__X, (__v8si)__Y);
	vpermps	%ymm1, %ymm13, %ymm1	 # tmp884, tmp2050, tmp913
	vpermps	%ymm0, %ymm13, %ymm0	 # tmp886, tmp2049, tmp915
	vpermps	%ymm2, %ymm13, %ymm2	 # tmp888, tmp2048, tmp917
	vpermps	%ymm3, %ymm13, %ymm3	 # tmp890, tmp2047, tmp919
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vsubps	%ymm1, %ymm14, %ymm13	 # tmp913, _50, _994
	vsubps	%ymm0, %ymm7, %ymm15	 # tmp915, _52, _995
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:320:   return (__m256) ((__v8sf)__A * (__v8sf)__B);
	vmulps	%ymm13, %ymm13, %ymm7	 # _994, _994, tmp921
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:149:   return (__m256) ((__v8sf)__A + (__v8sf)__B);
	vfmadd231ps	%ymm15, %ymm15, %ymm7	 # _995, _995, _998
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:406:   return (__m256) __builtin_ia32_cmpps256 ((__v8sf)__X, (__v8sf)__Y,
	vcmpps	$1, 160(%rsp), %ymm7, %ymm6	 #, %sfp, _998, tmp922
	vcmpps	$1, %ymm11, %ymm7, %ymm14	 #, _35, _998, tmp925
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vsubps	%ymm7, %ymm11, %ymm7	 # _998, _35, _1003
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:320:   return (__m256) ((__v8sf)__A * (__v8sf)__B);
	vmulps	%ymm7, %ymm7, %ymm7	 # _1003, _1003, _1004
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:186:   return (__m256) __builtin_ia32_andnps256 ((__v8sf)__A, (__v8sf)__B);
	vandnps	%ymm6, %ymm14, %ymm6	 # tmp922, tmp925, tmp928
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:174:   return (__m256) __builtin_ia32_andps256 ((__v8sf)__A, (__v8sf)__B);
	vandps	128(%rsp), %ymm6, %ymm6	 # %sfp, tmp928, tmp929
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/fmaintrin.h:65:   return (__m256)__builtin_ia32_vfmaddps256 ((__v8sf)__A, (__v8sf)__B,
	vfmadd231ps	%ymm2, %ymm6, %ymm8	 # tmp917, tmp929, tmp936
	vfmadd231ps	%ymm3, %ymm6, %ymm12	 # tmp919, tmp929, tmp937
	vfmadd231ps	%ymm1, %ymm6, %ymm5	 # tmp913, tmp929, tmp938
	vfmadd231ps	%ymm0, %ymm6, %ymm4	 # tmp915, tmp929, tmp939
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:475:   return (__m256i)__builtin_ia32_cvtps2dq256 ((__v8sf) __A);
	vcvtps2dq	%ymm6, %ymm6	 # tmp929, tmp940
	vpaddd	224(%rsp), %ymm6, %ymm6	 # %sfp, tmp940, tmp942
	vpaddd	416(%rsp), %ymm6, %ymm6	 # %sfp, tmp942, tmp943
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:320:   return (__m256) ((__v8sf)__A * (__v8sf)__B);
	vmulps	%ymm7, %ymm13, %ymm13	 # _1004, _994, tmp932
	vmulps	%ymm7, %ymm15, %ymm15	 # _1004, _995, tmp934
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:174:   return (__m256) __builtin_ia32_andps256 ((__v8sf)__A, (__v8sf)__B);
	vandps	%ymm13, %ymm14, %ymm13	 # tmp932, tmp925, tmp933
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:149:   return (__m256) ((__v8sf)__A + (__v8sf)__B);
	vaddps	%ymm13, %ymm9, %ymm13	 # tmp933, _964, _1007
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:174:   return (__m256) __builtin_ia32_andps256 ((__v8sf)__A, (__v8sf)__B);
	vandps	%ymm15, %ymm14, %ymm9	 # tmp934, tmp925, tmp935
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vmovups	64(%rsp), %ymm14	 # %sfp, _50
	vpaddd	192(%rsp), %ymm6, %ymm15	 # %sfp, tmp943, _675
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:149:   return (__m256) ((__v8sf)__A + (__v8sf)__B);
	vaddps	%ymm9, %ymm10, %ymm9	 # tmp935, _967, _1010
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vmovups	96(%rsp), %ymm10	 # %sfp, _52
	vmovdqu	%ymm15, 192(%rsp)	 # _675, %sfp
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avx2intrin.h:1065:   return (__m256) __builtin_ia32_permvarsf256 ((__v8sf)__X, (__v8si)__Y);
	vmovdqu	.LC5(%rip), %ymm15	 #, tmp2042
	vpermps	%ymm1, %ymm15, %ymm1	 # tmp913, tmp2042, tmp944
	vpermps	%ymm0, %ymm15, %ymm0	 # tmp915, tmp2041, tmp946
	vpermps	%ymm2, %ymm15, %ymm2	 # tmp917, tmp2040, tmp948
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vsubps	%ymm1, %ymm14, %ymm6	 # tmp944, _50, _1037
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avx2intrin.h:1065:   return (__m256) __builtin_ia32_permvarsf256 ((__v8sf)__X, (__v8si)__Y);
	vpermps	%ymm3, %ymm15, %ymm3	 # tmp919, tmp2039, tmp950
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vsubps	%ymm0, %ymm10, %ymm15	 # tmp946, _52, _1038
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:320:   return (__m256) ((__v8sf)__A * (__v8sf)__B);
	vmulps	%ymm6, %ymm6, %ymm10	 # _1037, _1037, tmp952
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:149:   return (__m256) ((__v8sf)__A + (__v8sf)__B);
	vfmadd231ps	%ymm15, %ymm15, %ymm10	 # _1038, _1038, _1041
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:406:   return (__m256) __builtin_ia32_cmpps256 ((__v8sf)__X, (__v8sf)__Y,
	vcmpps	$1, 160(%rsp), %ymm10, %ymm7	 #, %sfp, _1041, tmp953
	vcmpps	$1, %ymm11, %ymm10, %ymm14	 #, _35, _1041, tmp956
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vsubps	%ymm10, %ymm11, %ymm10	 # _1041, _35, _1046
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:320:   return (__m256) ((__v8sf)__A * (__v8sf)__B);
	vmulps	%ymm10, %ymm10, %ymm10	 # _1046, _1046, _1047
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:186:   return (__m256) __builtin_ia32_andnps256 ((__v8sf)__A, (__v8sf)__B);
	vandnps	%ymm7, %ymm14, %ymm7	 # tmp953, tmp956, tmp959
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:174:   return (__m256) __builtin_ia32_andps256 ((__v8sf)__A, (__v8sf)__B);
	vandps	128(%rsp), %ymm7, %ymm7	 # %sfp, tmp959, tmp960
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/fmaintrin.h:65:   return (__m256)__builtin_ia32_vfmaddps256 ((__v8sf)__A, (__v8sf)__B,
	vfmadd231ps	%ymm1, %ymm7, %ymm5	 # tmp944, tmp960, tmp969
	vfmadd231ps	%ymm2, %ymm7, %ymm8	 # tmp948, tmp960, tmp967
	vfmadd231ps	%ymm3, %ymm7, %ymm12	 # tmp950, tmp960, tmp968
	vfmadd231ps	%ymm0, %ymm7, %ymm4	 # tmp946, tmp960, tmp970
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:320:   return (__m256) ((__v8sf)__A * (__v8sf)__B);
	vmulps	%ymm10, %ymm6, %ymm6	 # _1047, _1037, tmp963
	vmulps	%ymm10, %ymm15, %ymm15	 # _1047, _1038, tmp965
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avx2intrin.h:1065:   return (__m256) __builtin_ia32_permvarsf256 ((__v8sf)__X, (__v8si)__Y);
	vmovdqu	.LC5(%rip), %ymm10	 #, tmp2036
	vpermps	%ymm1, %ymm10, %ymm10	 # tmp944, tmp2036, tmp973
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vmovups	64(%rsp), %ymm1	 # %sfp, _50
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:174:   return (__m256) __builtin_ia32_andps256 ((__v8sf)__A, (__v8sf)__B);
	vandps	%ymm6, %ymm14, %ymm6	 # tmp963, tmp956, tmp964
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:149:   return (__m256) ((__v8sf)__A + (__v8sf)__B);
	vaddps	%ymm6, %ymm13, %ymm6	 # tmp964, _1007, _1050
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:475:   return (__m256i)__builtin_ia32_cvtps2dq256 ((__v8sf) __A);
	vcvtps2dq	%ymm7, %ymm13	 # tmp960, tmp971
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:174:   return (__m256) __builtin_ia32_andps256 ((__v8sf)__A, (__v8sf)__B);
	vandps	%ymm15, %ymm14, %ymm14	 # tmp965, tmp956, tmp966
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:475:   return (__m256i)__builtin_ia32_cvtps2dq256 ((__v8sf) __A);
	vmovdqu	%ymm13, 224(%rsp)	 # tmp971, %sfp
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avx2intrin.h:1065:   return (__m256) __builtin_ia32_permvarsf256 ((__v8sf)__X, (__v8si)__Y);
	vmovdqu	.LC5(%rip), %ymm13	 #, tmp2035
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:149:   return (__m256) ((__v8sf)__A + (__v8sf)__B);
	vaddps	%ymm14, %ymm9, %ymm9	 # tmp966, _1010, _1053
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avx2intrin.h:1065:   return (__m256) __builtin_ia32_permvarsf256 ((__v8sf)__X, (__v8si)__Y);
	vpermps	%ymm2, %ymm13, %ymm14	 # tmp948, tmp2034, tmp977
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vsubps	%ymm10, %ymm1, %ymm2	 # tmp973, _50, _1080
	vmovups	96(%rsp), %ymm1	 # %sfp, _52
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avx2intrin.h:1065:   return (__m256) __builtin_ia32_permvarsf256 ((__v8sf)__X, (__v8si)__Y);
	vpermps	%ymm0, %ymm13, %ymm7	 # tmp946, tmp2035, tmp975
	vpermps	%ymm3, %ymm13, %ymm15	 # tmp950, tmp2033, tmp979
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vsubps	%ymm7, %ymm1, %ymm13	 # tmp975, _52, _1081
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:320:   return (__m256) ((__v8sf)__A * (__v8sf)__B);
	vmulps	%ymm2, %ymm2, %ymm1	 # _1080, _1080, tmp981
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:149:   return (__m256) ((__v8sf)__A + (__v8sf)__B);
	vfmadd231ps	%ymm13, %ymm13, %ymm1	 # _1081, _1081, _1084
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:406:   return (__m256) __builtin_ia32_cmpps256 ((__v8sf)__X, (__v8sf)__Y,
	vcmpps	$1, 160(%rsp), %ymm1, %ymm0	 #, %sfp, _1084, tmp982
	vcmpps	$1, %ymm11, %ymm1, %ymm3	 #, _35, _1084, tmp985
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vsubps	%ymm1, %ymm11, %ymm1	 # _1084, _35, _1089
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:320:   return (__m256) ((__v8sf)__A * (__v8sf)__B);
	vmulps	%ymm1, %ymm1, %ymm1	 # _1089, _1089, _1090
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:186:   return (__m256) __builtin_ia32_andnps256 ((__v8sf)__A, (__v8sf)__B);
	vandnps	%ymm0, %ymm3, %ymm0	 # tmp982, tmp985, tmp988
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:174:   return (__m256) __builtin_ia32_andps256 ((__v8sf)__A, (__v8sf)__B);
	vandps	128(%rsp), %ymm0, %ymm0	 # %sfp, tmp988, tmp989
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/fmaintrin.h:65:   return (__m256)__builtin_ia32_vfmaddps256 ((__v8sf)__A, (__v8sf)__B,
	vfmadd231ps	%ymm7, %ymm0, %ymm4	 # tmp975, tmp989, avg_y_vec
	vfmadd132ps	%ymm0, %ymm8, %ymm14	 # tmp989, tmp967, avg_vx_vec
	vfmadd132ps	%ymm0, %ymm12, %ymm15	 # tmp989, tmp968, avg_vy_vec
	vfmadd231ps	%ymm10, %ymm0, %ymm5	 # tmp973, tmp989, avg_x_vec
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:475:   return (__m256i)__builtin_ia32_cvtps2dq256 ((__v8sf) __A);
	vcvtps2dq	%ymm0, %ymm0	 # tmp989, tmp1000
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avx2intrin.h:121:   return (__m256i) ((__v8su)__A + (__v8su)__B);
	vpaddd	224(%rsp), %ymm0, %ymm0	 # %sfp, tmp1000, tmp1002
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avx2intrin.h:121:   return (__m256i) ((__v8su)__A + (__v8su)__B);
	vpaddd	192(%rsp), %ymm0, %ymm7	 # %sfp, tmp1002, tmp1689
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:320:   return (__m256) ((__v8sf)__A * (__v8sf)__B);
	vmulps	%ymm1, %ymm2, %ymm2	 # _1090, _1080, tmp992
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avx2intrin.h:121:   return (__m256i) ((__v8su)__A + (__v8su)__B);
	vmovdqu	%ymm7, 416(%rsp)	 # tmp1689, %sfp
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:320:   return (__m256) ((__v8sf)__A * (__v8sf)__B);
	vmulps	%ymm1, %ymm13, %ymm13	 # _1090, _1081, tmp994
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:174:   return (__m256) __builtin_ia32_andps256 ((__v8sf)__A, (__v8sf)__B);
	vandps	%ymm2, %ymm3, %ymm2	 # tmp992, tmp985, tmp993
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:149:   return (__m256) ((__v8sf)__A + (__v8sf)__B);
	vaddps	%ymm2, %ymm6, %ymm6	 # tmp993, _1050, sep_x_vec
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:174:   return (__m256) __builtin_ia32_andps256 ((__v8sf)__A, (__v8sf)__B);
	vandps	%ymm13, %ymm3, %ymm3	 # tmp994, tmp985, tmp995
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:149:   return (__m256) ((__v8sf)__A + (__v8sf)__B);
	vmovups	%ymm6, 352(%rsp)	 # sep_x_vec, %sfp
	vaddps	%ymm3, %ymm9, %ymm6	 # tmp995, _1053, sep_y_vec
	vmovups	%ymm6, 384(%rsp)	 # sep_y_vec, %sfp
 # .\src\main.cpp:689:             for (Boid nearby_boid = row_begin; nearby_boid < row_end; nearby_boid += 8) {
	cmpl	%r14d, %esi	 # ivtmp.2057, row_end
	jg	.L742	 #,
.L741:
 # .\src\main.cpp:674:         for (int cy = -1; cy <= 1; cy++) {
	movl	452(%rsp), %eax	 # %sfp, ivtmp.2102
	addl	$1, %ebx	 #, ivtmp.2080
	cmpl	%eax, %ebx	 # ivtmp.2102, ivtmp.2080
	jne	.L737	 #,
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avx2intrin.h:275:   return (__m256i) ((__v8si)__A > (__v8si)__B);
	vpxor	%xmm6, %xmm6, %xmm6	 # tmp1005
	movq	%rdx, %rcx	 # vxs, vxs
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vmovups	96(%rsp), %ymm11	 # %sfp, _52
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avx2intrin.h:275:   return (__m256i) ((__v8si)__A > (__v8si)__B);
	movq	%r15, %r14	 # vys, vys
	movq	504(%rsp), %rbp	 # %sfp, ivtmp.2086
	vmovdqu	416(%rsp), %ymm0	 # %sfp, isc
	movq	952(%rsp), %rdx	 # rules, rules
 # .\src\main.cpp:789:         auto cmpx_2 = _mm256_cmp_ps(current_xs_vec, _mm256_set1_ps(world_width - rules->edge_width), _CMP_GT_OS);
	movl	688(%rsp), %r9d	 # %sfp, tmp1036
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avx2intrin.h:275:   return (__m256i) ((__v8si)__A > (__v8si)__B);
	vmovups	464(%rsp), %ymm1	 # %sfp, _39
	vpcmpgtd	%ymm6, %ymm0, %ymm6	 # tmp1005, tmp1692, tmp1006
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:463:   return (__m256)__builtin_ia32_cvtdq2ps256 ((__v8si) __A);
	vcvtdq2ps	%ymm0, %ymm0	 # isc, tmp1011
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/fmaintrin.h:65:   return (__m256)__builtin_ia32_vfmaddps256 ((__v8sf)__A, (__v8sf)__B,
	vmovups	352(%rsp), %ymm7	 # %sfp, sep_x_vec
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:243:   return (__m256) ((__v8sf)__A / (__v8sf)__B);
	vdivps	%ymm0, %ymm14, %ymm9	 # tmp1011, avg_vx_vec, tmp1013
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/fmaintrin.h:65:   return (__m256)__builtin_ia32_vfmaddps256 ((__v8sf)__A, (__v8sf)__B,
	vfmadd213ps	(%rcx,%rbp,4), %ymm1, %ymm7	 # MEM[(__m256_u * {ref-all})vxs_32 + ivtmp.2086_1622 * 4], _39, sep_x_vec
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:1330: 				 __A, __A, __A, __A };
	vbroadcastss	16(%rdx), %ymm2	 # rules_16(D)->alignment_factor, tmp1016
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/fmaintrin.h:65:   return (__m256)__builtin_ia32_vfmaddps256 ((__v8sf)__A, (__v8sf)__B,
	vmovups	384(%rsp), %ymm8	 # %sfp, sep_y_vec
	vfmadd213ps	(%r15,%rbp,4), %ymm1, %ymm8	 # MEM[(__m256_u * {ref-all})vys_33 + ivtmp.2086_1622 * 4], _39, sep_y_vec
 # .\src\main.cpp:784:         const auto ew = _mm256_set1_ps(rules->edge_width);
	movl	24(%rdx), %eax	 # rules_16(D)->edge_width, _164
 # .\src\main.cpp:789:         auto cmpx_2 = _mm256_cmp_ps(current_xs_vec, _mm256_set1_ps(world_width - rules->edge_width), _CMP_GT_OS);
	subl	%eax, %r9d	 # _164, tmp1036
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:243:   return (__m256) ((__v8sf)__A / (__v8sf)__B);
	vdivps	%ymm0, %ymm15, %ymm3	 # tmp1011, avg_vy_vec, tmp1018
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vsubps	%ymm7, %ymm9, %ymm9	 # tmp1007, tmp1013, tmp1014
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:174:   return (__m256) __builtin_ia32_andps256 ((__v8sf)__A, (__v8sf)__B);
	vandps	%ymm6, %ymm9, %ymm9	 # tmp1006, tmp1014, tmp1015
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/fmaintrin.h:65:   return (__m256)__builtin_ia32_vfmaddps256 ((__v8sf)__A, (__v8sf)__B,
	vfmadd231ps	%ymm9, %ymm2, %ymm7	 # tmp1015, tmp1016, tmp1017
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vsubps	%ymm8, %ymm3, %ymm3	 # tmp1009, tmp1018, tmp1019
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:174:   return (__m256) __builtin_ia32_andps256 ((__v8sf)__A, (__v8sf)__B);
	vandps	%ymm6, %ymm3, %ymm3	 # tmp1006, tmp1019, tmp1020
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/fmaintrin.h:65:   return (__m256)__builtin_ia32_vfmaddps256 ((__v8sf)__A, (__v8sf)__B,
	vfmadd132ps	%ymm2, %ymm8, %ymm3	 # tmp1016, tmp1009, tmp1021
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vmovups	64(%rsp), %ymm8	 # %sfp, _50
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:243:   return (__m256) ((__v8sf)__A / (__v8sf)__B);
	vdivps	%ymm0, %ymm5, %ymm2	 # tmp1011, avg_x_vec, tmp1022
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:1330: 				 __A, __A, __A, __A };
	vbroadcastss	20(%rdx), %ymm5	 # rules_16(D)->cohesion_factor, tmp1025
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:243:   return (__m256) ((__v8sf)__A / (__v8sf)__B);
	vdivps	%ymm0, %ymm4, %ymm0	 # tmp1011, avg_y_vec, tmp1027
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vsubps	%ymm8, %ymm2, %ymm2	 # _50, tmp1022, tmp1023
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:174:   return (__m256) __builtin_ia32_andps256 ((__v8sf)__A, (__v8sf)__B);
	vandps	%ymm6, %ymm2, %ymm2	 # tmp1006, tmp1023, tmp1024
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/fmaintrin.h:65:   return (__m256)__builtin_ia32_vfmaddps256 ((__v8sf)__A, (__v8sf)__B,
	vfmadd132ps	%ymm5, %ymm7, %ymm2	 # tmp1025, tmp1017, tmp1026
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vsubps	%ymm11, %ymm0, %ymm0	 # _52, tmp1027, tmp1028
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:174:   return (__m256) __builtin_ia32_andps256 ((__v8sf)__A, (__v8sf)__B);
	vandps	%ymm6, %ymm0, %ymm0	 # tmp1006, tmp1028, tmp1029
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:1330: 				 __A, __A, __A, __A };
	vbroadcastss	28(%rdx), %ymm6	 # rules_16(D)->edge_factor, tmp1031
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/fmaintrin.h:65:   return (__m256)__builtin_ia32_vfmaddps256 ((__v8sf)__A, (__v8sf)__B,
	vfmadd132ps	%ymm0, %ymm3, %ymm5	 # tmp1029, tmp1021, tmp1030
 # .\src\main.cpp:784:         const auto ew = _mm256_set1_ps(rules->edge_width);
	vxorps	%xmm0, %xmm0, %xmm0	 # tmp1697
 # .\src\main.cpp:789:         auto cmpx_2 = _mm256_cmp_ps(current_xs_vec, _mm256_set1_ps(world_width - rules->edge_width), _CMP_GT_OS);
	vcvtsi2ssl	%r9d, %xmm0, %xmm4	 # tmp1036, tmp1700, tmp1462
 # .\src\main.cpp:791:         auto cmpy_2 = _mm256_cmp_ps(current_ys_vec, _mm256_set1_ps(world_height - rules->edge_width), _CMP_GT_OS);
	movl	512(%rsp), %r9d	 # %sfp, tmp1044
 # .\src\main.cpp:784:         const auto ew = _mm256_set1_ps(rules->edge_width);
	vcvtsi2ssl	%eax, %xmm0, %xmm3	 # _164, tmp1697, tmp1461
 # .\src\main.cpp:791:         auto cmpy_2 = _mm256_cmp_ps(current_ys_vec, _mm256_set1_ps(world_height - rules->edge_width), _CMP_GT_OS);
	subl	%eax, %r9d	 # _164, tmp1044
 # .\src\main.cpp:791:         auto cmpy_2 = _mm256_cmp_ps(current_ys_vec, _mm256_set1_ps(world_height - rules->edge_width), _CMP_GT_OS);
	vcvtsi2ssl	%r9d, %xmm0, %xmm0	 # tmp1044, tmp1704, tmp1463
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:1330: 				 __A, __A, __A, __A };
	vbroadcastss	%xmm4, %ymm4	 # _169, tmp1039
	vbroadcastss	%xmm3, %ymm3	 # _165, tmp1032
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:406:   return (__m256) __builtin_ia32_cmpps256 ((__v8sf)__X, (__v8sf)__Y,
	vcmpps	$14, %ymm4, %ymm8, %ymm4	 #, tmp1039, _50, tmp1037
	vcmpps	$1, %ymm3, %ymm8, %ymm7	 #, tmp1032, _50, tmp1033
	vcmpps	$1, %ymm3, %ymm11, %ymm3	 #, tmp1032, _52, tmp1041
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:1330: 				 __A, __A, __A, __A };
	vbroadcastss	%xmm0, %ymm0	 # _174, tmp1047
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:174:   return (__m256) __builtin_ia32_andps256 ((__v8sf)__A, (__v8sf)__B);
	vandps	%ymm6, %ymm4, %ymm8	 # tmp1031, tmp1037, tmp1049
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:406:   return (__m256) __builtin_ia32_cmpps256 ((__v8sf)__X, (__v8sf)__Y,
	vcmpps	$14, %ymm0, %ymm11, %ymm0	 #, tmp1047, _52, tmp1045
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:174:   return (__m256) __builtin_ia32_andps256 ((__v8sf)__A, (__v8sf)__B);
	vandps	%ymm6, %ymm7, %ymm4	 # tmp1031, tmp1033, tmp1050
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vsubps	%ymm8, %ymm4, %ymm4	 # tmp1049, tmp1050, tmp1051
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:229:   return (__m256) __builtin_ia32_blendvps256 ((__v8sf)__X,
	vmovups	128(%rsp), %ymm8	 # %sfp, tmp1427
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:174:   return (__m256) __builtin_ia32_andps256 ((__v8sf)__A, (__v8sf)__B);
	vandps	%ymm6, %ymm0, %ymm0	 # tmp1031, tmp1045, tmp1052
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:149:   return (__m256) ((__v8sf)__A + (__v8sf)__B);
	vaddps	%ymm2, %ymm4, %ymm4	 # tmp1026, tmp1051, _180
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:174:   return (__m256) __builtin_ia32_andps256 ((__v8sf)__A, (__v8sf)__B);
	vandps	%ymm6, %ymm3, %ymm2	 # tmp1031, tmp1041, tmp1053
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vsubps	%ymm0, %ymm2, %ymm2	 # tmp1052, tmp1053, tmp1054
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:320:   return (__m256) ((__v8sf)__A * (__v8sf)__B);
	vmulps	%ymm4, %ymm4, %ymm0	 # _180, _180, tmp1055
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:149:   return (__m256) ((__v8sf)__A + (__v8sf)__B);
	vaddps	%ymm5, %ymm2, %ymm2	 # tmp1030, tmp1054, _184
	vfmadd231ps	%ymm2, %ymm2, %ymm0	 # _184, _184, _187
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:1041:   return (__m256) __builtin_ia32_rsqrtps256 ((__v8sf)__A);
	vrsqrtps	%ymm0, %ymm0	 # _187, tmp1056
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:320:   return (__m256) ((__v8sf)__A * (__v8sf)__B);
	vmulps	656(%rsp), %ymm0, %ymm5	 # %sfp, tmp1056, _189
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:406:   return (__m256) __builtin_ia32_cmpps256 ((__v8sf)__X, (__v8sf)__Y,
	vcmpps	$14, 624(%rsp), %ymm0, %ymm7	 #, %sfp, tmp1056, tmp1060
	vcmpps	$1, 592(%rsp), %ymm0, %ymm6	 #, %sfp, tmp1056, tmp1064
	vcmpps	$14, 560(%rsp), %ymm0, %ymm3	 #, %sfp, tmp1056, tmp1068
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:320:   return (__m256) ((__v8sf)__A * (__v8sf)__B);
	vmulps	528(%rsp), %ymm0, %ymm0	 # %sfp, tmp1056, tmp1072
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:229:   return (__m256) __builtin_ia32_blendvps256 ((__v8sf)__X,
	vblendvps	%ymm7, %ymm0, %ymm8, %ymm0	 # tmp1060, tmp1072, tmp1427, _196
	vblendvps	%ymm6, %ymm5, %ymm0, %ymm0	 # tmp1064, _189, _196, _199
	vblendvps	%ymm3, %ymm8, %ymm0, %ymm0	 # tmp1068, tmp1427, _199, _202
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:320:   return (__m256) ((__v8sf)__A * (__v8sf)__B);
	vmulps	%ymm0, %ymm4, %ymm4	 # _202, _180, tmp1088
	vmulps	%ymm0, %ymm2, %ymm2	 # _202, _184, tmp1089
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:911:   *(__m256_u *)__P = __A;
	vmovups	%ymm4, (%rcx,%rbp,4)	 # tmp1088, MEM[(__m256_u * {ref-all})vxs_32 + ivtmp.2086_1622 * 4]
	vmovups	%ymm2, (%r15,%rbp,4)	 # tmp1089, MEM[(__m256_u * {ref-all})vys_33 + ivtmp.2086_1622 * 4]
 # .\src\main.cpp:657:     for (Boid current_boid = cell_begin; current_boid < cell_end; current_boid += 8) {
	addq	$8, %rbp	 #, ivtmp.2086
	cmpl	%ebp, 692(%rsp)	 # ivtmp.2086, %sfp
	jg	.L744	 #,
	movq	%rdx, %r14	 # rules, rules
	vzeroupper
.L736:
 # .\src\main.cpp:1013:         for (int x = 0; x < boid_map->m_xsize; x++) {
	movl	4(%rdi), %ebx	 # boid_map_14(D)->m_xsize, _1
 # .\src\main.cpp:1013:         for (int x = 0; x < boid_map->m_xsize; x++) {
	leal	1(%r12), %eax	 #, ivtmp.2098
	subl	$1, %r12d	 #, x
 # .\src\main.cpp:1012:     for (int y = 0; y < boid_map->m_ysize; y += 2) {
	movl	(%rdi), %r10d	 # boid_map_14(D)->m_ysize, prephitmp_225
 # .\src\main.cpp:1013:         for (int x = 0; x < boid_map->m_xsize; x++) {
	cmpl	%r12d, %ebx	 # x, _1
	jle	.L793	 #,
	movl	%eax, %r12d	 # ivtmp.2098, ivtmp.2098
	jmp	.L734	 #
.L789:
	vzeroupper
	jmp	.L736	 #
.L793:
	movq	%r13, %rbp	 # boid_list, boid_list
	movl	%r10d, %r13d	 # prephitmp_225, prephitmp_225
	movl	452(%rsp), %r10d	 # %sfp, ivtmp.2102
	movq	%r14, %r11	 # rules, rules
	movl	%ebx, %r14d	 # _1, _1
 # .\src\main.cpp:1012:     for (int y = 0; y < boid_map->m_ysize; y += 2) {
	cmpl	%r13d, %r10d	 # prephitmp_225, ivtmp.2102
	jge	.L785	 #,
	addl	$2, %r10d	 #, ivtmp.2102
	leal	-2(%r10), %eax	 #, y
	movl	%eax, 696(%rsp)	 # y, %sfp
 # .\src\main.cpp:1013:         for (int x = 0; x < boid_map->m_xsize; x++) {
	testl	%r14d, %r14d	 # _1
	jg	.L765	 #,
.L792:
	movq	%rbp, %r12	 # boid_list, boid_list
	movl	%r14d, %ebx	 # _1, _1
	movl	%r13d, %esi	 # prephitmp_225, prephitmp_225
	movq	%rdi, %rbp	 # boid_map, boid_map
 # .\src\main.cpp:1012:     for (int y = 0; y < boid_map->m_ysize; y += 2) {
	cmpl	%r10d, %r13d	 # ivtmp.2102, prephitmp_225
	jle	.L791	 #,
.L745:
 # .\src\main.cpp:1020:     for (int y = 1; y < boid_map->m_ysize; y+=2) {
	cmpl	$1, %esi	 #, prephitmp_225
	jle	.L791	 #,
	movl	%ebx, %r14d	 # _1, _1
	movq	%rbp, %rdi	 # boid_map, boid_map
	movl	%esi, %r13d	 # prephitmp_225, prephitmp_225
	movq	%r11, %r10	 # rules, rules
	movl	$3, 452(%rsp)	 #, %sfp
	movq	%r12, %rbp	 # boid_list, boid_list
	movl	452(%rsp), %eax	 # %sfp, ivtmp.2045
	subl	$2, %eax	 #, y
	movl	%eax, 700(%rsp)	 # y, %sfp
 # .\src\main.cpp:1021:         for (int x = 0; x < boid_map->m_xsize; x++) {
	testl	%r14d, %r14d	 # _1
	jle	.L791	 #,
.L769:
	movl	%r14d, %ebx	 # _1, _1
	movl	$2, %r12d	 #, ivtmp.2041
	movq	%r10, %r14	 # rules, rules
	movl	%r13d, %r10d	 # prephitmp_225, prephitmp_225
	movq	%rbp, %r13	 # boid_list, boid_list
.L749:
 # .\src\main.cpp:639:     const auto world_height = map->m_cell_size * map->m_ysize;
	movl	8(%rdi), %r9d	 # boid_map_14(D)->m_cell_size, _239
 # .\src\main.cpp:642:     const Boid cell_to_update = map->get_coord(y, x);
	leal	-2(%r12), %r8d	 #,
	movq	%rdi, %rcx	 # boid_map,
	movl	%r10d, 64(%rsp)	 # prephitmp_225, %sfp
	movl	700(%rsp), %edx	 # %sfp,
 # .\src\main.cpp:639:     const auto world_height = map->m_cell_size * map->m_ysize;
	movl	%r9d, 32(%rsp)	 # _239, %sfp
 # .\src\main.cpp:642:     const Boid cell_to_update = map->get_coord(y, x);
	call	_ZNK7BoidMap9get_coordEii	 #
 # .\src\main.cpp:643:     if (cell_to_update == -1 ) return;
	movl	32(%rsp), %r9d	 # %sfp, _239
	movl	64(%rsp), %r10d	 # %sfp, prephitmp_225
	cmpl	$-1, %eax	 #, _244
 # .\src\main.cpp:642:     const Boid cell_to_update = map->get_coord(y, x);
	movl	%eax, %r8d	 # tmp1458, _244
 # .\src\main.cpp:643:     if (cell_to_update == -1 ) return;
	je	.L751	 #,
 # .\src\main.cpp:645:     const auto xs = boid_list->m_boid_store->xs;
	movq	0(%r13), %rax	 # boid_list_17(D)->m_boid_store, _245
 # .\src\main.cpp:655:     Boid cell_end = cell_begin + boid_list->m_boid_store->depth[cell_begin];
	movslq	%r8d, %rsi	 # _244, ivtmp.2027
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:1330: 				 __A, __A, __A, __A };
	vbroadcastss	(%r14), %ymm12	 # rules_16(D)->avoid_distance_squared, _251
	vbroadcastss	12(%r14), %ymm5	 # rules_16(D)->sight_range_squared, _253
	vbroadcastss	4(%r14), %ymm1	 # rules_16(D)->avoid_factor, _255
 # .\src\main.cpp:645:     const auto xs = boid_list->m_boid_store->xs;
	movq	(%rax), %rcx	 # _245->xs, xs
 # .\src\main.cpp:647:     const auto vxs = boid_list->m_boid_store->vxs;
	movq	16(%rax), %rdx	 # _245->vxs, vxs
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:1330: 				 __A, __A, __A, __A };
	vmovups	%ymm5, 160(%rsp)	 # _253, %sfp
 # .\src\main.cpp:648:     const auto vys = boid_list->m_boid_store->vys;
	movq	24(%rax), %r15	 # _245->vys, vys
 # .\src\main.cpp:645:     const auto xs = boid_list->m_boid_store->xs;
	movq	%rcx, 456(%rsp)	 # xs, %sfp
 # .\src\main.cpp:646:     const auto ys = boid_list->m_boid_store->ys;
	movq	8(%rax), %rcx	 # _245->ys, ys
 # .\src\main.cpp:655:     Boid cell_end = cell_begin + boid_list->m_boid_store->depth[cell_begin];
	movq	48(%rax), %rax	 # _245->depth, _245->depth
 # .\src\main.cpp:646:     const auto ys = boid_list->m_boid_store->ys;
	movq	%rcx, 496(%rsp)	 # ys, %sfp
 # .\src\main.cpp:655:     Boid cell_end = cell_begin + boid_list->m_boid_store->depth[cell_begin];
	movl	(%rax,%rsi,4), %ecx	 # *_259, cell_end
	addl	%r8d, %ecx	 # _244, cell_end
	movl	%ecx, %eax	 # cell_end, cell_end
 # .\src\main.cpp:657:     for (Boid current_boid = cell_begin; current_boid < cell_end; current_boid += 8) {
	cmpl	%ecx, %r8d	 # cell_end, _244
	jge	.L790	 #,
	vbroadcastss	.LC4(%rip), %ymm4	 #, tmp1427
 # .\src\main.cpp:639:     const auto world_height = map->m_cell_size * map->m_ysize;
	imull	%r9d, %r10d	 # _239, prephitmp_225
	movq	%rsi, %rbp	 # ivtmp.2027, ivtmp.2027
	vbroadcastss	.LC7(%rip), %ymm5	 #, tmp1428
 # .\src\main.cpp:640:     const auto world_width = map->m_cell_size * map->m_xsize;
	imull	%r9d, %ebx	 # _239, world_width
	movl	452(%rsp), %ecx	 # %sfp, ivtmp.2045
	movl	%eax, 696(%rsp)	 # cell_end, %sfp
	vmovups	%ymm4, 128(%rsp)	 # tmp1427, %sfp
	vbroadcastss	.LC9(%rip), %ymm4	 #, tmp1429
	vmovups	%ymm5, 624(%rsp)	 # tmp1428, %sfp
	subl	$3, %ecx	 #, ivtmp.2023
	vbroadcastss	.LC11(%rip), %ymm5	 #, tmp1424
	vmovups	%ymm4, 656(%rsp)	 # tmp1429, %sfp
	vbroadcastss	.LC13(%rip), %ymm4	 #, tmp1425
	vmovups	%ymm5, 528(%rsp)	 # tmp1424, %sfp
	vbroadcastss	.LC15(%rip), %ymm5	 #, tmp1426
 # .\src\main.cpp:639:     const auto world_height = map->m_cell_size * map->m_ysize;
	movl	%r10d, 524(%rsp)	 # prephitmp_225, %sfp
	movl	%ebx, 692(%rsp)	 # world_width, %sfp
	movl	%ecx, 688(%rsp)	 # ivtmp.2023, %sfp
	leal	-3(%r12), %ecx	 #, ivtmp.2015
	movl	%ecx, 520(%rsp)	 # ivtmp.2015, %sfp
	movq	%rdx, %rcx	 # vxs, vxs
	movq	%r14, %rdx	 # rules, rules
	movq	%r15, %r14	 # vys, vys
	vmovups	%ymm4, 560(%rsp)	 # tmp1425, %sfp
	vmovups	%ymm5, 592(%rsp)	 # tmp1426, %sfp
	vmovups	%ymm12, 32(%rsp)	 # _251, %sfp
.L759:
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:905:   return *(__m256_u *)__P;
	movq	456(%rsp), %rax	 # %sfp, xs
	movl	688(%rsp), %r15d	 # %sfp, ivtmp.2023
 # .\src\main.cpp:669:         __m256 avg_vy_vec = _mm256_set1_ps(0.);
	vxorps	%xmm3, %xmm3, %xmm3	 # avg_vy_vec
	movq	%rbp, 504(%rsp)	 # ivtmp.2027, %sfp
	movq	%rdx, 512(%rsp)	 # rules, %sfp
 # .\src\main.cpp:666:         __m256 avg_y_vec = _mm256_set1_ps(0.);
	vmovaps	%ymm3, %ymm4	 # tmp22, avg_y_vec
	vmovaps	%ymm3, %ymm15	 # avg_vy_vec, avg_vy_vec
	vmovaps	%ymm3, %ymm14	 # avg_vx_vec, avg_vx_vec
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:905:   return *(__m256_u *)__P;
	vmovups	(%rax,%rbp,4), %ymm5	 # MEM[(__m256_u * {ref-all})xs_246 + ivtmp.2027_1686 * 4], _266
	movl	%r15d, %ebx	 # ivtmp.2023, ivtmp.2023
	movq	%rcx, %rdx	 # vxs, vxs
	movq	496(%rsp), %rax	 # %sfp, ys
 # .\src\main.cpp:663:         __m256 sep_y_vec = _mm256_set1_ps(0.);
	vmovups	%ymm3, 352(%rsp)	 # sep_y_vec, %sfp
	movq	%r14, %r15	 # vys, vys
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:905:   return *(__m256_u *)__P;
	vmovups	%ymm5, 64(%rsp)	 # _266, %sfp
	vmovups	(%rax,%rbp,4), %ymm5	 # MEM[(__m256_u * {ref-all})ys_247 + ivtmp.2027_1686 * 4], _268
 # .\src\main.cpp:662:         __m256 sep_x_vec = _mm256_set1_ps(0.);
	vmovups	%ymm3, 384(%rsp)	 # sep_x_vec, %sfp
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:905:   return *(__m256_u *)__P;
	vmovups	%ymm5, 96(%rsp)	 # _268, %sfp
 # .\src\main.cpp:671:         __m256i isc = _mm256_set1_epi32(0);
	vpxor	%xmm5, %xmm5, %xmm5	 # isc
	vmovdqu	%ymm5, 416(%rsp)	 # isc, %sfp
 # .\src\main.cpp:665:         __m256 avg_x_vec = _mm256_set1_ps(0.);
	vmovaps	%ymm3, %ymm5	 # tmp22, avg_x_vec
	vmovups	%ymm1, 464(%rsp)	 # _255, %sfp
.L752:
	movl	520(%rsp), %ebp	 # %sfp, ivtmp.2015
 # .\src\main.cpp:675:             Boid row_begin = -1;
	movl	$-1, %r14d	 #, row_begin
	movq	%rdx, 288(%rsp)	 # vxs, %sfp
 # .\src\main.cpp:676:             Boid row_end = -1;
	movl	$-1, %esi	 #, row_end
	vmovups	%ymm15, 192(%rsp)	 # avg_vy_vec, %sfp
	vmovups	%ymm4, 224(%rsp)	 # avg_y_vec, %sfp
	movl	%ebp, %eax	 # ivtmp.2015, ivtmp.2015
	movl	%r14d, %ebp	 # row_begin, row_begin
	vmovups	%ymm14, 256(%rsp)	 # avg_vx_vec, %sfp
	movl	%eax, %r14d	 # ivtmp.2015, ivtmp.2015
	vmovups	%ymm5, 320(%rsp)	 # avg_x_vec, %sfp
	vzeroupper
.L755:
 # .\src\main.cpp:680:                 Boid current = map->get_coord(y + cy, x + cx);
	movl	%r14d, %r8d	 # ivtmp.2015,
	movl	%ebx, %edx	 # ivtmp.2023,
	movq	%rdi, %rcx	 # boid_map,
	call	_ZNK7BoidMap9get_coordEii	 #
 # .\src\main.cpp:681:                 if (current != -1) {
	cmpl	$-1, %eax	 #, _273
	je	.L753	 #,
 # .\src\main.cpp:684:                     row_end = current + boid_list->m_boid_store->depth[current];
	movq	0(%r13), %rdx	 # boid_list_17(D)->m_boid_store, boid_list_17(D)->m_boid_store
 # .\src\main.cpp:682:                     if (row_begin == -1) row_begin = current;
	cmpl	$-1, %ebp	 #, row_begin
 # .\src\main.cpp:684:                     row_end = current + boid_list->m_boid_store->depth[current];
	movslq	%eax, %rcx	 # _273, _273
 # .\src\main.cpp:682:                     if (row_begin == -1) row_begin = current;
	cmove	%eax, %ebp	 # row_begin,, _273, row_begin
 # .\src\main.cpp:684:                     row_end = current + boid_list->m_boid_store->depth[current];
	movq	48(%rdx), %rdx	 # _275->depth, _275->depth
 # .\src\main.cpp:684:                     row_end = current + boid_list->m_boid_store->depth[current];
	addl	(%rdx,%rcx,4), %eax	 # *_279, _273
	movl	%eax, %esi	 # _273, row_end
.L753:
 # .\src\main.cpp:679:             for (int cx = -1; cx <= 1; cx++) {
	addl	$1, %r14d	 #, ivtmp.2015
	cmpl	%r12d, %r14d	 # ivtmp.2041, ivtmp.2015
	jne	.L755	 #,
 # .\src\main.cpp:689:             for (Boid nearby_boid = row_begin; nearby_boid < row_end; nearby_boid += 8) {
	movslq	%ebp, %r14	 # row_begin,
	vmovups	192(%rsp), %ymm15	 # %sfp, avg_vy_vec
	vmovups	224(%rsp), %ymm4	 # %sfp, avg_y_vec
	vmovups	256(%rsp), %ymm14	 # %sfp, avg_vx_vec
	movq	288(%rsp), %rdx	 # %sfp, vxs
	vmovups	320(%rsp), %ymm5	 # %sfp, avg_x_vec
	cmpl	%esi, %r14d	 # row_end, row_begin
	jge	.L756	 #,
	.p2align 4,,10
	.p2align 3
.L757:
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:905:   return *(__m256_u *)__P;
	movq	456(%rsp), %rax	 # %sfp, xs
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vmovups	64(%rsp), %ymm11	 # %sfp, _266
	vmovups	96(%rsp), %ymm12	 # %sfp, _268
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:406:   return (__m256) __builtin_ia32_cmpps256 ((__v8sf)__X, (__v8sf)__Y,
	vmovups	32(%rsp), %ymm8	 # %sfp, _251
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:905:   return *(__m256_u *)__P;
	vmovups	(%rax,%r14,4), %ymm1	 # MEM[(__m256_u * {ref-all})xs_246 + ivtmp.2000_1284 * 4], MEM[(__m256_u * {ref-all})xs_246 + ivtmp.2000_1284 * 4]
	movq	496(%rsp), %rax	 # %sfp, ys
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vsubps	%ymm1, %ymm11, %ymm6	 # MEM[(__m256_u * {ref-all})xs_246 + ivtmp.2000_1284 * 4], _266, _451
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:905:   return *(__m256_u *)__P;
	vmovups	(%rax,%r14,4), %ymm9	 # MEM[(__m256_u * {ref-all})ys_247 + ivtmp.2000_1284 * 4], MEM[(__m256_u * {ref-all})ys_247 + ivtmp.2000_1284 * 4]
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vsubps	%ymm9, %ymm12, %ymm7	 # MEM[(__m256_u * {ref-all})ys_247 + ivtmp.2000_1284 * 4], _268, _452
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:320:   return (__m256) ((__v8sf)__A * (__v8sf)__B);
	vmulps	%ymm6, %ymm6, %ymm2	 # _451, _451, tmp1107
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:149:   return (__m256) ((__v8sf)__A + (__v8sf)__B);
	vfmadd231ps	%ymm7, %ymm7, %ymm2	 # _452, _452, _434
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:406:   return (__m256) __builtin_ia32_cmpps256 ((__v8sf)__X, (__v8sf)__Y,
	vcmpps	$1, 160(%rsp), %ymm2, %ymm0	 #, %sfp, _434, tmp1108
	vcmpps	$1, %ymm8, %ymm2, %ymm3	 #, _251, _434, tmp1111
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vsubps	%ymm2, %ymm8, %ymm2	 # _434, _251, _439
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:320:   return (__m256) ((__v8sf)__A * (__v8sf)__B);
	vmulps	%ymm2, %ymm2, %ymm2	 # _439, _439, _440
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:186:   return (__m256) __builtin_ia32_andnps256 ((__v8sf)__A, (__v8sf)__B);
	vandnps	%ymm0, %ymm3, %ymm0	 # tmp1108, tmp1111, tmp1114
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:174:   return (__m256) __builtin_ia32_andps256 ((__v8sf)__A, (__v8sf)__B);
	vandps	128(%rsp), %ymm0, %ymm0	 # %sfp, tmp1114, tmp1115
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/fmaintrin.h:65:   return (__m256)__builtin_ia32_vfmaddps256 ((__v8sf)__A, (__v8sf)__B,
	vfmadd231ps	(%rdx,%r14,4), %ymm0, %ymm14	 # MEM[(__m256_u * {ref-all})vxs_248 + ivtmp.2000_1284 * 4], tmp1115, tmp1122
	vfmadd231ps	(%r15,%r14,4), %ymm0, %ymm15	 # MEM[(__m256_u * {ref-all})vys_249 + ivtmp.2000_1284 * 4], tmp1115, tmp1123
	vfmadd231ps	%ymm1, %ymm0, %ymm5	 # MEM[(__m256_u * {ref-all})xs_246 + ivtmp.2000_1284 * 4], tmp1115, tmp1124
	vfmadd231ps	%ymm9, %ymm0, %ymm4	 # MEM[(__m256_u * {ref-all})ys_247 + ivtmp.2000_1284 * 4], tmp1115, tmp1125
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:320:   return (__m256) ((__v8sf)__A * (__v8sf)__B);
	vmulps	%ymm6, %ymm2, %ymm6	 # _451, _440, tmp1118
	vmulps	%ymm7, %ymm2, %ymm2	 # _452, _440, tmp1120
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:174:   return (__m256) __builtin_ia32_andps256 ((__v8sf)__A, (__v8sf)__B);
	vandps	%ymm6, %ymm3, %ymm6	 # tmp1118, tmp1111, tmp1119
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:149:   return (__m256) ((__v8sf)__A + (__v8sf)__B);
	vaddps	384(%rsp), %ymm6, %ymm6	 # %sfp, tmp1119, _150
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:174:   return (__m256) __builtin_ia32_andps256 ((__v8sf)__A, (__v8sf)__B);
	vandps	%ymm2, %ymm3, %ymm3	 # tmp1120, tmp1111, tmp1121
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:475:   return (__m256i)__builtin_ia32_cvtps2dq256 ((__v8sf) __A);
	vcvtps2dq	%ymm0, %ymm2	 # tmp1115, tmp1126
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avx2intrin.h:1065:   return (__m256) __builtin_ia32_permvarsf256 ((__v8sf)__X, (__v8si)__Y);
	vmovdqu	.LC5(%rip), %ymm0	 #, tmp2018
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:149:   return (__m256) ((__v8sf)__A + (__v8sf)__B);
	vaddps	352(%rsp), %ymm3, %ymm8	 # %sfp, tmp1121, _140
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:475:   return (__m256i)__builtin_ia32_cvtps2dq256 ((__v8sf) __A);
	vmovdqu	%ymm2, 192(%rsp)	 # tmp1126, %sfp
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avx2intrin.h:1065:   return (__m256) __builtin_ia32_permvarsf256 ((__v8sf)__X, (__v8si)__Y);
	vpermps	%ymm1, %ymm0, %ymm0	 # MEM[(__m256_u * {ref-all})xs_246 + ivtmp.2000_1284 * 4], tmp2018, tmp1128
	vmovdqu	.LC5(%rip), %ymm1	 #, tmp2017
	vpermps	(%rdx,%r14,4), %ymm1, %ymm10	 # MEM[(__m256_u * {ref-all})vxs_248 + ivtmp.2000_1284 * 4], tmp2016, tmp1132
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vsubps	%ymm0, %ymm11, %ymm3	 # tmp1128, _266, _478
	vmovups	32(%rsp), %ymm11	 # %sfp, _251
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avx2intrin.h:1065:   return (__m256) __builtin_ia32_permvarsf256 ((__v8sf)__X, (__v8si)__Y);
	vpermps	%ymm9, %ymm1, %ymm13	 # MEM[(__m256_u * {ref-all})ys_247 + ivtmp.2000_1284 * 4], tmp2017, tmp1130
	vpermps	(%r15,%r14,4), %ymm1, %ymm9	 # MEM[(__m256_u * {ref-all})vys_249 + ivtmp.2000_1284 * 4], tmp2015, tmp1134
 # .\src\main.cpp:689:             for (Boid nearby_boid = row_begin; nearby_boid < row_end; nearby_boid += 8) {
	addq	$8, %r14	 #, ivtmp.2000
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vsubps	%ymm13, %ymm12, %ymm12	 # tmp1130, _268, _479
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:320:   return (__m256) ((__v8sf)__A * (__v8sf)__B);
	vmulps	%ymm3, %ymm3, %ymm2	 # _478, _478, tmp1136
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:149:   return (__m256) ((__v8sf)__A + (__v8sf)__B);
	vfmadd231ps	%ymm12, %ymm12, %ymm2	 # _479, _479, _482
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:406:   return (__m256) __builtin_ia32_cmpps256 ((__v8sf)__X, (__v8sf)__Y,
	vcmpps	$1, 32(%rsp), %ymm2, %ymm7	 #, %sfp, _482, tmp1140
	vcmpps	$1, 160(%rsp), %ymm2, %ymm1	 #, %sfp, _482, tmp1137
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vsubps	%ymm2, %ymm11, %ymm2	 # _482, _251, _487
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:320:   return (__m256) ((__v8sf)__A * (__v8sf)__B);
	vmulps	%ymm2, %ymm2, %ymm2	 # _487, _487, _488
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:186:   return (__m256) __builtin_ia32_andnps256 ((__v8sf)__A, (__v8sf)__B);
	vandnps	%ymm1, %ymm7, %ymm1	 # tmp1137, tmp1140, tmp1143
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:174:   return (__m256) __builtin_ia32_andps256 ((__v8sf)__A, (__v8sf)__B);
	vandps	128(%rsp), %ymm1, %ymm1	 # %sfp, tmp1143, tmp1144
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/fmaintrin.h:65:   return (__m256)__builtin_ia32_vfmaddps256 ((__v8sf)__A, (__v8sf)__B,
	vfmadd231ps	%ymm9, %ymm1, %ymm15	 # tmp1134, tmp1144, tmp1123
	vfmadd231ps	%ymm0, %ymm1, %ymm5	 # tmp1128, tmp1144, tmp1153
	vfmadd231ps	%ymm13, %ymm1, %ymm4	 # tmp1130, tmp1144, tmp1154
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:320:   return (__m256) ((__v8sf)__A * (__v8sf)__B);
	vmulps	%ymm2, %ymm3, %ymm3	 # _488, _478, tmp1147
	vmulps	%ymm2, %ymm12, %ymm12	 # _488, _479, tmp1149
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:174:   return (__m256) __builtin_ia32_andps256 ((__v8sf)__A, (__v8sf)__B);
	vandps	%ymm3, %ymm7, %ymm3	 # tmp1147, tmp1140, tmp1148
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:149:   return (__m256) ((__v8sf)__A + (__v8sf)__B);
	vaddps	%ymm3, %ymm6, %ymm3	 # tmp1148, _150, _491
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:174:   return (__m256) __builtin_ia32_andps256 ((__v8sf)__A, (__v8sf)__B);
	vandps	%ymm12, %ymm7, %ymm6	 # tmp1149, tmp1140, tmp1150
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/fmaintrin.h:65:   return (__m256)__builtin_ia32_vfmaddps256 ((__v8sf)__A, (__v8sf)__B,
	vmovaps	%ymm14, %ymm7	 # tmp1122, tmp1122
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vmovups	96(%rsp), %ymm12	 # %sfp, _268
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/fmaintrin.h:65:   return (__m256)__builtin_ia32_vfmaddps256 ((__v8sf)__A, (__v8sf)__B,
	vfmadd231ps	%ymm10, %ymm1, %ymm7	 # tmp1132, tmp1144, tmp1122
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:475:   return (__m256i)__builtin_ia32_cvtps2dq256 ((__v8sf) __A);
	vcvtps2dq	%ymm1, %ymm1	 # tmp1144, tmp1155
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:149:   return (__m256) ((__v8sf)__A + (__v8sf)__B);
	vaddps	%ymm6, %ymm8, %ymm6	 # tmp1150, _140, _494
	vpaddd	192(%rsp), %ymm1, %ymm2	 # %sfp, tmp1155, _512
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avx2intrin.h:1065:   return (__m256) __builtin_ia32_permvarsf256 ((__v8sf)__X, (__v8si)__Y);
	vmovdqu	.LC5(%rip), %ymm1	 #, tmp2010
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/fmaintrin.h:65:   return (__m256)__builtin_ia32_vfmaddps256 ((__v8sf)__A, (__v8sf)__B,
	vmovaps	%ymm15, %ymm8	 # tmp1123, tmp1152
	vmovdqu	%ymm2, 192(%rsp)	 # _512, %sfp
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avx2intrin.h:1065:   return (__m256) __builtin_ia32_permvarsf256 ((__v8sf)__X, (__v8si)__Y);
	vmovdqu	.LC5(%rip), %ymm2	 #, tmp2009
	vpermps	%ymm0, %ymm1, %ymm1	 # tmp1128, tmp2010, tmp1157
	vpermps	%ymm13, %ymm2, %ymm0	 # tmp1130, tmp2009, tmp1159
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vmovups	64(%rsp), %ymm13	 # %sfp, _266
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avx2intrin.h:1065:   return (__m256) __builtin_ia32_permvarsf256 ((__v8sf)__X, (__v8si)__Y);
	vpermps	%ymm10, %ymm2, %ymm10	 # tmp1132, tmp2008, tmp1161
	vpermps	%ymm9, %ymm2, %ymm2	 # tmp1134, tmp2007, tmp1163
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vsubps	%ymm0, %ymm12, %ymm15	 # tmp1159, _268, _522
	vsubps	%ymm1, %ymm13, %ymm9	 # tmp1157, _266, _521
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:320:   return (__m256) ((__v8sf)__A * (__v8sf)__B);
	vmulps	%ymm9, %ymm9, %ymm13	 # _521, _521, tmp1165
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:149:   return (__m256) ((__v8sf)__A + (__v8sf)__B);
	vfmadd231ps	%ymm15, %ymm15, %ymm13	 # _522, _522, _525
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:406:   return (__m256) __builtin_ia32_cmpps256 ((__v8sf)__X, (__v8sf)__Y,
	vcmpps	$1, 160(%rsp), %ymm13, %ymm12	 #, %sfp, _525, tmp1166
	vcmpps	$1, %ymm11, %ymm13, %ymm14	 #, _251, _525, tmp1169
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vsubps	%ymm13, %ymm11, %ymm13	 # _525, _251, _530
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:320:   return (__m256) ((__v8sf)__A * (__v8sf)__B);
	vmulps	%ymm13, %ymm13, %ymm13	 # _530, _530, _531
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:186:   return (__m256) __builtin_ia32_andnps256 ((__v8sf)__A, (__v8sf)__B);
	vandnps	%ymm12, %ymm14, %ymm12	 # tmp1166, tmp1169, tmp1172
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:174:   return (__m256) __builtin_ia32_andps256 ((__v8sf)__A, (__v8sf)__B);
	vandps	128(%rsp), %ymm12, %ymm12	 # %sfp, tmp1172, tmp1173
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/fmaintrin.h:65:   return (__m256)__builtin_ia32_vfmaddps256 ((__v8sf)__A, (__v8sf)__B,
	vfmadd231ps	%ymm2, %ymm12, %ymm8	 # tmp1163, tmp1173, tmp1181
	vfmadd231ps	%ymm1, %ymm12, %ymm5	 # tmp1157, tmp1173, tmp1182
	vfmadd231ps	%ymm10, %ymm12, %ymm7	 # tmp1161, tmp1173, tmp1180
	vfmadd231ps	%ymm0, %ymm12, %ymm4	 # tmp1159, tmp1173, tmp1183
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:320:   return (__m256) ((__v8sf)__A * (__v8sf)__B);
	vmulps	%ymm13, %ymm9, %ymm9	 # _531, _521, tmp1176
	vmulps	%ymm13, %ymm15, %ymm15	 # _531, _522, tmp1178
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:174:   return (__m256) __builtin_ia32_andps256 ((__v8sf)__A, (__v8sf)__B);
	vandps	%ymm9, %ymm14, %ymm9	 # tmp1176, tmp1169, tmp1177
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:149:   return (__m256) ((__v8sf)__A + (__v8sf)__B);
	vaddps	%ymm9, %ymm3, %ymm9	 # tmp1177, _491, _534
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:475:   return (__m256i)__builtin_ia32_cvtps2dq256 ((__v8sf) __A);
	vcvtps2dq	%ymm12, %ymm3	 # tmp1173, tmp1184
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:174:   return (__m256) __builtin_ia32_andps256 ((__v8sf)__A, (__v8sf)__B);
	vandps	%ymm15, %ymm14, %ymm14	 # tmp1178, tmp1169, tmp1179
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:475:   return (__m256i)__builtin_ia32_cvtps2dq256 ((__v8sf) __A);
	vmovdqu	%ymm3, 224(%rsp)	 # tmp1184, %sfp
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avx2intrin.h:1065:   return (__m256) __builtin_ia32_permvarsf256 ((__v8sf)__X, (__v8si)__Y);
	vmovdqu	.LC5(%rip), %ymm3	 #, tmp2004
	vmovdqu	.LC5(%rip), %ymm13	 #, tmp2001
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:149:   return (__m256) ((__v8sf)__A + (__v8sf)__B);
	vaddps	%ymm14, %ymm6, %ymm6	 # tmp1179, _494, _537
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vmovups	96(%rsp), %ymm12	 # %sfp, _268
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avx2intrin.h:1065:   return (__m256) __builtin_ia32_permvarsf256 ((__v8sf)__X, (__v8si)__Y);
	vpermps	%ymm2, %ymm13, %ymm2	 # tmp1163, tmp2001, tmp1192
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vmovups	64(%rsp), %ymm13	 # %sfp, _266
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avx2intrin.h:1065:   return (__m256) __builtin_ia32_permvarsf256 ((__v8sf)__X, (__v8si)__Y);
	vpermps	%ymm1, %ymm3, %ymm1	 # tmp1157, tmp2004, tmp1186
	vpermps	%ymm0, %ymm3, %ymm0	 # tmp1159, tmp2003, tmp1188
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vsubps	%ymm0, %ymm12, %ymm15	 # tmp1188, _268, _565
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avx2intrin.h:1065:   return (__m256) __builtin_ia32_permvarsf256 ((__v8sf)__X, (__v8si)__Y);
	vpermps	%ymm10, %ymm3, %ymm3	 # tmp1161, tmp2002, tmp1190
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vsubps	%ymm1, %ymm13, %ymm13	 # tmp1186, _266, _564
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:320:   return (__m256) ((__v8sf)__A * (__v8sf)__B);
	vmulps	%ymm13, %ymm13, %ymm12	 # _564, _564, tmp1194
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:149:   return (__m256) ((__v8sf)__A + (__v8sf)__B);
	vfmadd231ps	%ymm15, %ymm15, %ymm12	 # _565, _565, _568
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:406:   return (__m256) __builtin_ia32_cmpps256 ((__v8sf)__X, (__v8sf)__Y,
	vcmpps	$1, 160(%rsp), %ymm12, %ymm10	 #, %sfp, _568, tmp1195
	vcmpps	$1, %ymm11, %ymm12, %ymm14	 #, _251, _568, tmp1198
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vsubps	%ymm12, %ymm11, %ymm12	 # _568, _251, _573
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:320:   return (__m256) ((__v8sf)__A * (__v8sf)__B);
	vmulps	%ymm12, %ymm12, %ymm12	 # _573, _573, _574
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:186:   return (__m256) __builtin_ia32_andnps256 ((__v8sf)__A, (__v8sf)__B);
	vandnps	%ymm10, %ymm14, %ymm10	 # tmp1195, tmp1198, tmp1201
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:174:   return (__m256) __builtin_ia32_andps256 ((__v8sf)__A, (__v8sf)__B);
	vandps	128(%rsp), %ymm10, %ymm10	 # %sfp, tmp1201, tmp1202
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/fmaintrin.h:65:   return (__m256)__builtin_ia32_vfmaddps256 ((__v8sf)__A, (__v8sf)__B,
	vfmadd231ps	%ymm3, %ymm10, %ymm7	 # tmp1190, tmp1202, tmp1209
	vfmadd231ps	%ymm2, %ymm10, %ymm8	 # tmp1192, tmp1202, tmp1210
	vfmadd231ps	%ymm1, %ymm10, %ymm5	 # tmp1186, tmp1202, tmp1211
	vfmadd231ps	%ymm0, %ymm10, %ymm4	 # tmp1188, tmp1202, tmp1212
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:475:   return (__m256i)__builtin_ia32_cvtps2dq256 ((__v8sf) __A);
	vcvtps2dq	%ymm10, %ymm10	 # tmp1202, tmp1213
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:320:   return (__m256) ((__v8sf)__A * (__v8sf)__B);
	vmulps	%ymm12, %ymm15, %ymm15	 # _574, _565, tmp1207
	vmulps	%ymm12, %ymm13, %ymm13	 # _574, _564, tmp1205
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vmovups	64(%rsp), %ymm12	 # %sfp, _266
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:174:   return (__m256) __builtin_ia32_andps256 ((__v8sf)__A, (__v8sf)__B);
	vandps	%ymm13, %ymm14, %ymm13	 # tmp1205, tmp1198, tmp1206
	vandps	%ymm15, %ymm14, %ymm14	 # tmp1207, tmp1198, tmp1208
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avx2intrin.h:1065:   return (__m256) __builtin_ia32_permvarsf256 ((__v8sf)__X, (__v8si)__Y);
	vmovdqu	.LC5(%rip), %ymm15	 #, tmp1996
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:149:   return (__m256) ((__v8sf)__A + (__v8sf)__B);
	vaddps	%ymm13, %ymm9, %ymm13	 # tmp1206, _534, _577
	vaddps	%ymm14, %ymm6, %ymm6	 # tmp1208, _537, _580
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avx2intrin.h:1065:   return (__m256) __builtin_ia32_permvarsf256 ((__v8sf)__X, (__v8si)__Y);
	vpermps	%ymm1, %ymm15, %ymm1	 # tmp1186, tmp1996, tmp1216
	vpermps	%ymm0, %ymm15, %ymm0	 # tmp1188, tmp1995, tmp1218
	vpermps	%ymm3, %ymm15, %ymm3	 # tmp1190, tmp1994, tmp1220
	vpaddd	224(%rsp), %ymm10, %ymm9	 # %sfp, tmp1213, tmp1215
	vpermps	%ymm2, %ymm15, %ymm2	 # tmp1192, tmp1993, tmp1222
	vpaddd	192(%rsp), %ymm9, %ymm10	 # %sfp, tmp1215, _518
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vmovups	96(%rsp), %ymm15	 # %sfp, _268
	vmovdqu	%ymm10, 192(%rsp)	 # _518, %sfp
	vsubps	%ymm1, %ymm12, %ymm10	 # tmp1216, _266, _607
	vsubps	%ymm0, %ymm15, %ymm15	 # tmp1218, _268, _608
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:320:   return (__m256) ((__v8sf)__A * (__v8sf)__B);
	vmulps	%ymm10, %ymm10, %ymm12	 # _607, _607, tmp1224
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:149:   return (__m256) ((__v8sf)__A + (__v8sf)__B);
	vfmadd231ps	%ymm15, %ymm15, %ymm12	 # _608, _608, _611
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:406:   return (__m256) __builtin_ia32_cmpps256 ((__v8sf)__X, (__v8sf)__Y,
	vcmpps	$1, 160(%rsp), %ymm12, %ymm9	 #, %sfp, _611, tmp1225
	vcmpps	$1, %ymm11, %ymm12, %ymm14	 #, _251, _611, tmp1228
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vsubps	%ymm12, %ymm11, %ymm12	 # _611, _251, _616
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:320:   return (__m256) ((__v8sf)__A * (__v8sf)__B);
	vmulps	%ymm12, %ymm12, %ymm12	 # _616, _616, _617
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:186:   return (__m256) __builtin_ia32_andnps256 ((__v8sf)__A, (__v8sf)__B);
	vandnps	%ymm9, %ymm14, %ymm9	 # tmp1225, tmp1228, tmp1231
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:174:   return (__m256) __builtin_ia32_andps256 ((__v8sf)__A, (__v8sf)__B);
	vandps	128(%rsp), %ymm9, %ymm9	 # %sfp, tmp1231, tmp1232
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/fmaintrin.h:65:   return (__m256)__builtin_ia32_vfmaddps256 ((__v8sf)__A, (__v8sf)__B,
	vfmadd231ps	%ymm1, %ymm9, %ymm5	 # tmp1216, tmp1232, tmp1241
	vfmadd231ps	%ymm3, %ymm9, %ymm7	 # tmp1220, tmp1232, tmp1239
	vfmadd231ps	%ymm2, %ymm9, %ymm8	 # tmp1222, tmp1232, tmp1240
	vfmadd231ps	%ymm0, %ymm9, %ymm4	 # tmp1218, tmp1232, tmp1242
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:320:   return (__m256) ((__v8sf)__A * (__v8sf)__B);
	vmulps	%ymm12, %ymm15, %ymm15	 # _617, _608, tmp1237
	vmulps	%ymm12, %ymm10, %ymm10	 # _617, _607, tmp1235
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:174:   return (__m256) __builtin_ia32_andps256 ((__v8sf)__A, (__v8sf)__B);
	vandps	%ymm15, %ymm14, %ymm12	 # tmp1237, tmp1228, tmp1238
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vmovups	96(%rsp), %ymm15	 # %sfp, _268
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:149:   return (__m256) ((__v8sf)__A + (__v8sf)__B);
	vaddps	%ymm12, %ymm6, %ymm12	 # tmp1238, _580, _623
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:174:   return (__m256) __builtin_ia32_andps256 ((__v8sf)__A, (__v8sf)__B);
	vandps	%ymm10, %ymm14, %ymm10	 # tmp1235, tmp1228, tmp1236
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:475:   return (__m256i)__builtin_ia32_cvtps2dq256 ((__v8sf) __A);
	vcvtps2dq	%ymm9, %ymm6	 # tmp1232, tmp1243
	vmovdqu	%ymm6, 224(%rsp)	 # tmp1243, %sfp
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avx2intrin.h:1065:   return (__m256) __builtin_ia32_permvarsf256 ((__v8sf)__X, (__v8si)__Y);
	vmovdqu	.LC5(%rip), %ymm6	 #, tmp1990
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:149:   return (__m256) ((__v8sf)__A + (__v8sf)__B);
	vaddps	%ymm10, %ymm13, %ymm10	 # tmp1236, _577, _620
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vmovups	64(%rsp), %ymm13	 # %sfp, _266
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avx2intrin.h:1065:   return (__m256) __builtin_ia32_permvarsf256 ((__v8sf)__X, (__v8si)__Y);
	vpermps	%ymm1, %ymm6, %ymm1	 # tmp1216, tmp1990, tmp1245
	vpermps	%ymm0, %ymm6, %ymm0	 # tmp1218, tmp1989, tmp1247
	vpermps	%ymm3, %ymm6, %ymm3	 # tmp1220, tmp1988, tmp1249
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vsubps	%ymm1, %ymm13, %ymm13	 # tmp1245, _266, _650
	vsubps	%ymm0, %ymm15, %ymm15	 # tmp1247, _268, _651
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avx2intrin.h:1065:   return (__m256) __builtin_ia32_permvarsf256 ((__v8sf)__X, (__v8si)__Y);
	vpermps	%ymm2, %ymm6, %ymm2	 # tmp1222, tmp1987, tmp1251
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:320:   return (__m256) ((__v8sf)__A * (__v8sf)__B);
	vmulps	%ymm13, %ymm13, %ymm9	 # _650, _650, tmp1253
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:149:   return (__m256) ((__v8sf)__A + (__v8sf)__B);
	vfmadd231ps	%ymm15, %ymm15, %ymm9	 # _651, _651, _654
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:406:   return (__m256) __builtin_ia32_cmpps256 ((__v8sf)__X, (__v8sf)__Y,
	vcmpps	$1, 160(%rsp), %ymm9, %ymm6	 #, %sfp, _654, tmp1254
	vcmpps	$1, %ymm11, %ymm9, %ymm14	 #, _251, _654, tmp1257
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vsubps	%ymm9, %ymm11, %ymm9	 # _654, _251, _659
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:320:   return (__m256) ((__v8sf)__A * (__v8sf)__B);
	vmulps	%ymm9, %ymm9, %ymm9	 # _659, _659, _660
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:186:   return (__m256) __builtin_ia32_andnps256 ((__v8sf)__A, (__v8sf)__B);
	vandnps	%ymm6, %ymm14, %ymm6	 # tmp1254, tmp1257, tmp1260
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:174:   return (__m256) __builtin_ia32_andps256 ((__v8sf)__A, (__v8sf)__B);
	vandps	128(%rsp), %ymm6, %ymm6	 # %sfp, tmp1260, tmp1261
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/fmaintrin.h:65:   return (__m256)__builtin_ia32_vfmaddps256 ((__v8sf)__A, (__v8sf)__B,
	vfmadd231ps	%ymm3, %ymm6, %ymm7	 # tmp1249, tmp1261, tmp1268
	vfmadd231ps	%ymm2, %ymm6, %ymm8	 # tmp1251, tmp1261, tmp1269
	vfmadd231ps	%ymm1, %ymm6, %ymm5	 # tmp1245, tmp1261, tmp1270
	vfmadd231ps	%ymm0, %ymm6, %ymm4	 # tmp1247, tmp1261, tmp1271
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:475:   return (__m256i)__builtin_ia32_cvtps2dq256 ((__v8sf) __A);
	vcvtps2dq	%ymm6, %ymm6	 # tmp1261, tmp1272
	vpaddd	224(%rsp), %ymm6, %ymm6	 # %sfp, tmp1272, tmp1274
	vpaddd	416(%rsp), %ymm6, %ymm6	 # %sfp, tmp1274, tmp1275
	vpaddd	192(%rsp), %ymm6, %ymm6	 # %sfp, tmp1275, _555
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:320:   return (__m256) ((__v8sf)__A * (__v8sf)__B);
	vmulps	%ymm9, %ymm13, %ymm13	 # _660, _650, tmp1264
	vmovdqu	%ymm6, 192(%rsp)	 # _555, %sfp
	vmulps	%ymm9, %ymm15, %ymm15	 # _660, _651, tmp1266
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avx2intrin.h:1065:   return (__m256) __builtin_ia32_permvarsf256 ((__v8sf)__X, (__v8si)__Y);
	vmovdqu	.LC5(%rip), %ymm6	 #, tmp1982
	vpermps	%ymm1, %ymm6, %ymm1	 # tmp1245, tmp1982, tmp1276
	vpermps	%ymm0, %ymm6, %ymm0	 # tmp1247, tmp1981, tmp1278
	vpermps	%ymm3, %ymm6, %ymm3	 # tmp1249, tmp1980, tmp1280
	vpermps	%ymm2, %ymm6, %ymm2	 # tmp1251, tmp1979, tmp1282
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:174:   return (__m256) __builtin_ia32_andps256 ((__v8sf)__A, (__v8sf)__B);
	vandps	%ymm13, %ymm14, %ymm13	 # tmp1264, tmp1257, tmp1265
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:149:   return (__m256) ((__v8sf)__A + (__v8sf)__B);
	vaddps	%ymm13, %ymm10, %ymm13	 # tmp1265, _620, _663
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:174:   return (__m256) __builtin_ia32_andps256 ((__v8sf)__A, (__v8sf)__B);
	vandps	%ymm15, %ymm14, %ymm10	 # tmp1266, tmp1257, tmp1267
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vmovups	96(%rsp), %ymm15	 # %sfp, _268
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:149:   return (__m256) ((__v8sf)__A + (__v8sf)__B);
	vaddps	%ymm10, %ymm12, %ymm10	 # tmp1267, _623, _666
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vmovups	64(%rsp), %ymm12	 # %sfp, _266
	vsubps	%ymm0, %ymm15, %ymm15	 # tmp1278, _268, _694
	vsubps	%ymm1, %ymm12, %ymm6	 # tmp1276, _266, _693
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:320:   return (__m256) ((__v8sf)__A * (__v8sf)__B);
	vmulps	%ymm6, %ymm6, %ymm12	 # _693, _693, tmp1284
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:149:   return (__m256) ((__v8sf)__A + (__v8sf)__B);
	vfmadd231ps	%ymm15, %ymm15, %ymm12	 # _694, _694, _697
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:406:   return (__m256) __builtin_ia32_cmpps256 ((__v8sf)__X, (__v8sf)__Y,
	vcmpps	$1, 160(%rsp), %ymm12, %ymm9	 #, %sfp, _697, tmp1285
	vcmpps	$1, %ymm11, %ymm12, %ymm14	 #, _251, _697, tmp1288
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vsubps	%ymm12, %ymm11, %ymm12	 # _697, _251, _702
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:320:   return (__m256) ((__v8sf)__A * (__v8sf)__B);
	vmulps	%ymm12, %ymm12, %ymm12	 # _702, _702, _703
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:186:   return (__m256) __builtin_ia32_andnps256 ((__v8sf)__A, (__v8sf)__B);
	vandnps	%ymm9, %ymm14, %ymm9	 # tmp1285, tmp1288, tmp1291
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:174:   return (__m256) __builtin_ia32_andps256 ((__v8sf)__A, (__v8sf)__B);
	vandps	128(%rsp), %ymm9, %ymm9	 # %sfp, tmp1291, tmp1292
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/fmaintrin.h:65:   return (__m256)__builtin_ia32_vfmaddps256 ((__v8sf)__A, (__v8sf)__B,
	vfmadd231ps	%ymm3, %ymm9, %ymm7	 # tmp1280, tmp1292, tmp1299
	vfmadd231ps	%ymm2, %ymm9, %ymm8	 # tmp1282, tmp1292, tmp1300
	vfmadd231ps	%ymm1, %ymm9, %ymm5	 # tmp1276, tmp1292, tmp1301
	vfmadd231ps	%ymm0, %ymm9, %ymm4	 # tmp1278, tmp1292, tmp1302
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:475:   return (__m256i)__builtin_ia32_cvtps2dq256 ((__v8sf) __A);
	vcvtps2dq	%ymm9, %ymm9	 # tmp1292, tmp1303
	vmovdqu	%ymm9, 224(%rsp)	 # tmp1303, %sfp
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:320:   return (__m256) ((__v8sf)__A * (__v8sf)__B);
	vmulps	%ymm12, %ymm6, %ymm6	 # _703, _693, tmp1295
	vmulps	%ymm12, %ymm15, %ymm15	 # _703, _694, tmp1297
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avx2intrin.h:1065:   return (__m256) __builtin_ia32_permvarsf256 ((__v8sf)__X, (__v8si)__Y);
	vmovdqu	.LC5(%rip), %ymm12	 #, tmp1976
	vpermps	%ymm1, %ymm12, %ymm12	 # tmp1276, tmp1976, tmp1305
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:174:   return (__m256) __builtin_ia32_andps256 ((__v8sf)__A, (__v8sf)__B);
	vandps	%ymm6, %ymm14, %ymm6	 # tmp1295, tmp1288, tmp1296
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:149:   return (__m256) ((__v8sf)__A + (__v8sf)__B);
	vaddps	%ymm6, %ymm13, %ymm6	 # tmp1296, _663, _706
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avx2intrin.h:1065:   return (__m256) __builtin_ia32_permvarsf256 ((__v8sf)__X, (__v8si)__Y);
	vmovdqu	.LC5(%rip), %ymm13	 #, tmp1975
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:174:   return (__m256) __builtin_ia32_andps256 ((__v8sf)__A, (__v8sf)__B);
	vandps	%ymm15, %ymm14, %ymm14	 # tmp1297, tmp1288, tmp1298
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:149:   return (__m256) ((__v8sf)__A + (__v8sf)__B);
	vaddps	%ymm14, %ymm10, %ymm10	 # tmp1298, _666, _709
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avx2intrin.h:1065:   return (__m256) __builtin_ia32_permvarsf256 ((__v8sf)__X, (__v8si)__Y);
	vpermps	%ymm0, %ymm13, %ymm9	 # tmp1278, tmp1975, tmp1307
	vpermps	%ymm3, %ymm13, %ymm14	 # tmp1280, tmp1974, tmp1309
	vpermps	%ymm2, %ymm13, %ymm15	 # tmp1282, tmp1973, tmp1311
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vmovups	64(%rsp), %ymm13	 # %sfp, _266
	vmovups	96(%rsp), %ymm1	 # %sfp, _268
	vsubps	%ymm12, %ymm13, %ymm2	 # tmp1305, _266, _736
	vsubps	%ymm9, %ymm1, %ymm13	 # tmp1307, _268, _737
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:320:   return (__m256) ((__v8sf)__A * (__v8sf)__B);
	vmulps	%ymm2, %ymm2, %ymm1	 # _736, _736, tmp1313
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:149:   return (__m256) ((__v8sf)__A + (__v8sf)__B);
	vfmadd231ps	%ymm13, %ymm13, %ymm1	 # _737, _737, _740
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:406:   return (__m256) __builtin_ia32_cmpps256 ((__v8sf)__X, (__v8sf)__Y,
	vcmpps	$1, 160(%rsp), %ymm1, %ymm0	 #, %sfp, _740, tmp1314
	vcmpps	$1, %ymm11, %ymm1, %ymm3	 #, _251, _740, tmp1317
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vsubps	%ymm1, %ymm11, %ymm1	 # _740, _251, _745
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:320:   return (__m256) ((__v8sf)__A * (__v8sf)__B);
	vmulps	%ymm1, %ymm1, %ymm1	 # _745, _745, _746
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:186:   return (__m256) __builtin_ia32_andnps256 ((__v8sf)__A, (__v8sf)__B);
	vandnps	%ymm0, %ymm3, %ymm0	 # tmp1314, tmp1317, tmp1320
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:174:   return (__m256) __builtin_ia32_andps256 ((__v8sf)__A, (__v8sf)__B);
	vandps	128(%rsp), %ymm0, %ymm0	 # %sfp, tmp1320, tmp1321
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/fmaintrin.h:65:   return (__m256)__builtin_ia32_vfmaddps256 ((__v8sf)__A, (__v8sf)__B,
	vfmadd132ps	%ymm0, %ymm7, %ymm14	 # tmp1321, tmp1299, avg_vx_vec
	vfmadd132ps	%ymm0, %ymm8, %ymm15	 # tmp1321, tmp1300, avg_vy_vec
	vfmadd231ps	%ymm12, %ymm0, %ymm5	 # tmp1305, tmp1321, avg_x_vec
	vfmadd231ps	%ymm9, %ymm0, %ymm4	 # tmp1307, tmp1321, avg_y_vec
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:475:   return (__m256i)__builtin_ia32_cvtps2dq256 ((__v8sf) __A);
	vcvtps2dq	%ymm0, %ymm0	 # tmp1321, tmp1332
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avx2intrin.h:121:   return (__m256i) ((__v8su)__A + (__v8su)__B);
	vpaddd	224(%rsp), %ymm0, %ymm0	 # %sfp, tmp1332, tmp1334
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avx2intrin.h:121:   return (__m256i) ((__v8su)__A + (__v8su)__B);
	vpaddd	192(%rsp), %ymm0, %ymm7	 # %sfp, tmp1334, tmp1806
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:320:   return (__m256) ((__v8sf)__A * (__v8sf)__B);
	vmulps	%ymm1, %ymm2, %ymm2	 # _746, _736, tmp1324
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avx2intrin.h:121:   return (__m256i) ((__v8su)__A + (__v8su)__B);
	vmovdqu	%ymm7, 416(%rsp)	 # tmp1806, %sfp
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:320:   return (__m256) ((__v8sf)__A * (__v8sf)__B);
	vmulps	%ymm1, %ymm13, %ymm13	 # _746, _737, tmp1326
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:174:   return (__m256) __builtin_ia32_andps256 ((__v8sf)__A, (__v8sf)__B);
	vandps	%ymm2, %ymm3, %ymm2	 # tmp1324, tmp1317, tmp1325
	vandps	%ymm13, %ymm3, %ymm3	 # tmp1326, tmp1317, tmp1327
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:149:   return (__m256) ((__v8sf)__A + (__v8sf)__B);
	vaddps	%ymm2, %ymm6, %ymm2	 # tmp1325, _706, sep_x_vec
	vaddps	%ymm3, %ymm10, %ymm1	 # tmp1327, _709, sep_y_vec
	vmovups	%ymm2, 384(%rsp)	 # sep_x_vec, %sfp
	vmovups	%ymm1, 352(%rsp)	 # sep_y_vec, %sfp
 # .\src\main.cpp:689:             for (Boid nearby_boid = row_begin; nearby_boid < row_end; nearby_boid += 8) {
	cmpl	%r14d, %esi	 # ivtmp.2000, row_end
	jg	.L757	 #,
.L756:
 # .\src\main.cpp:674:         for (int cy = -1; cy <= 1; cy++) {
	addl	$1, %ebx	 #, ivtmp.2023
	cmpl	%ebx, 452(%rsp)	 # ivtmp.2023, %sfp
	jne	.L752	 #,
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avx2intrin.h:275:   return (__m256i) ((__v8si)__A > (__v8si)__B);
	vpxor	%xmm6, %xmm6, %xmm6	 # tmp1337
	movq	%rdx, %rcx	 # vxs, vxs
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vmovups	96(%rsp), %ymm13	 # %sfp, _268
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avx2intrin.h:275:   return (__m256i) ((__v8si)__A > (__v8si)__B);
	movq	%r15, %r14	 # vys, vys
	movq	504(%rsp), %rbp	 # %sfp, ivtmp.2027
	vmovdqu	416(%rsp), %ymm0	 # %sfp, isc
	movq	512(%rsp), %rdx	 # %sfp, rules
 # .\src\main.cpp:789:         auto cmpx_2 = _mm256_cmp_ps(current_xs_vec, _mm256_set1_ps(world_width - rules->edge_width), _CMP_GT_OS);
	movl	692(%rsp), %r9d	 # %sfp, tmp1368
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avx2intrin.h:275:   return (__m256i) ((__v8si)__A > (__v8si)__B);
	vmovups	464(%rsp), %ymm1	 # %sfp, _255
	vpcmpgtd	%ymm6, %ymm0, %ymm6	 # tmp1337, tmp1809, tmp1338
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:463:   return (__m256)__builtin_ia32_cvtdq2ps256 ((__v8si) __A);
	vcvtdq2ps	%ymm0, %ymm0	 # isc, tmp1343
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/fmaintrin.h:65:   return (__m256)__builtin_ia32_vfmaddps256 ((__v8sf)__A, (__v8sf)__B,
	vmovups	384(%rsp), %ymm7	 # %sfp, sep_x_vec
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:243:   return (__m256) ((__v8sf)__A / (__v8sf)__B);
	vdivps	%ymm0, %ymm14, %ymm9	 # tmp1343, avg_vx_vec, tmp1345
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/fmaintrin.h:65:   return (__m256)__builtin_ia32_vfmaddps256 ((__v8sf)__A, (__v8sf)__B,
	vfmadd213ps	(%rcx,%rbp,4), %ymm1, %ymm7	 # MEM[(__m256_u * {ref-all})vxs_248 + ivtmp.2027_1686 * 4], _255, sep_x_vec
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:1330: 				 __A, __A, __A, __A };
	vbroadcastss	16(%rdx), %ymm2	 # rules_16(D)->alignment_factor, tmp1348
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/fmaintrin.h:65:   return (__m256)__builtin_ia32_vfmaddps256 ((__v8sf)__A, (__v8sf)__B,
	vmovups	352(%rsp), %ymm8	 # %sfp, sep_y_vec
	vfmadd213ps	(%r15,%rbp,4), %ymm1, %ymm8	 # MEM[(__m256_u * {ref-all})vys_249 + ivtmp.2027_1686 * 4], _255, sep_y_vec
 # .\src\main.cpp:784:         const auto ew = _mm256_set1_ps(rules->edge_width);
	movl	24(%rdx), %eax	 # rules_16(D)->edge_width, _380
 # .\src\main.cpp:789:         auto cmpx_2 = _mm256_cmp_ps(current_xs_vec, _mm256_set1_ps(world_width - rules->edge_width), _CMP_GT_OS);
	subl	%eax, %r9d	 # _380, tmp1368
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:243:   return (__m256) ((__v8sf)__A / (__v8sf)__B);
	vdivps	%ymm0, %ymm15, %ymm3	 # tmp1343, avg_vy_vec, tmp1350
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vsubps	%ymm7, %ymm9, %ymm9	 # tmp1339, tmp1345, tmp1346
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:174:   return (__m256) __builtin_ia32_andps256 ((__v8sf)__A, (__v8sf)__B);
	vandps	%ymm6, %ymm9, %ymm9	 # tmp1338, tmp1346, tmp1347
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/fmaintrin.h:65:   return (__m256)__builtin_ia32_vfmaddps256 ((__v8sf)__A, (__v8sf)__B,
	vfmadd231ps	%ymm9, %ymm2, %ymm7	 # tmp1347, tmp1348, tmp1349
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vsubps	%ymm8, %ymm3, %ymm3	 # tmp1341, tmp1350, tmp1351
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:174:   return (__m256) __builtin_ia32_andps256 ((__v8sf)__A, (__v8sf)__B);
	vandps	%ymm6, %ymm3, %ymm3	 # tmp1338, tmp1351, tmp1352
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/fmaintrin.h:65:   return (__m256)__builtin_ia32_vfmaddps256 ((__v8sf)__A, (__v8sf)__B,
	vfmadd132ps	%ymm2, %ymm8, %ymm3	 # tmp1348, tmp1341, tmp1353
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vmovups	64(%rsp), %ymm8	 # %sfp, _266
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:243:   return (__m256) ((__v8sf)__A / (__v8sf)__B);
	vdivps	%ymm0, %ymm5, %ymm2	 # tmp1343, avg_x_vec, tmp1354
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:1330: 				 __A, __A, __A, __A };
	vbroadcastss	20(%rdx), %ymm5	 # rules_16(D)->cohesion_factor, tmp1357
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:243:   return (__m256) ((__v8sf)__A / (__v8sf)__B);
	vdivps	%ymm0, %ymm4, %ymm0	 # tmp1343, avg_y_vec, tmp1359
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vsubps	%ymm8, %ymm2, %ymm2	 # _266, tmp1354, tmp1355
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:174:   return (__m256) __builtin_ia32_andps256 ((__v8sf)__A, (__v8sf)__B);
	vandps	%ymm6, %ymm2, %ymm2	 # tmp1338, tmp1355, tmp1356
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/fmaintrin.h:65:   return (__m256)__builtin_ia32_vfmaddps256 ((__v8sf)__A, (__v8sf)__B,
	vfmadd132ps	%ymm5, %ymm7, %ymm2	 # tmp1357, tmp1349, tmp1358
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vsubps	%ymm13, %ymm0, %ymm0	 # _268, tmp1359, tmp1360
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:174:   return (__m256) __builtin_ia32_andps256 ((__v8sf)__A, (__v8sf)__B);
	vandps	%ymm6, %ymm0, %ymm0	 # tmp1338, tmp1360, tmp1361
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:1330: 				 __A, __A, __A, __A };
	vbroadcastss	28(%rdx), %ymm6	 # rules_16(D)->edge_factor, tmp1363
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/fmaintrin.h:65:   return (__m256)__builtin_ia32_vfmaddps256 ((__v8sf)__A, (__v8sf)__B,
	vfmadd132ps	%ymm0, %ymm3, %ymm5	 # tmp1361, tmp1353, tmp1362
 # .\src\main.cpp:784:         const auto ew = _mm256_set1_ps(rules->edge_width);
	vxorps	%xmm0, %xmm0, %xmm0	 # tmp1814
 # .\src\main.cpp:789:         auto cmpx_2 = _mm256_cmp_ps(current_xs_vec, _mm256_set1_ps(world_width - rules->edge_width), _CMP_GT_OS);
	vcvtsi2ssl	%r9d, %xmm0, %xmm4	 # tmp1368, tmp1817, tmp1465
 # .\src\main.cpp:791:         auto cmpy_2 = _mm256_cmp_ps(current_ys_vec, _mm256_set1_ps(world_height - rules->edge_width), _CMP_GT_OS);
	movl	524(%rsp), %r9d	 # %sfp, tmp1376
 # .\src\main.cpp:784:         const auto ew = _mm256_set1_ps(rules->edge_width);
	vcvtsi2ssl	%eax, %xmm0, %xmm3	 # _380, tmp1814, tmp1464
 # .\src\main.cpp:791:         auto cmpy_2 = _mm256_cmp_ps(current_ys_vec, _mm256_set1_ps(world_height - rules->edge_width), _CMP_GT_OS);
	subl	%eax, %r9d	 # _380, tmp1376
 # .\src\main.cpp:791:         auto cmpy_2 = _mm256_cmp_ps(current_ys_vec, _mm256_set1_ps(world_height - rules->edge_width), _CMP_GT_OS);
	vcvtsi2ssl	%r9d, %xmm0, %xmm0	 # tmp1376, tmp1821, tmp1466
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:1330: 				 __A, __A, __A, __A };
	vbroadcastss	%xmm4, %ymm4	 # _385, tmp1371
	vbroadcastss	%xmm3, %ymm3	 # _381, tmp1364
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:406:   return (__m256) __builtin_ia32_cmpps256 ((__v8sf)__X, (__v8sf)__Y,
	vcmpps	$14, %ymm4, %ymm8, %ymm4	 #, tmp1371, _266, tmp1369
	vcmpps	$1, %ymm3, %ymm8, %ymm7	 #, tmp1364, _266, tmp1365
	vcmpps	$1, %ymm3, %ymm13, %ymm3	 #, tmp1364, _268, tmp1373
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:1330: 				 __A, __A, __A, __A };
	vbroadcastss	%xmm0, %ymm0	 # _390, tmp1379
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:174:   return (__m256) __builtin_ia32_andps256 ((__v8sf)__A, (__v8sf)__B);
	vandps	%ymm6, %ymm4, %ymm8	 # tmp1363, tmp1369, tmp1381
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:406:   return (__m256) __builtin_ia32_cmpps256 ((__v8sf)__X, (__v8sf)__Y,
	vcmpps	$14, %ymm0, %ymm13, %ymm0	 #, tmp1379, _268, tmp1377
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:174:   return (__m256) __builtin_ia32_andps256 ((__v8sf)__A, (__v8sf)__B);
	vandps	%ymm6, %ymm7, %ymm4	 # tmp1363, tmp1365, tmp1382
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vsubps	%ymm8, %ymm4, %ymm4	 # tmp1381, tmp1382, tmp1383
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:229:   return (__m256) __builtin_ia32_blendvps256 ((__v8sf)__X,
	vmovups	128(%rsp), %ymm8	 # %sfp, tmp1427
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:174:   return (__m256) __builtin_ia32_andps256 ((__v8sf)__A, (__v8sf)__B);
	vandps	%ymm6, %ymm0, %ymm0	 # tmp1363, tmp1377, tmp1384
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:149:   return (__m256) ((__v8sf)__A + (__v8sf)__B);
	vaddps	%ymm2, %ymm4, %ymm4	 # tmp1358, tmp1383, _396
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:174:   return (__m256) __builtin_ia32_andps256 ((__v8sf)__A, (__v8sf)__B);
	vandps	%ymm6, %ymm3, %ymm2	 # tmp1363, tmp1373, tmp1385
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vsubps	%ymm0, %ymm2, %ymm2	 # tmp1384, tmp1385, tmp1386
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:320:   return (__m256) ((__v8sf)__A * (__v8sf)__B);
	vmulps	%ymm4, %ymm4, %ymm0	 # _396, _396, tmp1387
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:149:   return (__m256) ((__v8sf)__A + (__v8sf)__B);
	vaddps	%ymm5, %ymm2, %ymm2	 # tmp1362, tmp1386, _400
	vfmadd231ps	%ymm2, %ymm2, %ymm0	 # _400, _400, _403
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:1041:   return (__m256) __builtin_ia32_rsqrtps256 ((__v8sf)__A);
	vrsqrtps	%ymm0, %ymm0	 # _403, tmp1388
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:320:   return (__m256) ((__v8sf)__A * (__v8sf)__B);
	vmulps	624(%rsp), %ymm0, %ymm5	 # %sfp, tmp1388, _405
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:406:   return (__m256) __builtin_ia32_cmpps256 ((__v8sf)__X, (__v8sf)__Y,
	vcmpps	$14, 656(%rsp), %ymm0, %ymm7	 #, %sfp, tmp1388, tmp1392
	vcmpps	$1, 528(%rsp), %ymm0, %ymm6	 #, %sfp, tmp1388, tmp1396
	vcmpps	$14, 560(%rsp), %ymm0, %ymm3	 #, %sfp, tmp1388, tmp1400
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:320:   return (__m256) ((__v8sf)__A * (__v8sf)__B);
	vmulps	592(%rsp), %ymm0, %ymm0	 # %sfp, tmp1388, tmp1404
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:229:   return (__m256) __builtin_ia32_blendvps256 ((__v8sf)__X,
	vblendvps	%ymm7, %ymm0, %ymm8, %ymm0	 # tmp1392, tmp1404, tmp1427, _412
	vblendvps	%ymm6, %ymm5, %ymm0, %ymm0	 # tmp1396, _405, _412, _415
	vblendvps	%ymm3, %ymm8, %ymm0, %ymm0	 # tmp1400, tmp1427, _415, _418
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:320:   return (__m256) ((__v8sf)__A * (__v8sf)__B);
	vmulps	%ymm0, %ymm4, %ymm4	 # _418, _396, tmp1420
	vmulps	%ymm0, %ymm2, %ymm2	 # _418, _400, tmp1421
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:911:   *(__m256_u *)__P = __A;
	vmovups	%ymm4, (%rcx,%rbp,4)	 # tmp1420, MEM[(__m256_u * {ref-all})vxs_248 + ivtmp.2027_1686 * 4]
	vmovups	%ymm2, (%r15,%rbp,4)	 # tmp1421, MEM[(__m256_u * {ref-all})vys_249 + ivtmp.2027_1686 * 4]
 # .\src\main.cpp:657:     for (Boid current_boid = cell_begin; current_boid < cell_end; current_boid += 8) {
	addq	$8, %rbp	 #, ivtmp.2027
	cmpl	%ebp, 696(%rsp)	 # ivtmp.2027, %sfp
	jg	.L759	 #,
	movq	%rdx, %r14	 # rules, rules
	vzeroupper
.L751:
 # .\src\main.cpp:1021:         for (int x = 0; x < boid_map->m_xsize; x++) {
	movl	4(%rdi), %ebx	 # boid_map_14(D)->m_xsize, _1
 # .\src\main.cpp:1021:         for (int x = 0; x < boid_map->m_xsize; x++) {
	leal	1(%r12), %eax	 #, ivtmp.2041
	subl	$1, %r12d	 #, x
 # .\src\main.cpp:1020:     for (int y = 1; y < boid_map->m_ysize; y+=2) {
	movl	(%rdi), %r10d	 # boid_map_14(D)->m_ysize, prephitmp_225
 # .\src\main.cpp:1021:         for (int x = 0; x < boid_map->m_xsize; x++) {
	cmpl	%r12d, %ebx	 # x, _1
	jle	.L794	 #,
	movl	%eax, %r12d	 # ivtmp.2041, ivtmp.2041
	jmp	.L749	 #
.L790:
	vzeroupper
	jmp	.L751	 #
.L794:
 # .\src\main.cpp:1020:     for (int y = 1; y < boid_map->m_ysize; y+=2) {
	movl	452(%rsp), %eax	 # %sfp, ivtmp.2045
	movq	%r13, %rbp	 # boid_list, boid_list
	movl	%r10d, %r13d	 # prephitmp_225, prephitmp_225
	movq	%r14, %r10	 # rules, rules
	movl	%ebx, %r14d	 # _1, _1
	cmpl	%eax, %r13d	 # ivtmp.2045, prephitmp_225
	jle	.L791	 #,
	addl	$2, %eax	 #, ivtmp.2045
	movl	%eax, 452(%rsp)	 # ivtmp.2045, %sfp
	subl	$2, %eax	 #, y
	movl	%eax, 700(%rsp)	 # y, %sfp
 # .\src\main.cpp:1021:         for (int x = 0; x < boid_map->m_xsize; x++) {
	testl	%r14d, %r14d	 # _1
	jg	.L769	 #,
.L791:
 # .\src\main.cpp:1026: }
	vmovups	704(%rsp), %xmm6	 #,
	vmovups	720(%rsp), %xmm7	 #,
	vmovups	736(%rsp), %xmm8	 #,
	vmovups	752(%rsp), %xmm9	 #,
	vmovups	768(%rsp), %xmm10	 #,
	vmovups	784(%rsp), %xmm11	 #,
	vmovups	800(%rsp), %xmm12	 #,
	vmovups	816(%rsp), %xmm13	 #,
	vmovups	832(%rsp), %xmm14	 #,
	vmovups	848(%rsp), %xmm15	 #,
	addq	$872, %rsp	 #,
	popq	%rbx	 #
	popq	%rsi	 #
	popq	%rdi	 #
	popq	%rbp	 #
	popq	%r12	 #
	popq	%r13	 #
	popq	%r14	 #
	popq	%r15	 #
	ret	
.L785:
	movq	%rbp, %r12	 # boid_list, boid_list
	movl	%r13d, %esi	 # prephitmp_225, prephitmp_225
	movq	%rdi, %rbp	 # boid_map, boid_map
	jmp	.L745	 #
	.seh_endproc
	.p2align 4
	.globl	_Z12block_runneribPK7BoidMapPK5RulesPK8BoidList
	.def	_Z12block_runneribPK7BoidMapPK5RulesPK8BoidList;	.scl	2;	.type	32;	.endef
	.seh_proc	_Z12block_runneribPK7BoidMapPK5RulesPK8BoidList
_Z12block_runneribPK7BoidMapPK5RulesPK8BoidList:
.LFB12612:
	pushq	%r15	 #
	.seh_pushreg	%r15
	pushq	%r14	 #
	.seh_pushreg	%r14
	pushq	%r13	 #
	.seh_pushreg	%r13
	pushq	%r12	 #
	.seh_pushreg	%r12
	pushq	%rbp	 #
	.seh_pushreg	%rbp
	pushq	%rdi	 #
	.seh_pushreg	%rdi
	pushq	%rsi	 #
	.seh_pushreg	%rsi
	pushq	%rbx	 #
	.seh_pushreg	%rbx
	subq	$680, %rsp	 #,
	.seh_stackalloc	680
	vmovups	%xmm6, 512(%rsp)	 #,
	.seh_savexmm	%xmm6, 512
	vmovups	%xmm7, 528(%rsp)	 #,
	.seh_savexmm	%xmm7, 528
	vmovups	%xmm8, 544(%rsp)	 #,
	.seh_savexmm	%xmm8, 544
	vmovups	%xmm9, 560(%rsp)	 #,
	.seh_savexmm	%xmm9, 560
	vmovups	%xmm10, 576(%rsp)	 #,
	.seh_savexmm	%xmm10, 576
	vmovups	%xmm11, 592(%rsp)	 #,
	.seh_savexmm	%xmm11, 592
	vmovups	%xmm12, 608(%rsp)	 #,
	.seh_savexmm	%xmm12, 608
	vmovups	%xmm13, 624(%rsp)	 #,
	.seh_savexmm	%xmm13, 624
	vmovups	%xmm14, 640(%rsp)	 #,
	.seh_savexmm	%xmm14, 640
	vmovups	%xmm15, 656(%rsp)	 #,
	.seh_savexmm	%xmm15, 656
	.seh_endprologue
 # .\src\main.cpp:1030:     for (int y = thread_num * (boid_map->m_ysize / NUM_THREADS) + offset; y < (thread_num + 1) * (boid_map->m_ysize / NUM_THREADS); y += 2) {
	movl	(%r8), %esi	 # boid_map_23(D)->m_ysize, prephitmp_92
 # .\src\main.cpp:1029: void block_runner(int thread_num, bool offset, const BoidMap *boid_map, const Rules *rules, const BoidList *boid_list) {
	movq	784(%rsp), %r12	 # boid_list, boid_list
 # .\src\main.cpp:1030:     for (int y = thread_num * (boid_map->m_ysize / NUM_THREADS) + offset; y < (thread_num + 1) * (boid_map->m_ysize / NUM_THREADS); y += 2) {
	movl	%esi, %eax	 # prephitmp_92, tmp440
 # .\src\main.cpp:1029: void block_runner(int thread_num, bool offset, const BoidMap *boid_map, const Rules *rules, const BoidList *boid_list) {
	movl	%ecx, %ebx	 # tmp799, thread_num
	movl	%edx, %ecx	 # offset, tmp800
 # .\src\main.cpp:1030:     for (int y = thread_num * (boid_map->m_ysize / NUM_THREADS) + offset; y < (thread_num + 1) * (boid_map->m_ysize / NUM_THREADS); y += 2) {
	xorl	%edx, %edx	 # tmp441
 # .\src\main.cpp:1029: void block_runner(int thread_num, bool offset, const BoidMap *boid_map, const Rules *rules, const BoidList *boid_list) {
	movq	%r8, %rbp	 # tmp801, boid_map
 # .\src\main.cpp:1030:     for (int y = thread_num * (boid_map->m_ysize / NUM_THREADS) + offset; y < (thread_num + 1) * (boid_map->m_ysize / NUM_THREADS); y += 2) {
	divl	_ZL11num_threads(%rip)	 # num_threads
 # .\src\main.cpp:1030:     for (int y = thread_num * (boid_map->m_ysize / NUM_THREADS) + offset; y < (thread_num + 1) * (boid_map->m_ysize / NUM_THREADS); y += 2) {
	movl	%ebx, %r8d	 # thread_num, _6
 # .\src\main.cpp:1030:     for (int y = thread_num * (boid_map->m_ysize / NUM_THREADS) + offset; y < (thread_num + 1) * (boid_map->m_ysize / NUM_THREADS); y += 2) {
	movzbl	%cl, %edx	 # tmp800, offset
 # .\src\main.cpp:1030:     for (int y = thread_num * (boid_map->m_ysize / NUM_THREADS) + offset; y < (thread_num + 1) * (boid_map->m_ysize / NUM_THREADS); y += 2) {
	leal	1(%rbx), %edi	 #, _109
 # .\src\main.cpp:1029: void block_runner(int thread_num, bool offset, const BoidMap *boid_map, const Rules *rules, const BoidList *boid_list) {
	movq	%r9, %r11	 # tmp802, rules
 # .\src\main.cpp:1030:     for (int y = thread_num * (boid_map->m_ysize / NUM_THREADS) + offset; y < (thread_num + 1) * (boid_map->m_ysize / NUM_THREADS); y += 2) {
	imull	%eax, %r8d	 # tmp440, _6
 # .\src\main.cpp:1030:     for (int y = thread_num * (boid_map->m_ysize / NUM_THREADS) + offset; y < (thread_num + 1) * (boid_map->m_ysize / NUM_THREADS); y += 2) {
	addl	%r8d, %edx	 # _6, _8
 # .\src\main.cpp:1030:     for (int y = thread_num * (boid_map->m_ysize / NUM_THREADS) + offset; y < (thread_num + 1) * (boid_map->m_ysize / NUM_THREADS); y += 2) {
	addl	%r8d, %eax	 # _6, tmp443
 # .\src\main.cpp:1030:     for (int y = thread_num * (boid_map->m_ysize / NUM_THREADS) + offset; y < (thread_num + 1) * (boid_map->m_ysize / NUM_THREADS); y += 2) {
	cmpl	%eax, %edx	 # tmp443, _8
	jnb	.L824	 #,
 # .\src\main.cpp:1031:         for (int x = 0; x < boid_map->m_xsize; x++) {
	movl	4(%rbp), %ebx	 # boid_map_23(D)->m_xsize, _9
	leal	2(%rdx), %r10d	 #, ivtmp.2164
	movl	%esi, %r13d	 # prephitmp_92, prephitmp_92
	leal	-2(%r10), %eax	 #, y
	movl	%ebx, %r14d	 # _9, _9
	movl	%eax, 504(%rsp)	 # y, %sfp
	movl	%edi, %ebx	 # _109, _109
	movq	%rbp, %rdi	 # boid_map, boid_map
 # .\src\main.cpp:1031:         for (int x = 0; x < boid_map->m_xsize; x++) {
	testl	%r14d, %r14d	 # _9
	jle	.L824	 #,
.L814:
	movl	%r10d, 424(%rsp)	 # ivtmp.2164, %sfp
	movl	$2, %ebp	 #, ivtmp.2160
	movq	%r11, %rsi	 # rules, rules
	movl	%ebx, 508(%rsp)	 # _109, %sfp
	movl	%r14d, %ebx	 # _9, _9
	movq	%rdi, %r14	 # boid_map, boid_map
.L799:
 # .\src\main.cpp:639:     const auto world_height = map->m_cell_size * map->m_ysize;
	movl	8(%r14), %r10d	 # boid_map_23(D)->m_cell_size, _32
 # .\src\main.cpp:642:     const Boid cell_to_update = map->get_coord(y, x);
	movl	504(%rsp), %edx	 # %sfp,
	leal	-2(%rbp), %r8d	 #,
	movq	%r14, %rcx	 # boid_map,
 # .\src\main.cpp:639:     const auto world_height = map->m_cell_size * map->m_ysize;
	movl	%r10d, 32(%rsp)	 # _32, %sfp
 # .\src\main.cpp:642:     const Boid cell_to_update = map->get_coord(y, x);
	call	_ZNK7BoidMap9get_coordEii	 #
 # .\src\main.cpp:643:     if (cell_to_update == -1 ) return;
	movl	32(%rsp), %r10d	 # %sfp, _32
	cmpl	$-1, %eax	 #, _37
 # .\src\main.cpp:642:     const Boid cell_to_update = map->get_coord(y, x);
	movl	%eax, %r9d	 # tmp803, _37
 # .\src\main.cpp:643:     if (cell_to_update == -1 ) return;
	je	.L801	 #,
 # .\src\main.cpp:645:     const auto xs = boid_list->m_boid_store->xs;
	movq	(%r12), %rax	 # boid_list_29(D)->m_boid_store, _38
 # .\src\main.cpp:655:     Boid cell_end = cell_begin + boid_list->m_boid_store->depth[cell_begin];
	movslq	%r9d, %rdx	 # _37, ivtmp.2146
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:1330: 				 __A, __A, __A, __A };
	vbroadcastss	(%rsi), %ymm8	 # rules_28(D)->avoid_distance_squared, _44
	vbroadcastss	12(%rsi), %ymm4	 # rules_28(D)->sight_range_squared, _46
	vbroadcastss	4(%rsi), %ymm1	 # rules_28(D)->avoid_factor, _48
 # .\src\main.cpp:645:     const auto xs = boid_list->m_boid_store->xs;
	movq	(%rax), %rcx	 # _38->xs, xs
 # .\src\main.cpp:648:     const auto vys = boid_list->m_boid_store->vys;
	movq	24(%rax), %r15	 # _38->vys, vys
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:1330: 				 __A, __A, __A, __A };
	vmovups	%ymm4, 96(%rsp)	 # _46, %sfp
 # .\src\main.cpp:645:     const auto xs = boid_list->m_boid_store->xs;
	movq	%rcx, 432(%rsp)	 # xs, %sfp
 # .\src\main.cpp:646:     const auto ys = boid_list->m_boid_store->ys;
	movq	8(%rax), %rcx	 # _38->ys, ys
	movq	%rcx, 440(%rsp)	 # ys, %sfp
 # .\src\main.cpp:647:     const auto vxs = boid_list->m_boid_store->vxs;
	movq	16(%rax), %rcx	 # _38->vxs, vxs
 # .\src\main.cpp:655:     Boid cell_end = cell_begin + boid_list->m_boid_store->depth[cell_begin];
	movq	48(%rax), %rax	 # _38->depth, _38->depth
 # .\src\main.cpp:655:     Boid cell_end = cell_begin + boid_list->m_boid_store->depth[cell_begin];
	movl	(%rax,%rdx,4), %edi	 # *_52, cell_end
	addl	%r9d, %edi	 # _37, cell_end
	movl	%edi, %eax	 # cell_end, cell_end
 # .\src\main.cpp:657:     for (Boid current_boid = cell_begin; current_boid < cell_end; current_boid += 8) {
	cmpl	%edi, %r9d	 # cell_end, _37
	jge	.L823	 #,
 # .\src\main.cpp:640:     const auto world_width = map->m_cell_size * map->m_xsize;
	imull	%r10d, %ebx	 # _32, world_width
	movl	424(%rsp), %edi	 # %sfp, ivtmp.2164
	vmovaps	%ymm1, %ymm5	 # _48, _48
	movl	%eax, 500(%rsp)	 # cell_end, %sfp
	vmovups	%ymm8, 288(%rsp)	 # _44, %sfp
 # .\src\main.cpp:639:     const auto world_height = map->m_cell_size * map->m_ysize;
	imull	%r10d, %r13d	 # _32, prephitmp_92
	subl	$3, %edi	 #, ivtmp.2142
	movl	%ebx, 496(%rsp)	 # world_width, %sfp
	movl	%edi, 492(%rsp)	 # ivtmp.2142, %sfp
	leal	-3(%rbp), %edi	 #, ivtmp.2134
	movl	%r13d, 488(%rsp)	 # prephitmp_92, %sfp
	movq	%r15, %r13	 # vys, vys
	movl	%edi, 428(%rsp)	 # ivtmp.2134, %sfp
	movq	%rdx, %rdi	 # ivtmp.2146, ivtmp.2146
	movq	%rsi, %rdx	 # rules, rules
.L809:
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:905:   return *(__m256_u *)__P;
	movq	432(%rsp), %rax	 # %sfp, xs
	movl	492(%rsp), %r15d	 # %sfp, ivtmp.2142
 # .\src\main.cpp:669:         __m256 avg_vy_vec = _mm256_set1_ps(0.);
	vxorps	%xmm3, %xmm3, %xmm3	 # avg_vy_vec
	movq	%rdi, 480(%rsp)	 # ivtmp.2146, %sfp
	movq	%rdx, 776(%rsp)	 # rules, rules
 # .\src\main.cpp:668:         __m256 avg_vx_vec = _mm256_set1_ps(0.);
	vmovaps	%ymm3, %ymm1	 #, avg_vx_vec
 # .\src\main.cpp:662:         __m256 sep_x_vec = _mm256_set1_ps(0.);
	vmovaps	%ymm3, %ymm13	 # tmp20, sep_x_vec
	vmovaps	%ymm3, %ymm15	 # avg_vy_vec, avg_vy_vec
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:905:   return *(__m256_u *)__P;
	vmovups	(%rax,%rdi,4), %ymm4	 # MEM[(__m256_u * {ref-all})xs_39 + ivtmp.2146_867 * 4], _59
	movl	%r15d, %ebx	 # ivtmp.2142, ivtmp.2142
	movq	%rcx, %rdx	 # vxs, vxs
	movq	440(%rsp), %rax	 # %sfp, ys
	vmovups	%ymm5, 448(%rsp)	 # _48, %sfp
	movq	%r13, %r15	 # vys, vys
	vmovups	%ymm4, 32(%rsp)	 # _59, %sfp
	vmovups	(%rax,%rdi,4), %ymm4	 # MEM[(__m256_u * {ref-all})ys_40 + ivtmp.2146_867 * 4], _61
	vmovups	%ymm3, 352(%rsp)	 # sep_x_vec, %sfp
	vmovups	%ymm4, 64(%rsp)	 # _61, %sfp
 # .\src\main.cpp:671:         __m256i isc = _mm256_set1_epi32(0);
	vpxor	%xmm4, %xmm4, %xmm4	 # isc
	vmovdqu	%ymm4, 320(%rsp)	 # isc, %sfp
 # .\src\main.cpp:666:         __m256 avg_y_vec = _mm256_set1_ps(0.);
	vmovaps	%ymm3, %ymm4	 # tmp21, avg_y_vec
	vmovups	%ymm3, 384(%rsp)	 # sep_y_vec, %sfp
.L802:
	movl	428(%rsp), %edi	 # %sfp, ivtmp.2134
 # .\src\main.cpp:675:             Boid row_begin = -1;
	movl	$-1, %r13d	 #, row_begin
	movq	%rdx, 128(%rsp)	 # vxs, %sfp
 # .\src\main.cpp:676:             Boid row_end = -1;
	movl	$-1, %esi	 #, row_end
	vmovups	%ymm15, 160(%rsp)	 # avg_vy_vec, %sfp
	vmovups	%ymm13, 192(%rsp)	 # avg_x_vec, %sfp
	movl	%edi, %eax	 # ivtmp.2134, ivtmp.2134
	movl	%r13d, %edi	 # row_begin, row_begin
	vmovups	%ymm1, 224(%rsp)	 # avg_vx_vec, %sfp
	movl	%eax, %r13d	 # ivtmp.2134, ivtmp.2134
	vmovups	%ymm4, 256(%rsp)	 # avg_y_vec, %sfp
	vzeroupper
.L805:
 # .\src\main.cpp:680:                 Boid current = map->get_coord(y + cy, x + cx);
	movl	%r13d, %r8d	 # ivtmp.2134,
	movl	%ebx, %edx	 # ivtmp.2142,
	movq	%r14, %rcx	 # boid_map,
	call	_ZNK7BoidMap9get_coordEii	 #
 # .\src\main.cpp:681:                 if (current != -1) {
	cmpl	$-1, %eax	 #, _66
	je	.L803	 #,
 # .\src\main.cpp:684:                     row_end = current + boid_list->m_boid_store->depth[current];
	movq	(%r12), %rdx	 # boid_list_29(D)->m_boid_store, boid_list_29(D)->m_boid_store
 # .\src\main.cpp:682:                     if (row_begin == -1) row_begin = current;
	cmpl	$-1, %edi	 #, row_begin
 # .\src\main.cpp:684:                     row_end = current + boid_list->m_boid_store->depth[current];
	movslq	%eax, %rcx	 # _66, _66
 # .\src\main.cpp:682:                     if (row_begin == -1) row_begin = current;
	cmove	%eax, %edi	 # row_begin,, _66, row_begin
 # .\src\main.cpp:684:                     row_end = current + boid_list->m_boid_store->depth[current];
	movq	48(%rdx), %rdx	 # _68->depth, _68->depth
 # .\src\main.cpp:684:                     row_end = current + boid_list->m_boid_store->depth[current];
	addl	(%rdx,%rcx,4), %eax	 # *_72, _66
	movl	%eax, %esi	 # _66, row_end
.L803:
 # .\src\main.cpp:679:             for (int cx = -1; cx <= 1; cx++) {
	addl	$1, %r13d	 #, ivtmp.2134
	cmpl	%r13d, %ebp	 # ivtmp.2134, ivtmp.2160
	jne	.L805	 #,
 # .\src\main.cpp:689:             for (Boid nearby_boid = row_begin; nearby_boid < row_end; nearby_boid += 8) {
	movslq	%edi, %r13	 # row_begin,
	movq	128(%rsp), %rdx	 # %sfp, vxs
	vmovups	160(%rsp), %ymm15	 # %sfp, avg_vy_vec
	vmovups	192(%rsp), %ymm13	 # %sfp, avg_x_vec
	vmovups	224(%rsp), %ymm1	 # %sfp, avg_vx_vec
	vmovups	256(%rsp), %ymm4	 # %sfp, avg_y_vec
	cmpl	%esi, %r13d	 # row_end, row_begin
	jge	.L806	 #,
	.p2align 4,,10
	.p2align 3
.L807:
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:905:   return *(__m256_u *)__P;
	movq	432(%rsp), %rax	 # %sfp, xs
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vmovups	32(%rsp), %ymm12	 # %sfp, _59
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:406:   return (__m256) __builtin_ia32_cmpps256 ((__v8sf)__X, (__v8sf)__Y,
	vmovups	288(%rsp), %ymm11	 # %sfp, _44
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vmovups	64(%rsp), %ymm6	 # %sfp, _61
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:905:   return *(__m256_u *)__P;
	vmovups	(%rax,%r13,4), %ymm3	 # MEM[(__m256_u * {ref-all})xs_39 + ivtmp.2117_868 * 4], MEM[(__m256_u * {ref-all})xs_39 + ivtmp.2117_868 * 4]
	movq	440(%rsp), %rax	 # %sfp, ys
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vsubps	%ymm3, %ymm12, %ymm2	 # MEM[(__m256_u * {ref-all})xs_39 + ivtmp.2117_868 * 4], _59, _244
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:905:   return *(__m256_u *)__P;
	vmovups	(%rax,%r13,4), %ymm5	 # MEM[(__m256_u * {ref-all})ys_40 + ivtmp.2117_868 * 4], MEM[(__m256_u * {ref-all})ys_40 + ivtmp.2117_868 * 4]
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vsubps	%ymm5, %ymm6, %ymm8	 # MEM[(__m256_u * {ref-all})ys_40 + ivtmp.2117_868 * 4], _61, _245
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:320:   return (__m256) ((__v8sf)__A * (__v8sf)__B);
	vmulps	%ymm2, %ymm2, %ymm6	 # _244, _244, tmp461
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:149:   return (__m256) ((__v8sf)__A + (__v8sf)__B);
	vfmadd231ps	%ymm8, %ymm8, %ymm6	 # _245, _245, _227
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:406:   return (__m256) __builtin_ia32_cmpps256 ((__v8sf)__X, (__v8sf)__Y,
	vcmpps	$1, %ymm11, %ymm6, %ymm7	 #, _44, _227, tmp465
	vcmpps	$1, 96(%rsp), %ymm6, %ymm0	 #, %sfp, _227, tmp462
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vsubps	%ymm6, %ymm11, %ymm6	 # _227, _44, _232
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:320:   return (__m256) ((__v8sf)__A * (__v8sf)__B);
	vmulps	%ymm6, %ymm6, %ymm6	 # _232, _232, _233
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:186:   return (__m256) __builtin_ia32_andnps256 ((__v8sf)__A, (__v8sf)__B);
	vandnps	%ymm0, %ymm7, %ymm0	 # tmp462, tmp465, tmp468
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:174:   return (__m256) __builtin_ia32_andps256 ((__v8sf)__A, (__v8sf)__B);
	vandps	.LC3(%rip), %ymm0, %ymm0	 #, tmp468, tmp469
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/fmaintrin.h:65:   return (__m256)__builtin_ia32_vfmaddps256 ((__v8sf)__A, (__v8sf)__B,
	vfmadd231ps	(%rdx,%r13,4), %ymm0, %ymm1	 # MEM[(__m256_u * {ref-all})vxs_41 + ivtmp.2117_868 * 4], tmp469, tmp476
	vfmadd231ps	(%r15,%r13,4), %ymm0, %ymm15	 # MEM[(__m256_u * {ref-all})vys_42 + ivtmp.2117_868 * 4], tmp469, tmp477
	vfmadd231ps	%ymm3, %ymm0, %ymm13	 # MEM[(__m256_u * {ref-all})xs_39 + ivtmp.2117_868 * 4], tmp469, tmp478
	vfmadd231ps	%ymm5, %ymm0, %ymm4	 # MEM[(__m256_u * {ref-all})ys_40 + ivtmp.2117_868 * 4], tmp469, tmp479
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:475:   return (__m256i)__builtin_ia32_cvtps2dq256 ((__v8sf) __A);
	vcvtps2dq	%ymm0, %ymm0	 # tmp469, tmp480
	vmovdqu	%ymm0, 128(%rsp)	 # tmp480, %sfp
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avx2intrin.h:1065:   return (__m256) __builtin_ia32_permvarsf256 ((__v8sf)__X, (__v8si)__Y);
	vmovdqu	.LC5(%rip), %ymm0	 #, tmp1073
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:320:   return (__m256) ((__v8sf)__A * (__v8sf)__B);
	vmulps	%ymm2, %ymm6, %ymm2	 # _244, _233, tmp472
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avx2intrin.h:1065:   return (__m256) __builtin_ia32_permvarsf256 ((__v8sf)__X, (__v8si)__Y);
	vpermps	%ymm3, %ymm0, %ymm0	 # MEM[(__m256_u * {ref-all})xs_39 + ivtmp.2117_868 * 4], tmp1073, tmp482
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vmovups	64(%rsp), %ymm3	 # %sfp, _61
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:320:   return (__m256) ((__v8sf)__A * (__v8sf)__B);
	vmulps	%ymm8, %ymm6, %ymm6	 # _245, _233, tmp474
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:174:   return (__m256) __builtin_ia32_andps256 ((__v8sf)__A, (__v8sf)__B);
	vandps	%ymm2, %ymm7, %ymm2	 # tmp472, tmp465, tmp473
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:149:   return (__m256) ((__v8sf)__A + (__v8sf)__B);
	vaddps	352(%rsp), %ymm2, %ymm2	 # %sfp, tmp473, _257
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:174:   return (__m256) __builtin_ia32_andps256 ((__v8sf)__A, (__v8sf)__B);
	vandps	%ymm6, %ymm7, %ymm7	 # tmp474, tmp465, tmp475
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:149:   return (__m256) ((__v8sf)__A + (__v8sf)__B);
	vaddps	384(%rsp), %ymm7, %ymm6	 # %sfp, tmp475, _260
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avx2intrin.h:1065:   return (__m256) __builtin_ia32_permvarsf256 ((__v8sf)__X, (__v8si)__Y);
	vmovdqu	.LC5(%rip), %ymm7	 #, tmp1072
	vpermps	(%rdx,%r13,4), %ymm7, %ymm10	 # MEM[(__m256_u * {ref-all})vxs_41 + ivtmp.2117_868 * 4], tmp1071, tmp486
	vpermps	(%r15,%r13,4), %ymm7, %ymm9	 # MEM[(__m256_u * {ref-all})vys_42 + ivtmp.2117_868 * 4], tmp1070, tmp488
 # .\src\main.cpp:689:             for (Boid nearby_boid = row_begin; nearby_boid < row_end; nearby_boid += 8) {
	addq	$8, %r13	 #, ivtmp.2117
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avx2intrin.h:1065:   return (__m256) __builtin_ia32_permvarsf256 ((__v8sf)__X, (__v8si)__Y);
	vpermps	%ymm5, %ymm7, %ymm14	 # MEM[(__m256_u * {ref-all})ys_40 + ivtmp.2117_868 * 4], tmp1072, tmp484
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vsubps	%ymm0, %ymm12, %ymm7	 # tmp482, _59, _287
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:406:   return (__m256) __builtin_ia32_cmpps256 ((__v8sf)__X, (__v8sf)__Y,
	vmovups	288(%rsp), %ymm12	 # %sfp, _44
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vsubps	%ymm14, %ymm3, %ymm11	 # tmp484, _61, _288
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:320:   return (__m256) ((__v8sf)__A * (__v8sf)__B);
	vmulps	%ymm7, %ymm7, %ymm5	 # _287, _287, tmp490
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:149:   return (__m256) ((__v8sf)__A + (__v8sf)__B);
	vfmadd231ps	%ymm11, %ymm11, %ymm5	 # _288, _288, _291
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:406:   return (__m256) __builtin_ia32_cmpps256 ((__v8sf)__X, (__v8sf)__Y,
	vcmpps	$1, %ymm12, %ymm5, %ymm8	 #, _44, _291, tmp494
	vcmpps	$1, 96(%rsp), %ymm5, %ymm3	 #, %sfp, _291, tmp491
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vsubps	%ymm5, %ymm12, %ymm5	 # _291, _44, _296
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:320:   return (__m256) ((__v8sf)__A * (__v8sf)__B);
	vmulps	%ymm5, %ymm5, %ymm5	 # _296, _296, _297
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:186:   return (__m256) __builtin_ia32_andnps256 ((__v8sf)__A, (__v8sf)__B);
	vandnps	%ymm3, %ymm8, %ymm3	 # tmp491, tmp494, tmp497
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:174:   return (__m256) __builtin_ia32_andps256 ((__v8sf)__A, (__v8sf)__B);
	vandps	.LC3(%rip), %ymm3, %ymm3	 #, tmp497, tmp498
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/fmaintrin.h:65:   return (__m256)__builtin_ia32_vfmaddps256 ((__v8sf)__A, (__v8sf)__B,
	vfmadd231ps	%ymm10, %ymm3, %ymm1	 # tmp486, tmp498, tmp476
	vfmadd231ps	%ymm9, %ymm3, %ymm15	 # tmp488, tmp498, tmp477
	vfmadd231ps	%ymm0, %ymm3, %ymm13	 # tmp482, tmp498, tmp507
	vfmadd231ps	%ymm14, %ymm3, %ymm4	 # tmp484, tmp498, tmp508
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:475:   return (__m256i)__builtin_ia32_cvtps2dq256 ((__v8sf) __A);
	vcvtps2dq	%ymm3, %ymm3	 # tmp498, tmp509
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:320:   return (__m256) ((__v8sf)__A * (__v8sf)__B);
	vmulps	%ymm5, %ymm7, %ymm7	 # _297, _287, tmp501
	vmulps	%ymm5, %ymm11, %ymm11	 # _297, _288, tmp503
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:174:   return (__m256) __builtin_ia32_andps256 ((__v8sf)__A, (__v8sf)__B);
	vandps	%ymm7, %ymm8, %ymm7	 # tmp501, tmp494, tmp502
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:149:   return (__m256) ((__v8sf)__A + (__v8sf)__B);
	vaddps	%ymm7, %ymm2, %ymm7	 # tmp502, _257, _300
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:174:   return (__m256) __builtin_ia32_andps256 ((__v8sf)__A, (__v8sf)__B);
	vandps	%ymm11, %ymm8, %ymm5	 # tmp503, tmp494, tmp504
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/fmaintrin.h:65:   return (__m256)__builtin_ia32_vfmaddps256 ((__v8sf)__A, (__v8sf)__B,
	vmovaps	%ymm15, %ymm8	 # tmp477, tmp506
	vpaddd	128(%rsp), %ymm3, %ymm2	 # %sfp, tmp509, _317
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:149:   return (__m256) ((__v8sf)__A + (__v8sf)__B);
	vaddps	%ymm5, %ymm6, %ymm5	 # tmp504, _260, _303
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/fmaintrin.h:65:   return (__m256)__builtin_ia32_vfmaddps256 ((__v8sf)__A, (__v8sf)__B,
	vmovaps	%ymm1, %ymm6	 # tmp476, tmp505
	vmovdqu	%ymm2, 128(%rsp)	 # _317, %sfp
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avx2intrin.h:1065:   return (__m256) __builtin_ia32_permvarsf256 ((__v8sf)__X, (__v8si)__Y);
	vmovdqu	.LC5(%rip), %ymm2	 #, tmp1067
	vpermps	%ymm0, %ymm2, %ymm1	 # tmp482, tmp1067, tmp511
	vpermps	%ymm14, %ymm2, %ymm0	 # tmp484, tmp1066, tmp513
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vmovups	32(%rsp), %ymm14	 # %sfp, _59
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avx2intrin.h:1065:   return (__m256) __builtin_ia32_permvarsf256 ((__v8sf)__X, (__v8si)__Y);
	vpermps	%ymm10, %ymm2, %ymm3	 # tmp486, tmp1065, tmp515
	vpermps	%ymm9, %ymm2, %ymm2	 # tmp488, tmp1064, tmp517
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vmovups	64(%rsp), %ymm9	 # %sfp, _61
	vsubps	%ymm1, %ymm14, %ymm15	 # tmp511, _59, _330
	vsubps	%ymm0, %ymm9, %ymm14	 # tmp513, _61, _331
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:320:   return (__m256) ((__v8sf)__A * (__v8sf)__B);
	vmulps	%ymm15, %ymm15, %ymm10	 # _330, _330, tmp519
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:149:   return (__m256) ((__v8sf)__A + (__v8sf)__B);
	vfmadd231ps	%ymm14, %ymm14, %ymm10	 # _331, _331, _334
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:406:   return (__m256) __builtin_ia32_cmpps256 ((__v8sf)__X, (__v8sf)__Y,
	vcmpps	$1, %ymm12, %ymm10, %ymm11	 #, _44, _334, tmp523
	vcmpps	$1, 96(%rsp), %ymm10, %ymm9	 #, %sfp, _334, tmp520
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vsubps	%ymm10, %ymm12, %ymm10	 # _334, _44, _339
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:320:   return (__m256) ((__v8sf)__A * (__v8sf)__B);
	vmulps	%ymm10, %ymm10, %ymm10	 # _339, _339, _340
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:186:   return (__m256) __builtin_ia32_andnps256 ((__v8sf)__A, (__v8sf)__B);
	vandnps	%ymm9, %ymm11, %ymm9	 # tmp520, tmp523, tmp526
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:174:   return (__m256) __builtin_ia32_andps256 ((__v8sf)__A, (__v8sf)__B);
	vandps	.LC3(%rip), %ymm9, %ymm9	 #, tmp526, tmp527
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/fmaintrin.h:65:   return (__m256)__builtin_ia32_vfmaddps256 ((__v8sf)__A, (__v8sf)__B,
	vfmadd231ps	%ymm1, %ymm9, %ymm13	 # tmp511, tmp527, tmp536
	vfmadd231ps	%ymm3, %ymm9, %ymm6	 # tmp515, tmp527, tmp534
	vfmadd231ps	%ymm2, %ymm9, %ymm8	 # tmp517, tmp527, tmp535
	vfmadd231ps	%ymm0, %ymm9, %ymm4	 # tmp513, tmp527, tmp537
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:320:   return (__m256) ((__v8sf)__A * (__v8sf)__B);
	vmulps	%ymm10, %ymm14, %ymm14	 # _340, _331, tmp532
	vmulps	%ymm10, %ymm15, %ymm15	 # _340, _330, tmp530
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:475:   return (__m256i)__builtin_ia32_cvtps2dq256 ((__v8sf) __A);
	vcvtps2dq	%ymm9, %ymm10	 # tmp527, tmp538
	vmovdqu	%ymm10, 160(%rsp)	 # tmp538, %sfp
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:174:   return (__m256) __builtin_ia32_andps256 ((__v8sf)__A, (__v8sf)__B);
	vandps	%ymm15, %ymm11, %ymm15	 # tmp530, tmp523, tmp531
	vandps	%ymm14, %ymm11, %ymm11	 # tmp532, tmp523, tmp533
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vmovups	32(%rsp), %ymm14	 # %sfp, _59
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:149:   return (__m256) ((__v8sf)__A + (__v8sf)__B);
	vaddps	%ymm11, %ymm5, %ymm5	 # tmp533, _303, _346
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avx2intrin.h:1065:   return (__m256) __builtin_ia32_permvarsf256 ((__v8sf)__X, (__v8si)__Y);
	vmovdqu	.LC5(%rip), %ymm11	 #, tmp1062
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:149:   return (__m256) ((__v8sf)__A + (__v8sf)__B);
	vaddps	%ymm15, %ymm7, %ymm7	 # tmp531, _300, _343
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vmovups	64(%rsp), %ymm9	 # %sfp, _61
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avx2intrin.h:1065:   return (__m256) __builtin_ia32_permvarsf256 ((__v8sf)__X, (__v8si)__Y);
	vpermps	%ymm1, %ymm11, %ymm1	 # tmp511, tmp1062, tmp540
	vpermps	%ymm0, %ymm11, %ymm0	 # tmp513, tmp1061, tmp542
	vpermps	%ymm3, %ymm11, %ymm3	 # tmp515, tmp1060, tmp544
	vpermps	%ymm2, %ymm11, %ymm2	 # tmp517, tmp1059, tmp546
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vsubps	%ymm1, %ymm14, %ymm11	 # tmp540, _59, _373
	vsubps	%ymm0, %ymm9, %ymm15	 # tmp542, _61, _374
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:320:   return (__m256) ((__v8sf)__A * (__v8sf)__B);
	vmulps	%ymm11, %ymm11, %ymm10	 # _373, _373, tmp548
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:149:   return (__m256) ((__v8sf)__A + (__v8sf)__B);
	vfmadd231ps	%ymm15, %ymm15, %ymm10	 # _374, _374, _377
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:406:   return (__m256) __builtin_ia32_cmpps256 ((__v8sf)__X, (__v8sf)__Y,
	vcmpps	$1, %ymm12, %ymm10, %ymm14	 #, _44, _377, tmp552
	vcmpps	$1, 96(%rsp), %ymm10, %ymm9	 #, %sfp, _377, tmp549
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vsubps	%ymm10, %ymm12, %ymm10	 # _377, _44, _382
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:320:   return (__m256) ((__v8sf)__A * (__v8sf)__B);
	vmulps	%ymm10, %ymm10, %ymm10	 # _382, _382, _383
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:186:   return (__m256) __builtin_ia32_andnps256 ((__v8sf)__A, (__v8sf)__B);
	vandnps	%ymm9, %ymm14, %ymm9	 # tmp549, tmp552, tmp555
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:174:   return (__m256) __builtin_ia32_andps256 ((__v8sf)__A, (__v8sf)__B);
	vandps	.LC3(%rip), %ymm9, %ymm9	 #, tmp555, tmp556
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/fmaintrin.h:65:   return (__m256)__builtin_ia32_vfmaddps256 ((__v8sf)__A, (__v8sf)__B,
	vfmadd231ps	%ymm3, %ymm9, %ymm6	 # tmp544, tmp556, tmp563
	vfmadd231ps	%ymm2, %ymm9, %ymm8	 # tmp546, tmp556, tmp564
	vfmadd231ps	%ymm1, %ymm9, %ymm13	 # tmp540, tmp556, tmp565
	vfmadd231ps	%ymm0, %ymm9, %ymm4	 # tmp542, tmp556, tmp566
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:475:   return (__m256i)__builtin_ia32_cvtps2dq256 ((__v8sf) __A);
	vcvtps2dq	%ymm9, %ymm9	 # tmp556, tmp567
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:320:   return (__m256) ((__v8sf)__A * (__v8sf)__B);
	vmulps	%ymm10, %ymm15, %ymm15	 # _383, _374, tmp561
	vmulps	%ymm10, %ymm11, %ymm11	 # _383, _373, tmp559
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:174:   return (__m256) __builtin_ia32_andps256 ((__v8sf)__A, (__v8sf)__B);
	vandps	%ymm11, %ymm14, %ymm11	 # tmp559, tmp552, tmp560
	vandps	%ymm15, %ymm14, %ymm14	 # tmp561, tmp552, tmp562
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:149:   return (__m256) ((__v8sf)__A + (__v8sf)__B);
	vaddps	%ymm14, %ymm5, %ymm5	 # tmp562, _346, _389
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avx2intrin.h:1065:   return (__m256) __builtin_ia32_permvarsf256 ((__v8sf)__X, (__v8si)__Y);
	vmovdqu	.LC5(%rip), %ymm14	 #, tmp1055
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:149:   return (__m256) ((__v8sf)__A + (__v8sf)__B);
	vaddps	%ymm11, %ymm7, %ymm11	 # tmp560, _343, _386
	vpaddd	160(%rsp), %ymm9, %ymm7	 # %sfp, tmp567, tmp569
	vpaddd	128(%rsp), %ymm7, %ymm15	 # %sfp, tmp569, _322
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avx2intrin.h:1065:   return (__m256) __builtin_ia32_permvarsf256 ((__v8sf)__X, (__v8si)__Y);
	vpermps	%ymm1, %ymm14, %ymm1	 # tmp540, tmp1055, tmp570
	vpermps	%ymm0, %ymm14, %ymm0	 # tmp542, tmp1054, tmp572
	vpermps	%ymm3, %ymm14, %ymm3	 # tmp544, tmp1053, tmp574
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vmovups	64(%rsp), %ymm7	 # %sfp, _61
	vmovdqu	%ymm15, 128(%rsp)	 # _322, %sfp
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avx2intrin.h:1065:   return (__m256) __builtin_ia32_permvarsf256 ((__v8sf)__X, (__v8si)__Y);
	vpermps	%ymm2, %ymm14, %ymm2	 # tmp546, tmp1052, tmp576
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vmovups	32(%rsp), %ymm14	 # %sfp, _59
	vsubps	%ymm0, %ymm7, %ymm15	 # tmp572, _61, _417
	vsubps	%ymm1, %ymm14, %ymm9	 # tmp570, _59, _416
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:320:   return (__m256) ((__v8sf)__A * (__v8sf)__B);
	vmulps	%ymm9, %ymm9, %ymm10	 # _416, _416, tmp578
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:149:   return (__m256) ((__v8sf)__A + (__v8sf)__B);
	vfmadd231ps	%ymm15, %ymm15, %ymm10	 # _417, _417, _420
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:406:   return (__m256) __builtin_ia32_cmpps256 ((__v8sf)__X, (__v8sf)__Y,
	vcmpps	$1, %ymm12, %ymm10, %ymm14	 #, _44, _420, tmp582
	vcmpps	$1, 96(%rsp), %ymm10, %ymm7	 #, %sfp, _420, tmp579
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vsubps	%ymm10, %ymm12, %ymm10	 # _420, _44, _425
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:320:   return (__m256) ((__v8sf)__A * (__v8sf)__B);
	vmulps	%ymm10, %ymm10, %ymm10	 # _425, _425, _426
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:186:   return (__m256) __builtin_ia32_andnps256 ((__v8sf)__A, (__v8sf)__B);
	vandnps	%ymm7, %ymm14, %ymm7	 # tmp579, tmp582, tmp585
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:174:   return (__m256) __builtin_ia32_andps256 ((__v8sf)__A, (__v8sf)__B);
	vandps	.LC3(%rip), %ymm7, %ymm7	 #, tmp585, tmp586
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/fmaintrin.h:65:   return (__m256)__builtin_ia32_vfmaddps256 ((__v8sf)__A, (__v8sf)__B,
	vfmadd231ps	%ymm1, %ymm7, %ymm13	 # tmp570, tmp586, tmp595
	vfmadd231ps	%ymm3, %ymm7, %ymm6	 # tmp574, tmp586, tmp593
	vfmadd231ps	%ymm2, %ymm7, %ymm8	 # tmp576, tmp586, tmp594
	vfmadd231ps	%ymm0, %ymm7, %ymm4	 # tmp572, tmp586, tmp596
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:320:   return (__m256) ((__v8sf)__A * (__v8sf)__B);
	vmulps	%ymm10, %ymm9, %ymm9	 # _426, _416, tmp589
	vmulps	%ymm10, %ymm15, %ymm15	 # _426, _417, tmp591
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:174:   return (__m256) __builtin_ia32_andps256 ((__v8sf)__A, (__v8sf)__B);
	vandps	%ymm9, %ymm14, %ymm9	 # tmp589, tmp582, tmp590
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:149:   return (__m256) ((__v8sf)__A + (__v8sf)__B);
	vaddps	%ymm9, %ymm11, %ymm9	 # tmp590, _386, _429
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avx2intrin.h:1065:   return (__m256) __builtin_ia32_permvarsf256 ((__v8sf)__X, (__v8si)__Y);
	vmovdqu	.LC5(%rip), %ymm11	 #, tmp1050
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:174:   return (__m256) __builtin_ia32_andps256 ((__v8sf)__A, (__v8sf)__B);
	vandps	%ymm15, %ymm14, %ymm10	 # tmp591, tmp582, tmp592
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vmovups	32(%rsp), %ymm14	 # %sfp, _59
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:149:   return (__m256) ((__v8sf)__A + (__v8sf)__B);
	vaddps	%ymm10, %ymm5, %ymm10	 # tmp592, _389, _432
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:475:   return (__m256i)__builtin_ia32_cvtps2dq256 ((__v8sf) __A);
	vcvtps2dq	%ymm7, %ymm5	 # tmp586, tmp597
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vmovups	64(%rsp), %ymm7	 # %sfp, _61
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:475:   return (__m256i)__builtin_ia32_cvtps2dq256 ((__v8sf) __A);
	vmovdqu	%ymm5, 160(%rsp)	 # tmp597, %sfp
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avx2intrin.h:1065:   return (__m256) __builtin_ia32_permvarsf256 ((__v8sf)__X, (__v8si)__Y);
	vpermps	%ymm1, %ymm11, %ymm1	 # tmp570, tmp1050, tmp599
	vpermps	%ymm0, %ymm11, %ymm0	 # tmp572, tmp1049, tmp601
	vpermps	%ymm3, %ymm11, %ymm3	 # tmp574, tmp1048, tmp603
	vpermps	%ymm2, %ymm11, %ymm2	 # tmp576, tmp1047, tmp605
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vsubps	%ymm1, %ymm14, %ymm11	 # tmp599, _59, _459
	vsubps	%ymm0, %ymm7, %ymm15	 # tmp601, _61, _460
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:320:   return (__m256) ((__v8sf)__A * (__v8sf)__B);
	vmulps	%ymm11, %ymm11, %ymm7	 # _459, _459, tmp607
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:149:   return (__m256) ((__v8sf)__A + (__v8sf)__B);
	vfmadd231ps	%ymm15, %ymm15, %ymm7	 # _460, _460, _463
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:406:   return (__m256) __builtin_ia32_cmpps256 ((__v8sf)__X, (__v8sf)__Y,
	vcmpps	$1, %ymm12, %ymm7, %ymm14	 #, _44, _463, tmp611
	vcmpps	$1, 96(%rsp), %ymm7, %ymm5	 #, %sfp, _463, tmp608
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vsubps	%ymm7, %ymm12, %ymm7	 # _463, _44, _468
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:320:   return (__m256) ((__v8sf)__A * (__v8sf)__B);
	vmulps	%ymm7, %ymm7, %ymm7	 # _468, _468, _469
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:186:   return (__m256) __builtin_ia32_andnps256 ((__v8sf)__A, (__v8sf)__B);
	vandnps	%ymm5, %ymm14, %ymm5	 # tmp608, tmp611, tmp614
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:174:   return (__m256) __builtin_ia32_andps256 ((__v8sf)__A, (__v8sf)__B);
	vandps	.LC3(%rip), %ymm5, %ymm5	 #, tmp614, tmp615
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/fmaintrin.h:65:   return (__m256)__builtin_ia32_vfmaddps256 ((__v8sf)__A, (__v8sf)__B,
	vfmadd231ps	%ymm3, %ymm5, %ymm6	 # tmp603, tmp615, tmp622
	vfmadd231ps	%ymm2, %ymm5, %ymm8	 # tmp605, tmp615, tmp623
	vfmadd231ps	%ymm1, %ymm5, %ymm13	 # tmp599, tmp615, tmp624
	vfmadd231ps	%ymm0, %ymm5, %ymm4	 # tmp601, tmp615, tmp625
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:475:   return (__m256i)__builtin_ia32_cvtps2dq256 ((__v8sf) __A);
	vcvtps2dq	%ymm5, %ymm5	 # tmp615, tmp626
	vpaddd	160(%rsp), %ymm5, %ymm5	 # %sfp, tmp626, tmp628
	vpaddd	320(%rsp), %ymm5, %ymm5	 # %sfp, tmp628, tmp629
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:320:   return (__m256) ((__v8sf)__A * (__v8sf)__B);
	vmulps	%ymm7, %ymm11, %ymm11	 # _469, _459, tmp618
	vmulps	%ymm7, %ymm15, %ymm15	 # _469, _460, tmp620
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vmovups	64(%rsp), %ymm7	 # %sfp, _61
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:174:   return (__m256) __builtin_ia32_andps256 ((__v8sf)__A, (__v8sf)__B);
	vandps	%ymm11, %ymm14, %ymm11	 # tmp618, tmp611, tmp619
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:149:   return (__m256) ((__v8sf)__A + (__v8sf)__B);
	vaddps	%ymm11, %ymm9, %ymm11	 # tmp619, _429, _472
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:174:   return (__m256) __builtin_ia32_andps256 ((__v8sf)__A, (__v8sf)__B);
	vandps	%ymm15, %ymm14, %ymm9	 # tmp620, tmp611, tmp621
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avx2intrin.h:1065:   return (__m256) __builtin_ia32_permvarsf256 ((__v8sf)__X, (__v8si)__Y);
	vmovdqu	.LC5(%rip), %ymm14	 #, tmp1043
	vpaddd	128(%rsp), %ymm5, %ymm15	 # %sfp, tmp629, _325
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:149:   return (__m256) ((__v8sf)__A + (__v8sf)__B);
	vaddps	%ymm9, %ymm10, %ymm9	 # tmp621, _432, _475
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avx2intrin.h:1065:   return (__m256) __builtin_ia32_permvarsf256 ((__v8sf)__X, (__v8si)__Y);
	vpermps	%ymm1, %ymm14, %ymm1	 # tmp599, tmp1043, tmp630
	vpermps	%ymm0, %ymm14, %ymm0	 # tmp601, tmp1042, tmp632
	vpermps	%ymm3, %ymm14, %ymm3	 # tmp603, tmp1041, tmp634
	vmovdqu	%ymm15, 128(%rsp)	 # _325, %sfp
	vpermps	%ymm2, %ymm14, %ymm2	 # tmp605, tmp1040, tmp636
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vmovups	32(%rsp), %ymm14	 # %sfp, _59
	vsubps	%ymm0, %ymm7, %ymm15	 # tmp632, _61, _503
	vsubps	%ymm1, %ymm14, %ymm5	 # tmp630, _59, _502
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:320:   return (__m256) ((__v8sf)__A * (__v8sf)__B);
	vmulps	%ymm5, %ymm5, %ymm10	 # _502, _502, tmp638
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:149:   return (__m256) ((__v8sf)__A + (__v8sf)__B);
	vfmadd231ps	%ymm15, %ymm15, %ymm10	 # _503, _503, _506
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:406:   return (__m256) __builtin_ia32_cmpps256 ((__v8sf)__X, (__v8sf)__Y,
	vcmpps	$1, %ymm12, %ymm10, %ymm14	 #, _44, _506, tmp642
	vcmpps	$1, 96(%rsp), %ymm10, %ymm7	 #, %sfp, _506, tmp639
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vsubps	%ymm10, %ymm12, %ymm10	 # _506, _44, _511
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:320:   return (__m256) ((__v8sf)__A * (__v8sf)__B);
	vmulps	%ymm10, %ymm10, %ymm10	 # _511, _511, _512
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:186:   return (__m256) __builtin_ia32_andnps256 ((__v8sf)__A, (__v8sf)__B);
	vandnps	%ymm7, %ymm14, %ymm7	 # tmp639, tmp642, tmp645
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:174:   return (__m256) __builtin_ia32_andps256 ((__v8sf)__A, (__v8sf)__B);
	vandps	.LC3(%rip), %ymm7, %ymm7	 #, tmp645, tmp646
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/fmaintrin.h:65:   return (__m256)__builtin_ia32_vfmaddps256 ((__v8sf)__A, (__v8sf)__B,
	vfmadd231ps	%ymm1, %ymm7, %ymm13	 # tmp630, tmp646, tmp655
	vfmadd231ps	%ymm3, %ymm7, %ymm6	 # tmp634, tmp646, tmp653
	vfmadd231ps	%ymm2, %ymm7, %ymm8	 # tmp636, tmp646, tmp654
	vfmadd231ps	%ymm0, %ymm7, %ymm4	 # tmp632, tmp646, tmp656
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:320:   return (__m256) ((__v8sf)__A * (__v8sf)__B);
	vmulps	%ymm10, %ymm5, %ymm5	 # _512, _502, tmp649
	vmulps	%ymm10, %ymm15, %ymm15	 # _512, _503, tmp651
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:174:   return (__m256) __builtin_ia32_andps256 ((__v8sf)__A, (__v8sf)__B);
	vandps	%ymm5, %ymm14, %ymm5	 # tmp649, tmp642, tmp650
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:149:   return (__m256) ((__v8sf)__A + (__v8sf)__B);
	vaddps	%ymm5, %ymm11, %ymm5	 # tmp650, _472, _515
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:475:   return (__m256i)__builtin_ia32_cvtps2dq256 ((__v8sf) __A);
	vcvtps2dq	%ymm7, %ymm11	 # tmp646, tmp657
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:174:   return (__m256) __builtin_ia32_andps256 ((__v8sf)__A, (__v8sf)__B);
	vandps	%ymm15, %ymm14, %ymm14	 # tmp651, tmp642, tmp652
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:475:   return (__m256i)__builtin_ia32_cvtps2dq256 ((__v8sf) __A);
	vmovdqu	%ymm11, 160(%rsp)	 # tmp657, %sfp
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avx2intrin.h:1065:   return (__m256) __builtin_ia32_permvarsf256 ((__v8sf)__X, (__v8si)__Y);
	vmovdqu	.LC5(%rip), %ymm11	 #, tmp1038
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:149:   return (__m256) ((__v8sf)__A + (__v8sf)__B);
	vaddps	%ymm14, %ymm9, %ymm9	 # tmp652, _475, _518
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vmovups	32(%rsp), %ymm14	 # %sfp, _59
	vmovups	64(%rsp), %ymm7	 # %sfp, _61
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avx2intrin.h:1065:   return (__m256) __builtin_ia32_permvarsf256 ((__v8sf)__X, (__v8si)__Y);
	vpermps	%ymm1, %ymm11, %ymm11	 # tmp630, tmp1038, tmp659
	vmovdqu	.LC5(%rip), %ymm1	 #, tmp1037
	vpermps	%ymm0, %ymm1, %ymm10	 # tmp632, tmp1037, tmp661
	vpermps	%ymm3, %ymm1, %ymm1	 # tmp634, tmp1036, tmp663
	vmovdqu	.LC5(%rip), %ymm3	 #, tmp1035
	vpermps	%ymm2, %ymm3, %ymm15	 # tmp636, tmp1035, tmp665
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vsubps	%ymm11, %ymm14, %ymm3	 # tmp659, _59, _545
	vsubps	%ymm10, %ymm7, %ymm14	 # tmp661, _61, _546
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:320:   return (__m256) ((__v8sf)__A * (__v8sf)__B);
	vmulps	%ymm3, %ymm3, %ymm2	 # _545, _545, tmp667
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:149:   return (__m256) ((__v8sf)__A + (__v8sf)__B);
	vfmadd231ps	%ymm14, %ymm14, %ymm2	 # _546, _546, _549
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:406:   return (__m256) __builtin_ia32_cmpps256 ((__v8sf)__X, (__v8sf)__Y,
	vcmpps	$1, 96(%rsp), %ymm2, %ymm0	 #, %sfp, _549, tmp668
	vcmpps	$1, %ymm12, %ymm2, %ymm7	 #, _44, _549, tmp671
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vsubps	%ymm2, %ymm12, %ymm2	 # _549, _44, _554
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:320:   return (__m256) ((__v8sf)__A * (__v8sf)__B);
	vmulps	%ymm2, %ymm2, %ymm2	 # _554, _554, _555
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:186:   return (__m256) __builtin_ia32_andnps256 ((__v8sf)__A, (__v8sf)__B);
	vandnps	%ymm0, %ymm7, %ymm0	 # tmp668, tmp671, tmp674
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:174:   return (__m256) __builtin_ia32_andps256 ((__v8sf)__A, (__v8sf)__B);
	vandps	.LC3(%rip), %ymm0, %ymm0	 #, tmp674, tmp675
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/fmaintrin.h:65:   return (__m256)__builtin_ia32_vfmaddps256 ((__v8sf)__A, (__v8sf)__B,
	vfmadd132ps	%ymm0, %ymm6, %ymm1	 # tmp675, tmp653, avg_vx_vec
	vfmadd132ps	%ymm0, %ymm8, %ymm15	 # tmp675, tmp654, avg_vy_vec
	vfmadd231ps	%ymm11, %ymm0, %ymm13	 # tmp659, tmp675, avg_x_vec
	vfmadd231ps	%ymm10, %ymm0, %ymm4	 # tmp661, tmp675, avg_y_vec
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:475:   return (__m256i)__builtin_ia32_cvtps2dq256 ((__v8sf) __A);
	vcvtps2dq	%ymm0, %ymm0	 # tmp675, tmp686
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avx2intrin.h:121:   return (__m256i) ((__v8su)__A + (__v8su)__B);
	vpaddd	160(%rsp), %ymm0, %ymm0	 # %sfp, tmp686, tmp688
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avx2intrin.h:121:   return (__m256i) ((__v8su)__A + (__v8su)__B);
	vpaddd	128(%rsp), %ymm0, %ymm6	 # %sfp, tmp688, tmp954
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:320:   return (__m256) ((__v8sf)__A * (__v8sf)__B);
	vmulps	%ymm2, %ymm3, %ymm3	 # _555, _545, tmp678
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avx2intrin.h:121:   return (__m256i) ((__v8su)__A + (__v8su)__B);
	vmovdqu	%ymm6, 320(%rsp)	 # tmp954, %sfp
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:320:   return (__m256) ((__v8sf)__A * (__v8sf)__B);
	vmulps	%ymm2, %ymm14, %ymm14	 # _555, _546, tmp680
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:174:   return (__m256) __builtin_ia32_andps256 ((__v8sf)__A, (__v8sf)__B);
	vandps	%ymm3, %ymm7, %ymm3	 # tmp678, tmp671, tmp679
	vandps	%ymm14, %ymm7, %ymm7	 # tmp680, tmp671, tmp681
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:149:   return (__m256) ((__v8sf)__A + (__v8sf)__B);
	vaddps	%ymm3, %ymm5, %ymm3	 # tmp679, _515, sep_x_vec
	vaddps	%ymm7, %ymm9, %ymm2	 # tmp681, _518, sep_y_vec
	vmovups	%ymm3, 352(%rsp)	 # sep_x_vec, %sfp
	vmovups	%ymm2, 384(%rsp)	 # sep_y_vec, %sfp
 # .\src\main.cpp:689:             for (Boid nearby_boid = row_begin; nearby_boid < row_end; nearby_boid += 8) {
	cmpl	%r13d, %esi	 # ivtmp.2117, row_end
	jg	.L807	 #,
.L806:
 # .\src\main.cpp:674:         for (int cy = -1; cy <= 1; cy++) {
	movl	424(%rsp), %eax	 # %sfp, ivtmp.2164
	addl	$1, %ebx	 #, ivtmp.2142
	cmpl	%eax, %ebx	 # ivtmp.2164, ivtmp.2142
	jne	.L802	 #,
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avx2intrin.h:275:   return (__m256i) ((__v8si)__A > (__v8si)__B);
	vmovaps	%ymm13, %ymm0	 # avg_x_vec, avg_x_vec
	movq	%rdx, %rcx	 # vxs, vxs
	vpxor	%xmm2, %xmm2, %xmm2	 # tmp691
	movq	%r15, %r13	 # vys, vys
	vmovdqu	320(%rsp), %ymm6	 # %sfp, isc
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vmovups	64(%rsp), %ymm12	 # %sfp, _61
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avx2intrin.h:275:   return (__m256i) ((__v8si)__A > (__v8si)__B);
	movq	480(%rsp), %rdi	 # %sfp, ivtmp.2146
	vmovups	448(%rsp), %ymm5	 # %sfp, _48
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:463:   return (__m256)__builtin_ia32_cvtdq2ps256 ((__v8si) __A);
	vcvtdq2ps	%ymm6, %ymm7	 # isc, tmp697
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:243:   return (__m256) ((__v8sf)__A / (__v8sf)__B);
	vdivps	%ymm7, %ymm1, %ymm1	 # tmp697, avg_vx_vec, tmp699
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avx2intrin.h:275:   return (__m256i) ((__v8si)__A > (__v8si)__B);
	vpcmpgtd	%ymm2, %ymm6, %ymm2	 # tmp691, tmp957, tmp692
	vmovups	384(%rsp), %ymm14	 # %sfp, sep_y_vec
	movq	776(%rsp), %rdx	 # rules, rules
 # .\src\main.cpp:789:         auto cmpx_2 = _mm256_cmp_ps(current_xs_vec, _mm256_set1_ps(world_width - rules->edge_width), _CMP_GT_OS);
	movl	496(%rsp), %r9d	 # %sfp, tmp722
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avx2intrin.h:275:   return (__m256i) ((__v8si)__A > (__v8si)__B);
	vmovups	352(%rsp), %ymm13	 # %sfp, sep_x_vec
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/fmaintrin.h:65:   return (__m256)__builtin_ia32_vfmaddps256 ((__v8sf)__A, (__v8sf)__B,
	vfmadd213ps	(%rcx,%rdi,4), %ymm5, %ymm13	 # MEM[(__m256_u * {ref-all})vxs_41 + ivtmp.2146_867 * 4], _48, sep_x_vec
	vmovaps	%ymm14, %ymm8	 # sep_y_vec, sep_y_vec
	vfmadd213ps	(%r15,%rdi,4), %ymm5, %ymm8	 # MEM[(__m256_u * {ref-all})vys_42 + ivtmp.2146_867 * 4], _48, sep_y_vec
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:1330: 				 __A, __A, __A, __A };
	vbroadcastss	16(%rdx), %ymm6	 # rules_28(D)->alignment_factor, tmp702
 # .\src\main.cpp:784:         const auto ew = _mm256_set1_ps(rules->edge_width);
	movl	24(%rdx), %eax	 # rules_28(D)->edge_width, _173
 # .\src\main.cpp:789:         auto cmpx_2 = _mm256_cmp_ps(current_xs_vec, _mm256_set1_ps(world_width - rules->edge_width), _CMP_GT_OS);
	subl	%eax, %r9d	 # _173, tmp722
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:243:   return (__m256) ((__v8sf)__A / (__v8sf)__B);
	vdivps	%ymm7, %ymm15, %ymm3	 # tmp697, avg_vy_vec, tmp704
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vsubps	%ymm13, %ymm1, %ymm1	 # tmp693, tmp699, tmp700
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:174:   return (__m256) __builtin_ia32_andps256 ((__v8sf)__A, (__v8sf)__B);
	vandps	%ymm2, %ymm1, %ymm1	 # tmp692, tmp700, tmp701
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/fmaintrin.h:65:   return (__m256)__builtin_ia32_vfmaddps256 ((__v8sf)__A, (__v8sf)__B,
	vfmadd132ps	%ymm6, %ymm13, %ymm1	 # tmp702, tmp693, tmp703
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vmovups	32(%rsp), %ymm13	 # %sfp, _59
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:243:   return (__m256) ((__v8sf)__A / (__v8sf)__B);
	vdivps	%ymm7, %ymm0, %ymm0	 # tmp697, avg_x_vec, tmp708
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vsubps	%ymm8, %ymm3, %ymm3	 # tmp695, tmp704, tmp705
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:174:   return (__m256) __builtin_ia32_andps256 ((__v8sf)__A, (__v8sf)__B);
	vandps	%ymm2, %ymm3, %ymm3	 # tmp692, tmp705, tmp706
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/fmaintrin.h:65:   return (__m256)__builtin_ia32_vfmaddps256 ((__v8sf)__A, (__v8sf)__B,
	vfmadd132ps	%ymm3, %ymm8, %ymm6	 # tmp706, tmp695, tmp707
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:1330: 				 __A, __A, __A, __A };
	vbroadcastss	20(%rdx), %ymm8	 # rules_28(D)->cohesion_factor, tmp711
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vsubps	%ymm13, %ymm0, %ymm3	 # _59, tmp708, tmp709
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:243:   return (__m256) ((__v8sf)__A / (__v8sf)__B);
	vdivps	%ymm7, %ymm4, %ymm0	 # tmp697, avg_y_vec, tmp713
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/fmaintrin.h:65:   return (__m256)__builtin_ia32_vfmaddps256 ((__v8sf)__A, (__v8sf)__B,
	vmovaps	%ymm8, %ymm4	 # tmp711, tmp711
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:174:   return (__m256) __builtin_ia32_andps256 ((__v8sf)__A, (__v8sf)__B);
	vandps	%ymm2, %ymm3, %ymm3	 # tmp692, tmp709, tmp710
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/fmaintrin.h:65:   return (__m256)__builtin_ia32_vfmaddps256 ((__v8sf)__A, (__v8sf)__B,
	vfmadd132ps	%ymm8, %ymm1, %ymm3	 # tmp711, tmp703, tmp712
 # .\src\main.cpp:784:         const auto ew = _mm256_set1_ps(rules->edge_width);
	vxorps	%xmm8, %xmm8, %xmm8	 # tmp963
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vsubps	%ymm12, %ymm0, %ymm0	 # _61, tmp713, tmp714
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:174:   return (__m256) __builtin_ia32_andps256 ((__v8sf)__A, (__v8sf)__B);
	vandps	%ymm2, %ymm0, %ymm0	 # tmp692, tmp714, tmp715
 # .\src\main.cpp:784:         const auto ew = _mm256_set1_ps(rules->edge_width);
	vcvtsi2ssl	%eax, %xmm8, %xmm2	 # _173, tmp963, tmp806
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/fmaintrin.h:65:   return (__m256)__builtin_ia32_vfmaddps256 ((__v8sf)__A, (__v8sf)__B,
	vfmadd132ps	%ymm0, %ymm6, %ymm4	 # tmp715, tmp707, tmp711
 # .\src\main.cpp:789:         auto cmpx_2 = _mm256_cmp_ps(current_xs_vec, _mm256_set1_ps(world_width - rules->edge_width), _CMP_GT_OS);
	vcvtsi2ssl	%r9d, %xmm8, %xmm0	 # tmp722, tmp966, tmp807
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:1330: 				 __A, __A, __A, __A };
	vbroadcastss	28(%rdx), %ymm6	 # rules_28(D)->edge_factor, tmp717
 # .\src\main.cpp:791:         auto cmpy_2 = _mm256_cmp_ps(current_ys_vec, _mm256_set1_ps(world_height - rules->edge_width), _CMP_GT_OS);
	movl	488(%rsp), %r9d	 # %sfp, tmp730
	subl	%eax, %r9d	 # _173, tmp730
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:1330: 				 __A, __A, __A, __A };
	vbroadcastss	%xmm2, %ymm2	 # _174, tmp718
	vbroadcastss	%xmm0, %ymm0	 # _178, tmp725
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:406:   return (__m256) __builtin_ia32_cmpps256 ((__v8sf)__X, (__v8sf)__Y,
	vcmpps	$1, %ymm2, %ymm13, %ymm7	 #, tmp718, _59, tmp719
	vcmpps	$14, %ymm0, %ymm13, %ymm1	 #, tmp725, _59, tmp723
 # .\src\main.cpp:791:         auto cmpy_2 = _mm256_cmp_ps(current_ys_vec, _mm256_set1_ps(world_height - rules->edge_width), _CMP_GT_OS);
	vcvtsi2ssl	%r9d, %xmm8, %xmm0	 # tmp730, tmp970, tmp808
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:229:   return (__m256) __builtin_ia32_blendvps256 ((__v8sf)__X,
	vbroadcastss	.LC4(%rip), %ymm8	 #, tmp973
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:406:   return (__m256) __builtin_ia32_cmpps256 ((__v8sf)__X, (__v8sf)__Y,
	vcmpps	$1, %ymm2, %ymm12, %ymm2	 #, tmp718, _61, tmp727
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:174:   return (__m256) __builtin_ia32_andps256 ((__v8sf)__A, (__v8sf)__B);
	vandps	%ymm6, %ymm7, %ymm7	 # tmp717, tmp719, tmp736
	vandps	%ymm6, %ymm1, %ymm1	 # tmp717, tmp723, tmp735
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vsubps	%ymm1, %ymm7, %ymm1	 # tmp735, tmp736, tmp737
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:1330: 				 __A, __A, __A, __A };
	vbroadcastss	%xmm0, %ymm0	 # _183, tmp733
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:406:   return (__m256) __builtin_ia32_cmpps256 ((__v8sf)__X, (__v8sf)__Y,
	vcmpps	$14, %ymm0, %ymm12, %ymm0	 #, tmp733, _61, tmp731
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:149:   return (__m256) ((__v8sf)__A + (__v8sf)__B);
	vaddps	%ymm3, %ymm1, %ymm3	 # tmp712, tmp737, _189
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:174:   return (__m256) __builtin_ia32_andps256 ((__v8sf)__A, (__v8sf)__B);
	vandps	%ymm6, %ymm2, %ymm1	 # tmp717, tmp727, tmp739
	vandps	%ymm6, %ymm0, %ymm0	 # tmp717, tmp731, tmp738
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vsubps	%ymm0, %ymm1, %ymm1	 # tmp738, tmp739, tmp740
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:320:   return (__m256) ((__v8sf)__A * (__v8sf)__B);
	vmulps	%ymm3, %ymm3, %ymm0	 # _189, _189, tmp741
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:149:   return (__m256) ((__v8sf)__A + (__v8sf)__B);
	vaddps	%ymm4, %ymm1, %ymm1	 # tmp716, tmp740, _193
	vfmadd231ps	%ymm1, %ymm1, %ymm0	 # _193, _193, _196
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:1041:   return (__m256) __builtin_ia32_rsqrtps256 ((__v8sf)__A);
	vrsqrtps	%ymm0, %ymm0	 # _196, tmp742
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:320:   return (__m256) ((__v8sf)__A * (__v8sf)__B);
	vmulps	.LC6(%rip), %ymm0, %ymm4	 #, tmp742, _198
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:406:   return (__m256) __builtin_ia32_cmpps256 ((__v8sf)__X, (__v8sf)__Y,
	vcmpps	$14, .LC8(%rip), %ymm0, %ymm7	 #,, tmp742, tmp746
	vcmpps	$1, .LC10(%rip), %ymm0, %ymm6	 #,, tmp742, tmp750
	vcmpps	$14, .LC12(%rip), %ymm0, %ymm2	 #,, tmp742, tmp754
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:320:   return (__m256) ((__v8sf)__A * (__v8sf)__B);
	vmulps	.LC14(%rip), %ymm0, %ymm0	 #, tmp742, tmp758
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:229:   return (__m256) __builtin_ia32_blendvps256 ((__v8sf)__X,
	vblendvps	%ymm7, %ymm0, %ymm8, %ymm0	 # tmp746, tmp758, tmp972, _205
	vblendvps	%ymm6, %ymm4, %ymm0, %ymm0	 # tmp750, _198, _205, _208
	vblendvps	%ymm2, .LC3(%rip), %ymm0, %ymm0	 # tmp754,, _208, _211
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:320:   return (__m256) ((__v8sf)__A * (__v8sf)__B);
	vmulps	%ymm0, %ymm3, %ymm3	 # _211, _189, tmp774
	vmulps	%ymm0, %ymm1, %ymm1	 # _211, _193, tmp775
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:911:   *(__m256_u *)__P = __A;
	vmovups	%ymm3, (%rcx,%rdi,4)	 # tmp774, MEM[(__m256_u * {ref-all})vxs_41 + ivtmp.2146_867 * 4]
	vmovups	%ymm1, (%r15,%rdi,4)	 # tmp775, MEM[(__m256_u * {ref-all})vys_42 + ivtmp.2146_867 * 4]
 # .\src\main.cpp:657:     for (Boid current_boid = cell_begin; current_boid < cell_end; current_boid += 8) {
	addq	$8, %rdi	 #, ivtmp.2146
	cmpl	%edi, 500(%rsp)	 # ivtmp.2146, %sfp
	jg	.L809	 #,
	movq	%rdx, %rsi	 # rules, rules
	vzeroupper
.L801:
 # .\src\main.cpp:1031:         for (int x = 0; x < boid_map->m_xsize; x++) {
	movl	4(%r14), %ebx	 # boid_map_23(D)->m_xsize, _9
 # .\src\main.cpp:1031:         for (int x = 0; x < boid_map->m_xsize; x++) {
	leal	1(%rbp), %eax	 #, ivtmp.2160
	subl	$1, %ebp	 #, x
 # .\src\main.cpp:1030:     for (int y = thread_num * (boid_map->m_ysize / NUM_THREADS) + offset; y < (thread_num + 1) * (boid_map->m_ysize / NUM_THREADS); y += 2) {
	movl	(%r14), %r13d	 # boid_map_23(D)->m_ysize, prephitmp_92
 # .\src\main.cpp:1031:         for (int x = 0; x < boid_map->m_xsize; x++) {
	cmpl	%ebp, %ebx	 # x, _9
	jle	.L825	 #,
	movl	%eax, %ebp	 # ivtmp.2160, ivtmp.2160
	jmp	.L799	 #
.L823:
	vzeroupper
	jmp	.L801	 #
.L825:
 # .\src\main.cpp:1030:     for (int y = thread_num * (boid_map->m_ysize / NUM_THREADS) + offset; y < (thread_num + 1) * (boid_map->m_ysize / NUM_THREADS); y += 2) {
	movl	%r13d, %eax	 # prephitmp_92, tmp777
	xorl	%edx, %edx	 # tmp778
	movq	%r14, %rdi	 # boid_map, boid_map
	movl	%ebx, %r14d	 # _9, _9
	divl	_ZL11num_threads(%rip)	 # num_threads
	movl	508(%rsp), %ebx	 # %sfp, _109
	movl	424(%rsp), %r10d	 # %sfp, ivtmp.2164
	movq	%rsi, %r11	 # rules, rules
 # .\src\main.cpp:1030:     for (int y = thread_num * (boid_map->m_ysize / NUM_THREADS) + offset; y < (thread_num + 1) * (boid_map->m_ysize / NUM_THREADS); y += 2) {
	imull	%ebx, %eax	 # _109, tmp779
 # .\src\main.cpp:1030:     for (int y = thread_num * (boid_map->m_ysize / NUM_THREADS) + offset; y < (thread_num + 1) * (boid_map->m_ysize / NUM_THREADS); y += 2) {
	cmpl	%eax, %r10d	 # tmp779, ivtmp.2164
	jnb	.L824	 #,
	addl	$2, %r10d	 #, ivtmp.2164
	leal	-2(%r10), %eax	 #, y
	movl	%eax, 504(%rsp)	 # y, %sfp
 # .\src\main.cpp:1031:         for (int x = 0; x < boid_map->m_xsize; x++) {
	testl	%r14d, %r14d	 # _9
	jg	.L814	 #,
.L824:
 # .\src\main.cpp:1035: }
	vmovups	512(%rsp), %xmm6	 #,
	vmovups	528(%rsp), %xmm7	 #,
	vmovups	544(%rsp), %xmm8	 #,
	vmovups	560(%rsp), %xmm9	 #,
	vmovups	576(%rsp), %xmm10	 #,
	vmovups	592(%rsp), %xmm11	 #,
	vmovups	608(%rsp), %xmm12	 #,
	vmovups	624(%rsp), %xmm13	 #,
	vmovups	640(%rsp), %xmm14	 #,
	vmovups	656(%rsp), %xmm15	 #,
	addq	$680, %rsp	 #,
	popq	%rbx	 #
	popq	%rsi	 #
	popq	%rdi	 #
	popq	%rbp	 #
	popq	%r12	 #
	popq	%r13	 #
	popq	%r14	 #
	popq	%r15	 #
	ret	
	.seh_endproc
	.p2align 4
	.globl	_Z21block_runner_unstableiPK7BoidMapPK5RulesPK8BoidList
	.def	_Z21block_runner_unstableiPK7BoidMapPK5RulesPK8BoidList;	.scl	2;	.type	32;	.endef
	.seh_proc	_Z21block_runner_unstableiPK7BoidMapPK5RulesPK8BoidList
_Z21block_runner_unstableiPK7BoidMapPK5RulesPK8BoidList:
.LFB12613:
	pushq	%r15	 #
	.seh_pushreg	%r15
	pushq	%r14	 #
	.seh_pushreg	%r14
	pushq	%r13	 #
	.seh_pushreg	%r13
	pushq	%r12	 #
	.seh_pushreg	%r12
	pushq	%rbp	 #
	.seh_pushreg	%rbp
	pushq	%rdi	 #
	.seh_pushreg	%rdi
	pushq	%rsi	 #
	.seh_pushreg	%rsi
	pushq	%rbx	 #
	.seh_pushreg	%rbx
	subq	$664, %rsp	 #,
	.seh_stackalloc	664
	vmovups	%xmm6, 496(%rsp)	 #,
	.seh_savexmm	%xmm6, 496
	vmovups	%xmm7, 512(%rsp)	 #,
	.seh_savexmm	%xmm7, 512
	vmovups	%xmm8, 528(%rsp)	 #,
	.seh_savexmm	%xmm8, 528
	vmovups	%xmm9, 544(%rsp)	 #,
	.seh_savexmm	%xmm9, 544
	vmovups	%xmm10, 560(%rsp)	 #,
	.seh_savexmm	%xmm10, 560
	vmovups	%xmm11, 576(%rsp)	 #,
	.seh_savexmm	%xmm11, 576
	vmovups	%xmm12, 592(%rsp)	 #,
	.seh_savexmm	%xmm12, 592
	vmovups	%xmm13, 608(%rsp)	 #,
	.seh_savexmm	%xmm13, 608
	vmovups	%xmm14, 624(%rsp)	 #,
	.seh_savexmm	%xmm14, 624
	vmovups	%xmm15, 640(%rsp)	 #,
	.seh_savexmm	%xmm15, 640
	.seh_endprologue
 # .\src\main.cpp:1039:     for (int x = 0; x < boid_map->m_xsize; x++) {
	movl	$2, %ebp	 #, ivtmp.2223
 # .\src\main.cpp:1038: void block_runner_unstable(int y, const BoidMap *boid_map, const Rules *rules, const BoidList *boid_list) {
	movq	%r9, %r12	 # tmp774, boid_list
 # .\src\main.cpp:1039:     for (int x = 0; x < boid_map->m_xsize; x++) {
	movl	4(%rdx), %r9d	 # boid_map_5(D)->m_xsize, _1
 # .\src\main.cpp:1038: void block_runner_unstable(int y, const BoidMap *boid_map, const Rules *rules, const BoidList *boid_list) {
	movq	%rdx, %rdi	 # tmp772, boid_map
 # .\src\main.cpp:1039:     for (int x = 0; x < boid_map->m_xsize; x++) {
	testl	%r9d, %r9d	 # _1
	jle	.L850	 #,
	movl	%r9d, %ebx	 # _1, _1
	movl	%ecx, %r11d	 # y, y
	movq	%r8, %r15	 # rules, rules
.L827:
 # .\src\main.cpp:639:     const auto world_height = map->m_cell_size * map->m_ysize;
	movl	8(%rdi), %r9d	 # boid_map_5(D)->m_cell_size, _11
 # .\src\main.cpp:639:     const auto world_height = map->m_cell_size * map->m_ysize;
	movl	(%rdi), %r10d	 # boid_map_5(D)->m_ysize, _12
 # .\src\main.cpp:642:     const Boid cell_to_update = map->get_coord(y, x);
	leal	-2(%rbp), %r8d	 #,
	movl	%r11d, %edx	 # y,
	movq	%rdi, %rcx	 # boid_map,
	movl	%r11d, 736(%rsp)	 # y, y
 # .\src\main.cpp:639:     const auto world_height = map->m_cell_size * map->m_ysize;
	movl	%r9d, 64(%rsp)	 # _11, %sfp
 # .\src\main.cpp:639:     const auto world_height = map->m_cell_size * map->m_ysize;
	movl	%r10d, 32(%rsp)	 # _12, %sfp
 # .\src\main.cpp:642:     const Boid cell_to_update = map->get_coord(y, x);
	call	_ZNK7BoidMap9get_coordEii	 #
 # .\src\main.cpp:643:     if (cell_to_update == -1 ) return;
	movl	32(%rsp), %r10d	 # %sfp, _12
	movl	64(%rsp), %r9d	 # %sfp, _11
	cmpl	$-1, %eax	 #, _16
	movl	736(%rsp), %r11d	 # y, y
 # .\src\main.cpp:642:     const Boid cell_to_update = map->get_coord(y, x);
	movl	%eax, %r8d	 # tmp775, _16
 # .\src\main.cpp:643:     if (cell_to_update == -1 ) return;
	je	.L830	 #,
 # .\src\main.cpp:645:     const auto xs = boid_list->m_boid_store->xs;
	movq	(%r12), %rax	 # boid_list_8(D)->m_boid_store, _17
 # .\src\main.cpp:655:     Boid cell_end = cell_begin + boid_list->m_boid_store->depth[cell_begin];
	movslq	%r8d, %rsi	 # _16, ivtmp.2209
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:1330: 				 __A, __A, __A, __A };
	vbroadcastss	(%r15), %ymm8	 # rules_7(D)->avoid_distance_squared, _23
	vbroadcastss	12(%r15), %ymm4	 # rules_7(D)->sight_range_squared, _25
	vbroadcastss	4(%r15), %ymm1	 # rules_7(D)->avoid_factor, _27
 # .\src\main.cpp:645:     const auto xs = boid_list->m_boid_store->xs;
	movq	(%rax), %rcx	 # _17->xs, xs
 # .\src\main.cpp:647:     const auto vxs = boid_list->m_boid_store->vxs;
	movq	16(%rax), %rdx	 # _17->vxs, vxs
 # .\src\main.cpp:648:     const auto vys = boid_list->m_boid_store->vys;
	movq	24(%rax), %r14	 # _17->vys, vys
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:1330: 				 __A, __A, __A, __A };
	vmovups	%ymm4, 96(%rsp)	 # _25, %sfp
 # .\src\main.cpp:645:     const auto xs = boid_list->m_boid_store->xs;
	movq	%rcx, 424(%rsp)	 # xs, %sfp
 # .\src\main.cpp:646:     const auto ys = boid_list->m_boid_store->ys;
	movq	8(%rax), %rcx	 # _17->ys, ys
 # .\src\main.cpp:655:     Boid cell_end = cell_begin + boid_list->m_boid_store->depth[cell_begin];
	movq	48(%rax), %rax	 # _17->depth, _17->depth
 # .\src\main.cpp:646:     const auto ys = boid_list->m_boid_store->ys;
	movq	%rcx, 464(%rsp)	 # ys, %sfp
 # .\src\main.cpp:655:     Boid cell_end = cell_begin + boid_list->m_boid_store->depth[cell_begin];
	movl	(%rax,%rsi,4), %ecx	 # *_31, cell_end
	addl	%r8d, %ecx	 # _16, cell_end
	movl	%ecx, %eax	 # cell_end, cell_end
 # .\src\main.cpp:657:     for (Boid current_boid = cell_begin; current_boid < cell_end; current_boid += 8) {
	cmpl	%ecx, %r8d	 # cell_end, _16
	jge	.L849	 #,
 # .\src\main.cpp:639:     const auto world_height = map->m_cell_size * map->m_ysize;
	imull	%r9d, %r10d	 # _11, _12
	leal	-1(%r11), %ecx	 #, ivtmp.2205
	vmovaps	%ymm1, %ymm5	 # _27, _27
	movq	%rsi, %r13	 # ivtmp.2209, ivtmp.2209
 # .\src\main.cpp:640:     const auto world_width = map->m_cell_size * map->m_xsize;
	imull	%r9d, %ebx	 # _11, world_width
	movl	%ecx, 484(%rsp)	 # ivtmp.2205, %sfp
	leal	2(%r11), %ecx	 #, _91
	movl	%eax, 492(%rsp)	 # cell_end, %sfp
 # .\src\main.cpp:639:     const auto world_height = map->m_cell_size * map->m_ysize;
	movl	%r10d, 480(%rsp)	 # _12, %sfp
	movl	%ebx, 488(%rsp)	 # world_width, %sfp
	movl	%r11d, 736(%rsp)	 # y, y
	movl	%ecx, 416(%rsp)	 # _91, %sfp
	leal	-3(%rbp), %ecx	 #, ivtmp.2197
	movl	%ecx, 420(%rsp)	 # ivtmp.2197, %sfp
	movq	%rdx, %rcx	 # vxs, vxs
	movq	%r15, %rdx	 # rules, rules
	vmovups	%ymm8, 288(%rsp)	 # _23, %sfp
.L838:
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:905:   return *(__m256_u *)__P;
	movq	424(%rsp), %rax	 # %sfp, xs
	movl	484(%rsp), %r15d	 # %sfp, ivtmp.2205
 # .\src\main.cpp:669:         __m256 avg_vy_vec = _mm256_set1_ps(0.);
	vxorps	%xmm3, %xmm3, %xmm3	 # avg_vy_vec
	movq	%r13, 472(%rsp)	 # ivtmp.2209, %sfp
	movq	%rdx, 752(%rsp)	 # rules, rules
 # .\src\main.cpp:668:         __m256 avg_vx_vec = _mm256_set1_ps(0.);
	vmovaps	%ymm3, %ymm1	 #, avg_vx_vec
 # .\src\main.cpp:662:         __m256 sep_x_vec = _mm256_set1_ps(0.);
	vmovaps	%ymm3, %ymm13	 # tmp20, sep_x_vec
	vmovaps	%ymm3, %ymm15	 # avg_vy_vec, avg_vy_vec
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:905:   return *(__m256_u *)__P;
	vmovups	(%rax,%r13,4), %ymm4	 # MEM[(__m256_u * {ref-all})xs_18 + ivtmp.2209_90 * 4], _38
	movl	%r15d, %ebx	 # ivtmp.2205, ivtmp.2205
	movq	%rcx, %rdx	 # vxs, vxs
	movq	464(%rsp), %rax	 # %sfp, ys
	vmovups	%ymm5, 432(%rsp)	 # _27, %sfp
	movq	%r14, %r15	 # vys, vys
	vmovups	%ymm4, 32(%rsp)	 # _38, %sfp
	vmovups	(%rax,%r13,4), %ymm4	 # MEM[(__m256_u * {ref-all})ys_19 + ivtmp.2209_90 * 4], _40
	vmovups	%ymm3, 352(%rsp)	 # sep_x_vec, %sfp
	vmovups	%ymm4, 64(%rsp)	 # _40, %sfp
 # .\src\main.cpp:671:         __m256i isc = _mm256_set1_epi32(0);
	vpxor	%xmm4, %xmm4, %xmm4	 # isc
	vmovdqu	%ymm4, 320(%rsp)	 # isc, %sfp
 # .\src\main.cpp:666:         __m256 avg_y_vec = _mm256_set1_ps(0.);
	vmovaps	%ymm3, %ymm4	 # tmp21, avg_y_vec
	vmovups	%ymm3, 384(%rsp)	 # sep_y_vec, %sfp
.L831:
	movl	420(%rsp), %r13d	 # %sfp, ivtmp.2197
 # .\src\main.cpp:675:             Boid row_begin = -1;
	movl	$-1, %r14d	 #, row_begin
	movq	%rdx, 128(%rsp)	 # vxs, %sfp
 # .\src\main.cpp:676:             Boid row_end = -1;
	movl	$-1, %esi	 #, row_end
	vmovups	%ymm13, 160(%rsp)	 # avg_x_vec, %sfp
	vmovups	%ymm4, 192(%rsp)	 # avg_y_vec, %sfp
	movl	%r13d, %eax	 # ivtmp.2197, ivtmp.2197
	movl	%r14d, %r13d	 # row_begin, row_begin
	vmovups	%ymm1, 224(%rsp)	 # avg_vx_vec, %sfp
	movl	%eax, %r14d	 # ivtmp.2197, ivtmp.2197
	vmovups	%ymm15, 256(%rsp)	 # avg_vy_vec, %sfp
	vzeroupper
.L834:
 # .\src\main.cpp:680:                 Boid current = map->get_coord(y + cy, x + cx);
	movl	%r14d, %r8d	 # ivtmp.2197,
	movl	%ebx, %edx	 # ivtmp.2205,
	movq	%rdi, %rcx	 # boid_map,
	call	_ZNK7BoidMap9get_coordEii	 #
 # .\src\main.cpp:681:                 if (current != -1) {
	cmpl	$-1, %eax	 #, _45
	je	.L832	 #,
 # .\src\main.cpp:684:                     row_end = current + boid_list->m_boid_store->depth[current];
	movq	(%r12), %rdx	 # boid_list_8(D)->m_boid_store, boid_list_8(D)->m_boid_store
 # .\src\main.cpp:682:                     if (row_begin == -1) row_begin = current;
	cmpl	$-1, %r13d	 #, row_begin
 # .\src\main.cpp:684:                     row_end = current + boid_list->m_boid_store->depth[current];
	movslq	%eax, %rcx	 # _45, _45
 # .\src\main.cpp:682:                     if (row_begin == -1) row_begin = current;
	cmove	%eax, %r13d	 # row_begin,, _45, row_begin
 # .\src\main.cpp:684:                     row_end = current + boid_list->m_boid_store->depth[current];
	movq	48(%rdx), %rdx	 # _47->depth, _47->depth
 # .\src\main.cpp:684:                     row_end = current + boid_list->m_boid_store->depth[current];
	addl	(%rdx,%rcx,4), %eax	 # *_51, _45
	movl	%eax, %esi	 # _45, row_end
.L832:
 # .\src\main.cpp:679:             for (int cx = -1; cx <= 1; cx++) {
	addl	$1, %r14d	 #, ivtmp.2197
	cmpl	%r14d, %ebp	 # ivtmp.2197, ivtmp.2223
	jne	.L834	 #,
 # .\src\main.cpp:689:             for (Boid nearby_boid = row_begin; nearby_boid < row_end; nearby_boid += 8) {
	movslq	%r13d, %r14	 # row_begin,
	movq	128(%rsp), %rdx	 # %sfp, vxs
	vmovups	160(%rsp), %ymm13	 # %sfp, avg_x_vec
	vmovups	192(%rsp), %ymm4	 # %sfp, avg_y_vec
	vmovups	224(%rsp), %ymm1	 # %sfp, avg_vx_vec
	vmovups	256(%rsp), %ymm15	 # %sfp, avg_vy_vec
	cmpl	%esi, %r14d	 # row_end, row_begin
	jge	.L835	 #,
	.p2align 4,,10
	.p2align 3
.L836:
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:905:   return *(__m256_u *)__P;
	movq	424(%rsp), %rax	 # %sfp, xs
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vmovups	32(%rsp), %ymm12	 # %sfp, _38
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:406:   return (__m256) __builtin_ia32_cmpps256 ((__v8sf)__X, (__v8sf)__Y,
	vmovups	288(%rsp), %ymm11	 # %sfp, _23
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vmovups	64(%rsp), %ymm6	 # %sfp, _40
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:905:   return *(__m256_u *)__P;
	vmovups	(%rax,%r14,4), %ymm3	 # MEM[(__m256_u * {ref-all})xs_18 + ivtmp.2180_203 * 4], MEM[(__m256_u * {ref-all})xs_18 + ivtmp.2180_203 * 4]
	movq	464(%rsp), %rax	 # %sfp, ys
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vsubps	%ymm3, %ymm12, %ymm2	 # MEM[(__m256_u * {ref-all})xs_18 + ivtmp.2180_203 * 4], _38, _223
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:905:   return *(__m256_u *)__P;
	vmovups	(%rax,%r14,4), %ymm5	 # MEM[(__m256_u * {ref-all})ys_19 + ivtmp.2180_203 * 4], MEM[(__m256_u * {ref-all})ys_19 + ivtmp.2180_203 * 4]
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vsubps	%ymm5, %ymm6, %ymm8	 # MEM[(__m256_u * {ref-all})ys_19 + ivtmp.2180_203 * 4], _40, _224
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:320:   return (__m256) ((__v8sf)__A * (__v8sf)__B);
	vmulps	%ymm2, %ymm2, %ymm6	 # _223, _223, tmp439
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:149:   return (__m256) ((__v8sf)__A + (__v8sf)__B);
	vfmadd231ps	%ymm8, %ymm8, %ymm6	 # _224, _224, _206
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:406:   return (__m256) __builtin_ia32_cmpps256 ((__v8sf)__X, (__v8sf)__Y,
	vcmpps	$1, %ymm11, %ymm6, %ymm7	 #, _23, _206, tmp443
	vcmpps	$1, 96(%rsp), %ymm6, %ymm0	 #, %sfp, _206, tmp440
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vsubps	%ymm6, %ymm11, %ymm6	 # _206, _23, _211
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:320:   return (__m256) ((__v8sf)__A * (__v8sf)__B);
	vmulps	%ymm6, %ymm6, %ymm6	 # _211, _211, _212
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:186:   return (__m256) __builtin_ia32_andnps256 ((__v8sf)__A, (__v8sf)__B);
	vandnps	%ymm0, %ymm7, %ymm0	 # tmp440, tmp443, tmp446
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:174:   return (__m256) __builtin_ia32_andps256 ((__v8sf)__A, (__v8sf)__B);
	vandps	.LC3(%rip), %ymm0, %ymm0	 #, tmp446, tmp447
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/fmaintrin.h:65:   return (__m256)__builtin_ia32_vfmaddps256 ((__v8sf)__A, (__v8sf)__B,
	vfmadd231ps	(%rdx,%r14,4), %ymm0, %ymm1	 # MEM[(__m256_u * {ref-all})vxs_20 + ivtmp.2180_203 * 4], tmp447, tmp454
	vfmadd231ps	(%r15,%r14,4), %ymm0, %ymm15	 # MEM[(__m256_u * {ref-all})vys_21 + ivtmp.2180_203 * 4], tmp447, tmp455
	vfmadd231ps	%ymm3, %ymm0, %ymm13	 # MEM[(__m256_u * {ref-all})xs_18 + ivtmp.2180_203 * 4], tmp447, tmp456
	vfmadd231ps	%ymm5, %ymm0, %ymm4	 # MEM[(__m256_u * {ref-all})ys_19 + ivtmp.2180_203 * 4], tmp447, tmp457
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:475:   return (__m256i)__builtin_ia32_cvtps2dq256 ((__v8sf) __A);
	vcvtps2dq	%ymm0, %ymm0	 # tmp447, tmp458
	vmovdqu	%ymm0, 128(%rsp)	 # tmp458, %sfp
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avx2intrin.h:1065:   return (__m256) __builtin_ia32_permvarsf256 ((__v8sf)__X, (__v8si)__Y);
	vmovdqu	.LC5(%rip), %ymm0	 #, tmp1036
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:320:   return (__m256) ((__v8sf)__A * (__v8sf)__B);
	vmulps	%ymm2, %ymm6, %ymm2	 # _223, _212, tmp450
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avx2intrin.h:1065:   return (__m256) __builtin_ia32_permvarsf256 ((__v8sf)__X, (__v8si)__Y);
	vpermps	%ymm3, %ymm0, %ymm0	 # MEM[(__m256_u * {ref-all})xs_18 + ivtmp.2180_203 * 4], tmp1036, tmp460
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vmovups	64(%rsp), %ymm3	 # %sfp, _40
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:320:   return (__m256) ((__v8sf)__A * (__v8sf)__B);
	vmulps	%ymm8, %ymm6, %ymm6	 # _224, _212, tmp452
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:174:   return (__m256) __builtin_ia32_andps256 ((__v8sf)__A, (__v8sf)__B);
	vandps	%ymm2, %ymm7, %ymm2	 # tmp450, tmp443, tmp451
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:149:   return (__m256) ((__v8sf)__A + (__v8sf)__B);
	vaddps	352(%rsp), %ymm2, %ymm2	 # %sfp, tmp451, _236
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:174:   return (__m256) __builtin_ia32_andps256 ((__v8sf)__A, (__v8sf)__B);
	vandps	%ymm6, %ymm7, %ymm7	 # tmp452, tmp443, tmp453
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:149:   return (__m256) ((__v8sf)__A + (__v8sf)__B);
	vaddps	384(%rsp), %ymm7, %ymm6	 # %sfp, tmp453, _239
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avx2intrin.h:1065:   return (__m256) __builtin_ia32_permvarsf256 ((__v8sf)__X, (__v8si)__Y);
	vmovdqu	.LC5(%rip), %ymm7	 #, tmp1035
	vpermps	(%rdx,%r14,4), %ymm7, %ymm10	 # MEM[(__m256_u * {ref-all})vxs_20 + ivtmp.2180_203 * 4], tmp1034, tmp464
	vpermps	(%r15,%r14,4), %ymm7, %ymm9	 # MEM[(__m256_u * {ref-all})vys_21 + ivtmp.2180_203 * 4], tmp1033, tmp466
 # .\src\main.cpp:689:             for (Boid nearby_boid = row_begin; nearby_boid < row_end; nearby_boid += 8) {
	addq	$8, %r14	 #, ivtmp.2180
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avx2intrin.h:1065:   return (__m256) __builtin_ia32_permvarsf256 ((__v8sf)__X, (__v8si)__Y);
	vpermps	%ymm5, %ymm7, %ymm14	 # MEM[(__m256_u * {ref-all})ys_19 + ivtmp.2180_203 * 4], tmp1035, tmp462
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vsubps	%ymm0, %ymm12, %ymm7	 # tmp460, _38, _266
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:406:   return (__m256) __builtin_ia32_cmpps256 ((__v8sf)__X, (__v8sf)__Y,
	vmovups	288(%rsp), %ymm12	 # %sfp, _23
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vsubps	%ymm14, %ymm3, %ymm11	 # tmp462, _40, _267
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:320:   return (__m256) ((__v8sf)__A * (__v8sf)__B);
	vmulps	%ymm7, %ymm7, %ymm5	 # _266, _266, tmp468
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:149:   return (__m256) ((__v8sf)__A + (__v8sf)__B);
	vfmadd231ps	%ymm11, %ymm11, %ymm5	 # _267, _267, _270
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:406:   return (__m256) __builtin_ia32_cmpps256 ((__v8sf)__X, (__v8sf)__Y,
	vcmpps	$1, %ymm12, %ymm5, %ymm8	 #, _23, _270, tmp472
	vcmpps	$1, 96(%rsp), %ymm5, %ymm3	 #, %sfp, _270, tmp469
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vsubps	%ymm5, %ymm12, %ymm5	 # _270, _23, _275
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:320:   return (__m256) ((__v8sf)__A * (__v8sf)__B);
	vmulps	%ymm5, %ymm5, %ymm5	 # _275, _275, _276
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:186:   return (__m256) __builtin_ia32_andnps256 ((__v8sf)__A, (__v8sf)__B);
	vandnps	%ymm3, %ymm8, %ymm3	 # tmp469, tmp472, tmp475
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:174:   return (__m256) __builtin_ia32_andps256 ((__v8sf)__A, (__v8sf)__B);
	vandps	.LC3(%rip), %ymm3, %ymm3	 #, tmp475, tmp476
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/fmaintrin.h:65:   return (__m256)__builtin_ia32_vfmaddps256 ((__v8sf)__A, (__v8sf)__B,
	vfmadd231ps	%ymm10, %ymm3, %ymm1	 # tmp464, tmp476, tmp454
	vfmadd231ps	%ymm9, %ymm3, %ymm15	 # tmp466, tmp476, tmp455
	vfmadd231ps	%ymm0, %ymm3, %ymm13	 # tmp460, tmp476, tmp485
	vfmadd231ps	%ymm14, %ymm3, %ymm4	 # tmp462, tmp476, tmp486
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:475:   return (__m256i)__builtin_ia32_cvtps2dq256 ((__v8sf) __A);
	vcvtps2dq	%ymm3, %ymm3	 # tmp476, tmp487
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:320:   return (__m256) ((__v8sf)__A * (__v8sf)__B);
	vmulps	%ymm5, %ymm7, %ymm7	 # _276, _266, tmp479
	vmulps	%ymm5, %ymm11, %ymm11	 # _276, _267, tmp481
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:174:   return (__m256) __builtin_ia32_andps256 ((__v8sf)__A, (__v8sf)__B);
	vandps	%ymm7, %ymm8, %ymm7	 # tmp479, tmp472, tmp480
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:149:   return (__m256) ((__v8sf)__A + (__v8sf)__B);
	vaddps	%ymm7, %ymm2, %ymm7	 # tmp480, _236, _279
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:174:   return (__m256) __builtin_ia32_andps256 ((__v8sf)__A, (__v8sf)__B);
	vandps	%ymm11, %ymm8, %ymm5	 # tmp481, tmp472, tmp482
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/fmaintrin.h:65:   return (__m256)__builtin_ia32_vfmaddps256 ((__v8sf)__A, (__v8sf)__B,
	vmovaps	%ymm15, %ymm8	 # tmp455, tmp484
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avx2intrin.h:1065:   return (__m256) __builtin_ia32_permvarsf256 ((__v8sf)__X, (__v8si)__Y);
	vmovdqu	.LC5(%rip), %ymm11	 #, tmp1027
	vpaddd	128(%rsp), %ymm3, %ymm2	 # %sfp, tmp487, _216
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:149:   return (__m256) ((__v8sf)__A + (__v8sf)__B);
	vaddps	%ymm5, %ymm6, %ymm5	 # tmp482, _239, _282
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/fmaintrin.h:65:   return (__m256)__builtin_ia32_vfmaddps256 ((__v8sf)__A, (__v8sf)__B,
	vmovaps	%ymm1, %ymm6	 # tmp454, tmp483
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avx2intrin.h:1065:   return (__m256) __builtin_ia32_permvarsf256 ((__v8sf)__X, (__v8si)__Y);
	vpermps	%ymm9, %ymm11, %ymm3	 # tmp466, tmp1027, tmp495
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vmovups	64(%rsp), %ymm9	 # %sfp, _40
	vmovdqu	%ymm2, 128(%rsp)	 # _216, %sfp
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avx2intrin.h:1065:   return (__m256) __builtin_ia32_permvarsf256 ((__v8sf)__X, (__v8si)__Y);
	vmovdqu	.LC5(%rip), %ymm2	 #, tmp1030
	vpermps	%ymm0, %ymm2, %ymm1	 # tmp460, tmp1030, tmp489
	vpermps	%ymm14, %ymm2, %ymm0	 # tmp462, tmp1029, tmp491
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vmovups	32(%rsp), %ymm14	 # %sfp, _38
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avx2intrin.h:1065:   return (__m256) __builtin_ia32_permvarsf256 ((__v8sf)__X, (__v8si)__Y);
	vpermps	%ymm10, %ymm2, %ymm2	 # tmp464, tmp1028, tmp493
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vsubps	%ymm1, %ymm14, %ymm15	 # tmp489, _38, _309
	vsubps	%ymm0, %ymm9, %ymm14	 # tmp491, _40, _310
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:320:   return (__m256) ((__v8sf)__A * (__v8sf)__B);
	vmulps	%ymm15, %ymm15, %ymm10	 # _309, _309, tmp497
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:149:   return (__m256) ((__v8sf)__A + (__v8sf)__B);
	vfmadd231ps	%ymm14, %ymm14, %ymm10	 # _310, _310, _313
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:406:   return (__m256) __builtin_ia32_cmpps256 ((__v8sf)__X, (__v8sf)__Y,
	vcmpps	$1, %ymm12, %ymm10, %ymm11	 #, _23, _313, tmp501
	vcmpps	$1, 96(%rsp), %ymm10, %ymm9	 #, %sfp, _313, tmp498
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vsubps	%ymm10, %ymm12, %ymm10	 # _313, _23, _318
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:320:   return (__m256) ((__v8sf)__A * (__v8sf)__B);
	vmulps	%ymm10, %ymm10, %ymm10	 # _318, _318, _319
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:186:   return (__m256) __builtin_ia32_andnps256 ((__v8sf)__A, (__v8sf)__B);
	vandnps	%ymm9, %ymm11, %ymm9	 # tmp498, tmp501, tmp504
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:174:   return (__m256) __builtin_ia32_andps256 ((__v8sf)__A, (__v8sf)__B);
	vandps	.LC3(%rip), %ymm9, %ymm9	 #, tmp504, tmp505
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/fmaintrin.h:65:   return (__m256)__builtin_ia32_vfmaddps256 ((__v8sf)__A, (__v8sf)__B,
	vfmadd231ps	%ymm1, %ymm9, %ymm13	 # tmp489, tmp505, tmp514
	vfmadd231ps	%ymm2, %ymm9, %ymm6	 # tmp493, tmp505, tmp512
	vfmadd231ps	%ymm3, %ymm9, %ymm8	 # tmp495, tmp505, tmp513
	vfmadd231ps	%ymm0, %ymm9, %ymm4	 # tmp491, tmp505, tmp515
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:320:   return (__m256) ((__v8sf)__A * (__v8sf)__B);
	vmulps	%ymm10, %ymm14, %ymm14	 # _319, _310, tmp510
	vmulps	%ymm10, %ymm15, %ymm15	 # _319, _309, tmp508
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:475:   return (__m256i)__builtin_ia32_cvtps2dq256 ((__v8sf) __A);
	vcvtps2dq	%ymm9, %ymm10	 # tmp505, tmp516
	vmovdqu	%ymm10, 160(%rsp)	 # tmp516, %sfp
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:174:   return (__m256) __builtin_ia32_andps256 ((__v8sf)__A, (__v8sf)__B);
	vandps	%ymm15, %ymm11, %ymm15	 # tmp508, tmp501, tmp509
	vandps	%ymm14, %ymm11, %ymm11	 # tmp510, tmp501, tmp511
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:149:   return (__m256) ((__v8sf)__A + (__v8sf)__B);
	vaddps	%ymm11, %ymm5, %ymm5	 # tmp511, _282, _325
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avx2intrin.h:1065:   return (__m256) __builtin_ia32_permvarsf256 ((__v8sf)__X, (__v8si)__Y);
	vmovdqu	.LC5(%rip), %ymm11	 #, tmp1025
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:149:   return (__m256) ((__v8sf)__A + (__v8sf)__B);
	vaddps	%ymm15, %ymm7, %ymm7	 # tmp509, _279, _322
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vmovups	32(%rsp), %ymm14	 # %sfp, _38
	vmovups	64(%rsp), %ymm9	 # %sfp, _40
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avx2intrin.h:1065:   return (__m256) __builtin_ia32_permvarsf256 ((__v8sf)__X, (__v8si)__Y);
	vpermps	%ymm1, %ymm11, %ymm1	 # tmp489, tmp1025, tmp518
	vpermps	%ymm0, %ymm11, %ymm0	 # tmp491, tmp1024, tmp520
	vpermps	%ymm2, %ymm11, %ymm2	 # tmp493, tmp1023, tmp522
	vpermps	%ymm3, %ymm11, %ymm3	 # tmp495, tmp1022, tmp524
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vsubps	%ymm1, %ymm14, %ymm11	 # tmp518, _38, _352
	vsubps	%ymm0, %ymm9, %ymm15	 # tmp520, _40, _353
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:320:   return (__m256) ((__v8sf)__A * (__v8sf)__B);
	vmulps	%ymm11, %ymm11, %ymm10	 # _352, _352, tmp526
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:149:   return (__m256) ((__v8sf)__A + (__v8sf)__B);
	vfmadd231ps	%ymm15, %ymm15, %ymm10	 # _353, _353, _356
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:406:   return (__m256) __builtin_ia32_cmpps256 ((__v8sf)__X, (__v8sf)__Y,
	vcmpps	$1, %ymm12, %ymm10, %ymm14	 #, _23, _356, tmp530
	vcmpps	$1, 96(%rsp), %ymm10, %ymm9	 #, %sfp, _356, tmp527
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vsubps	%ymm10, %ymm12, %ymm10	 # _356, _23, _361
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:320:   return (__m256) ((__v8sf)__A * (__v8sf)__B);
	vmulps	%ymm10, %ymm10, %ymm10	 # _361, _361, _362
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:186:   return (__m256) __builtin_ia32_andnps256 ((__v8sf)__A, (__v8sf)__B);
	vandnps	%ymm9, %ymm14, %ymm9	 # tmp527, tmp530, tmp533
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:174:   return (__m256) __builtin_ia32_andps256 ((__v8sf)__A, (__v8sf)__B);
	vandps	.LC3(%rip), %ymm9, %ymm9	 #, tmp533, tmp534
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/fmaintrin.h:65:   return (__m256)__builtin_ia32_vfmaddps256 ((__v8sf)__A, (__v8sf)__B,
	vfmadd231ps	%ymm2, %ymm9, %ymm6	 # tmp522, tmp534, tmp541
	vfmadd231ps	%ymm3, %ymm9, %ymm8	 # tmp524, tmp534, tmp542
	vfmadd231ps	%ymm1, %ymm9, %ymm13	 # tmp518, tmp534, tmp543
	vfmadd231ps	%ymm0, %ymm9, %ymm4	 # tmp520, tmp534, tmp544
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:475:   return (__m256i)__builtin_ia32_cvtps2dq256 ((__v8sf) __A);
	vcvtps2dq	%ymm9, %ymm9	 # tmp534, tmp545
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:320:   return (__m256) ((__v8sf)__A * (__v8sf)__B);
	vmulps	%ymm10, %ymm15, %ymm15	 # _362, _353, tmp539
	vmulps	%ymm10, %ymm11, %ymm11	 # _362, _352, tmp537
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:174:   return (__m256) __builtin_ia32_andps256 ((__v8sf)__A, (__v8sf)__B);
	vandps	%ymm11, %ymm14, %ymm11	 # tmp537, tmp530, tmp538
	vandps	%ymm15, %ymm14, %ymm14	 # tmp539, tmp530, tmp540
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:149:   return (__m256) ((__v8sf)__A + (__v8sf)__B);
	vaddps	%ymm14, %ymm5, %ymm5	 # tmp540, _325, _368
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avx2intrin.h:1065:   return (__m256) __builtin_ia32_permvarsf256 ((__v8sf)__X, (__v8si)__Y);
	vmovdqu	.LC5(%rip), %ymm14	 #, tmp1018
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:149:   return (__m256) ((__v8sf)__A + (__v8sf)__B);
	vaddps	%ymm11, %ymm7, %ymm11	 # tmp538, _322, _365
	vpaddd	160(%rsp), %ymm9, %ymm7	 # %sfp, tmp545, tmp547
	vpaddd	128(%rsp), %ymm7, %ymm15	 # %sfp, tmp547, _219
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avx2intrin.h:1065:   return (__m256) __builtin_ia32_permvarsf256 ((__v8sf)__X, (__v8si)__Y);
	vpermps	%ymm1, %ymm14, %ymm1	 # tmp518, tmp1018, tmp548
	vpermps	%ymm0, %ymm14, %ymm0	 # tmp520, tmp1017, tmp550
	vpermps	%ymm2, %ymm14, %ymm2	 # tmp522, tmp1016, tmp552
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vmovups	64(%rsp), %ymm7	 # %sfp, _40
	vmovdqu	%ymm15, 128(%rsp)	 # _219, %sfp
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avx2intrin.h:1065:   return (__m256) __builtin_ia32_permvarsf256 ((__v8sf)__X, (__v8si)__Y);
	vpermps	%ymm3, %ymm14, %ymm3	 # tmp524, tmp1015, tmp554
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vmovups	32(%rsp), %ymm14	 # %sfp, _38
	vsubps	%ymm0, %ymm7, %ymm15	 # tmp550, _40, _396
	vsubps	%ymm1, %ymm14, %ymm9	 # tmp548, _38, _395
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:320:   return (__m256) ((__v8sf)__A * (__v8sf)__B);
	vmulps	%ymm9, %ymm9, %ymm10	 # _395, _395, tmp556
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:149:   return (__m256) ((__v8sf)__A + (__v8sf)__B);
	vfmadd231ps	%ymm15, %ymm15, %ymm10	 # _396, _396, _399
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:406:   return (__m256) __builtin_ia32_cmpps256 ((__v8sf)__X, (__v8sf)__Y,
	vcmpps	$1, %ymm12, %ymm10, %ymm14	 #, _23, _399, tmp560
	vcmpps	$1, 96(%rsp), %ymm10, %ymm7	 #, %sfp, _399, tmp557
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vsubps	%ymm10, %ymm12, %ymm10	 # _399, _23, _404
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:320:   return (__m256) ((__v8sf)__A * (__v8sf)__B);
	vmulps	%ymm10, %ymm10, %ymm10	 # _404, _404, _405
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:186:   return (__m256) __builtin_ia32_andnps256 ((__v8sf)__A, (__v8sf)__B);
	vandnps	%ymm7, %ymm14, %ymm7	 # tmp557, tmp560, tmp563
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:174:   return (__m256) __builtin_ia32_andps256 ((__v8sf)__A, (__v8sf)__B);
	vandps	.LC3(%rip), %ymm7, %ymm7	 #, tmp563, tmp564
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/fmaintrin.h:65:   return (__m256)__builtin_ia32_vfmaddps256 ((__v8sf)__A, (__v8sf)__B,
	vfmadd231ps	%ymm1, %ymm7, %ymm13	 # tmp548, tmp564, tmp573
	vfmadd231ps	%ymm2, %ymm7, %ymm6	 # tmp552, tmp564, tmp571
	vfmadd231ps	%ymm3, %ymm7, %ymm8	 # tmp554, tmp564, tmp572
	vfmadd231ps	%ymm0, %ymm7, %ymm4	 # tmp550, tmp564, tmp574
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:320:   return (__m256) ((__v8sf)__A * (__v8sf)__B);
	vmulps	%ymm10, %ymm9, %ymm9	 # _405, _395, tmp567
	vmulps	%ymm10, %ymm15, %ymm15	 # _405, _396, tmp569
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:174:   return (__m256) __builtin_ia32_andps256 ((__v8sf)__A, (__v8sf)__B);
	vandps	%ymm9, %ymm14, %ymm9	 # tmp567, tmp560, tmp568
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:149:   return (__m256) ((__v8sf)__A + (__v8sf)__B);
	vaddps	%ymm9, %ymm11, %ymm9	 # tmp568, _365, _408
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avx2intrin.h:1065:   return (__m256) __builtin_ia32_permvarsf256 ((__v8sf)__X, (__v8si)__Y);
	vmovdqu	.LC5(%rip), %ymm11	 #, tmp1013
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:174:   return (__m256) __builtin_ia32_andps256 ((__v8sf)__A, (__v8sf)__B);
	vandps	%ymm15, %ymm14, %ymm10	 # tmp569, tmp560, tmp570
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vmovups	32(%rsp), %ymm14	 # %sfp, _38
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:149:   return (__m256) ((__v8sf)__A + (__v8sf)__B);
	vaddps	%ymm10, %ymm5, %ymm10	 # tmp570, _368, _411
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:475:   return (__m256i)__builtin_ia32_cvtps2dq256 ((__v8sf) __A);
	vcvtps2dq	%ymm7, %ymm5	 # tmp564, tmp575
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vmovups	64(%rsp), %ymm7	 # %sfp, _40
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:475:   return (__m256i)__builtin_ia32_cvtps2dq256 ((__v8sf) __A);
	vmovdqu	%ymm5, 160(%rsp)	 # tmp575, %sfp
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avx2intrin.h:1065:   return (__m256) __builtin_ia32_permvarsf256 ((__v8sf)__X, (__v8si)__Y);
	vpermps	%ymm1, %ymm11, %ymm1	 # tmp548, tmp1013, tmp577
	vpermps	%ymm0, %ymm11, %ymm0	 # tmp550, tmp1012, tmp579
	vpermps	%ymm2, %ymm11, %ymm2	 # tmp552, tmp1011, tmp581
	vpermps	%ymm3, %ymm11, %ymm3	 # tmp554, tmp1010, tmp583
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vsubps	%ymm1, %ymm14, %ymm11	 # tmp577, _38, _438
	vsubps	%ymm0, %ymm7, %ymm15	 # tmp579, _40, _439
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:320:   return (__m256) ((__v8sf)__A * (__v8sf)__B);
	vmulps	%ymm11, %ymm11, %ymm7	 # _438, _438, tmp585
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:149:   return (__m256) ((__v8sf)__A + (__v8sf)__B);
	vfmadd231ps	%ymm15, %ymm15, %ymm7	 # _439, _439, _442
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:406:   return (__m256) __builtin_ia32_cmpps256 ((__v8sf)__X, (__v8sf)__Y,
	vcmpps	$1, %ymm12, %ymm7, %ymm14	 #, _23, _442, tmp589
	vcmpps	$1, 96(%rsp), %ymm7, %ymm5	 #, %sfp, _442, tmp586
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vsubps	%ymm7, %ymm12, %ymm7	 # _442, _23, _447
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:320:   return (__m256) ((__v8sf)__A * (__v8sf)__B);
	vmulps	%ymm7, %ymm7, %ymm7	 # _447, _447, _448
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:186:   return (__m256) __builtin_ia32_andnps256 ((__v8sf)__A, (__v8sf)__B);
	vandnps	%ymm5, %ymm14, %ymm5	 # tmp586, tmp589, tmp592
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:174:   return (__m256) __builtin_ia32_andps256 ((__v8sf)__A, (__v8sf)__B);
	vandps	.LC3(%rip), %ymm5, %ymm5	 #, tmp592, tmp593
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/fmaintrin.h:65:   return (__m256)__builtin_ia32_vfmaddps256 ((__v8sf)__A, (__v8sf)__B,
	vfmadd231ps	%ymm2, %ymm5, %ymm6	 # tmp581, tmp593, tmp600
	vfmadd231ps	%ymm3, %ymm5, %ymm8	 # tmp583, tmp593, tmp601
	vfmadd231ps	%ymm1, %ymm5, %ymm13	 # tmp577, tmp593, tmp602
	vfmadd231ps	%ymm0, %ymm5, %ymm4	 # tmp579, tmp593, tmp603
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:475:   return (__m256i)__builtin_ia32_cvtps2dq256 ((__v8sf) __A);
	vcvtps2dq	%ymm5, %ymm5	 # tmp593, tmp604
	vpaddd	160(%rsp), %ymm5, %ymm5	 # %sfp, tmp604, tmp606
	vpaddd	320(%rsp), %ymm5, %ymm5	 # %sfp, tmp606, tmp607
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:320:   return (__m256) ((__v8sf)__A * (__v8sf)__B);
	vmulps	%ymm7, %ymm11, %ymm11	 # _448, _438, tmp596
	vmulps	%ymm7, %ymm15, %ymm15	 # _448, _439, tmp598
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vmovups	64(%rsp), %ymm7	 # %sfp, _40
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:174:   return (__m256) __builtin_ia32_andps256 ((__v8sf)__A, (__v8sf)__B);
	vandps	%ymm11, %ymm14, %ymm11	 # tmp596, tmp589, tmp597
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:149:   return (__m256) ((__v8sf)__A + (__v8sf)__B);
	vaddps	%ymm11, %ymm9, %ymm11	 # tmp597, _408, _451
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:174:   return (__m256) __builtin_ia32_andps256 ((__v8sf)__A, (__v8sf)__B);
	vandps	%ymm15, %ymm14, %ymm9	 # tmp598, tmp589, tmp599
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avx2intrin.h:1065:   return (__m256) __builtin_ia32_permvarsf256 ((__v8sf)__X, (__v8si)__Y);
	vmovdqu	.LC5(%rip), %ymm14	 #, tmp1006
	vpaddd	128(%rsp), %ymm5, %ymm15	 # %sfp, tmp607, _228
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:149:   return (__m256) ((__v8sf)__A + (__v8sf)__B);
	vaddps	%ymm9, %ymm10, %ymm9	 # tmp599, _411, _454
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avx2intrin.h:1065:   return (__m256) __builtin_ia32_permvarsf256 ((__v8sf)__X, (__v8si)__Y);
	vpermps	%ymm1, %ymm14, %ymm1	 # tmp577, tmp1006, tmp608
	vpermps	%ymm0, %ymm14, %ymm0	 # tmp579, tmp1005, tmp610
	vpermps	%ymm2, %ymm14, %ymm2	 # tmp581, tmp1004, tmp612
	vmovdqu	%ymm15, 128(%rsp)	 # _228, %sfp
	vpermps	%ymm3, %ymm14, %ymm3	 # tmp583, tmp1003, tmp614
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vmovups	32(%rsp), %ymm14	 # %sfp, _38
	vsubps	%ymm0, %ymm7, %ymm15	 # tmp610, _40, _482
	vsubps	%ymm1, %ymm14, %ymm5	 # tmp608, _38, _481
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:320:   return (__m256) ((__v8sf)__A * (__v8sf)__B);
	vmulps	%ymm5, %ymm5, %ymm10	 # _481, _481, tmp616
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:149:   return (__m256) ((__v8sf)__A + (__v8sf)__B);
	vfmadd231ps	%ymm15, %ymm15, %ymm10	 # _482, _482, _485
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:406:   return (__m256) __builtin_ia32_cmpps256 ((__v8sf)__X, (__v8sf)__Y,
	vcmpps	$1, %ymm12, %ymm10, %ymm14	 #, _23, _485, tmp620
	vcmpps	$1, 96(%rsp), %ymm10, %ymm7	 #, %sfp, _485, tmp617
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vsubps	%ymm10, %ymm12, %ymm10	 # _485, _23, _490
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:320:   return (__m256) ((__v8sf)__A * (__v8sf)__B);
	vmulps	%ymm10, %ymm10, %ymm10	 # _490, _490, _491
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:186:   return (__m256) __builtin_ia32_andnps256 ((__v8sf)__A, (__v8sf)__B);
	vandnps	%ymm7, %ymm14, %ymm7	 # tmp617, tmp620, tmp623
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:174:   return (__m256) __builtin_ia32_andps256 ((__v8sf)__A, (__v8sf)__B);
	vandps	.LC3(%rip), %ymm7, %ymm7	 #, tmp623, tmp624
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/fmaintrin.h:65:   return (__m256)__builtin_ia32_vfmaddps256 ((__v8sf)__A, (__v8sf)__B,
	vfmadd231ps	%ymm1, %ymm7, %ymm13	 # tmp608, tmp624, tmp633
	vfmadd231ps	%ymm0, %ymm7, %ymm4	 # tmp610, tmp624, tmp634
	vfmadd231ps	%ymm3, %ymm7, %ymm8	 # tmp614, tmp624, tmp632
	vfmadd231ps	%ymm2, %ymm7, %ymm6	 # tmp612, tmp624, tmp631
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:320:   return (__m256) ((__v8sf)__A * (__v8sf)__B);
	vmulps	%ymm10, %ymm5, %ymm5	 # _491, _481, tmp627
	vmulps	%ymm10, %ymm15, %ymm15	 # _491, _482, tmp629
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:174:   return (__m256) __builtin_ia32_andps256 ((__v8sf)__A, (__v8sf)__B);
	vandps	%ymm5, %ymm14, %ymm5	 # tmp627, tmp620, tmp628
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:149:   return (__m256) ((__v8sf)__A + (__v8sf)__B);
	vaddps	%ymm5, %ymm11, %ymm5	 # tmp628, _451, _494
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:475:   return (__m256i)__builtin_ia32_cvtps2dq256 ((__v8sf) __A);
	vcvtps2dq	%ymm7, %ymm11	 # tmp624, tmp635
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:174:   return (__m256) __builtin_ia32_andps256 ((__v8sf)__A, (__v8sf)__B);
	vandps	%ymm15, %ymm14, %ymm14	 # tmp629, tmp620, tmp630
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:475:   return (__m256i)__builtin_ia32_cvtps2dq256 ((__v8sf) __A);
	vmovdqu	%ymm11, 160(%rsp)	 # tmp635, %sfp
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avx2intrin.h:1065:   return (__m256) __builtin_ia32_permvarsf256 ((__v8sf)__X, (__v8si)__Y);
	vmovdqu	.LC5(%rip), %ymm11	 #, tmp1001
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:149:   return (__m256) ((__v8sf)__A + (__v8sf)__B);
	vaddps	%ymm14, %ymm9, %ymm9	 # tmp630, _454, _497
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vmovups	32(%rsp), %ymm14	 # %sfp, _38
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avx2intrin.h:1065:   return (__m256) __builtin_ia32_permvarsf256 ((__v8sf)__X, (__v8si)__Y);
	vpermps	%ymm1, %ymm11, %ymm11	 # tmp608, tmp1001, tmp637
	vmovdqu	.LC5(%rip), %ymm1	 #, tmp1000
	vpermps	%ymm0, %ymm1, %ymm10	 # tmp610, tmp1000, tmp639
	vmovdqu	.LC5(%rip), %ymm0	 #, tmp998
	vpermps	%ymm2, %ymm1, %ymm1	 # tmp612, tmp999, tmp641
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vmovups	64(%rsp), %ymm7	 # %sfp, _40
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avx2intrin.h:1065:   return (__m256) __builtin_ia32_permvarsf256 ((__v8sf)__X, (__v8si)__Y);
	vpermps	%ymm3, %ymm0, %ymm15	 # tmp614, tmp998, tmp643
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vsubps	%ymm11, %ymm14, %ymm3	 # tmp637, _38, _524
	vsubps	%ymm10, %ymm7, %ymm14	 # tmp639, _40, _525
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:320:   return (__m256) ((__v8sf)__A * (__v8sf)__B);
	vmulps	%ymm3, %ymm3, %ymm2	 # _524, _524, tmp645
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:149:   return (__m256) ((__v8sf)__A + (__v8sf)__B);
	vfmadd231ps	%ymm14, %ymm14, %ymm2	 # _525, _525, _528
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:406:   return (__m256) __builtin_ia32_cmpps256 ((__v8sf)__X, (__v8sf)__Y,
	vcmpps	$1, %ymm12, %ymm2, %ymm7	 #, _23, _528, tmp649
	vcmpps	$1, 96(%rsp), %ymm2, %ymm0	 #, %sfp, _528, tmp646
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vsubps	%ymm2, %ymm12, %ymm2	 # _528, _23, _533
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:320:   return (__m256) ((__v8sf)__A * (__v8sf)__B);
	vmulps	%ymm2, %ymm2, %ymm2	 # _533, _533, _534
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:186:   return (__m256) __builtin_ia32_andnps256 ((__v8sf)__A, (__v8sf)__B);
	vandnps	%ymm0, %ymm7, %ymm0	 # tmp646, tmp649, tmp652
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:174:   return (__m256) __builtin_ia32_andps256 ((__v8sf)__A, (__v8sf)__B);
	vandps	.LC3(%rip), %ymm0, %ymm0	 #, tmp652, tmp653
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/fmaintrin.h:65:   return (__m256)__builtin_ia32_vfmaddps256 ((__v8sf)__A, (__v8sf)__B,
	vfmadd132ps	%ymm0, %ymm6, %ymm1	 # tmp653, tmp631, avg_vx_vec
	vfmadd132ps	%ymm0, %ymm8, %ymm15	 # tmp653, tmp632, avg_vy_vec
	vfmadd231ps	%ymm11, %ymm0, %ymm13	 # tmp637, tmp653, avg_x_vec
	vfmadd231ps	%ymm10, %ymm0, %ymm4	 # tmp639, tmp653, avg_y_vec
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:475:   return (__m256i)__builtin_ia32_cvtps2dq256 ((__v8sf) __A);
	vcvtps2dq	%ymm0, %ymm0	 # tmp653, tmp664
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avx2intrin.h:121:   return (__m256i) ((__v8su)__A + (__v8su)__B);
	vpaddd	160(%rsp), %ymm0, %ymm0	 # %sfp, tmp664, tmp666
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avx2intrin.h:121:   return (__m256i) ((__v8su)__A + (__v8su)__B);
	vpaddd	128(%rsp), %ymm0, %ymm6	 # %sfp, tmp666, tmp916
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:320:   return (__m256) ((__v8sf)__A * (__v8sf)__B);
	vmulps	%ymm2, %ymm3, %ymm3	 # _534, _524, tmp656
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avx2intrin.h:121:   return (__m256i) ((__v8su)__A + (__v8su)__B);
	vmovdqu	%ymm6, 320(%rsp)	 # tmp916, %sfp
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:320:   return (__m256) ((__v8sf)__A * (__v8sf)__B);
	vmulps	%ymm2, %ymm14, %ymm14	 # _534, _525, tmp658
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:174:   return (__m256) __builtin_ia32_andps256 ((__v8sf)__A, (__v8sf)__B);
	vandps	%ymm3, %ymm7, %ymm3	 # tmp656, tmp649, tmp657
	vandps	%ymm14, %ymm7, %ymm7	 # tmp658, tmp649, tmp659
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:149:   return (__m256) ((__v8sf)__A + (__v8sf)__B);
	vaddps	%ymm3, %ymm5, %ymm3	 # tmp657, _494, sep_x_vec
	vaddps	%ymm7, %ymm9, %ymm2	 # tmp659, _497, sep_y_vec
	vmovups	%ymm3, 352(%rsp)	 # sep_x_vec, %sfp
	vmovups	%ymm2, 384(%rsp)	 # sep_y_vec, %sfp
 # .\src\main.cpp:689:             for (Boid nearby_boid = row_begin; nearby_boid < row_end; nearby_boid += 8) {
	cmpl	%r14d, %esi	 # ivtmp.2180, row_end
	jg	.L836	 #,
.L835:
 # .\src\main.cpp:674:         for (int cy = -1; cy <= 1; cy++) {
	addl	$1, %ebx	 #, ivtmp.2205
	cmpl	%ebx, 416(%rsp)	 # ivtmp.2205, %sfp
	jne	.L831	 #,
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avx2intrin.h:275:   return (__m256i) ((__v8si)__A > (__v8si)__B);
	vmovaps	%ymm13, %ymm0	 # avg_x_vec, avg_x_vec
	movq	%rdx, %rcx	 # vxs, vxs
	vpxor	%xmm2, %xmm2, %xmm2	 # tmp669
	movq	%r15, %r14	 # vys, vys
	vmovdqu	320(%rsp), %ymm6	 # %sfp, isc
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vmovups	64(%rsp), %ymm12	 # %sfp, _40
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avx2intrin.h:275:   return (__m256i) ((__v8si)__A > (__v8si)__B);
	movq	472(%rsp), %r13	 # %sfp, ivtmp.2209
	vmovups	432(%rsp), %ymm5	 # %sfp, _27
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:463:   return (__m256)__builtin_ia32_cvtdq2ps256 ((__v8si) __A);
	vcvtdq2ps	%ymm6, %ymm7	 # isc, tmp675
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:243:   return (__m256) ((__v8sf)__A / (__v8sf)__B);
	vdivps	%ymm7, %ymm1, %ymm1	 # tmp675, avg_vx_vec, tmp677
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avx2intrin.h:275:   return (__m256i) ((__v8si)__A > (__v8si)__B);
	vpcmpgtd	%ymm2, %ymm6, %ymm2	 # tmp669, tmp919, tmp670
	vmovups	384(%rsp), %ymm14	 # %sfp, sep_y_vec
	movq	752(%rsp), %rdx	 # rules, rules
 # .\src\main.cpp:789:         auto cmpx_2 = _mm256_cmp_ps(current_xs_vec, _mm256_set1_ps(world_width - rules->edge_width), _CMP_GT_OS);
	movl	488(%rsp), %r9d	 # %sfp, tmp700
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avx2intrin.h:275:   return (__m256i) ((__v8si)__A > (__v8si)__B);
	vmovups	352(%rsp), %ymm13	 # %sfp, sep_x_vec
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/fmaintrin.h:65:   return (__m256)__builtin_ia32_vfmaddps256 ((__v8sf)__A, (__v8sf)__B,
	vfmadd213ps	(%rcx,%r13,4), %ymm5, %ymm13	 # MEM[(__m256_u * {ref-all})vxs_20 + ivtmp.2209_90 * 4], _27, sep_x_vec
	vmovaps	%ymm14, %ymm8	 # sep_y_vec, sep_y_vec
	vfmadd213ps	(%r15,%r13,4), %ymm5, %ymm8	 # MEM[(__m256_u * {ref-all})vys_21 + ivtmp.2209_90 * 4], _27, sep_y_vec
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:1330: 				 __A, __A, __A, __A };
	vbroadcastss	16(%rdx), %ymm6	 # rules_7(D)->alignment_factor, tmp680
 # .\src\main.cpp:784:         const auto ew = _mm256_set1_ps(rules->edge_width);
	movl	24(%rdx), %eax	 # rules_7(D)->edge_width, _152
 # .\src\main.cpp:789:         auto cmpx_2 = _mm256_cmp_ps(current_xs_vec, _mm256_set1_ps(world_width - rules->edge_width), _CMP_GT_OS);
	subl	%eax, %r9d	 # _152, tmp700
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:243:   return (__m256) ((__v8sf)__A / (__v8sf)__B);
	vdivps	%ymm7, %ymm15, %ymm3	 # tmp675, avg_vy_vec, tmp682
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vsubps	%ymm13, %ymm1, %ymm1	 # tmp671, tmp677, tmp678
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:174:   return (__m256) __builtin_ia32_andps256 ((__v8sf)__A, (__v8sf)__B);
	vandps	%ymm2, %ymm1, %ymm1	 # tmp670, tmp678, tmp679
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/fmaintrin.h:65:   return (__m256)__builtin_ia32_vfmaddps256 ((__v8sf)__A, (__v8sf)__B,
	vfmadd132ps	%ymm6, %ymm13, %ymm1	 # tmp680, tmp671, tmp681
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vmovups	32(%rsp), %ymm13	 # %sfp, _38
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:243:   return (__m256) ((__v8sf)__A / (__v8sf)__B);
	vdivps	%ymm7, %ymm0, %ymm0	 # tmp675, avg_x_vec, tmp686
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vsubps	%ymm8, %ymm3, %ymm3	 # tmp673, tmp682, tmp683
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:174:   return (__m256) __builtin_ia32_andps256 ((__v8sf)__A, (__v8sf)__B);
	vandps	%ymm2, %ymm3, %ymm3	 # tmp670, tmp683, tmp684
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/fmaintrin.h:65:   return (__m256)__builtin_ia32_vfmaddps256 ((__v8sf)__A, (__v8sf)__B,
	vfmadd132ps	%ymm3, %ymm8, %ymm6	 # tmp684, tmp673, tmp685
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:1330: 				 __A, __A, __A, __A };
	vbroadcastss	20(%rdx), %ymm8	 # rules_7(D)->cohesion_factor, tmp689
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vsubps	%ymm13, %ymm0, %ymm3	 # _38, tmp686, tmp687
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:243:   return (__m256) ((__v8sf)__A / (__v8sf)__B);
	vdivps	%ymm7, %ymm4, %ymm0	 # tmp675, avg_y_vec, tmp691
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/fmaintrin.h:65:   return (__m256)__builtin_ia32_vfmaddps256 ((__v8sf)__A, (__v8sf)__B,
	vmovaps	%ymm8, %ymm4	 # tmp689, tmp689
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:174:   return (__m256) __builtin_ia32_andps256 ((__v8sf)__A, (__v8sf)__B);
	vandps	%ymm2, %ymm3, %ymm3	 # tmp670, tmp687, tmp688
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/fmaintrin.h:65:   return (__m256)__builtin_ia32_vfmaddps256 ((__v8sf)__A, (__v8sf)__B,
	vfmadd132ps	%ymm8, %ymm1, %ymm3	 # tmp689, tmp681, tmp690
 # .\src\main.cpp:784:         const auto ew = _mm256_set1_ps(rules->edge_width);
	vxorps	%xmm8, %xmm8, %xmm8	 # tmp925
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vsubps	%ymm12, %ymm0, %ymm0	 # _40, tmp691, tmp692
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:174:   return (__m256) __builtin_ia32_andps256 ((__v8sf)__A, (__v8sf)__B);
	vandps	%ymm2, %ymm0, %ymm0	 # tmp670, tmp692, tmp693
 # .\src\main.cpp:784:         const auto ew = _mm256_set1_ps(rules->edge_width);
	vcvtsi2ssl	%eax, %xmm8, %xmm2	 # _152, tmp925, tmp778
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/fmaintrin.h:65:   return (__m256)__builtin_ia32_vfmaddps256 ((__v8sf)__A, (__v8sf)__B,
	vfmadd132ps	%ymm0, %ymm6, %ymm4	 # tmp693, tmp685, tmp689
 # .\src\main.cpp:789:         auto cmpx_2 = _mm256_cmp_ps(current_xs_vec, _mm256_set1_ps(world_width - rules->edge_width), _CMP_GT_OS);
	vcvtsi2ssl	%r9d, %xmm8, %xmm0	 # tmp700, tmp928, tmp779
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:1330: 				 __A, __A, __A, __A };
	vbroadcastss	28(%rdx), %ymm6	 # rules_7(D)->edge_factor, tmp695
 # .\src\main.cpp:791:         auto cmpy_2 = _mm256_cmp_ps(current_ys_vec, _mm256_set1_ps(world_height - rules->edge_width), _CMP_GT_OS);
	movl	480(%rsp), %r9d	 # %sfp, tmp708
	subl	%eax, %r9d	 # _152, tmp708
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:1330: 				 __A, __A, __A, __A };
	vbroadcastss	%xmm2, %ymm2	 # _153, tmp696
	vbroadcastss	%xmm0, %ymm0	 # _157, tmp703
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:406:   return (__m256) __builtin_ia32_cmpps256 ((__v8sf)__X, (__v8sf)__Y,
	vcmpps	$1, %ymm2, %ymm13, %ymm7	 #, tmp696, _38, tmp697
	vcmpps	$14, %ymm0, %ymm13, %ymm1	 #, tmp703, _38, tmp701
 # .\src\main.cpp:791:         auto cmpy_2 = _mm256_cmp_ps(current_ys_vec, _mm256_set1_ps(world_height - rules->edge_width), _CMP_GT_OS);
	vcvtsi2ssl	%r9d, %xmm8, %xmm0	 # tmp708, tmp932, tmp780
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:229:   return (__m256) __builtin_ia32_blendvps256 ((__v8sf)__X,
	vbroadcastss	.LC4(%rip), %ymm8	 #, tmp935
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:406:   return (__m256) __builtin_ia32_cmpps256 ((__v8sf)__X, (__v8sf)__Y,
	vcmpps	$1, %ymm2, %ymm12, %ymm2	 #, tmp696, _40, tmp705
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:174:   return (__m256) __builtin_ia32_andps256 ((__v8sf)__A, (__v8sf)__B);
	vandps	%ymm6, %ymm7, %ymm7	 # tmp695, tmp697, tmp714
	vandps	%ymm6, %ymm1, %ymm1	 # tmp695, tmp701, tmp713
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vsubps	%ymm1, %ymm7, %ymm1	 # tmp713, tmp714, tmp715
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:1330: 				 __A, __A, __A, __A };
	vbroadcastss	%xmm0, %ymm0	 # _162, tmp711
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:406:   return (__m256) __builtin_ia32_cmpps256 ((__v8sf)__X, (__v8sf)__Y,
	vcmpps	$14, %ymm0, %ymm12, %ymm0	 #, tmp711, _40, tmp709
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:149:   return (__m256) ((__v8sf)__A + (__v8sf)__B);
	vaddps	%ymm3, %ymm1, %ymm3	 # tmp690, tmp715, _168
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:174:   return (__m256) __builtin_ia32_andps256 ((__v8sf)__A, (__v8sf)__B);
	vandps	%ymm6, %ymm2, %ymm1	 # tmp695, tmp705, tmp717
	vandps	%ymm6, %ymm0, %ymm0	 # tmp695, tmp709, tmp716
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:368:   return (__m256) ((__v8sf)__A - (__v8sf)__B);
	vsubps	%ymm0, %ymm1, %ymm1	 # tmp716, tmp717, tmp718
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:320:   return (__m256) ((__v8sf)__A * (__v8sf)__B);
	vmulps	%ymm3, %ymm3, %ymm0	 # _168, _168, tmp719
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:149:   return (__m256) ((__v8sf)__A + (__v8sf)__B);
	vaddps	%ymm4, %ymm1, %ymm1	 # tmp694, tmp718, _172
	vfmadd231ps	%ymm1, %ymm1, %ymm0	 # _172, _172, _175
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:1041:   return (__m256) __builtin_ia32_rsqrtps256 ((__v8sf)__A);
	vrsqrtps	%ymm0, %ymm0	 # _175, tmp720
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:320:   return (__m256) ((__v8sf)__A * (__v8sf)__B);
	vmulps	.LC6(%rip), %ymm0, %ymm4	 #, tmp720, _177
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:406:   return (__m256) __builtin_ia32_cmpps256 ((__v8sf)__X, (__v8sf)__Y,
	vcmpps	$14, .LC8(%rip), %ymm0, %ymm7	 #,, tmp720, tmp724
	vcmpps	$1, .LC10(%rip), %ymm0, %ymm6	 #,, tmp720, tmp728
	vcmpps	$14, .LC12(%rip), %ymm0, %ymm2	 #,, tmp720, tmp732
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:320:   return (__m256) ((__v8sf)__A * (__v8sf)__B);
	vmulps	.LC14(%rip), %ymm0, %ymm0	 #, tmp720, tmp736
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:229:   return (__m256) __builtin_ia32_blendvps256 ((__v8sf)__X,
	vblendvps	%ymm7, %ymm0, %ymm8, %ymm0	 # tmp724, tmp736, tmp934, _184
	vblendvps	%ymm6, %ymm4, %ymm0, %ymm0	 # tmp728, _177, _184, _187
	vblendvps	%ymm2, .LC3(%rip), %ymm0, %ymm0	 # tmp732,, _187, _190
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:320:   return (__m256) ((__v8sf)__A * (__v8sf)__B);
	vmulps	%ymm0, %ymm3, %ymm3	 # _190, _168, tmp752
	vmulps	%ymm0, %ymm1, %ymm1	 # _190, _172, tmp753
 # C:/msys64/ucrt64/lib/gcc/x86_64-w64-mingw32/13.1.0/include/avxintrin.h:911:   *(__m256_u *)__P = __A;
	vmovups	%ymm3, (%rcx,%r13,4)	 # tmp752, MEM[(__m256_u * {ref-all})vxs_20 + ivtmp.2209_90 * 4]
	vmovups	%ymm1, (%r15,%r13,4)	 # tmp753, MEM[(__m256_u * {ref-all})vys_21 + ivtmp.2209_90 * 4]
 # .\src\main.cpp:657:     for (Boid current_boid = cell_begin; current_boid < cell_end; current_boid += 8) {
	addq	$8, %r13	 #, ivtmp.2209
	cmpl	%r13d, 492(%rsp)	 # ivtmp.2209, %sfp
	jg	.L838	 #,
	movl	736(%rsp), %r11d	 # y, y
	movq	%rdx, %r15	 # rules, rules
	vzeroupper
.L830:
 # .\src\main.cpp:1039:     for (int x = 0; x < boid_map->m_xsize; x++) {
	movl	4(%rdi), %ebx	 # boid_map_5(D)->m_xsize, _1
 # .\src\main.cpp:1039:     for (int x = 0; x < boid_map->m_xsize; x++) {
	leal	1(%rbp), %eax	 #, ivtmp.2223
	subl	$1, %ebp	 #, x
	cmpl	%ebp, %ebx	 # x, _1
	jle	.L850	 #,
.L840:
	movl	%eax, %ebp	 # ivtmp.2223, ivtmp.2223
	jmp	.L827	 #
.L849:
	vzeroupper
 # .\src\main.cpp:1039:     for (int x = 0; x < boid_map->m_xsize; x++) {
	movl	4(%rdi), %ebx	 # boid_map_5(D)->m_xsize, _1
 # .\src\main.cpp:1039:     for (int x = 0; x < boid_map->m_xsize; x++) {
	leal	1(%rbp), %eax	 #, ivtmp.2223
	subl	$1, %ebp	 #, x
	cmpl	%ebp, %ebx	 # x, _1
	jg	.L840	 #,
.L850:
 # .\src\main.cpp:1042: }
	vmovups	496(%rsp), %xmm6	 #,
	vmovups	512(%rsp), %xmm7	 #,
	vmovups	528(%rsp), %xmm8	 #,
	vmovups	544(%rsp), %xmm9	 #,
	vmovups	560(%rsp), %xmm10	 #,
	vmovups	576(%rsp), %xmm11	 #,
	vmovups	592(%rsp), %xmm12	 #,
	vmovups	608(%rsp), %xmm13	 #,
	vmovups	624(%rsp), %xmm14	 #,
	vmovups	640(%rsp), %xmm15	 #,
	addq	$664, %rsp	 #,
	popq	%rbx	 #
	popq	%rsi	 #
	popq	%rdi	 #
	popq	%rbp	 #
	popq	%r12	 #
	popq	%r13	 #
	popq	%r14	 #
	popq	%r15	 #
	ret	
	.seh_endproc
	.p2align 4
	.globl	_Z13update_boids2RK7BoidMapP15row_runner_argsP10TaskMasterP8TaskSync
	.def	_Z13update_boids2RK7BoidMapP15row_runner_argsP10TaskMasterP8TaskSync;	.scl	2;	.type	32;	.endef
	.seh_proc	_Z13update_boids2RK7BoidMapP15row_runner_argsP10TaskMasterP8TaskSync
_Z13update_boids2RK7BoidMapP15row_runner_argsP10TaskMasterP8TaskSync:
.LFB12621:
	pushq	%rsi	 #
	.seh_pushreg	%rsi
	pushq	%rbx	 #
	.seh_pushreg	%rbx
	.seh_endprologue
	leaq	66144(%r8), %rax	 #, _27
	.p2align 4,,10
	.p2align 3
.L852:
 # C:/msys64/ucrt64/include/psdk_inc/intrin-impl.h:1800: __buildbittesti(_interlockedbittestandset, __LONG32, "lock bts{l %[Offset],%[Base] | %[Base],%[Offset]}" __FLAGSET, "I")
/APP
 # 1800 "C:/msys64/ucrt64/include/psdk_inc/intrin-impl.h" 1
	lock btsl $0,(%rax) 	 #, MEM[(volatile long int *)_27]
 # 0 "" 2
 # .\src\.\task_master\lock.h:40:         while (_interlockedbittestandset(&lock_internal, 0)) {}
/NO_APP
	jc	.L852	 #,
 # .\src\main.cpp:1209:     for (int y = 0; y < boid_map.m_ysize; y += 2) {
	movl	(%rcx), %ecx	 # boid_map_18(D)->m_ysize, _46
 # .\src\main.cpp:1209:     for (int y = 0; y < boid_map.m_ysize; y += 2) {
	testl	%ecx, %ecx	 # _46
	jle	.L858	 #,
	leal	-1(%rcx), %r11d	 #, tmp115
 # .\src\.\task_master\ringbuffer.h:18:         size_t next = (head + 1) % capacity;
	movq	65552(%r8), %rax	 # MEM[(struct RingBuffer *)task_master_15(D) + 16B].head, pretmp_58
 # .\src\.\task_master\ringbuffer.h:19:         if (next != tail)
	movq	65560(%r8), %rbx	 # MEM[(struct RingBuffer *)task_master_15(D) + 16B].tail, _32
 # .\src\.\task_master\ringbuffer.h:21:             data[head] = item;
	leaq	_ZZ13update_boids2RK7BoidMapP15row_runner_argsP10TaskMasterP8TaskSyncENUlS5_P4TaskE_4_FUNES5_S9_(%rip), %rsi	 #, tmp127
	shrl	%r11d	 # _79
	movl	%r11d, %ecx	 # _79, _79
	leaq	(%rcx,%rcx,4), %r10	 #, tmp119
 # .\src\.\task_master\ringbuffer.h:18:         size_t next = (head + 1) % capacity;
	leaq	1(%rax), %rcx	 #, tmp121
	salq	$4, %r10	 #, tmp120
 # .\src\.\task_master\ringbuffer.h:18:         size_t next = (head + 1) % capacity;
	andl	$2047, %ecx	 #, next
	addq	%rdx, %r10	 # ivtmp.2233, _62
 # .\src\.\task_master\ringbuffer.h:19:         if (next != tail)
	cmpq	%rbx, %rcx	 # _32, next
	je	.L854	 #,
.L863:
	salq	$5, %rax	 #, _5
 # .\src\.\task_master\ringbuffer.h:21:             data[head] = item;
	movl	$2, 16(%r8,%rax)	 #, MEM <unsigned int> [(struct Task *)_11]
	addq	%r8, %rax	 # task_master, _54
	movq	%rdx, 24(%rax)	 # ivtmp.2233, MEM <void *> [(struct RingBuffer *)_54 + 24B]
	movq	%r9, 32(%rax)	 # task_monitor, MEM <struct TaskSync *> [(struct RingBuffer *)_54 + 32B]
	movq	%rsi, 40(%rax)	 # tmp127, MEM <void *> [(struct RingBuffer *)_54 + 40B]
 # .\src\.\task_master\ringbuffer.h:22:             head = next;
	movq	%rcx, 65552(%r8)	 # next, MEM[(struct RingBuffer *)task_master_15(D) + 16B].head
 # .\src\main.cpp:1209:     for (int y = 0; y < boid_map.m_ysize; y += 2) {
	cmpq	%rdx, %r10	 # ivtmp.2233, _62
	je	.L854	 #,
	movq	%rcx, %rax	 # next, pretmp_58
	addq	$80, %rdx	 #, ivtmp.2233
 # .\src\.\task_master\ringbuffer.h:18:         size_t next = (head + 1) % capacity;
	leaq	1(%rax), %rcx	 #, tmp121
 # .\src\.\task_master\ringbuffer.h:18:         size_t next = (head + 1) % capacity;
	andl	$2047, %ecx	 #, next
 # .\src\.\task_master\ringbuffer.h:19:         if (next != tail)
	cmpq	%rbx, %rcx	 # _32, next
	jne	.L863	 #,
.L854:
	addl	$1, %r11d	 #, tasks_added
	.p2align 4,,10
	.p2align 3
.L856:
 # C:/msys64/ucrt64/include/psdk_inc/intrin-impl.h:1800: __buildbittesti(_interlockedbittestandset, __LONG32, "lock bts{l %[Offset],%[Base] | %[Base],%[Offset]}" __FLAGSET, "I")
/APP
 # 1800 "C:/msys64/ucrt64/include/psdk_inc/intrin-impl.h" 1
	lock btsl $0,(%r9) 	 #, MEM[(volatile long int *)_36]
 # 0 "" 2
 # .\src\.\task_master\lock.h:40:         while (_interlockedbittestandset(&lock_internal, 0)) {}
/NO_APP
	jc	.L856	 #,
 # .\src\main.cpp:1259:     task_monitor->task_counter += tasks_added;
	movl	4(%r9), %eax	 # task_monitor_19(D)->task_counter, _6
 # .\src\main.cpp:1259:     task_monitor->task_counter += tasks_added;
	addl	%r11d, %eax	 # tasks_added, _9
	movl	%eax, 4(%r9)	 # _9, task_monitor_19(D)->task_counter
 # C:/msys64/ucrt64/include/psdk_inc/intrin-impl.h:1809: __buildbittesti(_interlockedbittestandreset, __LONG32, "lock btr{l %[Offset],%[Base] | %[Base],%[Offset]}" __FLAGSET, "I")
/APP
 # 1809 "C:/msys64/ucrt64/include/psdk_inc/intrin-impl.h" 1
	lock btrl $0,(%r9) 	 #, MEM[(volatile long int *)_36]
 # 0 "" 2
 # 1809 "C:/msys64/ucrt64/include/psdk_inc/intrin-impl.h" 1
	lock btrl $0,66144(%r8) 	 #, MEM[(volatile long int *)_27]
 # 0 "" 2
 # .\src\main.cpp:1265: }  
/NO_APP
	popq	%rbx	 #
	popq	%rsi	 #
	ret	
	.p2align 4,,10
	.p2align 3
.L858:
 # .\src\main.cpp:1207:     uint32_t tasks_added = 0;
	xorl	%r11d, %r11d	 # tasks_added
	jmp	.L856	 #
	.seh_endproc
	.p2align 4
	.globl	_Z13rebuild_list2RK7BoidMapRK8BoidListP12rebuild_argsP10TaskMasterP8TaskSync
	.def	_Z13rebuild_list2RK7BoidMapRK8BoidListP12rebuild_argsP10TaskMasterP8TaskSync;	.scl	2;	.type	32;	.endef
	.seh_proc	_Z13rebuild_list2RK7BoidMapRK8BoidListP12rebuild_argsP10TaskMasterP8TaskSync
_Z13rebuild_list2RK7BoidMapRK8BoidListP12rebuild_argsP10TaskMasterP8TaskSync:
.LFB12628:
	pushq	%r12	 #
	.seh_pushreg	%r12
	pushq	%rbp	 #
	.seh_pushreg	%rbp
	pushq	%rdi	 #
	.seh_pushreg	%rdi
	pushq	%rsi	 #
	.seh_pushreg	%rsi
	pushq	%rbx	 #
	.seh_pushreg	%rbx
	.seh_endprologue
 # .\src\main.cpp:1267: void rebuild_list2(const BoidMap& boid_map, const BoidList& boid_list, rebuild_args* arg_list, TaskMaster *task_master, TaskSync *task_monitor) {
	movq	%rcx, %r11	 # tmp148, boid_map
	movq	80(%rsp), %rcx	 # task_monitor, task_monitor
	leaq	66144(%r9), %rax	 #, _53
	.p2align 4,,10
	.p2align 3
.L865:
 # C:/msys64/ucrt64/include/psdk_inc/intrin-impl.h:1800: __buildbittesti(_interlockedbittestandset, __LONG32, "lock bts{l %[Offset],%[Base] | %[Base],%[Offset]}" __FLAGSET, "I")
/APP
 # 1800 "C:/msys64/ucrt64/include/psdk_inc/intrin-impl.h" 1
	lock btsl $0,(%rax) 	 #, MEM[(volatile long int *)_53]
 # 0 "" 2
 # .\src\.\task_master\lock.h:40:         while (_interlockedbittestandset(&lock_internal, 0)) {}
/NO_APP
	jc	.L865	 #,
 # .\src\main.cpp:1273:     for (int i = 0; i < boid_map.m_xsize * boid_map.m_ysize; i++) {
	movl	(%r11), %r10d	 # boid_map_40(D)->m_ysize, _17
 # .\src\main.cpp:1273:     for (int i = 0; i < boid_map.m_xsize * boid_map.m_ysize; i++) {
	movl	4(%r11), %eax	 # boid_map_40(D)->m_xsize, tmp132
	imull	%r10d, %eax	 # _17, tmp132
 # .\src\main.cpp:1273:     for (int i = 0; i < boid_map.m_xsize * boid_map.m_ysize; i++) {
	testl	%eax, %eax	 # tmp132
	jle	.L866	 #,
 # .\src\main.cpp:1276:         counter += (current != -1) * boid_list.m_boid_store->depth[current];   
	movq	(%rdx), %rax	 # boid_list_50(D)->m_boid_store, boid_list_50(D)->m_boid_store
 # .\src\main.cpp:1274:         Boid current = boid_map.m_boid_map[i];
	movq	16(%r11), %r12	 # boid_map_40(D)->m_boid_map, _1
 # .\src\main.cpp:1272:     int counter = 0;
	xorl	%edx, %edx	 # counter
 # .\src\main.cpp:1276:         counter += (current != -1) * boid_list.m_boid_store->depth[current];   
	xorl	%esi, %esi	 # tmp136
 # .\src\main.cpp:1275:         arg_list->index_buffer[i] = counter;
	movq	16(%r8), %rbp	 # arg_list_45(D)->index_buffer, _5
 # .\src\main.cpp:1276:         counter += (current != -1) * boid_list.m_boid_store->depth[current];   
	movq	48(%rax), %rdi	 # _9->depth, _10
	xorl	%eax, %eax	 # ivtmp.2244
	.p2align 4,,10
	.p2align 3
.L867:
 # .\src\main.cpp:1274:         Boid current = boid_map.m_boid_map[i];
	movslq	(%r12,%rax,4), %rbx	 # MEM[(Boid *)_1 + ivtmp.2244_108 * 4],
 # .\src\main.cpp:1276:         counter += (current != -1) * boid_list.m_boid_store->depth[current];   
	movl	%esi, %r10d	 # tmp136, tmp134
 # .\src\main.cpp:1275:         arg_list->index_buffer[i] = counter;
	movl	%edx, 0(%rbp,%rax,4)	 # counter, MEM[(Boid *)_5 + ivtmp.2244_108 * 4]
 # .\src\main.cpp:1276:         counter += (current != -1) * boid_list.m_boid_store->depth[current];   
	cmpl	$-1, %ebx	 #, current
	cmovne	(%rdi,%rbx,4), %r10d	 # *_13,, tmp134
 # .\src\main.cpp:1273:     for (int i = 0; i < boid_map.m_xsize * boid_map.m_ysize; i++) {
	movl	4(%r11), %ebx	 # boid_map_40(D)->m_xsize, tmp137
 # .\src\main.cpp:1273:     for (int i = 0; i < boid_map.m_xsize * boid_map.m_ysize; i++) {
	addq	$1, %rax	 #, ivtmp.2244
 # .\src\main.cpp:1276:         counter += (current != -1) * boid_list.m_boid_store->depth[current];   
	addl	%r10d, %edx	 # tmp134, counter
 # .\src\main.cpp:1273:     for (int i = 0; i < boid_map.m_xsize * boid_map.m_ysize; i++) {
	movl	(%r11), %r10d	 # boid_map_40(D)->m_ysize, _17
 # .\src\main.cpp:1273:     for (int i = 0; i < boid_map.m_xsize * boid_map.m_ysize; i++) {
	imull	%r10d, %ebx	 # _17, tmp137
 # .\src\main.cpp:1273:     for (int i = 0; i < boid_map.m_xsize * boid_map.m_ysize; i++) {
	cmpl	%eax, %ebx	 # ivtmp.2244, tmp137
	jg	.L867	 #,
.L866:
 # .\src\main.cpp:1280:     for (int y = 0; y < boid_map.m_ysize; y++) {
	testl	%r10d, %r10d	 # _17
	jle	.L873	 #,
 # .\src\.\task_master\ringbuffer.h:18:         size_t next = (head + 1) % capacity;
	movq	65552(%r9), %rax	 # MEM[(struct RingBuffer *)task_master_35(D) + 16B].head, pretmp_104
	leal	-1(%r10), %r11d	 #, tmp139
 # .\src\.\task_master\ringbuffer.h:19:         if (next != tail)
	movq	65560(%r9), %rbx	 # MEM[(struct RingBuffer *)task_master_35(D) + 16B].tail, _58
 # .\src\.\task_master\ringbuffer.h:21:             data[head] = item;
	leaq	_ZZ13rebuild_list2RK7BoidMapRK8BoidListP12rebuild_argsP10TaskMasterP8TaskSyncENUlS8_P4TaskE_4_FUNES8_SC_(%rip), %rsi	 #, tmp147
	salq	$5, %r11	 #, tmp140
 # .\src\.\task_master\ringbuffer.h:18:         size_t next = (head + 1) % capacity;
	leaq	1(%rax), %rdx	 #, tmp141
	addq	%r8, %r11	 # ivtmp.2242, _91
 # .\src\.\task_master\ringbuffer.h:18:         size_t next = (head + 1) % capacity;
	andl	$2047, %edx	 #, next
 # .\src\.\task_master\ringbuffer.h:19:         if (next != tail)
	cmpq	%rbx, %rdx	 # _58, next
	je	.L871	 #,
.L879:
	salq	$5, %rax	 #, _22
 # .\src\.\task_master\ringbuffer.h:21:             data[head] = item;
	movl	$1, 16(%r9,%rax)	 #, MEM <unsigned int> [(struct Task *)_28]
	addq	%r9, %rax	 # task_master, _98
	movq	%r8, 24(%rax)	 # ivtmp.2242, MEM <void *> [(struct RingBuffer *)_98 + 24B]
	movq	%rcx, 32(%rax)	 # task_monitor, MEM <struct TaskSync *> [(struct RingBuffer *)_98 + 32B]
	movq	%rsi, 40(%rax)	 # tmp147, MEM <void *> [(struct RingBuffer *)_98 + 40B]
 # .\src\.\task_master\ringbuffer.h:22:             head = next;
	movq	%rdx, 65552(%r9)	 # next, MEM[(struct RingBuffer *)task_master_35(D) + 16B].head
 # .\src\main.cpp:1280:     for (int y = 0; y < boid_map.m_ysize; y++) {
	cmpq	%r11, %r8	 # _91, ivtmp.2242
	je	.L871	 #,
	movq	%rdx, %rax	 # next, pretmp_104
	addq	$32, %r8	 #, ivtmp.2242
 # .\src\.\task_master\ringbuffer.h:18:         size_t next = (head + 1) % capacity;
	leaq	1(%rax), %rdx	 #, tmp141
 # .\src\.\task_master\ringbuffer.h:18:         size_t next = (head + 1) % capacity;
	andl	$2047, %edx	 #, next
 # .\src\.\task_master\ringbuffer.h:19:         if (next != tail)
	cmpq	%rbx, %rdx	 # _58, next
	jne	.L879	 #,
	.p2align 4,,10
	.p2align 3
.L871:
 # C:/msys64/ucrt64/include/psdk_inc/intrin-impl.h:1800: __buildbittesti(_interlockedbittestandset, __LONG32, "lock bts{l %[Offset],%[Base] | %[Base],%[Offset]}" __FLAGSET, "I")
/APP
 # 1800 "C:/msys64/ucrt64/include/psdk_inc/intrin-impl.h" 1
	lock btsl $0,(%rcx) 	 #, MEM[(volatile long int *)_62]
 # 0 "" 2
 # .\src\.\task_master\lock.h:40:         while (_interlockedbittestandset(&lock_internal, 0)) {}
/NO_APP
	jc	.L871	 #,
 # .\src\main.cpp:1301:     task_monitor->task_counter += tasks_added;
	movl	4(%rcx), %eax	 # task_monitor_42(D)->task_counter, _24
 # .\src\main.cpp:1301:     task_monitor->task_counter += tasks_added;
	addl	%r10d, %eax	 # tasks_added, _27
	movl	%eax, 4(%rcx)	 # _27, task_monitor_42(D)->task_counter
 # C:/msys64/ucrt64/include/psdk_inc/intrin-impl.h:1809: __buildbittesti(_interlockedbittestandreset, __LONG32, "lock btr{l %[Offset],%[Base] | %[Base],%[Offset]}" __FLAGSET, "I")
/APP
 # 1809 "C:/msys64/ucrt64/include/psdk_inc/intrin-impl.h" 1
	lock btrl $0,(%rcx) 	 #, MEM[(volatile long int *)_62]
 # 0 "" 2
 # 1809 "C:/msys64/ucrt64/include/psdk_inc/intrin-impl.h" 1
	lock btrl $0,66144(%r9) 	 #, MEM[(volatile long int *)_53]
 # 0 "" 2
 # .\src\main.cpp:1306: }   
/NO_APP
	popq	%rbx	 #
	popq	%rsi	 #
	popq	%rdi	 #
	popq	%rbp	 #
	popq	%r12	 #
	ret	
	.p2align 4,,10
	.p2align 3
.L873:
 # .\src\main.cpp:1270:     uint32_t tasks_added = 0;
	xorl	%r10d, %r10d	 # tasks_added
	jmp	.L871	 #
	.seh_endproc
	.p2align 4
	.globl	_Z18DrawMeshInstanced24Mesh8MaterialiPfS1_S1_S1_
	.def	_Z18DrawMeshInstanced24Mesh8MaterialiPfS1_S1_S1_;	.scl	2;	.type	32;	.endef
	.seh_proc	_Z18DrawMeshInstanced24Mesh8MaterialiPfS1_S1_S1_
_Z18DrawMeshInstanced24Mesh8MaterialiPfS1_S1_S1_:
.LFB12649:
	pushq	%r15	 #
	.seh_pushreg	%r15
	pushq	%r14	 #
	.seh_pushreg	%r14
	pushq	%r13	 #
	.seh_pushreg	%r13
	pushq	%r12	 #
	.seh_pushreg	%r12
	pushq	%rbp	 #
	.seh_pushreg	%rbp
	pushq	%rdi	 #
	.seh_pushreg	%rdi
	pushq	%rsi	 #
	.seh_pushreg	%rsi
	pushq	%rbx	 #
	.seh_pushreg	%rbx
	subq	$584, %rsp	 #,
	.seh_stackalloc	584
	vmovups	%xmm6, 512(%rsp)	 #,
	.seh_savexmm	%xmm6, 512
	vmovups	%xmm7, 528(%rsp)	 #,
	.seh_savexmm	%xmm7, 528
	vmovups	%xmm8, 544(%rsp)	 #,
	.seh_savexmm	%xmm8, 544
	vmovups	%xmm9, 560(%rsp)	 #,
	.seh_savexmm	%xmm9, 560
	.seh_endprologue
 # .\src\main.cpp:1602: {
	movq	688(%rsp), %rax	 # boid_y, boid_y
	movq	8(%rdx), %rbx	 # material.shader.locs, material$shader$locs
	movl	96(%rcx), %r15d	 # mesh.vaoId, mesh$vaoId
	movq	16(%rdx), %rsi	 # material.maps, material$maps
	movq	696(%rsp), %r14	 # boid_vx, boid_vx
	movq	%rax, 64(%rsp)	 # boid_y, %sfp
	movq	%rcx, %rbp	 # tmp297, tmp203
 # .\src\main.cpp:1610:     rlEnableShader(material.shader.id);
	movl	(%rdx), %ecx	 # material.shader.id, material.shader.id
 # .\src\main.cpp:1602: {
	movl	%r8d, %edi	 # tmp299, instances
	movq	704(%rsp), %rax	 # boid_vy, boid_vy
	movq	%r9, %r13	 # tmp300, boid_x
	movq	%rax, 96(%rsp)	 # boid_vy, %sfp
 # .\src\main.cpp:1610:     rlEnableShader(material.shader.id);
	call	rlEnableShader	 #
 # .\src\main.cpp:1615:     if (material.shader.locs[SHADER_LOC_COLOR_DIFFUSE] != -1)
	movl	48(%rbx), %ecx	 # MEM[(int *)material$shader$locs_44 + 48B], _2
	leaq	448(%rsp), %rdx	 #, tmp291
	movq	%rdx, 128(%rsp)	 # tmp291, %sfp
 # .\src\main.cpp:1615:     if (material.shader.locs[SHADER_LOC_COLOR_DIFFUSE] != -1)
	cmpl	$-1, %ecx	 #, _2
	je	.L881	 #,
 # .\src\main.cpp:1618:             (float)material.maps[MATERIAL_MAP_DIFFUSE].color.r/255.0f,
	movzbl	20(%rsi), %eax	 # material$maps_41->color.r, material$maps_41->color.r
	vxorps	%xmm1, %xmm1, %xmm1	 # tmp305
 # .\src\main.cpp:1624:         rlSetUniform(material.shader.locs[SHADER_LOC_COLOR_DIFFUSE], values, SHADER_UNIFORM_VEC4, 1);
	movl	$1, %r9d	 #,
	movl	$3, %r8d	 #,
 # .\src\main.cpp:1618:             (float)material.maps[MATERIAL_MAP_DIFFUSE].color.r/255.0f,
	vcvtsi2ssl	%eax, %xmm1, %xmm0	 # material$maps_41->color.r, tmp305, tmp306
 # .\src\main.cpp:1619:             (float)material.maps[MATERIAL_MAP_DIFFUSE].color.g/255.0f,
	movzbl	21(%rsi), %eax	 # material$maps_41->color.g, material$maps_41->color.g
	vcvtsi2ssl	%eax, %xmm1, %xmm2	 # material$maps_41->color.g, tmp305, tmp307
 # .\src\main.cpp:1620:             (float)material.maps[MATERIAL_MAP_DIFFUSE].color.b/255.0f,
	movzbl	22(%rsi), %eax	 # material$maps_41->color.b, material$maps_41->color.b
 # .\src\main.cpp:1619:             (float)material.maps[MATERIAL_MAP_DIFFUSE].color.g/255.0f,
	vmovaps	%xmm2, %xmm3	 # tmp307, tmp214
 # .\src\main.cpp:1620:             (float)material.maps[MATERIAL_MAP_DIFFUSE].color.b/255.0f,
	vcvtsi2ssl	%eax, %xmm1, %xmm2	 # material$maps_41->color.b, tmp305, tmp308
 # .\src\main.cpp:1621:             (float)material.maps[MATERIAL_MAP_DIFFUSE].color.a/255.0f
	movzbl	23(%rsi), %eax	 # material$maps_41->color.a, material$maps_41->color.a
 # .\src\main.cpp:1618:             (float)material.maps[MATERIAL_MAP_DIFFUSE].color.r/255.0f,
	vunpcklps	%xmm3, %xmm0, %xmm0	 # tmp214, tmp212, tmp221
 # .\src\main.cpp:1621:             (float)material.maps[MATERIAL_MAP_DIFFUSE].color.a/255.0f
	vcvtsi2ssl	%eax, %xmm1, %xmm1	 # material$maps_41->color.a, tmp305, tmp309
 # .\src\main.cpp:1618:             (float)material.maps[MATERIAL_MAP_DIFFUSE].color.r/255.0f,
	vunpcklps	%xmm1, %xmm2, %xmm2	 # tmp218, tmp216, tmp220
	vbroadcastss	.LC22(%rip), %xmm1	 #, tmp224
	vmovlhps	%xmm2, %xmm0, %xmm0	 # tmp220, tmp221, tmp211
	vdivps	%xmm1, %xmm0, %xmm0	 # tmp224, tmp211, vect__5.2303
 # .\src\main.cpp:1622:         };
	vmovups	%xmm0, 448(%rsp)	 # vect__5.2303, MEM <vector(4) float> [(float *)_479]
 # .\src\main.cpp:1624:         rlSetUniform(material.shader.locs[SHADER_LOC_COLOR_DIFFUSE], values, SHADER_UNIFORM_VEC4, 1);
	call	rlSetUniform	 #
.L881:
 # .\src\main.cpp:1632:     Matrix matView = rlGetMatrixModelview();
	leaq	256(%rsp), %rcx	 #, tmp226
	call	rlGetMatrixModelview	 #
 # .\src\main.cpp:1634:     Matrix matProjection = rlGetMatrixProjection();
	leaq	320(%rsp), %rcx	 #, tmp227
	call	rlGetMatrixProjection	 #
 # .\src\main.cpp:1637:     if (material.shader.locs[SHADER_LOC_MATRIX_VIEW] != -1) rlSetUniformMatrix(material.shader.locs[SHADER_LOC_MATRIX_VIEW], matView);
	movl	28(%rbx), %ecx	 # MEM[(int *)material$shader$locs_44 + 28B], _15
	leaq	192(%rsp), %rdx	 #, tmp292
	movq	%rdx, 48(%rsp)	 # tmp292, %sfp
 # .\src\main.cpp:1637:     if (material.shader.locs[SHADER_LOC_MATRIX_VIEW] != -1) rlSetUniformMatrix(material.shader.locs[SHADER_LOC_MATRIX_VIEW], matView);
	cmpl	$-1, %ecx	 #, _15
	je	.L882	 #,
 # .\src\main.cpp:1637:     if (material.shader.locs[SHADER_LOC_MATRIX_VIEW] != -1) rlSetUniformMatrix(material.shader.locs[SHADER_LOC_MATRIX_VIEW], matView);
	vmovdqu	256(%rsp), %xmm6	 # matView, tmp315
	vmovdqu	304(%rsp), %xmm3	 # matView, tmp318
	vmovdqu	%xmm6, 192(%rsp)	 # tmp315,
	vmovdqu	272(%rsp), %xmm6	 # matView, tmp316
	vmovdqu	%xmm3, 240(%rsp)	 # tmp318,
	vmovdqu	%xmm6, 208(%rsp)	 # tmp316,
	vmovdqu	288(%rsp), %xmm6	 # matView, tmp317
	vmovdqu	%xmm6, 224(%rsp)	 # tmp317,
	call	rlSetUniformMatrix	 #
.L882:
 # .\src\main.cpp:1638:     if (material.shader.locs[SHADER_LOC_MATRIX_PROJECTION] != -1) rlSetUniformMatrix(material.shader.locs[SHADER_LOC_MATRIX_PROJECTION], matProjection);
	movl	32(%rbx), %ecx	 # MEM[(int *)material$shader$locs_44 + 32B], _16
 # .\src\main.cpp:1638:     if (material.shader.locs[SHADER_LOC_MATRIX_PROJECTION] != -1) rlSetUniformMatrix(material.shader.locs[SHADER_LOC_MATRIX_PROJECTION], matProjection);
	cmpl	$-1, %ecx	 #, _16
	je	.L883	 #,
 # .\src\main.cpp:1638:     if (material.shader.locs[SHADER_LOC_MATRIX_PROJECTION] != -1) rlSetUniformMatrix(material.shader.locs[SHADER_LOC_MATRIX_PROJECTION], matProjection);
	vmovdqu	320(%rsp), %xmm4	 # matProjection, tmp319
	movq	48(%rsp), %rdx	 # %sfp,
	vmovdqu	336(%rsp), %xmm6	 # matProjection, tmp320
	vmovdqu	352(%rsp), %xmm3	 # matProjection, tmp321
	vmovdqu	%xmm4, 192(%rsp)	 # tmp319,
	vmovdqu	368(%rsp), %xmm4	 # matProjection, tmp322
	vmovdqu	%xmm6, 208(%rsp)	 # tmp320,
	vmovdqu	%xmm3, 224(%rsp)	 # tmp321,
	vmovdqu	%xmm4, 240(%rsp)	 # tmp322,
	call	rlSetUniformMatrix	 #
.L883:
 # .\src\main.cpp:1643:     instances_boid_x_ID = rlLoadVertexBuffer(boid_x, instances*sizeof(float), false);
	leal	0(,%rdi,4), %r12d	 #, _20
 # .\src\main.cpp:1641:     rlEnableVertexArray(mesh.vaoId);
	movl	%r15d, %ecx	 # mesh$vaoId,
	call	rlEnableVertexArray	 #
 # .\src\main.cpp:1643:     instances_boid_x_ID = rlLoadVertexBuffer(boid_x, instances*sizeof(float), false);
	xorl	%r8d, %r8d	 #
	movl	%r12d, %edx	 # _20,
	movq	%r13, %rcx	 # boid_x,
	call	rlLoadVertexBuffer	 #
 # .\src\main.cpp:1644:     rlEnableVertexAttribute(material.shader.locs[26]);
	movl	104(%rbx), %ecx	 # MEM[(int *)material$shader$locs_44 + 104B], MEM[(int *)material$shader$locs_44 + 104B]
 # .\src\main.cpp:1643:     instances_boid_x_ID = rlLoadVertexBuffer(boid_x, instances*sizeof(float), false);
	movl	%eax, 60(%rsp)	 # tmp301, %sfp
 # .\src\main.cpp:1644:     rlEnableVertexAttribute(material.shader.locs[26]);
	call	rlEnableVertexAttribute	 #
 # .\src\main.cpp:1645:     rlSetVertexAttribute(material.shader.locs[26], 1, RL_FLOAT, false, sizeof(float), 0);
	movl	104(%rbx), %ecx	 # MEM[(int *)material$shader$locs_44 + 104B], MEM[(int *)material$shader$locs_44 + 104B]
	xorl	%r9d, %r9d	 #
	movl	$1, %edx	 #,
	movq	$0, 40(%rsp)	 #,
	movl	$5126, %r8d	 #,
	movl	$4, 32(%rsp)	 #,
	call	rlSetVertexAttribute	 #
 # .\src\main.cpp:1646:     rlSetVertexAttributeDivisor(material.shader.locs[26], 1);
	movl	104(%rbx), %ecx	 # MEM[(int *)material$shader$locs_44 + 104B], MEM[(int *)material$shader$locs_44 + 104B]
	movl	$1, %edx	 #,
	call	rlSetVertexAttributeDivisor	 #
 # .\src\main.cpp:1648:     instances_boid_y_ID = rlLoadVertexBuffer(boid_y, instances*sizeof(float), false);
	movq	64(%rsp), %rcx	 # %sfp,
	xorl	%r8d, %r8d	 #
	movl	%r12d, %edx	 # _20,
	call	rlLoadVertexBuffer	 #
 # .\src\main.cpp:1649:     rlEnableVertexAttribute(material.shader.locs[27]);
	movl	108(%rbx), %ecx	 # MEM[(int *)material$shader$locs_44 + 108B], MEM[(int *)material$shader$locs_44 + 108B]
 # .\src\main.cpp:1648:     instances_boid_y_ID = rlLoadVertexBuffer(boid_y, instances*sizeof(float), false);
	movl	%eax, %r13d	 # tmp302, _84
 # .\src\main.cpp:1649:     rlEnableVertexAttribute(material.shader.locs[27]);
	call	rlEnableVertexAttribute	 #
 # .\src\main.cpp:1650:     rlSetVertexAttribute(material.shader.locs[27], 1, RL_FLOAT, false, sizeof(float), 0);
	movl	108(%rbx), %ecx	 # MEM[(int *)material$shader$locs_44 + 108B], MEM[(int *)material$shader$locs_44 + 108B]
	xorl	%r9d, %r9d	 #
	movl	$1, %edx	 #,
	movq	$0, 40(%rsp)	 #,
	movl	$5126, %r8d	 #,
	movl	$4, 32(%rsp)	 #,
	call	rlSetVertexAttribute	 #
 # .\src\main.cpp:1651:     rlSetVertexAttributeDivisor(material.shader.locs[27], 1);
	movl	108(%rbx), %ecx	 # MEM[(int *)material$shader$locs_44 + 108B], MEM[(int *)material$shader$locs_44 + 108B]
	movl	$1, %edx	 #,
	call	rlSetVertexAttributeDivisor	 #
 # .\src\main.cpp:1653:     instances_boid_vx_ID = rlLoadVertexBuffer(boid_vx, instances*sizeof(float), false);
	xorl	%r8d, %r8d	 #
	movl	%r12d, %edx	 # _20,
	movq	%r14, %rcx	 # boid_vx,
	call	rlLoadVertexBuffer	 #
 # .\src\main.cpp:1654:     rlEnableVertexAttribute(material.shader.locs[28]);
	movl	112(%rbx), %ecx	 # MEM[(int *)material$shader$locs_44 + 112B], MEM[(int *)material$shader$locs_44 + 112B]
 # .\src\main.cpp:1653:     instances_boid_vx_ID = rlLoadVertexBuffer(boid_vx, instances*sizeof(float), false);
	movl	%eax, %r14d	 # tmp303, _90
 # .\src\main.cpp:1654:     rlEnableVertexAttribute(material.shader.locs[28]);
	call	rlEnableVertexAttribute	 #
 # .\src\main.cpp:1655:     rlSetVertexAttribute(material.shader.locs[28], 1, RL_FLOAT, false, sizeof(float), 0);
	movl	112(%rbx), %ecx	 # MEM[(int *)material$shader$locs_44 + 112B], MEM[(int *)material$shader$locs_44 + 112B]
	xorl	%r9d, %r9d	 #
	movl	$1, %edx	 #,
	movq	$0, 40(%rsp)	 #,
	movl	$5126, %r8d	 #,
	movl	$4, 32(%rsp)	 #,
	call	rlSetVertexAttribute	 #
 # .\src\main.cpp:1656:     rlSetVertexAttributeDivisor(material.shader.locs[28], 1);
	movl	112(%rbx), %ecx	 # MEM[(int *)material$shader$locs_44 + 112B], MEM[(int *)material$shader$locs_44 + 112B]
	movl	$1, %edx	 #,
	call	rlSetVertexAttributeDivisor	 #
 # .\src\main.cpp:1658:     instances_boid_vy_ID = rlLoadVertexBuffer(boid_vy, instances*sizeof(float), false);
	movq	96(%rsp), %rcx	 # %sfp,
	xorl	%r8d, %r8d	 #
	movl	%r12d, %edx	 # _20,
	call	rlLoadVertexBuffer	 #
 # .\src\main.cpp:1659:     rlEnableVertexAttribute(material.shader.locs[29]);
	movl	116(%rbx), %ecx	 # MEM[(int *)material$shader$locs_44 + 116B], MEM[(int *)material$shader$locs_44 + 116B]
 # .\src\main.cpp:1658:     instances_boid_vy_ID = rlLoadVertexBuffer(boid_vy, instances*sizeof(float), false);
	movl	%eax, %r12d	 # tmp304, _96
 # .\src\main.cpp:1659:     rlEnableVertexAttribute(material.shader.locs[29]);
	call	rlEnableVertexAttribute	 #
 # .\src\main.cpp:1660:     rlSetVertexAttribute(material.shader.locs[29], 1, RL_FLOAT, false, sizeof(float), 0);
	movl	116(%rbx), %ecx	 # MEM[(int *)material$shader$locs_44 + 116B], MEM[(int *)material$shader$locs_44 + 116B]
	xorl	%r9d, %r9d	 #
	movl	$1, %edx	 #,
	movq	$0, 40(%rsp)	 #,
	movl	$5126, %r8d	 #,
	movl	$4, 32(%rsp)	 #,
	call	rlSetVertexAttribute	 #
 # .\src\main.cpp:1661:     rlSetVertexAttributeDivisor(material.shader.locs[29], 1);
	movl	116(%rbx), %ecx	 # MEM[(int *)material$shader$locs_44 + 116B], MEM[(int *)material$shader$locs_44 + 116B]
	movl	$1, %edx	 #,
	call	rlSetVertexAttributeDivisor	 #
 # .\src\main.cpp:1663:     rlDisableVertexBuffer();
	call	rlDisableVertexBuffer	 #
 # .\src\main.cpp:1664:     rlDisableVertexArray();
	call	rlDisableVertexArray	 #
 # .\src\main.cpp:1668:     matModelView = MatrixMultiply(rlGetMatrixTransform(), matView);
	movq	128(%rsp), %rcx	 # %sfp,
	call	rlGetMatrixTransform	 #
 # .\src\main.cpp:1671:     rlEnableVertexArray(mesh.vaoId);
	movl	%r15d, %ecx	 # mesh$vaoId,
	vmovups	448(%rsp), %ymm1	 # MEM <vector(8) float> [(float *)_479], MEM <vector(8) float> [(float *)_479]
 # include/raymath.h:1311:     result.m0 = left.m0*right.m0 + left.m1*right.m4 + left.m2*right.m8 + left.m3*right.m12;
	vbroadcastss	260(%rsp), %ymm0	 # MEM <vector(8) float> [(float *)&matView], vect_right$m0_428.2329
 # include/raymath.h:1311:     result.m0 = left.m0*right.m0 + left.m1*right.m4 + left.m2*right.m8 + left.m3*right.m12;
	vmovups	256(%rsp), %ymm4	 # MEM <vector(8) float> [(float *)&matView], tmp323
	vmovups	480(%rsp), %ymm2	 # MEM <vector(8) float> [(float *)_479], MEM <vector(8) float> [(float *)_479]
 # include/raymath.h:1312:     result.m1 = left.m0*right.m1 + left.m1*right.m5 + left.m2*right.m9 + left.m3*right.m13;
	vbroadcastss	276(%rsp), %ymm5	 # MEM <vector(8) float> [(float *)&matView], vect_right$m0_428.2379
	vperm2f128	$0, %ymm1, %ymm1, %ymm6	 #, MEM <vector(8) float> [(float *)_479], MEM <vector(8) float> [(float *)_479], vect_left$m0_61.2310
	vperm2f128	$17, %ymm1, %ymm1, %ymm1	 #, MEM <vector(8) float> [(float *)_479], MEM <vector(8) float> [(float *)_479], vect_left$m0_61.2323
 # include/raymath.h:1313:     result.m2 = left.m0*right.m2 + left.m1*right.m6 + left.m2*right.m10 + left.m3*right.m14;
	vmovups	288(%rsp), %ymm7	 # MEM <vector(8) float> [(float *)&matView + 32B], tmp324
 # include/raymath.h:1311:     result.m0 = left.m0*right.m0 + left.m1*right.m4 + left.m2*right.m8 + left.m3*right.m12;
	vmulps	%ymm1, %ymm0, %ymm0	 # vect_left$m0_61.2323, vect_right$m0_428.2329, vect__301.2331
 # include/raymath.h:1311:     result.m0 = left.m0*right.m0 + left.m1*right.m4 + left.m2*right.m8 + left.m3*right.m12;
	vbroadcastss	%xmm4, %ymm4	 # tmp323, vect_right$m0_428.2316
	vperm2f128	$0, %ymm2, %ymm2, %ymm3	 #, MEM <vector(8) float> [(float *)_479], MEM <vector(8) float> [(float *)_479], vect_left$m0_61.2337
 # include/raymath.h:1314:     result.m3 = left.m0*right.m3 + left.m1*right.m7 + left.m2*right.m11 + left.m3*right.m15;
	vbroadcastss	304(%rsp), %ymm8	 # MEM <vector(8) float> [(float *)&matView + 32B], vect_right$m0_428.2450
 # include/raymath.h:1312:     result.m1 = left.m0*right.m1 + left.m1*right.m5 + left.m2*right.m9 + left.m3*right.m13;
	vmulps	%ymm1, %ymm5, %ymm5	 # vect_left$m0_61.2323, vect_right$m0_428.2379, vect__308.2381
	vperm2f128	$17, %ymm2, %ymm2, %ymm2	 #, MEM <vector(8) float> [(float *)_479], MEM <vector(8) float> [(float *)_479], vect_left$m0_61.2357
 # include/raymath.h:1311:     result.m0 = left.m0*right.m0 + left.m1*right.m4 + left.m2*right.m8 + left.m3*right.m12;
	vfmadd132ps	%ymm6, %ymm0, %ymm4	 # vect_left$m0_61.2310, vect__301.2331, vect__302.2332
 # include/raymath.h:1311:     result.m0 = left.m0*right.m0 + left.m1*right.m4 + left.m2*right.m8 + left.m3*right.m12;
	vbroadcastss	264(%rsp), %ymm0	 # MEM <vector(8) float> [(float *)&matView], vect_right$m0_428.2343
	vfmadd132ps	%ymm3, %ymm4, %ymm0	 # vect_left$m0_61.2337, vect__302.2332, vect__304.2346
 # include/raymath.h:1311:     result.m0 = left.m0*right.m0 + left.m1*right.m4 + left.m2*right.m8 + left.m3*right.m12;
	vbroadcastss	268(%rsp), %ymm4	 # MEM <vector(8) float> [(float *)&matView], vect_right$m0_428.2351
	vfmadd132ps	%ymm2, %ymm0, %ymm4	 # vect_left$m0_61.2357, vect__304.2346, vect__306.2360
 # include/raymath.h:1312:     result.m1 = left.m0*right.m1 + left.m1*right.m5 + left.m2*right.m9 + left.m3*right.m13;
	vbroadcastss	272(%rsp), %ymm0	 # MEM <vector(8) float> [(float *)&matView], vect_right$m0_428.2372
	vfmadd132ps	%ymm6, %ymm5, %ymm0	 # vect_left$m0_61.2310, vect__308.2381, vect__309.2382
 # include/raymath.h:1312:     result.m1 = left.m0*right.m1 + left.m1*right.m5 + left.m2*right.m9 + left.m3*right.m13;
	vbroadcastss	280(%rsp), %ymm5	 # MEM <vector(8) float> [(float *)&matView], vect_right$m0_428.2387
 # include/raymath.h:1311:     result.m0 = left.m0*right.m0 + left.m1*right.m4 + left.m2*right.m8 + left.m3*right.m12;
	vmovups	%ymm4, 160(%rsp)	 # vect__306.2360, %sfp
 # include/raymath.h:1312:     result.m1 = left.m0*right.m1 + left.m1*right.m5 + left.m2*right.m9 + left.m3*right.m13;
	vfmadd132ps	%ymm3, %ymm0, %ymm5	 # vect_left$m0_61.2337, vect__309.2382, vect__311.2390
 # include/raymath.h:1312:     result.m1 = left.m0*right.m1 + left.m1*right.m5 + left.m2*right.m9 + left.m3*right.m13;
	vbroadcastss	284(%rsp), %ymm0	 # MEM <vector(8) float> [(float *)&matView], vect_right$m0_428.2395
	vfmadd132ps	%ymm2, %ymm5, %ymm0	 # vect_left$m0_61.2357, vect__311.2390, vect__313.2398
 # include/raymath.h:1313:     result.m2 = left.m0*right.m2 + left.m1*right.m6 + left.m2*right.m10 + left.m3*right.m14;
	vbroadcastss	%xmm7, %ymm5	 # tmp324, vect_right$m0_428.2411
 # include/raymath.h:1313:     result.m2 = left.m0*right.m2 + left.m1*right.m6 + left.m2*right.m10 + left.m3*right.m14;
	vbroadcastss	292(%rsp), %ymm7	 # MEM <vector(8) float> [(float *)&matView + 32B], vect_right$m0_428.2418
	vmulps	%ymm1, %ymm7, %ymm7	 # vect_left$m0_61.2323, vect_right$m0_428.2418, vect__315.2420
 # include/raymath.h:1312:     result.m1 = left.m0*right.m1 + left.m1*right.m5 + left.m2*right.m9 + left.m3*right.m13;
	vmovups	%ymm0, 128(%rsp)	 # vect__313.2398, %sfp
 # include/raymath.h:1313:     result.m2 = left.m0*right.m2 + left.m1*right.m6 + left.m2*right.m10 + left.m3*right.m14;
	vfmadd132ps	%ymm6, %ymm7, %ymm5	 # vect_left$m0_61.2310, vect__315.2420, vect__316.2421
 # include/raymath.h:1313:     result.m2 = left.m0*right.m2 + left.m1*right.m6 + left.m2*right.m10 + left.m3*right.m14;
	vbroadcastss	296(%rsp), %ymm7	 # MEM <vector(8) float> [(float *)&matView + 32B], vect_right$m0_428.2426
	vfmadd132ps	%ymm3, %ymm5, %ymm7	 # vect_left$m0_61.2337, vect__316.2421, vect__318.2429
 # include/raymath.h:1313:     result.m2 = left.m0*right.m2 + left.m1*right.m6 + left.m2*right.m10 + left.m3*right.m14;
	vbroadcastss	300(%rsp), %ymm5	 # MEM <vector(8) float> [(float *)&matView + 32B], vect_right$m0_428.2434
	vfmadd132ps	%ymm2, %ymm7, %ymm5	 # vect_left$m0_61.2357, vect__318.2429, vect__320.2437
 # include/raymath.h:1314:     result.m3 = left.m0*right.m3 + left.m1*right.m7 + left.m2*right.m11 + left.m3*right.m15;
	vbroadcastss	308(%rsp), %ymm7	 # MEM <vector(8) float> [(float *)&matView + 32B], vect_right$m0_428.2457
	vmulps	%ymm1, %ymm7, %ymm1	 # vect_left$m0_61.2323, vect_right$m0_428.2457, vect__322.2459
 # include/raymath.h:1313:     result.m2 = left.m0*right.m2 + left.m1*right.m6 + left.m2*right.m10 + left.m3*right.m14;
	vmovups	%ymm5, 96(%rsp)	 # vect__320.2437, %sfp
 # include/raymath.h:1314:     result.m3 = left.m0*right.m3 + left.m1*right.m7 + left.m2*right.m11 + left.m3*right.m15;
	vfmadd231ps	%ymm8, %ymm6, %ymm1	 # vect_right$m0_428.2450, vect_left$m0_61.2310, vect__323.2460
 # include/raymath.h:1314:     result.m3 = left.m0*right.m3 + left.m1*right.m7 + left.m2*right.m11 + left.m3*right.m15;
	vbroadcastss	312(%rsp), %ymm6	 # MEM <vector(8) float> [(float *)&matView + 32B], vect_right$m0_428.2465
	vfmadd132ps	%ymm6, %ymm1, %ymm3	 # vect_right$m0_428.2465, vect__323.2460, vect__325.2468
 # include/raymath.h:1314:     result.m3 = left.m0*right.m3 + left.m1*right.m7 + left.m2*right.m11 + left.m3*right.m15;
	vbroadcastss	316(%rsp), %ymm1	 # MEM <vector(8) float> [(float *)&matView + 32B], vect_right$m0_428.2473
	vfmadd132ps	%ymm1, %ymm3, %ymm2	 # vect_right$m0_428.2473, vect__325.2468, vect__327.2476
	vmovups	%ymm2, 64(%rsp)	 # vect__327.2476, %sfp
 # .\src\main.cpp:1671:     rlEnableVertexArray(mesh.vaoId);
	vzeroupper
	call	rlEnableVertexArray	 #
 # .\src\main.cpp:1677:     rlSetUniformMatrix(material.shader.locs[SHADER_LOC_MATRIX_MVP], matModelViewProjection);
	movl	24(%rbx), %ecx	 # MEM[(int *)material$shader$locs_44 + 24B], MEM[(int *)material$shader$locs_44 + 24B]
	vmovups	320(%rsp), %ymm1	 # MEM <vector(8) float> [(float *)&matProjection], MEM <vector(8) float> [(float *)&matProjection]
	vmovups	352(%rsp), %ymm3	 # MEM <vector(8) float> [(float *)&matProjection + 32B], MEM <vector(8) float> [(float *)&matProjection + 32B]
 # include/raymath.h:1311:     result.m0 = left.m0*right.m0 + left.m1*right.m4 + left.m2*right.m8 + left.m3*right.m12;
	vmovups	96(%rsp), %ymm5	 # %sfp, vect__320.2437
 # include/raymath.h:1311:     result.m0 = left.m0*right.m0 + left.m1*right.m4 + left.m2*right.m8 + left.m3*right.m12;
	vmovups	128(%rsp), %ymm0	 # %sfp, vect__313.2398
	vpermilps	$85, %ymm1, %ymm8	 #, MEM <vector(8) float> [(float *)&matProjection], vect_right$m0_480.2403
 # .\src\main.cpp:1677:     rlSetUniformMatrix(material.shader.locs[SHADER_LOC_MATRIX_MVP], matModelViewProjection);
	movq	48(%rsp), %rdx	 # %sfp,
 # include/raymath.h:1311:     result.m0 = left.m0*right.m0 + left.m1*right.m4 + left.m2*right.m8 + left.m3*right.m12;
	vpermilps	$0, %ymm1, %ymm6	 #, MEM <vector(8) float> [(float *)&matProjection], vect_right$m0_480.2365
 # include/raymath.h:1311:     result.m0 = left.m0*right.m0 + left.m1*right.m4 + left.m2*right.m8 + left.m3*right.m12;
	vpermilps	$85, %ymm3, %ymm7	 #, MEM <vector(8) float> [(float *)&matProjection + 32B], vect_right$m0_480.2404
	vpermilps	$0, %ymm3, %ymm9	 #, MEM <vector(8) float> [(float *)&matProjection + 32B], vect_right$m0_480.2366
 # include/raymath.h:1311:     result.m0 = left.m0*right.m0 + left.m1*right.m4 + left.m2*right.m8 + left.m3*right.m12;
	vmovups	160(%rsp), %ymm4	 # %sfp, vect__306.2360
 # include/raymath.h:1311:     result.m0 = left.m0*right.m0 + left.m1*right.m4 + left.m2*right.m8 + left.m3*right.m12;
	vmovups	64(%rsp), %ymm2	 # %sfp, vect__327.2476
 # include/raymath.h:1311:     result.m0 = left.m0*right.m0 + left.m1*right.m4 + left.m2*right.m8 + left.m3*right.m12;
	vmulps	%ymm0, %ymm7, %ymm7	 # vect__313.2398, vect_right$m0_480.2404, vect__157.2405
	vmulps	%ymm0, %ymm8, %ymm0	 # vect__313.2398, vect_right$m0_480.2403, vect__157.2405
 # include/raymath.h:1311:     result.m0 = left.m0*right.m0 + left.m1*right.m4 + left.m2*right.m8 + left.m3*right.m12;
	vfmadd231ps	%ymm6, %ymm4, %ymm0	 # vect_right$m0_480.2365, vect__306.2360, vect__158.2406
	vfmadd132ps	%ymm9, %ymm7, %ymm4	 # vect_right$m0_480.2366, vect__157.2405, vect__158.2406
 # include/raymath.h:1311:     result.m0 = left.m0*right.m0 + left.m1*right.m4 + left.m2*right.m8 + left.m3*right.m12;
	vpermilps	$170, %ymm1, %ymm6	 #, MEM <vector(8) float> [(float *)&matProjection], vect_right$m0_480.2442
	vpermilps	$170, %ymm3, %ymm7	 #, MEM <vector(8) float> [(float *)&matProjection + 32B], vect_right$m0_480.2443
 # include/raymath.h:1311:     result.m0 = left.m0*right.m0 + left.m1*right.m4 + left.m2*right.m8 + left.m3*right.m12;
	vpermilps	$255, %ymm1, %ymm1	 #, MEM <vector(8) float> [(float *)&matProjection], vect_right$m0_480.2481
	vpermilps	$255, %ymm3, %ymm3	 #, MEM <vector(8) float> [(float *)&matProjection + 32B], vect_right$m0_480.2482
 # include/raymath.h:1311:     result.m0 = left.m0*right.m0 + left.m1*right.m4 + left.m2*right.m8 + left.m3*right.m12;
	vfmadd132ps	%ymm5, %ymm0, %ymm6	 # vect__320.2437, vect__158.2406, vect__160.2445
	vfmadd132ps	%ymm7, %ymm4, %ymm5	 # vect_right$m0_480.2443, vect__158.2406, vect__320.2437
 # include/raymath.h:1311:     result.m0 = left.m0*right.m0 + left.m1*right.m4 + left.m2*right.m8 + left.m3*right.m12;
	vfmadd132ps	%ymm2, %ymm6, %ymm1	 # vect__327.2476, vect__160.2445, vect__162.2484
	vfmadd132ps	%ymm3, %ymm5, %ymm2	 # vect_right$m0_480.2482, vect__160.2445, vect__162.2484
 # include/raymath.h:1311:     result.m0 = left.m0*right.m0 + left.m1*right.m4 + left.m2*right.m8 + left.m3*right.m12;
	vmovups	%ymm1, 384(%rsp)	 # vect__162.2484, MEM <vector(8) float> [(float *)&matModelViewProjection]
 # .\src\main.cpp:1677:     rlSetUniformMatrix(material.shader.locs[SHADER_LOC_MATRIX_MVP], matModelViewProjection);
	vmovdqu	400(%rsp), %xmm6	 # matModelViewProjection, tmp326
 # include/raymath.h:1311:     result.m0 = left.m0*right.m0 + left.m1*right.m4 + left.m2*right.m8 + left.m3*right.m12;
	vmovups	%ymm2, 416(%rsp)	 # vect__162.2484, MEM <vector(8) float> [(float *)&matModelViewProjection + 32B]
 # .\src\main.cpp:1677:     rlSetUniformMatrix(material.shader.locs[SHADER_LOC_MATRIX_MVP], matModelViewProjection);
	vmovdqu	432(%rsp), %xmm3	 # matModelViewProjection, tmp327
	vmovdqu	%xmm1, 192(%rsp)	 # tmp293,
	vmovdqu	%xmm6, 208(%rsp)	 # tmp326,
	vmovdqu	%xmm2, 224(%rsp)	 # tmp295,
	vmovdqu	%xmm3, 240(%rsp)	 # tmp327,
	vzeroupper
	call	rlSetUniformMatrix	 #
 # .\src\main.cpp:1680:     rlDrawVertexArrayInstanced(0, mesh.vertexCount, instances);
	movl	0(%rbp), %edx	 # mesh.vertexCount, mesh.vertexCount
	movl	%edi, %r8d	 # instances,
	xorl	%ecx, %ecx	 #
	call	rlDrawVertexArrayInstanced	 #
 # .\src\main.cpp:1685:         if (material.maps[i].texture.id > 0)
	movl	(%rsi), %eax	 # material$maps_41->texture.id,
	testl	%eax, %eax	 #
	jne	.L905	 #,
	movl	28(%rsi), %r15d	 # MEM[(struct MaterialMap *)material$maps_41 + 28B].texture.id,
	testl	%r15d, %r15d	 #
	jne	.L906	 #,
.L885:
	movl	56(%rsi), %ebp	 # MEM[(struct MaterialMap *)material$maps_41 + 56B].texture.id,
	testl	%ebp, %ebp	 #
	jne	.L907	 #,
.L886:
	movl	84(%rsi), %edi	 # MEM[(struct MaterialMap *)material$maps_41 + 84B].texture.id,
	testl	%edi, %edi	 #
	jne	.L908	 #,
.L887:
	movl	112(%rsi), %ebx	 # MEM[(struct MaterialMap *)material$maps_41 + 112B].texture.id,
	testl	%ebx, %ebx	 #
	jne	.L909	 #,
.L888:
	movl	140(%rsi), %r11d	 # MEM[(struct MaterialMap *)material$maps_41 + 140B].texture.id,
	testl	%r11d, %r11d	 #
	jne	.L910	 #,
.L889:
	movl	168(%rsi), %r10d	 # MEM[(struct MaterialMap *)material$maps_41 + 168B].texture.id,
	testl	%r10d, %r10d	 #
	jne	.L911	 #,
.L890:
	movl	196(%rsi), %r9d	 # MEM[(struct MaterialMap *)material$maps_41 + 196B].texture.id,
	testl	%r9d, %r9d	 #
	jne	.L912	 #,
.L891:
	movl	224(%rsi), %r8d	 # MEM[(struct MaterialMap *)material$maps_41 + 224B].texture.id,
	testl	%r8d, %r8d	 #
	jne	.L913	 #,
.L892:
	movl	252(%rsi), %ecx	 # MEM[(struct MaterialMap *)material$maps_41 + 252B].texture.id,
	testl	%ecx, %ecx	 #
	jne	.L914	 #,
.L893:
	movl	280(%rsi), %edx	 # MEM[(struct MaterialMap *)material$maps_41 + 280B].texture.id,
	testl	%edx, %edx	 #
	jne	.L915	 #,
.L894:
	movl	308(%rsi), %eax	 # MEM[(struct MaterialMap *)material$maps_41 + 308B].texture.id,
	testl	%eax, %eax	 #
	jne	.L916	 #,
.L895:
 # .\src\main.cpp:1700:     rlDisableVertexArray();
	call	rlDisableVertexArray	 #
 # .\src\main.cpp:1701:     rlDisableVertexBuffer();
	call	rlDisableVertexBuffer	 #
 # .\src\main.cpp:1702:     rlDisableVertexBufferElement();
	call	rlDisableVertexBufferElement	 #
 # .\src\main.cpp:1705:     rlDisableShader();
	call	rlDisableShader	 #
 # .\src\main.cpp:1708:     rlUnloadVertexBuffer(instances_boid_x_ID);
	movl	60(%rsp), %ecx	 # %sfp,
	call	rlUnloadVertexBuffer	 #
 # .\src\main.cpp:1709:     rlUnloadVertexBuffer(instances_boid_y_ID);
	movl	%r13d, %ecx	 # _84,
	call	rlUnloadVertexBuffer	 #
 # .\src\main.cpp:1710:     rlUnloadVertexBuffer(instances_boid_vx_ID);
	movl	%r14d, %ecx	 # _90,
	call	rlUnloadVertexBuffer	 #
 # .\src\main.cpp:1711:     rlUnloadVertexBuffer(instances_boid_vy_ID);
	movl	%r12d, %ecx	 # _96,
 # .\src\main.cpp:1712: }
	vmovups	512(%rsp), %xmm6	 #,
	vmovups	528(%rsp), %xmm7	 #,
	vmovups	544(%rsp), %xmm8	 #,
	vmovups	560(%rsp), %xmm9	 #,
	addq	$584, %rsp	 #,
	popq	%rbx	 #
	popq	%rsi	 #
	popq	%rdi	 #
	popq	%rbp	 #
	popq	%r12	 #
	popq	%r13	 #
	popq	%r14	 #
	popq	%r15	 #
 # .\src\main.cpp:1711:     rlUnloadVertexBuffer(instances_boid_vy_ID);
	jmp	rlUnloadVertexBuffer	 #
	.p2align 4,,10
	.p2align 3
.L905:
 # .\src\main.cpp:1689:             rlActiveTextureSlot(i);
	xorl	%ecx, %ecx	 #
	call	rlActiveTextureSlot	 #
 # .\src\main.cpp:1695:             else rlDisableTexture();
	call	rlDisableTexture	 #
 # .\src\main.cpp:1685:         if (material.maps[i].texture.id > 0)
	movl	28(%rsi), %r15d	 # MEM[(struct MaterialMap *)material$maps_41 + 28B].texture.id,
	testl	%r15d, %r15d	 #
	je	.L885	 #,
.L906:
 # .\src\main.cpp:1689:             rlActiveTextureSlot(i);
	movl	$1, %ecx	 #,
	call	rlActiveTextureSlot	 #
 # .\src\main.cpp:1695:             else rlDisableTexture();
	call	rlDisableTexture	 #
 # .\src\main.cpp:1685:         if (material.maps[i].texture.id > 0)
	movl	56(%rsi), %ebp	 # MEM[(struct MaterialMap *)material$maps_41 + 56B].texture.id,
	testl	%ebp, %ebp	 #
	je	.L886	 #,
.L907:
 # .\src\main.cpp:1689:             rlActiveTextureSlot(i);
	movl	$2, %ecx	 #,
	call	rlActiveTextureSlot	 #
 # .\src\main.cpp:1695:             else rlDisableTexture();
	call	rlDisableTexture	 #
 # .\src\main.cpp:1685:         if (material.maps[i].texture.id > 0)
	movl	84(%rsi), %edi	 # MEM[(struct MaterialMap *)material$maps_41 + 84B].texture.id,
	testl	%edi, %edi	 #
	je	.L887	 #,
.L908:
 # .\src\main.cpp:1689:             rlActiveTextureSlot(i);
	movl	$3, %ecx	 #,
	call	rlActiveTextureSlot	 #
 # .\src\main.cpp:1695:             else rlDisableTexture();
	call	rlDisableTexture	 #
 # .\src\main.cpp:1685:         if (material.maps[i].texture.id > 0)
	movl	112(%rsi), %ebx	 # MEM[(struct MaterialMap *)material$maps_41 + 112B].texture.id,
	testl	%ebx, %ebx	 #
	je	.L888	 #,
.L909:
 # .\src\main.cpp:1689:             rlActiveTextureSlot(i);
	movl	$4, %ecx	 #,
	call	rlActiveTextureSlot	 #
 # .\src\main.cpp:1695:             else rlDisableTexture();
	call	rlDisableTexture	 #
 # .\src\main.cpp:1685:         if (material.maps[i].texture.id > 0)
	movl	140(%rsi), %r11d	 # MEM[(struct MaterialMap *)material$maps_41 + 140B].texture.id,
	testl	%r11d, %r11d	 #
	je	.L889	 #,
.L910:
 # .\src\main.cpp:1689:             rlActiveTextureSlot(i);
	movl	$5, %ecx	 #,
	call	rlActiveTextureSlot	 #
 # .\src\main.cpp:1695:             else rlDisableTexture();
	call	rlDisableTexture	 #
 # .\src\main.cpp:1685:         if (material.maps[i].texture.id > 0)
	movl	168(%rsi), %r10d	 # MEM[(struct MaterialMap *)material$maps_41 + 168B].texture.id,
	testl	%r10d, %r10d	 #
	je	.L890	 #,
.L911:
 # .\src\main.cpp:1689:             rlActiveTextureSlot(i);
	movl	$6, %ecx	 #,
	call	rlActiveTextureSlot	 #
 # .\src\main.cpp:1695:             else rlDisableTexture();
	call	rlDisableTexture	 #
 # .\src\main.cpp:1685:         if (material.maps[i].texture.id > 0)
	movl	196(%rsi), %r9d	 # MEM[(struct MaterialMap *)material$maps_41 + 196B].texture.id,
	testl	%r9d, %r9d	 #
	je	.L891	 #,
.L912:
 # .\src\main.cpp:1689:             rlActiveTextureSlot(i);
	movl	$7, %ecx	 #,
	call	rlActiveTextureSlot	 #
 # .\src\main.cpp:1694:                 (i == MATERIAL_MAP_CUBEMAP)) rlDisableTextureCubemap();
	call	rlDisableTextureCubemap	 #
 # .\src\main.cpp:1685:         if (material.maps[i].texture.id > 0)
	movl	224(%rsi), %r8d	 # MEM[(struct MaterialMap *)material$maps_41 + 224B].texture.id,
	testl	%r8d, %r8d	 #
	je	.L892	 #,
.L913:
 # .\src\main.cpp:1689:             rlActiveTextureSlot(i);
	movl	$8, %ecx	 #,
	call	rlActiveTextureSlot	 #
 # .\src\main.cpp:1694:                 (i == MATERIAL_MAP_CUBEMAP)) rlDisableTextureCubemap();
	call	rlDisableTextureCubemap	 #
 # .\src\main.cpp:1685:         if (material.maps[i].texture.id > 0)
	movl	252(%rsi), %ecx	 # MEM[(struct MaterialMap *)material$maps_41 + 252B].texture.id,
	testl	%ecx, %ecx	 #
	je	.L893	 #,
.L914:
 # .\src\main.cpp:1689:             rlActiveTextureSlot(i);
	movl	$9, %ecx	 #,
	call	rlActiveTextureSlot	 #
 # .\src\main.cpp:1694:                 (i == MATERIAL_MAP_CUBEMAP)) rlDisableTextureCubemap();
	call	rlDisableTextureCubemap	 #
 # .\src\main.cpp:1685:         if (material.maps[i].texture.id > 0)
	movl	280(%rsi), %edx	 # MEM[(struct MaterialMap *)material$maps_41 + 280B].texture.id,
	testl	%edx, %edx	 #
	je	.L894	 #,
.L915:
 # .\src\main.cpp:1689:             rlActiveTextureSlot(i);
	movl	$10, %ecx	 #,
	call	rlActiveTextureSlot	 #
 # .\src\main.cpp:1695:             else rlDisableTexture();
	call	rlDisableTexture	 #
 # .\src\main.cpp:1685:         if (material.maps[i].texture.id > 0)
	movl	308(%rsi), %eax	 # MEM[(struct MaterialMap *)material$maps_41 + 308B].texture.id,
	testl	%eax, %eax	 #
	je	.L895	 #,
.L916:
 # .\src\main.cpp:1689:             rlActiveTextureSlot(i);
	movl	$11, %ecx	 #,
	call	rlActiveTextureSlot	 #
 # .\src\main.cpp:1695:             else rlDisableTexture();
	call	rlDisableTexture	 #
	jmp	.L895	 #
	.seh_endproc
	.p2align 4
	.globl	_Z6renderP8BoidListP2UiR5Rules8Camera2D8Camera3DP4MeshP8Material
	.def	_Z6renderP8BoidListP2UiR5Rules8Camera2D8Camera3DP4MeshP8Material;	.scl	2;	.type	32;	.endef
	.seh_proc	_Z6renderP8BoidListP2UiR5Rules8Camera2D8Camera3DP4MeshP8Material
_Z6renderP8BoidListP2UiR5Rules8Camera2D8Camera3DP4MeshP8Material:
.LFB12632:
	pushq	%r15	 #
	.seh_pushreg	%r15
	pushq	%r14	 #
	.seh_pushreg	%r14
	pushq	%r13	 #
	.seh_pushreg	%r13
	pushq	%r12	 #
	.seh_pushreg	%r12
	pushq	%rbp	 #
	.seh_pushreg	%rbp
	pushq	%rdi	 #
	.seh_pushreg	%rdi
	pushq	%rsi	 #
	.seh_pushreg	%rsi
	pushq	%rbx	 #
	.seh_pushreg	%rbx
	subq	$328, %rsp	 #,
	.seh_stackalloc	328
	.seh_endprologue
 # .\src\main.cpp:1308: void render(BoidList *boid_list, Ui *ui, Rules &rules, Camera2D cam, Camera3D camera, Mesh *tri, Material *matInstances) {
	movq	432(%rsp), %rsi	 #, tmp93
	movq	440(%rsp), %rbx	 # tri, tri
	movq	448(%rsp), %r15	 # matInstances, matInstances
	movq	%rdx, %r12	 # tmp118, ui
	movq	%r8, %r14	 # tmp119, rules
	movq	%r9, %r13	 # tmp120, tmp92
	movq	%rcx, %rdi	 # tmp117, boid_list
 # .\src\main.cpp:1309:     BeginDrawing();
	call	BeginDrawing	 #
 # .\src\main.cpp:1310:         ClearBackground(BLACK);
	movl	$-16777216, %ecx	 #,
	call	ClearBackground	 #
 # .\src\main.cpp:1312:         auto t_start_3d = std::chrono::high_resolution_clock::now();
	call	_ZNSt6chrono3_V212system_clock3nowEv	 #
 # .\src\main.cpp:1316:         BeginMode3D(camera);
	vmovdqu	(%rsi), %xmm0	 # camera, tmp122
 # .\src\main.cpp:1314:         auto const boid_store = boid_list->m_backbuffer;
	movq	8(%rdi), %rbp	 # boid_list_14(D)->m_backbuffer, boid_store
 # .\src\main.cpp:1316:         BeginMode3D(camera);
	leaq	256(%rsp), %rcx	 #, tmp99
	vmovdqu	%xmm0, 256(%rsp)	 # tmp122,
	vmovdqu	16(%rsi), %xmm1	 # camera, tmp123
	vmovdqu	%xmm1, 272(%rsp)	 # tmp123,
	vmovdqu	28(%rsi), %xmm2	 # camera, tmp124
	vmovdqu	%xmm2, 284(%rsp)	 # tmp124,
	call	BeginMode3D	 #
 # .\src\main.cpp:1317:             DrawMeshInstanced2(*tri, *matInstances, boid_list->m_size - offset, boid_store->xs + offset, boid_store->ys + offset, boid_store->vxs + offset, boid_store->vys + offset);
	vmovdqu	(%rbx), %xmm3	 # MEM[(const struct Mesh &)tri_17(D)], tmp125
	leaq	64(%rsp), %rdx	 #, tmp112
	leaq	128(%rsp), %rcx	 #, tmp113
	vmovdqu	%xmm3, 128(%rsp)	 # tmp125,
	vmovdqu	16(%rbx), %xmm4	 # MEM[(const struct Mesh &)tri_17(D)], tmp126
	vmovdqu	%xmm4, 144(%rsp)	 # tmp126,
	vmovdqu	32(%rbx), %xmm5	 # MEM[(const struct Mesh &)tri_17(D)], tmp127
	vmovdqu	(%r15), %xmm4	 # MEM[(const struct Material &)matInstances_18(D)], tmp132
	vmovdqu	%xmm5, 160(%rsp)	 # tmp127,
	vmovdqu	48(%rbx), %xmm0	 # MEM[(const struct Mesh &)tri_17(D)], tmp128
	vmovdqu	%xmm0, 176(%rsp)	 # tmp128,
	vmovdqu	64(%rbx), %xmm1	 # MEM[(const struct Mesh &)tri_17(D)], tmp129
	vmovdqu	%xmm1, 192(%rsp)	 # tmp129,
	vmovdqu	80(%rbx), %xmm2	 # MEM[(const struct Mesh &)tri_17(D)], tmp130
	vmovdqu	%xmm2, 208(%rsp)	 # tmp130,
	vmovdqu	96(%rbx), %xmm3	 # MEM[(const struct Mesh &)tri_17(D)], tmp131
	vmovdqu	%xmm4, 64(%rsp)	 # tmp132,
	vmovdqu	16(%r15), %xmm5	 # MEM[(const struct Material &)matInstances_18(D)], tmp133
	vmovdqu	%xmm3, 224(%rsp)	 # tmp131,
	movq	0(%rbp), %r9	 # boid_store_15->xs, boid_store_15->xs
	vmovdqu	%xmm5, 80(%rsp)	 # tmp133,
	movq	32(%r15), %rax	 # MEM[(const struct Material &)matInstances_18(D)], MEM[(const struct Material &)matInstances_18(D)]
	movq	%rax, 96(%rsp)	 # MEM[(const struct Material &)matInstances_18(D)],
	movq	24(%rbp), %rax	 # boid_store_15->vys, boid_store_15->vys
	movq	%rax, 48(%rsp)	 # boid_store_15->vys,
	movq	16(%rbp), %rax	 # boid_store_15->vxs, boid_store_15->vxs
	movq	%rax, 40(%rsp)	 # boid_store_15->vxs,
	movq	8(%rbp), %rax	 # boid_store_15->ys, boid_store_15->ys
	movq	%rax, 32(%rsp)	 # boid_store_15->ys,
	movl	16(%rdi), %r8d	 # boid_list_14(D)->m_size,
	call	_Z18DrawMeshInstanced24Mesh8MaterialiPfS1_S1_S1_	 #
 # .\src\main.cpp:1318:         EndMode3D();
	call	EndMode3D	 #
 # .\src\main.cpp:1320:         auto t_end_3d = std::chrono::high_resolution_clock::now();
	call	_ZNSt6chrono3_V212system_clock3nowEv	 #
 # .\src\main.cpp:1348:         ui->Render(cam, camera, rules);
	movq	%r14, %r9	 # rules,
	movq	%rsi, %r8	 # tmp93,
	movq	%r13, %rdx	 # tmp92,
	movq	%r12, %rcx	 # ui,
	call	_ZN2Ui6RenderER8Camera2DR8Camera3DR5Rules	 #
 # .\src\main.cpp:1350:     EndDrawing();
	call	EndDrawing	 #
	nop	
 # .\src\main.cpp:1351: }
	addq	$328, %rsp	 #,
	popq	%rbx	 #
	popq	%rsi	 #
	popq	%rdi	 #
	popq	%rbp	 #
	popq	%r12	 #
	popq	%r13	 #
	popq	%r14	 #
	popq	%r15	 #
	ret	
	.seh_endproc
	.section	.text$_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE24_M_release_last_use_coldEv,"x"
	.linkonce discard
	.align 2
	.p2align 4
	.globl	_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE24_M_release_last_use_coldEv
	.def	_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE24_M_release_last_use_coldEv;	.scl	2;	.type	32;	.endef
	.seh_proc	_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE24_M_release_last_use_coldEv
_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE24_M_release_last_use_coldEv:
.LFB13020:
	pushq	%rbx	 #
	.seh_pushreg	%rbx
	subq	$32, %rsp	 #,
	.seh_stackalloc	32
	.seh_endprologue
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:175: 	_M_dispose();
	movq	(%rcx), %rax	 # this_2(D)->_vptr._Sp_counted_base, this_2(D)->_vptr._Sp_counted_base
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:198:       _M_release_last_use_cold() noexcept
	movq	%rcx, %rbx	 # tmp93, this
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:175: 	_M_dispose();
	call	*16(%rax)	 # MEM[(int (*) () *)_4 + 16B]
 # C:/msys64/ucrt64/include/c++/13.1.0/ext/atomicity.h:66:   { return __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
	lock subl	$1, 12(%rbx)	 #,,
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:187: 	if (__gnu_cxx::__exchange_and_add_dispatch(&_M_weak_count,
	jne	.L920	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:191: 	    _M_destroy();
	movq	(%rbx), %rax	 # this_2(D)->_vptr._Sp_counted_base, this_2(D)->_vptr._Sp_counted_base
	movq	%rbx, %rcx	 # this,
	movq	24(%rax), %rax	 # MEM[(int (*) () *)_8 + 24B], MEM[(int (*) () *)_8 + 24B]
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:199:       { _M_release_last_use(); }
	addq	$32, %rsp	 #,
	popq	%rbx	 #
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:191: 	    _M_destroy();
	rex.W jmp	*%rax	 # MEM[(int (*) () *)_8 + 24B]
	.p2align 4,,10
	.p2align 3
.L920:
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:199:       { _M_release_last_use(); }
	addq	$32, %rsp	 #,
	popq	%rbx	 #
	ret	
	.seh_endproc
	.section	.text$_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE10_M_releaseEv,"x"
	.linkonce discard
	.align 2
	.p2align 4
	.globl	_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE10_M_releaseEv
	.def	_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE10_M_releaseEv;	.scl	2;	.type	32;	.endef
	.seh_proc	_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE10_M_releaseEv
_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE10_M_releaseEv:
.LFB11040:
	pushq	%rbx	 #
	.seh_pushreg	%rbx
	subq	$32, %rsp	 #,
	.seh_stackalloc	32
	.seh_endprologue
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:337: 	  if (__atomic_load_n(__both_counts, __ATOMIC_ACQUIRE) == __unique_ref)
	movabsq	$4294967297, %rdx	 #, tmp90
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:318:     {
	movq	%rcx, %rbx	 # tmp96, this
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:334: 	  auto __both_counts = reinterpret_cast<long long*>(&_M_use_count);
	leaq	8(%rcx), %rax	 #, __both_counts
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:337: 	  if (__atomic_load_n(__both_counts, __ATOMIC_ACQUIRE) == __unique_ref)
	movq	8(%rcx), %rcx	 #, _1
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:337: 	  if (__atomic_load_n(__both_counts, __ATOMIC_ACQUIRE) == __unique_ref)
	cmpq	%rdx, %rcx	 # tmp90, _1
	je	.L925	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/ext/atomicity.h:66:   { return __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
	lock subl	$1, (%rax)	 #,,* __both_counts
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:350: 	  if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
	je	.L926	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:363:     }
	addq	$32, %rsp	 #,
	popq	%rbx	 #
	ret	
	.p2align 4,,10
	.p2align 3
.L925:
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:346: 	      _M_dispose();
	movq	(%rbx), %rax	 # this_2(D)->_vptr._Sp_counted_base, this_2(D)->_vptr._Sp_counted_base
	movq	%rbx, %rcx	 # this,
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:343: 	      _M_weak_count = _M_use_count = 0;
	movq	$0, 8(%rbx)	 #, MEM <vector(2) int> [(int *)this_2(D) + 8B]
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:346: 	      _M_dispose();
	call	*16(%rax)	 # MEM[(int (*) () *)_11 + 16B]
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:347: 	      _M_destroy();
	movq	(%rbx), %rax	 # this_2(D)->_vptr._Sp_counted_base, this_2(D)->_vptr._Sp_counted_base
	movq	%rbx, %rcx	 # this,
	movq	24(%rax), %rax	 # MEM[(int (*) () *)_13 + 24B], MEM[(int (*) () *)_13 + 24B]
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:363:     }
	addq	$32, %rsp	 #,
	popq	%rbx	 #
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:347: 	      _M_destroy();
	rex.W jmp	*%rax	 # MEM[(int (*) () *)_13 + 24B]
	.p2align 4,,10
	.p2align 3
.L926:
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:353: 	      _M_release_last_use_cold();
	movq	%rbx, %rcx	 # this,
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:363:     }
	addq	$32, %rsp	 #,
	popq	%rbx	 #
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:353: 	      _M_release_last_use_cold();
	jmp	_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE24_M_release_last_use_coldEv	 #
	.seh_endproc
	.section	.text$_ZNSt6vectorISt6futureIvESaIS1_EED1Ev,"x"
	.linkonce discard
	.align 2
	.p2align 4
	.globl	_ZNSt6vectorISt6futureIvESaIS1_EED1Ev
	.def	_ZNSt6vectorISt6futureIvESaIS1_EED1Ev;	.scl	2;	.type	32;	.endef
	.seh_proc	_ZNSt6vectorISt6futureIvESaIS1_EED1Ev
_ZNSt6vectorISt6futureIvESaIS1_EED1Ev:
.LFB13278:
	pushq	%r12	 #
	.seh_pushreg	%r12
	pushq	%rbp	 #
	.seh_pushreg	%rbp
	pushq	%rdi	 #
	.seh_pushreg	%rdi
	pushq	%rsi	 #
	.seh_pushreg	%rsi
	pushq	%rbx	 #
	.seh_pushreg	%rbx
	subq	$32, %rsp	 #,
	.seh_stackalloc	32
	.seh_endprologue
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/stl_vector.h:730: 	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
	movq	8(%rcx), %rdi	 # this_3(D)->D.168544._M_impl.D.167883._M_finish, _1
	movq	(%rcx), %rbx	 # this_3(D)->D.168544._M_impl.D.167883._M_start, __first
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/stl_vector.h:728:       ~vector() _GLIBCXX_NOEXCEPT
	movq	%rcx, %rbp	 # tmp105, this
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/stl_construct.h:162: 	  for (; __first != __last; ++__first)
	cmpq	%rbx, %rdi	 # __first, _1
	je	.L928	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:337: 	  if (__atomic_load_n(__both_counts, __ATOMIC_ACQUIRE) == __unique_ref)
	movabsq	$4294967297, %r12	 #, tmp104
	jmp	.L933	 #
	.p2align 4,,10
	.p2align 3
.L931:
 # C:/msys64/ucrt64/include/c++/13.1.0/ext/atomicity.h:66:   { return __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
	lock subl	$1, (%rax)	 #,,* __both_counts
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:350: 	  if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
	je	.L940	 #,
.L930:
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/stl_construct.h:162: 	  for (; __first != __last; ++__first)
	addq	$16, %rbx	 #, __first
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/stl_construct.h:162: 	  for (; __first != __last; ++__first)
	cmpq	%rbx, %rdi	 # __first, _1
	je	.L941	 #,
.L933:
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:1070: 	if (_M_pi != nullptr)
	movq	8(%rbx), %rsi	 # MEM[(struct _Sp_counted_base * *)__first_10 + 8B], _16
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:1070: 	if (_M_pi != nullptr)
	testq	%rsi, %rsi	 # _16
	je	.L930	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:337: 	  if (__atomic_load_n(__both_counts, __ATOMIC_ACQUIRE) == __unique_ref)
	movq	8(%rsi), %rdx	 #, _19
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:334: 	  auto __both_counts = reinterpret_cast<long long*>(&_M_use_count);
	leaq	8(%rsi), %rax	 #, __both_counts
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:337: 	  if (__atomic_load_n(__both_counts, __ATOMIC_ACQUIRE) == __unique_ref)
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:337: 	  if (__atomic_load_n(__both_counts, __ATOMIC_ACQUIRE) == __unique_ref)
	cmpq	%r12, %rdx	 # tmp104, _19
	jne	.L931	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:346: 	      _M_dispose();
	movq	(%rsi), %rax	 # _16->_vptr._Sp_counted_base, _16->_vptr._Sp_counted_base
	movq	%rsi, %rcx	 # _16,
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:343: 	      _M_weak_count = _M_use_count = 0;
	movq	$0, 8(%rsi)	 #, MEM <vector(2) int> [(int *)_16 + 8B]
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/stl_construct.h:162: 	  for (; __first != __last; ++__first)
	addq	$16, %rbx	 #, __first
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:346: 	      _M_dispose();
	call	*16(%rax)	 # MEM[(int (*) () *)_21 + 16B]
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:347: 	      _M_destroy();
	movq	(%rsi), %rax	 # _16->_vptr._Sp_counted_base, _16->_vptr._Sp_counted_base
	movq	%rsi, %rcx	 # _16,
	call	*24(%rax)	 # MEM[(int (*) () *)_23 + 24B]
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/stl_construct.h:162: 	  for (; __first != __last; ++__first)
	cmpq	%rbx, %rdi	 # __first, _1
	jne	.L933	 #,
	.p2align 4,,10
	.p2align 3
.L941:
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/stl_vector.h:367: 		      _M_impl._M_end_of_storage - _M_impl._M_start);
	movq	0(%rbp), %rbx	 # MEM[(struct _Vector_base *)this_3(D)]._M_impl.D.167883._M_start, __first
.L928:
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/stl_vector.h:386: 	if (__p)
	testq	%rbx, %rbx	 # __first
	je	.L939	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/stl_vector.h:367: 		      _M_impl._M_end_of_storage - _M_impl._M_start);
	movq	16(%rbp), %rdx	 # MEM[(struct _Vector_base *)this_3(D)]._M_impl.D.167883._M_end_of_storage, MEM[(struct _Vector_base *)this_3(D)]._M_impl.D.167883._M_end_of_storage
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/new_allocator.h:168: 	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
	movq	%rbx, %rcx	 # __first,
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/stl_vector.h:367: 		      _M_impl._M_end_of_storage - _M_impl._M_start);
	subq	%rbx, %rdx	 # __first, tmp102
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/stl_vector.h:733:       }
	addq	$32, %rsp	 #,
	popq	%rbx	 #
	popq	%rsi	 #
	popq	%rdi	 #
	popq	%rbp	 #
	popq	%r12	 #
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/new_allocator.h:168: 	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
	jmp	_ZdlPvy	 #
	.p2align 4,,10
	.p2align 3
.L939:
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/stl_vector.h:733:       }
	addq	$32, %rsp	 #,
	popq	%rbx	 #
	popq	%rsi	 #
	popq	%rdi	 #
	popq	%rbp	 #
	popq	%r12	 #
	ret	
	.p2align 4,,10
	.p2align 3
.L940:
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:353: 	      _M_release_last_use_cold();
	movq	%rsi, %rcx	 # _16,
	call	_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE24_M_release_last_use_coldEv	 #
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:354: 	      return;
	jmp	.L930	 #
	.seh_endproc
	.section	.text$_ZNSt11unique_lockISt5mutexED1Ev,"x"
	.linkonce discard
	.align 2
	.p2align 4
	.globl	_ZNSt11unique_lockISt5mutexED1Ev
	.def	_ZNSt11unique_lockISt5mutexED1Ev;	.scl	2;	.type	32;	.endef
	.seh_proc	_ZNSt11unique_lockISt5mutexED1Ev
_ZNSt11unique_lockISt5mutexED1Ev:
.LFB13545:
	subq	$40, %rsp	 #,
	.seh_stackalloc	40
	.seh_endprologue
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/unique_lock.h:105: 	if (_M_owns)
	cmpb	$0, 8(%rcx)	 #, this_4(D)->_M_owns
	jne	.L948	 #,
.L947:
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/unique_lock.h:107:       }
	addq	$40, %rsp	 #,
	ret	
	.p2align 4,,10
	.p2align 3
.L948:
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/unique_lock.h:198: 	else if (_M_device)
	movq	(%rcx), %rcx	 # this_4(D)->_M_device, _8
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/unique_lock.h:198: 	else if (_M_device)
	testq	%rcx, %rcx	 # _8
	je	.L947	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/x86_64-w64-mingw32/bits/gthr-default.h:779:     return __gthrw_(pthread_mutex_unlock) (__mutex);
	call	pthread_mutex_unlock	 #
	nop	
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/unique_lock.h:107:       }
	addq	$40, %rsp	 #,
	ret	
	.seh_handler	__gxx_personality_seh0, @unwind, @except
	.seh_handlerdata
.LLSDA13545:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE13545-.LLSDACSB13545
.LLSDACSB13545:
.LLSDACSE13545:
	.section	.text$_ZNSt11unique_lockISt5mutexED1Ev,"x"
	.linkonce discard
	.seh_endproc
	.section	.text$_ZNSt13__future_base13_State_baseV2D2Ev,"x"
	.linkonce discard
	.align 2
	.p2align 4
	.globl	_ZNSt13__future_base13_State_baseV2D2Ev
	.def	_ZNSt13__future_base13_State_baseV2D2Ev;	.scl	2;	.type	32;	.endef
	.seh_proc	_ZNSt13__future_base13_State_baseV2D2Ev
_ZNSt13__future_base13_State_baseV2D2Ev:
.LFB14607:
	pushq	%rbx	 #
	.seh_pushreg	%rbx
	subq	$32, %rsp	 #,
	.seh_stackalloc	32
	.seh_endprologue
 # C:/msys64/ucrt64/include/c++/13.1.0/future:344:       virtual ~_State_baseV2() = default;
	leaq	16+_ZTVNSt13__future_base13_State_baseV2E(%rip), %rax	 #, tmp99
	movq	%rax, (%rcx)	 # tmp99, this_2(D)->_vptr._State_baseV2
	movq	%rcx, %rbx	 # tmp97, this
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/atomic_futex.h:288:   class __atomic_futex_unsigned
	leaq	32(%rcx), %rcx	 #, tmp92
	call	_ZNSt18condition_variableD1Ev	 #
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_mutex.h:77:     ~__mutex_base() noexcept { __gthread_mutex_destroy(&_M_mutex); }
	leaq	24(%rbx), %rcx	 #, tmp93
 # C:/msys64/ucrt64/include/c++/13.1.0/x86_64-w64-mingw32/bits/gthr-default.h:740:     return __gthrw_(pthread_mutex_destroy) (__mutex);
	call	pthread_mutex_destroy	 #
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/unique_ptr.h:403: 	if (__ptr != nullptr)
	movq	8(%rbx), %rcx	 # MEM[(struct _Result_base * &)this_2(D) + 8], _5
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/unique_ptr.h:403: 	if (__ptr != nullptr)
	testq	%rcx, %rcx	 # _5
	je	.L955	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/future:229: 	void operator()(_Result_base* __fr) const { __fr->_M_destroy(); }
	movq	(%rcx), %rax	 # _5->_vptr._Result_base, _6
	leaq	_ZNSt13__future_base7_ResultIvE10_M_destroyEv(%rip), %r8	 #, tmp95
	movq	(%rax), %rdx	 # *_6, _7
	cmpq	%r8, %rdx	 # tmp95, _7
	jne	.L951	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/future:672:       void _M_destroy() { delete this; }
	movq	16(%rax), %rax	 # MEM[(int (*) () *)_6 + 16B], MEM[(int (*) () *)_6 + 16B]
 # C:/msys64/ucrt64/include/c++/13.1.0/future:344:       virtual ~_State_baseV2() = default;
	addq	$32, %rsp	 #,
	popq	%rbx	 #
 # C:/msys64/ucrt64/include/c++/13.1.0/future:672:       void _M_destroy() { delete this; }
	rex.W jmp	*%rax	 # MEM[(int (*) () *)_6 + 16B]
	.p2align 4,,10
	.p2align 3
.L951:
 # C:/msys64/ucrt64/include/c++/13.1.0/future:229: 	void operator()(_Result_base* __fr) const { __fr->_M_destroy(); }
	call	*%rdx	 # _7
	nop	
.L955:
 # C:/msys64/ucrt64/include/c++/13.1.0/future:344:       virtual ~_State_baseV2() = default;
	addq	$32, %rsp	 #,
	popq	%rbx	 #
	ret	
	.seh_handler	__gxx_personality_seh0, @unwind, @except
	.seh_handlerdata
.LLSDA14607:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE14607-.LLSDACSB14607
.LLSDACSB14607:
.LLSDACSE14607:
	.section	.text$_ZNSt13__future_base13_State_baseV2D2Ev,"x"
	.linkonce discard
	.seh_endproc
	.section	.text$_ZSt5asyncIRFviPK8BoidListPK7BoidMapEJRiPS0_PS3_EESt6futureINSt15__invoke_resultINSt5decayIT_E4typeEJDpNSD_IT0_E4typeEEE4typeEESt6launchOSE_DpOSH_,"x"
	.linkonce discard
	.p2align 4
	.globl	_ZSt5asyncIRFviPK8BoidListPK7BoidMapEJRiPS0_PS3_EESt6futureINSt15__invoke_resultINSt5decayIT_E4typeEJDpNSD_IT0_E4typeEEE4typeEESt6launchOSE_DpOSH_
	.def	_ZSt5asyncIRFviPK8BoidListPK7BoidMapEJRiPS0_PS3_EESt6futureINSt15__invoke_resultINSt5decayIT_E4typeEJDpNSD_IT0_E4typeEEE4typeEESt6launchOSE_DpOSH_;	.scl	2;	.type	32;	.endef
	.seh_proc	_ZSt5asyncIRFviPK8BoidListPK7BoidMapEJRiPS0_PS3_EESt6futureINSt15__invoke_resultINSt5decayIT_E4typeEJDpNSD_IT0_E4typeEEE4typeEESt6launchOSE_DpOSH_
_ZSt5asyncIRFviPK8BoidListPK7BoidMapEJRiPS0_PS3_EESt6futureINSt15__invoke_resultINSt5decayIT_E4typeEJDpNSD_IT0_E4typeEEE4typeEESt6launchOSE_DpOSH_:
.LFB13281:
	pushq	%r15	 #
	.seh_pushreg	%r15
	pushq	%r14	 #
	.seh_pushreg	%r14
	pushq	%r13	 #
	.seh_pushreg	%r13
	pushq	%r12	 #
	.seh_pushreg	%r12
	pushq	%rbp	 #
	.seh_pushreg	%rbp
	pushq	%rdi	 #
	.seh_pushreg	%rdi
	pushq	%rsi	 #
	.seh_pushreg	%rsi
	pushq	%rbx	 #
	.seh_pushreg	%rbx
	subq	$88, %rsp	 #,
	.seh_stackalloc	88
	.seh_endprologue
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1794:     async(launch __policy, _Fn&& __fn, _Args&&... __args)
	movq	192(%rsp), %r13	 # __args#1, __args#1
	movq	%rcx, %rsi	 # tmp226, <retval>
	movl	%edx, %edi	 # tmp227, __policy
	movq	%r8, %rbp	 # tmp228, __fn
	movq	%r9, %r12	 # tmp229, __args#0
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1801:       if ((__policy & launch::async) == launch::async)
	testb	$1, %dl	 #, __policy
	jne	.L1015	 #,
.L957:
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/new_allocator.h:147: 	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
	movl	$104, %ecx	 #,
.LEHB46:
	call	_Znwy	 #
.LEHE46:
 # C:/msys64/ucrt64/include/c++/13.1.0/x86_64-w64-mingw32/bits/gthr-default.h:733:     __gthrw_(pthread_mutex_init) (__mutex, NULL);
	xorl	%edx, %edx	 #
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/new_allocator.h:147: 	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
	movq	%rax, %rbx	 # tmp241, __state$8$_M_pi
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:130:       : _M_use_count(1), _M_weak_count(1) { }
	movq	.LC23(%rip), %rax	 #, tmp190
 # C:/msys64/ucrt64/include/c++/13.1.0/tuple:191:       : _M_head_impl() { }
	movq	$0, 24(%rbx)	 #, MEM[(struct _Head_base *)_103 + 24B]._M_head_impl
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_mutex.h:74:       __GTHREAD_MUTEX_INIT_FUNCTION(&_M_mutex);
	leaq	40(%rbx), %rcx	 #, tmp193
 # C:/msys64/ucrt64/include/c++/13.1.0/ext/aligned_buffer.h:106:         return static_cast<void*>(&_M_storage);
	leaq	16(%rbx), %r14	 #, _98
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:130:       : _M_use_count(1), _M_weak_count(1) { }
	movq	%rax, 8(%rbx)	 # tmp190, MEM <vector(2) int> [(int *)_103 + 8B]
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:600: 	: _M_impl(__a)
	leaq	16+_ZTVSt23_Sp_counted_ptr_inplaceINSt13__future_base15_Deferred_stateINSt6thread8_InvokerISt5tupleIJPFviPK8BoidListPK7BoidMapEiPS5_PS8_EEEEvEESaIvELN9__gnu_cxx12_Lock_policyE2EE(%rip), %rax	 #, tmp261
	movq	%rax, (%rbx)	 # tmp261, *_103.D.209604._vptr._Sp_counted_base
 # C:/msys64/ucrt64/include/c++/13.1.0/future:340:       _State_baseV2() noexcept : _M_result(), _M_status(_Status::__not_ready)
	leaq	16+_ZTVNSt13__future_base13_State_baseV2E(%rip), %rax	 #, tmp262
	movq	%rax, 16(%rbx)	 # tmp262, MEM[(struct _State_baseV2 *)_103 + 16B]._vptr._State_baseV2
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/atomic_futex.h:298:     __atomic_futex_unsigned(unsigned __data) : _M_data(__data)
	movl	$0, 32(%rbx)	 #, MEM[(struct __atomic_futex_unsigned *)_103 + 32B]._M_data
 # C:/msys64/ucrt64/include/c++/13.1.0/x86_64-w64-mingw32/bits/gthr-default.h:733:     __gthrw_(pthread_mutex_init) (__mutex, NULL);
	call	pthread_mutex_init	 #
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/atomic_futex.h:298:     __atomic_futex_unsigned(unsigned __data) : _M_data(__data)
	leaq	48(%rbx), %rcx	 #, tmp195
	call	_ZNSt18condition_variableC1Ev	 #
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1687: 	  _M_fn(std::forward<_Args>(__args)...)
	leaq	16+_ZTVNSt13__future_base15_Deferred_stateINSt6thread8_InvokerISt5tupleIJPFviPK8BoidListPK7BoidMapEiPS4_PS7_EEEEvEE(%rip), %rax	 #, tmp263
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/atomic_base.h:222:       : __atomic_flag_base{ _S_init(__i) }
	movb	$0, 56(%rbx)	 #, MEM[(struct atomic_flag *)_103 + 56B].D.132351._M_i
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1686: 	: _M_result(new _Result<_Res>()),
	movl	$16, %ecx	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/mutex:800:     constexpr once_flag() noexcept = default;
	movl	$0, 60(%rbx)	 #, MEM[(struct once_flag *)_103 + 60B]._M_once
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1687: 	  _M_fn(std::forward<_Args>(__args)...)
	movq	%rax, 16(%rbx)	 # tmp263, MEM[(struct _Deferred_state *)_103 + 16B].D.191400._vptr._State_baseV2
.LEHB47:
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1686: 	: _M_result(new _Result<_Res>()),
	call	_Znwy	 #
.LEHE47:
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1686: 	: _M_result(new _Result<_Res>()),
	vpxor	%xmm0, %xmm0, %xmm0	 # tmp198
 # C:/msys64/ucrt64/include/c++/13.1.0/future:667:     struct __future_base::_Result<void> : __future_base::_Result_base
	movq	%rax, %rcx	 # _105,
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1686: 	: _M_result(new _Result<_Res>()),
	movq	%rax, %rdi	 # tmp242, _105
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1686: 	: _M_result(new _Result<_Res>()),
	vmovdqu	%xmm0, (%rax)	 # tmp198, MEM <vector(2) long long unsigned int> [(void *)_105]
.LEHB48:
 # C:/msys64/ucrt64/include/c++/13.1.0/future:667:     struct __future_base::_Result<void> : __future_base::_Result_base
	call	_ZNSt13__future_base12_Result_baseC2Ev	 #
.LEHE48:
 # C:/msys64/ucrt64/include/c++/13.1.0/future:667:     struct __future_base::_Result<void> : __future_base::_Result_base
	leaq	16+_ZTVNSt13__future_base7_ResultIvEE(%rip), %rax	 #, tmp264
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/unique_ptr.h:176:       __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
	vmovq	%rdi, %xmm2	 # _105, _105
 # C:/msys64/ucrt64/include/c++/13.1.0/tuple:194:       : _M_head_impl(__h) { }
	movq	%rbp, 96(%rbx)	 # __fn, MEM[(struct _Head_base *)_103 + 96B]._M_head_impl
 # C:/msys64/ucrt64/include/c++/13.1.0/future:667:     struct __future_base::_Result<void> : __future_base::_Result_base
	movq	%rax, (%rdi)	 # tmp264, MEM[(struct _Result *)_105].D.147292._vptr._Result_base
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/unique_ptr.h:176:       __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
	movq	200(%rsp), %rax	 # __args#2, tmp265
	vpinsrq	$1, (%rax), %xmm2, %xmm0	 # *__args#2_11(D), _105, tmp200
 # C:/msys64/ucrt64/include/c++/13.1.0/tuple:201: 	: _M_head_impl(std::forward<_UHead>(__h)) { }
	movq	0(%r13), %rax	 # *__args#1_10(D), *__args#1_10(D)
	movq	%rax, 80(%rbx)	 # *__args#1_10(D), MEM[(struct _Head_base *)_103 + 80B]._M_head_impl
	movl	(%r12), %eax	 # MEM[(type &)__args#0_9(D)], MEM[(type &)__args#0_9(D)]
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/unique_ptr.h:176:       __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
	vmovdqu	%xmm0, 64(%rbx)	 # tmp200, MEM <vector(2) long long unsigned int> [(void *)_103 + 64B]
 # C:/msys64/ucrt64/include/c++/13.1.0/tuple:201: 	: _M_head_impl(std::forward<_UHead>(__h)) { }
	movl	%eax, 88(%rbx)	 # MEM[(type &)__args#0_9(D)], MEM[(struct _Head_base *)_103 + 88B]._M_head_impl
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:1522:       __shared_ptr(const __shared_ptr&) noexcept = default;
	movq	%r14, (%rsi)	 # _98,* <retval>
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:1075:       : _M_pi(__r._M_pi)
	movq	%rbx, 8(%rsi)	 # __state$8$_M_pi,
.L964:
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:152:       { __gnu_cxx::__atomic_add_dispatch(&_M_use_count, 1); }
	leaq	8(%rbx), %rcx	 #, _122
 # C:/msys64/ucrt64/include/c++/13.1.0/ext/atomicity.h:71:   { __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
	lock addl	$1, 8(%rbx)	 #,,
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:1670:       { return _M_ptr != nullptr; }
	movq	(%rsi), %rdx	 # MEM[(const struct __shared_ptr *)_23(D)]._M_ptr, _123
 # C:/msys64/ucrt64/include/c++/13.1.0/future:580:           if (!static_cast<bool>(__p))
	testq	%rdx, %rdx	 # _123
	je	.L1016	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/atomic_base.h:228:       return __atomic_test_and_set (&_M_i, int(__m));
	movl	$1, %eax	 #, tmp210
	xchgb	40(%rdx), %al	 #,, _126
 # C:/msys64/ucrt64/include/c++/13.1.0/future:481: 	if (_M_retrieved.test_and_set())
	testb	%al, %al	 # _126
	jne	.L1017	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:337: 	  if (__atomic_load_n(__both_counts, __ATOMIC_ACQUIRE) == __unique_ref)
	movabsq	$4294967297, %rax	 #, tmp215
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:337: 	  if (__atomic_load_n(__both_counts, __ATOMIC_ACQUIRE) == __unique_ref)
	movq	(%rcx), %rdx	 #* _122, _128
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:337: 	  if (__atomic_load_n(__both_counts, __ATOMIC_ACQUIRE) == __unique_ref)
	cmpq	%rax, %rdx	 # tmp215, _128
	je	.L1018	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/ext/atomicity.h:66:   { return __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
	lock subl	$1, (%rcx)	 #,,* _122
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:350: 	  if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
	je	.L1019	 #,
.L956:
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1823:     }
	movq	%rsi, %rax	 # <retval>,
	addq	$88, %rsp	 #,
	popq	%rbx	 #
	popq	%rsi	 #
	popq	%rdi	 #
	popq	%rbp	 #
	popq	%r12	 #
	popq	%r13	 #
	popq	%r14	 #
	popq	%r15	 #
	ret	
	.p2align 4,,10
	.p2align 3
.L1015:
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/new_allocator.h:147: 	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
	movl	$120, %ecx	 #,
.LEHB49:
	call	_Znwy	 #
.LEHE49:
	movq	%rax, %rbx	 # tmp230, __state$8$_M_pi
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:130:       : _M_use_count(1), _M_weak_count(1) { }
	movq	.LC23(%rip), %rax	 #, tmp148
 # C:/msys64/ucrt64/include/c++/13.1.0/x86_64-w64-mingw32/bits/gthr-default.h:733:     __gthrw_(pthread_mutex_init) (__mutex, NULL);
	xorl	%edx, %edx	 #
 # C:/msys64/ucrt64/include/c++/13.1.0/tuple:191:       : _M_head_impl() { }
	movq	$0, 24(%rbx)	 #, MEM[(struct _Head_base *)_74 + 24B]._M_head_impl
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_mutex.h:74:       __GTHREAD_MUTEX_INIT_FUNCTION(&_M_mutex);
	leaq	40(%rbx), %rcx	 #, tmp151
 # C:/msys64/ucrt64/include/c++/13.1.0/ext/aligned_buffer.h:106:         return static_cast<void*>(&_M_storage);
	leaq	16(%rbx), %r14	 #, _69
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:130:       : _M_use_count(1), _M_weak_count(1) { }
	movq	%rax, 8(%rbx)	 # tmp148, MEM <vector(2) int> [(int *)_74 + 8B]
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:600: 	: _M_impl(__a)
	leaq	16+_ZTVSt23_Sp_counted_ptr_inplaceINSt13__future_base17_Async_state_implINSt6thread8_InvokerISt5tupleIJPFviPK8BoidListPK7BoidMapEiPS5_PS8_EEEEvEESaIvELN9__gnu_cxx12_Lock_policyE2EE(%rip), %rax	 #, tmp253
	movq	%rax, (%rbx)	 # tmp253, *_74.D.208945._vptr._Sp_counted_base
 # C:/msys64/ucrt64/include/c++/13.1.0/future:340:       _State_baseV2() noexcept : _M_result(), _M_status(_Status::__not_ready)
	leaq	16+_ZTVNSt13__future_base13_State_baseV2E(%rip), %rax	 #, tmp254
	movq	%rax, 16(%rbx)	 # tmp254, MEM[(struct _State_baseV2 *)_74 + 16B]._vptr._State_baseV2
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/atomic_futex.h:298:     __atomic_futex_unsigned(unsigned __data) : _M_data(__data)
	movl	$0, 32(%rbx)	 #, MEM[(struct __atomic_futex_unsigned *)_74 + 32B]._M_data
 # C:/msys64/ucrt64/include/c++/13.1.0/x86_64-w64-mingw32/bits/gthr-default.h:733:     __gthrw_(pthread_mutex_init) (__mutex, NULL);
	call	pthread_mutex_init	 #
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/atomic_futex.h:298:     __atomic_futex_unsigned(unsigned __data) : _M_data(__data)
	leaq	48(%rbx), %rcx	 #, tmp153
	call	_ZNSt18condition_variableC1Ev	 #
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1754: 	  _M_fn(std::forward<_Args>(__args)...)
	leaq	16+_ZTVNSt13__future_base17_Async_state_implINSt6thread8_InvokerISt5tupleIJPFviPK8BoidListPK7BoidMapEiPS4_PS7_EEEEvEE(%rip), %rax	 #, tmp255
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/atomic_base.h:222:       : __atomic_flag_base{ _S_init(__i) }
	movb	$0, 56(%rbx)	 #, MEM[(struct atomic_flag *)_74 + 56B].D.132351._M_i
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1753: 	: _M_result(new _Result<_Res>()),
	movl	$16, %ecx	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/mutex:800:     constexpr once_flag() noexcept = default;
	movq	$0, 60(%rbx)	 #, MEM <unsigned long long> [(void *)_74 + 60B]
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_thread.h:97:       id() noexcept : _M_thread() { }
	movq	$0, 68(%rbx)	 #, MEM <unsigned long long> [(void *)_74 + 68B]
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1754: 	  _M_fn(std::forward<_Args>(__args)...)
	movq	%rax, 16(%rbx)	 # tmp255, MEM[(struct _Async_state_impl *)_74 + 16B].D.190164.D.152781._vptr._State_baseV2
.LEHB50:
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1753: 	: _M_result(new _Result<_Res>()),
	call	_Znwy	 #
.LEHE50:
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1753: 	: _M_result(new _Result<_Res>()),
	vpxor	%xmm0, %xmm0, %xmm0	 # tmp156
 # C:/msys64/ucrt64/include/c++/13.1.0/future:667:     struct __future_base::_Result<void> : __future_base::_Result_base
	movq	%rax, %rcx	 # _76,
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1753: 	: _M_result(new _Result<_Res>()),
	movq	%rax, %r15	 # tmp231, _76
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1753: 	: _M_result(new _Result<_Res>()),
	vmovdqu	%xmm0, (%rax)	 # tmp156, MEM <vector(2) long long unsigned int> [(void *)_76]
.LEHB51:
 # C:/msys64/ucrt64/include/c++/13.1.0/future:667:     struct __future_base::_Result<void> : __future_base::_Result_base
	call	_ZNSt13__future_base12_Result_baseC2Ev	 #
.LEHE51:
 # C:/msys64/ucrt64/include/c++/13.1.0/future:667:     struct __future_base::_Result<void> : __future_base::_Result_base
	leaq	16+_ZTVNSt13__future_base7_ResultIvEE(%rip), %rax	 #, tmp256
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/unique_ptr.h:176:       __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
	vmovq	%r15, %xmm1	 # _76, _76
 # C:/msys64/ucrt64/include/c++/13.1.0/tuple:194:       : _M_head_impl(__h) { }
	movq	%rbp, 112(%rbx)	 # __fn, MEM[(struct _Head_base *)_74 + 112B]._M_head_impl
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_thread.h:164: 	_M_start_thread(_State_ptr(new _State_impl<_Wrapper>(
	movl	$32, %ecx	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/future:667:     struct __future_base::_Result<void> : __future_base::_Result_base
	movq	%rax, (%r15)	 # tmp256, MEM[(struct _Result *)_76].D.147292._vptr._Result_base
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/unique_ptr.h:176:       __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
	movq	200(%rsp), %rax	 # __args#2, tmp257
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_thread.h:97:       id() noexcept : _M_thread() { }
	movq	$0, 56(%rsp)	 #, MEM[(struct id *)&D.233870]._M_thread
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/unique_ptr.h:176:       __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
	vpinsrq	$1, (%rax), %xmm1, %xmm0	 # *__args#2_11(D), _76, tmp158
 # C:/msys64/ucrt64/include/c++/13.1.0/tuple:201: 	: _M_head_impl(std::forward<_UHead>(__h)) { }
	movq	0(%r13), %rax	 # *__args#1_10(D), *__args#1_10(D)
	movq	%rax, 96(%rbx)	 # *__args#1_10(D), MEM[(struct _Head_base *)_74 + 96B]._M_head_impl
	movl	(%r12), %eax	 # MEM[(type &)__args#0_9(D)], MEM[(type &)__args#0_9(D)]
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/unique_ptr.h:176:       __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
	vmovdqu	%xmm0, 80(%rbx)	 # tmp158, MEM <vector(2) long long unsigned int> [(void *)_74 + 80B]
 # C:/msys64/ucrt64/include/c++/13.1.0/tuple:201: 	: _M_head_impl(std::forward<_UHead>(__h)) { }
	movl	%eax, 104(%rbx)	 # MEM[(type &)__args#0_9(D)], MEM[(struct _Head_base *)_74 + 104B]._M_head_impl
.LEHB52:
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_thread.h:164: 	_M_start_thread(_State_ptr(new _State_impl<_Wrapper>(
	call	_Znwy	 #
.LEHE52:
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_thread.h:240: 	  : _M_func(std::forward<_Args>(__args)...)
	leaq	16+_ZTVNSt6thread11_State_implINS_8_InvokerISt5tupleIJMNSt13__future_base17_Async_state_implINS1_IS2_IJPFviPK8BoidListPK7BoidMapEiPS5_PS8_EEEEvEEFvvEPSH_EEEEEE(%rip), %rdx	 #, tmp259
 # C:/msys64/ucrt64/include/c++/13.1.0/tuple:201: 	: _M_head_impl(std::forward<_UHead>(__h)) { }
	movq	%r14, 8(%rax)	 # _69, MEM[(struct _Head_base *)_88 + 8B]._M_head_impl
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_thread.h:164: 	_M_start_thread(_State_ptr(new _State_impl<_Wrapper>(
	leaq	56(%rsp), %rcx	 #, tmp167
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_thread.h:240: 	  : _M_func(std::forward<_Args>(__args)...)
	movq	%rdx, (%rax)	 # tmp259, MEM[(struct _State_impl *)_88].D.216239._vptr._State
 # C:/msys64/ucrt64/include/c++/13.1.0/tuple:201: 	: _M_head_impl(std::forward<_UHead>(__h)) { }
	leaq	_ZNSt13__future_base17_Async_state_implINSt6thread8_InvokerISt5tupleIJPFviPK8BoidListPK7BoidMapEiPS4_PS7_EEEEvE6_M_runEv(%rip), %rdx	 #, tmp165
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_thread.h:164: 	_M_start_thread(_State_ptr(new _State_impl<_Wrapper>(
	leaq	_ZNSt6thread24_M_thread_deps_never_runEv(%rip), %r8	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/tuple:201: 	: _M_head_impl(std::forward<_UHead>(__h)) { }
	movq	%rdx, 16(%rax)	 # tmp165, MEM[(struct _Head_base *)_88 + 16B]._M_head_impl.__pfn
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_thread.h:164: 	_M_start_thread(_State_ptr(new _State_impl<_Wrapper>(
	leaq	64(%rsp), %rdx	 #, tmp166
 # C:/msys64/ucrt64/include/c++/13.1.0/tuple:201: 	: _M_head_impl(std::forward<_UHead>(__h)) { }
	movq	$0, 24(%rax)	 #, MEM[(struct _Head_base *)_88 + 16B]._M_head_impl.__delta
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/unique_ptr.h:176:       __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
	movq	%rax, 64(%rsp)	 # tmp162, MEM[(struct _State * &)_12]
.LEHB53:
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_thread.h:164: 	_M_start_thread(_State_ptr(new _State_impl<_Wrapper>(
	call	_ZNSt6thread15_M_start_threadESt10unique_ptrINS_6_StateESt14default_deleteIS1_EEPFvvE	 #
.LEHE53:
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/unique_ptr.h:403: 	if (__ptr != nullptr)
	movq	64(%rsp), %rcx	 # MEM[(struct _State * &)_12], _90
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/unique_ptr.h:403: 	if (__ptr != nullptr)
	testq	%rcx, %rcx	 # _90
	je	.L958	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/unique_ptr.h:99: 	delete __ptr;
	movq	(%rcx), %rax	 # _90->_vptr._State, _90->_vptr._State
	call	*8(%rax)	 # MEM[(int (*) () *)_91 + 8B]
.L958:
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_thread.h:185:       if (joinable())
	cmpq	$0, 64(%rbx)	 #, MEM[(const struct thread *)_74 + 64B]._M_id._M_thread
	jne	.L959	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/move.h:205:       __a = _GLIBCXX_MOVE(__b);
	movq	56(%rsp), %rax	 # MEM[(struct id &)&D.233870], MEM[(struct id &)&D.233870]
	movq	%rax, 64(%rbx)	 # MEM[(struct id &)&D.233870], MEM[(struct id *)_74 + 64B]
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:1522:       __shared_ptr(const __shared_ptr&) noexcept = default;
	movq	%r14, (%rsi)	 # _69,* <retval>
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:1075:       : _M_pi(__r._M_pi)
	movq	%rbx, 8(%rsi)	 # __state$8$_M_pi,
	jmp	.L964	 #
	.p2align 4,,10
	.p2align 3
.L1018:
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:346: 	      _M_dispose();
	movq	(%rbx), %rax	 # __state$8$_M_pi_278->_vptr._Sp_counted_base, __state$8$_M_pi_278->_vptr._Sp_counted_base
	movq	%rbx, %rcx	 # __state$8$_M_pi,
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:343: 	      _M_weak_count = _M_use_count = 0;
	movq	$0, 8(%rbx)	 #, MEM <vector(2) int> [(int *)__state$8$_M_pi_278 + 8B]
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:346: 	      _M_dispose();
	call	*16(%rax)	 # MEM[(int (*) () *)_130 + 16B]
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:347: 	      _M_destroy();
	movq	(%rbx), %rax	 # __state$8$_M_pi_278->_vptr._Sp_counted_base, __state$8$_M_pi_278->_vptr._Sp_counted_base
	movq	%rbx, %rcx	 # __state$8$_M_pi,
	call	*24(%rax)	 # MEM[(int (*) () *)_132 + 24B]
	jmp	.L956	 #
	.p2align 4,,10
	.p2align 3
.L1019:
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:353: 	      _M_release_last_use_cold();
	movq	%rbx, %rcx	 # __state$8$_M_pi,
	call	_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE24_M_release_last_use_coldEv	 #
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1822:       return future<__async_result_of<_Fn, _Args...>>(std::move(__state));
	jmp	.L956	 #
.L1017:
 # C:/msys64/ucrt64/include/c++/13.1.0/future:482: 	  __throw_future_error(int(future_errc::future_already_retrieved));
	movl	$1, %ecx	 #,
.LEHB54:
	call	_ZSt20__throw_future_errori	 #
.L1016:
 # C:/msys64/ucrt64/include/c++/13.1.0/future:581:             __throw_future_error((int)future_errc::no_state);
	movl	$3, %ecx	 #,
	call	_ZSt20__throw_future_errori	 #
.LEHE54:
.L983:
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1718:     ~_Async_state_commonV2() = default;
	movq	%rax, %r15	 # tmp239, tmp178
	movq	%rdx, %rax	 # tmp240, tmp180
	vzeroupper
.L966:
	leaq	16+_ZTVNSt13__future_base21_Async_state_commonV2E(%rip), %rdx	 #, tmp260
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_thread.h:172:       if (joinable())
	cmpq	$0, 64(%rbx)	 #, MEM[(const struct thread *)_74 + 64B]._M_id._M_thread
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1718:     ~_Async_state_commonV2() = default;
	movq	%rdx, 16(%rbx)	 # tmp260, MEM[(struct _Async_state_commonV2 *)_74 + 16B].D.152781._vptr._State_baseV2
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_thread.h:172:       if (joinable())
	je	.L1020	 #,
.L959:
 # C:/msys64/ucrt64/include/c++/13.1.0/x86_64-w64-mingw32/bits/c++config.h:322:     terminate();
	call	_ZSt9terminatev	 #
.L989:
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:1070: 	if (_M_pi != nullptr)
	movq	8(%rsi), %rcx	 # MEM[(struct __shared_count *)_23(D) + 8B]._M_pi, _124
	movq	%rax, %rdi	 # tmp245, tmp212
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:1070: 	if (_M_pi != nullptr)
	testq	%rcx, %rcx	 # _124
	jne	.L1021	 #,
	vzeroupper
.L974:
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:1071: 	  _M_pi->_M_release();
	movq	%rbx, %rcx	 # __state$8$_M_pi,
	call	_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE10_M_releaseEv	 #
	movq	%rdi, %rcx	 # tmp212,
.LEHB55:
	call	_Unwind_Resume	 #
.LEHE55:
.L986:
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/unique_ptr.h:403: 	if (__ptr != nullptr)
	movq	64(%rsp), %rcx	 # MEM[(struct _State * &)_12], _93
	movq	%rdx, 32(%rsp)	 # tmp234, %sfp
	movq	%rax, %r15	 # tmp233, tmp174
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/unique_ptr.h:403: 	if (__ptr != nullptr)
	testq	%rcx, %rcx	 # _93
	jne	.L1022	 #,
	vzeroupper
.L962:
	movq	32(%rsp), %rax	 # %sfp, tmp175
	jmp	.L963	 #
.L1021:
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:1071: 	  _M_pi->_M_release();
	vzeroupper
	call	_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE10_M_releaseEv	 #
	jmp	.L974	 #
.L985:
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1753: 	: _M_result(new _Result<_Res>()),
	movq	%rax, 32(%rsp)	 # tmp235, %sfp
	movq	%r15, %rcx	 # _76,
	movq	%rdx, 40(%rsp)	 # tmp236, %sfp
	movl	$16, %edx	 #,
	vzeroupper
	call	_ZdlPvy	 #
	movq	32(%rsp), %r15	 # %sfp, tmp178
	movq	40(%rsp), %rax	 # %sfp, tmp180
	jmp	.L966	 #
.L984:
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/unique_ptr.h:403: 	if (__ptr != nullptr)
	movq	%rax, %r15	 # tmp237, tmp173
	movq	%rdx, %rax	 # tmp238, tmp175
	vzeroupper
.L963:
	movq	80(%rbx), %rcx	 # MEM[(struct _Result * &)_74 + 80], _82
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/unique_ptr.h:403: 	if (__ptr != nullptr)
	testq	%rcx, %rcx	 # _82
	je	.L966	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/future:229: 	void operator()(_Result_base* __fr) const { __fr->_M_destroy(); }
	movq	(%rcx), %rdx	 # MEM[(struct _Result_base *)_82]._vptr._Result_base, MEM[(struct _Result_base *)_82]._vptr._Result_base
	movq	%rax, 32(%rsp)	 # tmp175, %sfp
	call	*(%rdx)	 # *_83
	movq	32(%rsp), %rax	 # %sfp, tmp175
 # C:/msys64/ucrt64/include/c++/13.1.0/future:229: 	void operator()(_Result_base* __fr) const { __fr->_M_destroy(); }
	jmp	.L966	 #
.L1020:
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1718:     ~_Async_state_commonV2() = default;
	movq	%r14, %rcx	 # _69,
	movq	%rax, 32(%rsp)	 # tmp180, %sfp
	call	_ZNSt13__future_base13_State_baseV2D2Ev	 #
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/new_allocator.h:168: 	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
	movq	%rbx, %rcx	 # __state$8$_M_pi,
	movl	$120, %edx	 #,
	call	_ZdlPvy	 #
	movq	32(%rsp), %rax	 # %sfp, tmp180
	movq	%r15, %rcx	 # tmp178, tmp187
.L968:
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1809: 	  catch(const system_error& __e)
	subq	$1, %rax	 #, tmp188
	jne	.L1014	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1809: 	  catch(const system_error& __e)
	call	__cxa_begin_catch	 #
	movq	%rax, %rbx	 # tmp248, _15
 # C:/msys64/ucrt64/include/c++/13.1.0/system_error:436:   { return error_condition(static_cast<int>(__e), generic_category()); }
	call	_ZNSt3_V216generic_categoryEv	 #
 # C:/msys64/ucrt64/include/c++/13.1.0/system_error:531:   { return !(__lhs == __rhs); }
	leaq	64(%rsp), %rdx	 #, tmp222
 # C:/msys64/ucrt64/include/c++/13.1.0/system_error:590:     code() const noexcept { return _M_code; }
	leaq	16(%rbx), %rcx	 #, tmp223
 # C:/msys64/ucrt64/include/c++/13.1.0/system_error:375: 	*this = make_error_condition(__e);
	movl	$11, 64(%rsp)	 #, MEM[(struct error_condition *)_12]._M_value
	movq	%rax, 72(%rsp)	 # tmp249, MEM[(struct error_condition *)_12]._M_cat
 # C:/msys64/ucrt64/include/c++/13.1.0/system_error:531:   { return !(__lhs == __rhs); }
	call	_ZSteqRKSt10error_codeRKSt15error_condition	 #
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1812: 		  || (__policy & launch::deferred) != launch::deferred)
	testb	%al, %al	 # tmp250
	jne	.L1023	 #,
.L978:
.LEHB56:
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1813: 		throw;
	call	__cxa_rethrow	 #
.LEHE56:
.L987:
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1688: 	{ }
	movq	%rax, %rsi	 # tmp244, tmp204
	vzeroupper
.L970:
	movq	%r14, %rcx	 # _98,
	call	_ZNSt13__future_base13_State_baseV2D2Ev	 #
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/new_allocator.h:168: 	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
	movq	%rbx, %rcx	 # __state$8$_M_pi,
	movl	$104, %edx	 #,
	call	_ZdlPvy	 #
	movq	%rsi, %rcx	 # tmp204,
.LEHB57:
	call	_Unwind_Resume	 #
.L988:
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1686: 	: _M_result(new _Result<_Res>()),
	movl	$16, %edx	 #,
	movq	%rdi, %rcx	 # _105,
	movq	%rax, %rsi	 # tmp243, tmp205
	vzeroupper
	call	_ZdlPvy	 #
	jmp	.L970	 #
.L981:
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1809: 	  catch(const system_error& __e)
	movq	%rax, %rcx	 # tmp246, tmp187
	movq	%rdx, %rax	 # tmp247, tmp188
	vzeroupper
	jmp	.L968	 #
.L1022:
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/unique_ptr.h:99: 	delete __ptr;
	movq	(%rcx), %rax	 # _93->_vptr._State, _93->_vptr._State
	vzeroupper
	call	*8(%rax)	 # MEM[(int (*) () *)_94 + 8B]
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/unique_ptr.h:100:       }
	jmp	.L962	 #
.L982:
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1809: 	  catch(const system_error& __e)
	movq	%rax, %rbx	 # tmp251, tmp225
	vzeroupper
	call	__cxa_end_catch	 #
	movq	%rbx, %rcx	 # tmp225,
.L1014:
	call	_Unwind_Resume	 #
.LEHE57:
.L1023:
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1812: 		  || (__policy & launch::deferred) != launch::deferred)
	andb	$2, %dil	 #, __policy
	je	.L978	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1809: 	  catch(const system_error& __e)
	call	__cxa_end_catch	 #
	jmp	.L957	 #
	.seh_handler	__gxx_personality_seh0, @unwind, @except
	.seh_handlerdata
	.align 4
.LLSDA13281:
	.byte	0xff
	.byte	0x9b
	.uleb128 .LLSDATT13281-.LLSDATTD13281
.LLSDATTD13281:
	.byte	0x1
	.uleb128 .LLSDACSE13281-.LLSDACSB13281
.LLSDACSB13281:
	.uleb128 .LEHB46-.LFB13281
	.uleb128 .LEHE46-.LEHB46
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB47-.LFB13281
	.uleb128 .LEHE47-.LEHB47
	.uleb128 .L987-.LFB13281
	.uleb128 0
	.uleb128 .LEHB48-.LFB13281
	.uleb128 .LEHE48-.LEHB48
	.uleb128 .L988-.LFB13281
	.uleb128 0
	.uleb128 .LEHB49-.LFB13281
	.uleb128 .LEHE49-.LEHB49
	.uleb128 .L981-.LFB13281
	.uleb128 0x3
	.uleb128 .LEHB50-.LFB13281
	.uleb128 .LEHE50-.LEHB50
	.uleb128 .L983-.LFB13281
	.uleb128 0x3
	.uleb128 .LEHB51-.LFB13281
	.uleb128 .LEHE51-.LEHB51
	.uleb128 .L985-.LFB13281
	.uleb128 0x3
	.uleb128 .LEHB52-.LFB13281
	.uleb128 .LEHE52-.LEHB52
	.uleb128 .L984-.LFB13281
	.uleb128 0x3
	.uleb128 .LEHB53-.LFB13281
	.uleb128 .LEHE53-.LEHB53
	.uleb128 .L986-.LFB13281
	.uleb128 0x3
	.uleb128 .LEHB54-.LFB13281
	.uleb128 .LEHE54-.LEHB54
	.uleb128 .L989-.LFB13281
	.uleb128 0
	.uleb128 .LEHB55-.LFB13281
	.uleb128 .LEHE55-.LEHB55
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB56-.LFB13281
	.uleb128 .LEHE56-.LEHB56
	.uleb128 .L982-.LFB13281
	.uleb128 0
	.uleb128 .LEHB57-.LFB13281
	.uleb128 .LEHE57-.LEHB57
	.uleb128 0
	.uleb128 0
.LLSDACSE13281:
	.byte	0
	.byte	0
	.byte	0x1
	.byte	0x7d
	.align 4
	.long	.LDFCM1-.
.LLSDATT13281:
	.section	.text$_ZSt5asyncIRFviPK8BoidListPK7BoidMapEJRiPS0_PS3_EESt6futureINSt15__invoke_resultINSt5decayIT_E4typeEJDpNSD_IT0_E4typeEEE4typeEESt6launchOSE_DpOSH_,"x"
	.linkonce discard
	.seh_endproc
	.text
	.p2align 4
	.globl	_Z12populate_mapR8BoidListR7BoidMap
	.def	_Z12populate_mapR8BoidListR7BoidMap;	.scl	2;	.type	32;	.endef
	.seh_proc	_Z12populate_mapR8BoidListR7BoidMap
_Z12populate_mapR8BoidListR7BoidMap:
.LFB12589:
	pushq	%r15	 #
	.seh_pushreg	%r15
	pushq	%r14	 #
	.seh_pushreg	%r14
	pushq	%r13	 #
	.seh_pushreg	%r13
	pushq	%r12	 #
	.seh_pushreg	%r12
	pushq	%rbp	 #
	.seh_pushreg	%rbp
	pushq	%rdi	 #
	.seh_pushreg	%rdi
	pushq	%rsi	 #
	.seh_pushreg	%rsi
	pushq	%rbx	 #
	.seh_pushreg	%rbx
	subq	$168, %rsp	 #,
	.seh_stackalloc	168
	vmovups	%xmm6, 144(%rsp)	 #,
	.seh_savexmm	%xmm6, 144
	.seh_endprologue
 # .\src\main.cpp:250:     memset(boid_map.m_boid_map, -1, sizeof(Boid) * boid_map.m_xsize * boid_map.m_ysize);
	movslq	4(%rdx), %rax	 # boid_map_35(D)->m_xsize, boid_map_35(D)->m_xsize
 # .\src\main.cpp:248: void populate_map(BoidList& boid_list, BoidMap& boid_map) {
	movq	%rdx, %rbp	 # tmp260, boid_map
 # .\src\main.cpp:250:     memset(boid_map.m_boid_map, -1, sizeof(Boid) * boid_map.m_xsize * boid_map.m_ysize);
	movslq	(%rdx), %rdx	 # boid_map_35(D)->m_ysize, boid_map_35(D)->m_ysize
 # .\src\main.cpp:248: void populate_map(BoidList& boid_list, BoidMap& boid_map) {
	movq	%rcx, %rdi	 # tmp259, boid_list
 # .\src\main.cpp:250:     memset(boid_map.m_boid_map, -1, sizeof(Boid) * boid_map.m_xsize * boid_map.m_ysize);
	movq	16(%rbp), %rcx	 # boid_map_35(D)->m_boid_map, boid_map_35(D)->m_boid_map
 # .\src\main.cpp:250:     memset(boid_map.m_boid_map, -1, sizeof(Boid) * boid_map.m_xsize * boid_map.m_ysize);
	imulq	%rdx, %rax	 # boid_map_35(D)->m_ysize, tmp181
 # .\src\main.cpp:250:     memset(boid_map.m_boid_map, -1, sizeof(Boid) * boid_map.m_xsize * boid_map.m_ysize);
	movl	$-1, %edx	 #,
	leaq	0(,%rax,4), %r8	 #,
	call	memset	 #
 # .\src\main.cpp:276:     auto safety = new Lock[boid_map.m_xsize * boid_map.m_ysize] ;
	movl	4(%rbp), %esi	 # boid_map_35(D)->m_xsize, boid_map_35(D)->m_xsize
	imull	0(%rbp), %esi	 # boid_map_35(D)->m_ysize, tmp184
 # .\src\main.cpp:276:     auto safety = new Lock[boid_map.m_xsize * boid_map.m_ysize] ;
	movabsq	$2305843009213693950, %rax	 #, tmp186
 # .\src\main.cpp:276:     auto safety = new Lock[boid_map.m_xsize * boid_map.m_ysize] ;
	movslq	%esi, %rsi	 # tmp184, _37
 # .\src\main.cpp:276:     auto safety = new Lock[boid_map.m_xsize * boid_map.m_ysize] ;
	cmpq	%rsi, %rax	 # _37, tmp186
	jb	.L1025	 #,
 # .\src\main.cpp:276:     auto safety = new Lock[boid_map.m_xsize * boid_map.m_ysize] ;
	leaq	0(,%rsi,4), %rbx	 #, iftmp.39_39
 # .\src\main.cpp:276:     auto safety = new Lock[boid_map.m_xsize * boid_map.m_ysize] ;
	movq	%rbx, %rcx	 # iftmp.39_39,
.LEHB58:
	call	_Znay	 #
.LEHE58:
	leaq	(%rax,%rbx), %rdx	 #, _226
 # .\src\main.cpp:276:     auto safety = new Lock[boid_map.m_xsize * boid_map.m_ysize] ;
	testq	%rsi, %rsi	 # _37
	je	.L1030	 #,
	movq	%rdx, %rcx	 # _226, tmp254
	subq	%rax, %rcx	 # ivtmp.2601, tmp254
	andl	$4, %ecx	 #, tmp254
	je	.L1029	 #,
 # .\src\.\task_master\lock.h:36: struct Lock {
	movl	$0, (%rax)	 #, *_130.lock_internal
 # .\src\main.cpp:276:     auto safety = new Lock[boid_map.m_xsize * boid_map.m_ysize] ;
	addq	$4, %rax	 #, ivtmp.2601
	cmpq	%rdx, %rax	 # _226, ivtmp.2601
	je	.L1030	 #,
	.p2align 4,,10
	.p2align 3
.L1029:
 # .\src\.\task_master\lock.h:36: struct Lock {
	movl	$0, (%rax)	 #, *_130
 # .\src\main.cpp:276:     auto safety = new Lock[boid_map.m_xsize * boid_map.m_ysize] ;
	addq	$8, %rax	 #, ivtmp.2601
 # .\src\.\task_master\lock.h:36: struct Lock {
	movl	$0, -4(%rax)	 #, *_130
 # .\src\main.cpp:276:     auto safety = new Lock[boid_map.m_xsize * boid_map.m_ysize] ;
	cmpq	%rdx, %rax	 # _226, ivtmp.2601
	jne	.L1029	 #,
.L1030:
 # .\src\main.cpp:279:     pool.resize(NUM_THREADS);
	movl	_ZL11num_threads(%rip), %ebx	 # num_threads,
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/stl_vector.h:100: 	: _M_start(), _M_finish(), _M_end_of_storage()
	vpxor	%xmm0, %xmm0, %xmm0	 # tmp188
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/stl_vector.h:100: 	: _M_start(), _M_finish(), _M_end_of_storage()
	movq	$0, 128(%rsp)	 #, MEM[(struct _Vector_impl_data *)&pool]._M_end_of_storage
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/stl_vector.h:100: 	: _M_start(), _M_finish(), _M_end_of_storage()
	vmovdqu	%xmm0, 112(%rsp)	 # tmp188, MEM <vector(2) long long unsigned int> [(struct future * *)&pool]
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/stl_vector.h:1010: 	if (__new_size > size())
	testq	%rbx, %rbx	 # _13
	jne	.L1096	 #,
.L1095:
 # .\src\main.cpp:289: }
	vmovups	144(%rsp), %xmm6	 #,
	addq	$168, %rsp	 #,
	popq	%rbx	 #
	popq	%rsi	 #
	popq	%rdi	 #
	popq	%rbp	 #
	popq	%r12	 #
	popq	%r13	 #
	popq	%r14	 #
	popq	%r15	 #
	ret	
.L1096:
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/new_allocator.h:147: 	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
	movq	%rbx, %r12	 # _13, _242
	salq	$4, %r12	 #, _242
	movq	%r12, %rcx	 # _242,
.LEHB59:
	call	_Znwy	 #
	movq	%rax, %rsi	 # tmp262, __first
	cmpl	$1, %ebx	 #, num_threads.41_12
	je	.L1031	 #,
	leaq	-2(%rbx), %rax	 #, tmp190
	xorl	%edx, %edx	 # ivtmp_134
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:1463:       : _M_ptr(0), _M_refcount()
	vpxor	%xmm0, %xmm0, %xmm0	 # tmp193
	shrq	%rax	 # tmp191
	addq	$1, %rax	 #, bnd.2550
.L1032:
	movq	%rdx, %rcx	 # ivtmp_134, tmp192
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/stl_uninitialized.h:642: 	      for (; __n > 0; --__n, (void) ++__cur)
	addq	$1, %rdx	 #, ivtmp_134
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:1463:       : _M_ptr(0), _M_refcount()
	salq	$5, %rcx	 #, tmp192
	vmovdqu	%ymm0, (%rsi,%rcx)	 # tmp193, MEM <vector(4) long long unsigned int> [(void *)_205 + _83 * 1]
	cmpq	%rax, %rdx	 # bnd.2550, ivtmp_134
	jb	.L1032	 #,
	leaq	(%rax,%rax), %rdx	 #, niters_vector_mult_vf.2551
	cmpq	%rdx, %rbx	 # niters_vector_mult_vf.2551, _13
	je	.L1094	 #,
	salq	$5, %rax	 #, tmp194
	addq	%rsi, %rax	 # __first, __cur
	vzeroupper
.L1031:
	vpxor	%xmm0, %xmm0, %xmm0	 # tmp195
	vmovdqu	%xmm0, (%rax)	 # tmp195, MEM <vector(2) long long unsigned int> [(void *)__cur_220]
.L1033:
 # .\src\main.cpp:281:     for (int i = 0; i < NUM_THREADS; i++) {
	movl	_ZL11num_threads(%rip), %ecx	 # num_threads, num_threads.45_21
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/vector.tcc:706: 	      this->_M_impl._M_finish = __new_start + __size + __n;
	addq	%rsi, %r12	 # __first, prephitmp_73
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/vector.tcc:705: 	      this->_M_impl._M_start = __new_start;
	movq	%rsi, 112(%rsp)	 # __first, pool.D.168544._M_impl.D.167883._M_start
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/vector.tcc:706: 	      this->_M_impl._M_finish = __new_start + __size + __n;
	movq	%r12, 120(%rsp)	 # prephitmp_73, pool.D.168544._M_impl.D.167883._M_finish
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/vector.tcc:707: 	      this->_M_impl._M_end_of_storage = __new_start + __len;
	movq	%r12, 128(%rsp)	 # prephitmp_73, pool.D.168544._M_impl.D.167883._M_end_of_storage
 # .\src\main.cpp:281:     for (int i = 0; i < NUM_THREADS; i++) {
	testl	%ecx, %ecx	 # num_threads.45_21
	je	.L1034	 #,
	leaq	76(%rsp), %rax	 #, tmp244
	leaq	96(%rsp), %rbx	 #, tmp247
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:1535: 	__r._M_ptr = nullptr;
	vpxor	%xmm6, %xmm6, %xmm6	 # tmp251
 # .\src\main.cpp:281:     for (int i = 0; i < NUM_THREADS; i++) {
	xorl	%esi, %esi	 # ivtmp.2586
	movq	%rax, 48(%rsp)	 # tmp244, %sfp
	leaq	88(%rsp), %r14	 #, tmp246
	leaq	80(%rsp), %r13	 #, tmp245
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:337: 	  if (__atomic_load_n(__both_counts, __ATOMIC_ACQUIRE) == __unique_ref)
	movabsq	$4294967297, %r12	 #, tmp252
 # .\src\main.cpp:283:         pool[i] = std::async(std::launch::async, block_populate, num, &boid_list, &boid_map);
	leaq	_Z14block_populateiPK8BoidListPK7BoidMap(%rip), %r15	 #, tmp250
	jmp	.L1043	 #
	.p2align 4,,10
	.p2align 3
.L1037:
 # C:/msys64/ucrt64/include/c++/13.1.0/ext/atomicity.h:66:   { return __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
	lock subl	$1, (%rax)	 #,,* __both_counts
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:350: 	  if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
	je	.L1097	 #,
.L1036:
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:1070: 	if (_M_pi != nullptr)
	movq	104(%rsp), %rcx	 # MEM[(struct __shared_count *)_177]._M_pi, _46
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:1070: 	if (_M_pi != nullptr)
	testq	%rcx, %rcx	 # _46
	je	.L1040	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:337: 	  if (__atomic_load_n(__both_counts, __ATOMIC_ACQUIRE) == __unique_ref)
	movq	8(%rcx), %rdx	 #, _176
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:334: 	  auto __both_counts = reinterpret_cast<long long*>(&_M_use_count);
	leaq	8(%rcx), %rax	 #, __both_counts
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:337: 	  if (__atomic_load_n(__both_counts, __ATOMIC_ACQUIRE) == __unique_ref)
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:337: 	  if (__atomic_load_n(__both_counts, __ATOMIC_ACQUIRE) == __unique_ref)
	cmpq	%r12, %rdx	 # tmp252, _176
	je	.L1098	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/ext/atomicity.h:66:   { return __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
	lock subl	$1, (%rax)	 #,,* __both_counts
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:350: 	  if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
	je	.L1099	 #,
.L1040:
 # .\src\main.cpp:281:     for (int i = 0; i < NUM_THREADS; i++) {
	movl	_ZL11num_threads(%rip), %ecx	 # num_threads, num_threads.45_21
 # .\src\main.cpp:281:     for (int i = 0; i < NUM_THREADS; i++) {
	addq	$1, %rsi	 #, ivtmp.2586
	cmpl	%ecx, %esi	 # num_threads.45_21, ivtmp.2586
	jnb	.L1100	 #,
.L1043:
 # .\src\main.cpp:282:         int num = i * (boid_list.m_size / NUM_THREADS);
	movl	16(%rdi), %eax	 # boid_list_49(D)->m_size, boid_list_49(D)->m_size
	xorl	%edx, %edx	 # tmp198
 # .\src\main.cpp:283:         pool[i] = std::async(std::launch::async, block_populate, num, &boid_list, &boid_map);
	movq	%r14, 40(%rsp)	 # tmp246,
	movq	%r15, %r8	 # tmp250,
	movq	%r13, 32(%rsp)	 # tmp245,
	movq	48(%rsp), %r9	 # %sfp,
 # .\src\main.cpp:282:         int num = i * (boid_list.m_size / NUM_THREADS);
	divl	%ecx	 # num_threads.45_21
 # .\src\main.cpp:283:         pool[i] = std::async(std::launch::async, block_populate, num, &boid_list, &boid_map);
	movq	%rbp, 88(%rsp)	 # boid_map, D.168865
 # .\src\main.cpp:283:         pool[i] = std::async(std::launch::async, block_populate, num, &boid_list, &boid_map);
	movq	%rdi, 80(%rsp)	 # boid_list, D.168864
 # .\src\main.cpp:283:         pool[i] = std::async(std::launch::async, block_populate, num, &boid_list, &boid_map);
	movl	$1, %edx	 #,
	movq	%rbx, %rcx	 # tmp247,
 # .\src\main.cpp:282:         int num = i * (boid_list.m_size / NUM_THREADS);
	imull	%esi, %eax	 # ivtmp.2586, tmp200
 # .\src\main.cpp:282:         int num = i * (boid_list.m_size / NUM_THREADS);
	movl	%eax, 76(%rsp)	 # tmp200, num
 # .\src\main.cpp:283:         pool[i] = std::async(std::launch::async, block_populate, num, &boid_list, &boid_map);
	call	_ZSt5asyncIRFviPK8BoidListPK7BoidMapEJRiPS0_PS3_EESt6futureINSt15__invoke_resultINSt5decayIT_E4typeEJDpNSD_IT0_E4typeEEE4typeEESt6launchOSE_DpOSH_	 #
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/stl_vector.h:1124: 	return *(this->_M_impl._M_start + __n);
	movq	%rsi, %rax	 # ivtmp.2586, tmp205
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:1532:       : _M_ptr(__r._M_ptr), _M_refcount()
	vmovdqu	96(%rsp), %xmm0	 # MEM <vector(2) long long unsigned int> [(void *)_177], vect__54.2564
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:1535: 	__r._M_ptr = nullptr;
	vmovdqu	%xmm6, 96(%rsp)	 # tmp251, MEM <vector(2) long long unsigned int> [(void *)_177]
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/stl_vector.h:1124: 	return *(this->_M_impl._M_start + __n);
	salq	$4, %rax	 #, tmp205
	addq	112(%rsp), %rax	 # pool.D.168544._M_impl.D.167883._M_start, _71
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:1099: 	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	movq	8(%rax), %rcx	 # MEM[(struct __shared_count &)_71 + 8]._M_pi, __tmp
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/move.h:206:       __b = _GLIBCXX_MOVE(__tmp);
	vmovdqu	%xmm0, (%rax)	 # vect__54.2564, MEM <vector(2) long long unsigned int> [(void *)_71]
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:1070: 	if (_M_pi != nullptr)
	testq	%rcx, %rcx	 # __tmp
	je	.L1036	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:337: 	  if (__atomic_load_n(__both_counts, __ATOMIC_ACQUIRE) == __unique_ref)
	movq	8(%rcx), %rdx	 #, _169
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:334: 	  auto __both_counts = reinterpret_cast<long long*>(&_M_use_count);
	leaq	8(%rcx), %rax	 #, __both_counts
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:337: 	  if (__atomic_load_n(__both_counts, __ATOMIC_ACQUIRE) == __unique_ref)
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:337: 	  if (__atomic_load_n(__both_counts, __ATOMIC_ACQUIRE) == __unique_ref)
	cmpq	%r12, %rdx	 # tmp252, _169
	jne	.L1037	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:346: 	      _M_dispose();
	movq	(%rcx), %rax	 # __tmp_68->_vptr._Sp_counted_base, __tmp_68->_vptr._Sp_counted_base
	movq	%rcx, 56(%rsp)	 # __tmp, %sfp
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:343: 	      _M_weak_count = _M_use_count = 0;
	movq	$0, 8(%rcx)	 #, MEM <vector(2) int> [(int *)__tmp_68 + 8B]
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:346: 	      _M_dispose();
	call	*16(%rax)	 # MEM[(int (*) () *)_171 + 16B]
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:347: 	      _M_destroy();
	movq	56(%rsp), %rcx	 # %sfp, __tmp
	movq	(%rcx), %rax	 # __tmp_68->_vptr._Sp_counted_base, __tmp_68->_vptr._Sp_counted_base
	call	*24(%rax)	 # MEM[(int (*) () *)_173 + 24B]
	jmp	.L1036	 #
	.p2align 4,,10
	.p2align 3
.L1098:
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:346: 	      _M_dispose();
	movq	(%rcx), %rax	 # _46->_vptr._Sp_counted_base, _46->_vptr._Sp_counted_base
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:343: 	      _M_weak_count = _M_use_count = 0;
	movq	$0, 8(%rcx)	 #, MEM <vector(2) int> [(int *)_46 + 8B]
 # .\src\main.cpp:281:     for (int i = 0; i < NUM_THREADS; i++) {
	addq	$1, %rsi	 #, ivtmp.2586
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:346: 	      _M_dispose();
	movq	%rcx, 56(%rsp)	 # _46, %sfp
	call	*16(%rax)	 # MEM[(int (*) () *)_178 + 16B]
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:347: 	      _M_destroy();
	movq	56(%rsp), %rcx	 # %sfp, _46
	movq	(%rcx), %rax	 # _46->_vptr._Sp_counted_base, _46->_vptr._Sp_counted_base
	call	*24(%rax)	 # MEM[(int (*) () *)_180 + 24B]
 # .\src\main.cpp:281:     for (int i = 0; i < NUM_THREADS; i++) {
	movl	_ZL11num_threads(%rip), %ecx	 # num_threads, num_threads.45_21
 # .\src\main.cpp:281:     for (int i = 0; i < NUM_THREADS; i++) {
	cmpl	%ecx, %esi	 # num_threads.45_21, ivtmp.2586
	jb	.L1043	 #,
	.p2align 4,,10
	.p2align 3
.L1100:
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/stl_vector.h:730: 	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
	movq	112(%rsp), %rax	 # pool.D.168544._M_impl.D.167883._M_start, pool.D.168544._M_impl.D.167883._M_start
	movq	%rax, %rsi	 # pool.D.168544._M_impl.D.167883._M_start, __first
 # .\src\main.cpp:286:     for (int i = 0; i < NUM_THREADS; i++) {
	testl	%ecx, %ecx	 # num_threads.45_21
	je	.L1044	 #,
	xorl	%ebp, %ebp	 # ivtmp.2582
	.p2align 4,,10
	.p2align 3
.L1050:
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:1670:       { return _M_ptr != nullptr; }
	movq	%rbp, %rdx	 # ivtmp.2582, tmp221
	salq	$4, %rdx	 #, tmp221
	movq	(%rax,%rdx), %rsi	 # MEM[(const struct __shared_ptr *)_74]._M_ptr, _182
 # C:/msys64/ucrt64/include/c++/13.1.0/future:580:           if (!static_cast<bool>(__p))
	testq	%rsi, %rsi	 # _182
	je	.L1101	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/future:350: 	_M_complete_async();
	movq	(%rsi), %rax	 # MEM[(struct _State_baseV2 *)_182]._vptr._State_baseV2, MEM[(struct _State_baseV2 *)_182]._vptr._State_baseV2
	movq	%rsi, %rcx	 # _182,
	call	*16(%rax)	 # MEM[(int (*) () *)_183 + 16B]
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/atomic_futex.h:320:       unique_lock<mutex> __lock(_M_mutex);
	leaq	24(%rsi), %rcx	 #, _229
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/unique_lock.h:69:       : _M_device(std::__addressof(__m)), _M_owns(false)
	movb	$0, 104(%rsp)	 #, MEM[(struct unique_lock *)_177]._M_owns
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/unique_lock.h:69:       : _M_device(std::__addressof(__m)), _M_owns(false)
	movq	%rcx, 96(%rsp)	 # _229, MEM[(struct unique_lock *)_177]._M_device
 # C:/msys64/ucrt64/include/c++/13.1.0/x86_64-w64-mingw32/bits/gthr-default.h:749:     return __gthrw_(pthread_mutex_lock) (__mutex);
	call	pthread_mutex_lock	 #
.LEHE59:
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_mutex.h:116:       if (__e)
	testl	%eax, %eax	 # _193
	jne	.L1102	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/unique_lock.h:142: 	    _M_owns = true;
	movb	$1, 104(%rsp)	 #, MEM[(struct unique_lock *)_177]._M_owns
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/atomic_futex.h:322: 	_M_condvar.wait(__lock);
	leaq	32(%rsi), %rdi	 #, tmp249
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/unique_lock.h:73:       }
	jmp	.L1047	 #
	.p2align 4,,10
	.p2align 3
.L1048:
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/atomic_futex.h:322: 	_M_condvar.wait(__lock);
	movq	%rbx, %rdx	 # tmp247,
	movq	%rdi, %rcx	 # tmp249,
.LEHB60:
	call	_ZNSt18condition_variable4waitERSt11unique_lockISt5mutexE	 #
.LEHE60:
.L1047:
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/atomic_futex.h:321:       while (_M_data != __val)
	cmpl	$1, 16(%rsi)	 #, MEM[(struct __atomic_futex_unsigned *)_182 + 16B]._M_data
	jne	.L1048	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/unique_lock.h:105: 	if (_M_owns)
	cmpb	$0, 104(%rsp)	 #, MEM[(struct unique_lock *)_177]._M_owns
	jne	.L1103	 #,
.L1049:
 # .\src\main.cpp:286:     for (int i = 0; i < NUM_THREADS; i++) {
	addq	$1, %rbp	 #, ivtmp.2582
	cmpl	_ZL11num_threads(%rip), %ebp	 # num_threads, ivtmp.2582
	jnb	.L1093	 #,
.L1104:
	movq	112(%rsp), %rax	 # pool.D.168544._M_impl.D.167883._M_start, pool.D.168544._M_impl.D.167883._M_start
	jmp	.L1050	 #
	.p2align 4,,10
	.p2align 3
.L1103:
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/unique_lock.h:198: 	else if (_M_device)
	movq	96(%rsp), %rcx	 # MEM[(struct unique_lock *)_177]._M_device, _195
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/unique_lock.h:198: 	else if (_M_device)
	testq	%rcx, %rcx	 # _195
	je	.L1049	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/x86_64-w64-mingw32/bits/gthr-default.h:779:     return __gthrw_(pthread_mutex_unlock) (__mutex);
	call	pthread_mutex_unlock	 #
 # .\src\main.cpp:286:     for (int i = 0; i < NUM_THREADS; i++) {
	addq	$1, %rbp	 #, ivtmp.2582
	cmpl	_ZL11num_threads(%rip), %ebp	 # num_threads, ivtmp.2582
	jb	.L1104	 #,
	.p2align 4,,10
	.p2align 3
.L1093:
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/stl_vector.h:730: 	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
	movq	120(%rsp), %r12	 # pool.D.168544._M_impl.D.167883._M_finish, prephitmp_73
	movq	112(%rsp), %rsi	 # pool.D.168544._M_impl.D.167883._M_start, __first
.L1051:
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/stl_construct.h:162: 	  for (; __first != __last; ++__first)
	cmpq	%rsi, %r12	 # __first, prephitmp_73
	je	.L1054	 #,
.L1034:
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:337: 	  if (__atomic_load_n(__both_counts, __ATOMIC_ACQUIRE) == __unique_ref)
	movabsq	$4294967297, %rdi	 #, tmp248
	jmp	.L1059	 #
	.p2align 4,,10
	.p2align 3
.L1057:
 # C:/msys64/ucrt64/include/c++/13.1.0/ext/atomicity.h:66:   { return __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
	lock subl	$1, (%rax)	 #,,* __both_counts
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:350: 	  if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
	je	.L1105	 #,
.L1056:
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/stl_construct.h:162: 	  for (; __first != __last; ++__first)
	addq	$16, %rsi	 #, __first
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/stl_construct.h:162: 	  for (; __first != __last; ++__first)
	cmpq	%rsi, %r12	 # __first, prephitmp_73
	je	.L1106	 #,
.L1059:
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:1070: 	if (_M_pi != nullptr)
	movq	8(%rsi), %rbx	 # MEM[(struct _Sp_counted_base * *)__first_160 + 8B], _206
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:1070: 	if (_M_pi != nullptr)
	testq	%rbx, %rbx	 # _206
	je	.L1056	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:337: 	  if (__atomic_load_n(__both_counts, __ATOMIC_ACQUIRE) == __unique_ref)
	movq	8(%rbx), %rdx	 #, _209
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:334: 	  auto __both_counts = reinterpret_cast<long long*>(&_M_use_count);
	leaq	8(%rbx), %rax	 #, __both_counts
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:337: 	  if (__atomic_load_n(__both_counts, __ATOMIC_ACQUIRE) == __unique_ref)
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:337: 	  if (__atomic_load_n(__both_counts, __ATOMIC_ACQUIRE) == __unique_ref)
	cmpq	%rdi, %rdx	 # tmp248, _209
	jne	.L1057	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:346: 	      _M_dispose();
	movq	(%rbx), %rax	 # _206->_vptr._Sp_counted_base, _206->_vptr._Sp_counted_base
	movq	%rbx, %rcx	 # _206,
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:343: 	      _M_weak_count = _M_use_count = 0;
	movq	$0, 8(%rbx)	 #, MEM <vector(2) int> [(int *)_206 + 8B]
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/stl_construct.h:162: 	  for (; __first != __last; ++__first)
	addq	$16, %rsi	 #, __first
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:346: 	      _M_dispose();
	call	*16(%rax)	 # MEM[(int (*) () *)_211 + 16B]
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:347: 	      _M_destroy();
	movq	(%rbx), %rax	 # _206->_vptr._Sp_counted_base, _206->_vptr._Sp_counted_base
	movq	%rbx, %rcx	 # _206,
	call	*24(%rax)	 # MEM[(int (*) () *)_213 + 24B]
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/stl_construct.h:162: 	  for (; __first != __last; ++__first)
	cmpq	%rsi, %r12	 # __first, prephitmp_73
	jne	.L1059	 #,
	.p2align 4,,10
	.p2align 3
.L1106:
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/stl_vector.h:367: 		      _M_impl._M_end_of_storage - _M_impl._M_start);
	movq	112(%rsp), %rsi	 # MEM[(struct _Vector_base *)&pool]._M_impl.D.167883._M_start, __first
.L1054:
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/stl_vector.h:386: 	if (__p)
	testq	%rsi, %rsi	 # __first
	je	.L1095	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/stl_vector.h:367: 		      _M_impl._M_end_of_storage - _M_impl._M_start);
	movq	128(%rsp), %rdx	 # MEM[(struct _Vector_base *)&pool]._M_impl.D.167883._M_end_of_storage, tmp240
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/new_allocator.h:168: 	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
	movq	%rsi, %rcx	 # __first,
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/stl_vector.h:367: 		      _M_impl._M_end_of_storage - _M_impl._M_start);
	subq	%rsi, %rdx	 # __first, tmp240
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/new_allocator.h:168: 	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
	call	_ZdlPvy	 #
 # .\src\main.cpp:289: }
	jmp	.L1095	 #
.L1099:
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:353: 	      _M_release_last_use_cold();
	call	_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE24_M_release_last_use_coldEv	 #
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:354: 	      return;
	jmp	.L1040	 #
.L1097:
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:353: 	      _M_release_last_use_cold();
	call	_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE24_M_release_last_use_coldEv	 #
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:354: 	      return;
	jmp	.L1036	 #
.L1105:
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:353: 	      _M_release_last_use_cold();
	movq	%rbx, %rcx	 # _206,
	call	_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE24_M_release_last_use_coldEv	 #
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:354: 	      return;
	jmp	.L1056	 #
.L1094:
	vzeroupper
	jmp	.L1033	 #
.L1102:
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_mutex.h:117: 	__throw_system_error(__e);
	movl	%eax, %ecx	 # _193,
.LEHB61:
	call	_ZSt20__throw_system_errori	 #
.L1101:
 # C:/msys64/ucrt64/include/c++/13.1.0/future:581:             __throw_future_error((int)future_errc::no_state);
	movl	$3, %ecx	 #,
	call	_ZSt20__throw_future_errori	 #
.LEHE61:
.L1044:
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/stl_vector.h:730: 	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
	movq	120(%rsp), %r12	 # pool.D.168544._M_impl.D.167883._M_finish, prephitmp_73
	jmp	.L1051	 #
.L1062:
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/atomic_futex.h:323:     }
	movq	%rbx, %rcx	 # tmp247,
	movq	%rax, %rsi	 # tmp264, tmp231
	vzeroupper
	call	_ZNSt11unique_lockISt5mutexED1Ev	 #
.L1053:
 # .\src\main.cpp:289: }
	leaq	112(%rsp), %rcx	 #, tmp242
	call	_ZNSt6vectorISt6futureIvESaIS1_EED1Ev	 #
	movq	%rsi, %rcx	 # tmp230,
.LEHB62:
	call	_Unwind_Resume	 #
.L1061:
	movq	%rax, %rsi	 # tmp265, tmp230
	vzeroupper
	jmp	.L1053	 #
.L1025:
 # .\src\main.cpp:276:     auto safety = new Lock[boid_map.m_xsize * boid_map.m_ysize] ;
	call	__cxa_throw_bad_array_new_length	 #
	nop	
.LEHE62:
	.seh_handler	__gxx_personality_seh0, @unwind, @except
	.seh_handlerdata
.LLSDA12589:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE12589-.LLSDACSB12589
.LLSDACSB12589:
	.uleb128 .LEHB58-.LFB12589
	.uleb128 .LEHE58-.LEHB58
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB59-.LFB12589
	.uleb128 .LEHE59-.LEHB59
	.uleb128 .L1061-.LFB12589
	.uleb128 0
	.uleb128 .LEHB60-.LFB12589
	.uleb128 .LEHE60-.LEHB60
	.uleb128 .L1062-.LFB12589
	.uleb128 0
	.uleb128 .LEHB61-.LFB12589
	.uleb128 .LEHE61-.LEHB61
	.uleb128 .L1061-.LFB12589
	.uleb128 0
	.uleb128 .LEHB62-.LFB12589
	.uleb128 .LEHE62-.LEHB62
	.uleb128 0
	.uleb128 0
.LLSDACSE12589:
	.text
	.seh_endproc
	.def	__main;	.scl	2;	.type	32;	.endef
	.section .rdata,"dr"
	.align 8
.LC27:
	.ascii "Please request more boids than threads (%d)! Defaulting to 1000\0"
.LC28:
	.ascii "RayLib Boids!\0"
.LC29:
	.ascii "Using %d threads\0"
.LC30:
	.ascii "Boid size is: %d bytes\0"
	.align 8
.LC34:
	.ascii "resources/shaders/glsl%i/simple.fs\0"
	.align 8
.LC35:
	.ascii "resources/shaders/glsl%i/directional.vs\0"
.LC36:
	.ascii "viewPos\0"
.LC37:
	.ascii "instanceTransform\0"
.LC38:
	.ascii "boid_x\0"
.LC39:
	.ascii "boid_y\0"
.LC40:
	.ascii "boid_vx\0"
.LC41:
	.ascii "boid_vy\0"
.LC42:
	.ascii "boid_x at: %d\0"
.LC43:
	.ascii "viewPos at: %d\0"
.LC44:
	.ascii "instanceTransform at: %d\0"
.LC49:
	.ascii "log.log\0"
.LC54:
	.ascii "Num tasks: %d\0"
	.align 8
.LC73:
	.ascii "Populate :%0.4f, rebuild: %0.4f, render: %0.4f, comp: %0.4f\0"
	.section	.text.startup,"x"
	.p2align 4
	.globl	main
	.def	main;	.scl	2;	.type	32;	.endef
	.seh_proc	main
main:
.LFB12633:
	pushq	%rbp	 #
	.seh_pushreg	%rbp
	movl	$67384, %eax	 #,
	pushq	%r15	 #
	.seh_pushreg	%r15
	pushq	%r14	 #
	.seh_pushreg	%r14
	pushq	%r13	 #
	.seh_pushreg	%r13
	pushq	%r12	 #
	.seh_pushreg	%r12
	pushq	%rdi	 #
	.seh_pushreg	%rdi
	pushq	%rsi	 #
	.seh_pushreg	%rsi
	pushq	%rbx	 #
	.seh_pushreg	%rbx
	call	___chkstk_ms
	subq	%rax, %rsp	 #,
	.seh_stackalloc	67384
	leaq	128(%rsp), %rbp	 #,
	.seh_setframe	%rbp, 128
	vmovups	%xmm6, 67088(%rbp)	 #,
	.seh_savexmm	%xmm6, 67216
	vmovups	%xmm7, 67104(%rbp)	 #,
	.seh_savexmm	%xmm7, 67232
	vmovups	%xmm8, 67120(%rbp)	 #,
	.seh_savexmm	%xmm8, 67248
	vmovups	%xmm9, 67136(%rbp)	 #,
	.seh_savexmm	%xmm9, 67264
	vmovups	%xmm10, 67152(%rbp)	 #,
	.seh_savexmm	%xmm10, 67280
	vmovups	%xmm11, 67168(%rbp)	 #,
	.seh_savexmm	%xmm11, 67296
	vmovups	%xmm12, 67184(%rbp)	 #,
	.seh_savexmm	%xmm12, 67312
	vmovups	%xmm13, 67200(%rbp)	 #,
	.seh_savexmm	%xmm13, 67328
	vmovups	%xmm14, 67216(%rbp)	 #,
	.seh_savexmm	%xmm14, 67344
	vmovups	%xmm15, 67232(%rbp)	 #,
	.seh_savexmm	%xmm15, 67360
	.seh_endprologue
 # .\src\main.cpp:1354: int main (int argc, char* argv[]) {
	movq	%rdx, %rbx	 # tmp1058, argv
	call	__main	 #
 # .\src\main.cpp:1355:     uint32_t num_boids = atoi(argv[1]);
	movq	8(%rbx), %rcx	 # MEM[(char * *)argv_153(D) + 8B], MEM[(char * *)argv_153(D) + 8B]
	call	atoi	 #
 # .\src\main.cpp:1357:     SetTraceLogLevel(LOG_ALL);
	xorl	%ecx, %ecx	 #
 # .\src\main.cpp:1355:     uint32_t num_boids = atoi(argv[1]);
	movl	%eax, %r12d	 # tmp1059, _3
 # .\src\main.cpp:1355:     uint32_t num_boids = atoi(argv[1]);
	movl	%eax, %esi	 # _3,
.LEHB63:
 # .\src\main.cpp:1357:     SetTraceLogLevel(LOG_ALL);
	call	SetTraceLogLevel	 #
 # .\src\main.cpp:1359:     if (num_boids < NUM_THREADS) {
	movl	_ZL11num_threads(%rip), %edx	 # num_threads, num_threads.156_4
 # .\src\main.cpp:1359:     if (num_boids < NUM_THREADS) {
	cmpl	%edx, %r12d	 # num_threads.156_4, _3
	jb	.L1234	 #,
.L1108:
 # .\src\main.cpp:1364:     InitWindow(0, 0, "RayLib Boids!");
	leaq	.LC28(%rip), %r8	 #,
	xorl	%edx, %edx	 #
	xorl	%ecx, %ecx	 #
	call	InitWindow	 #
 # .\src\main.cpp:1365:     SetTargetFPS(FRAME_RATE_LIMIT);
	movl	$165, %ecx	 #,
 # .\src\main.cpp:351:     Mesh mesh = { 0 };
	leaq	824(%rbp), %rdi	 #, tmp472
 # .\src\main.cpp:1378:     Shader boid_shader = LoadShader(TextFormat("resources/shaders/glsl%i/directional.vs", 330),
	leaq	384(%rbp), %r15	 #, tmp1019
 # .\src\main.cpp:1365:     SetTargetFPS(FRAME_RATE_LIMIT);
	call	SetTargetFPS	 #
 # .\src\main.cpp:1367:     const int screen_width = GetScreenWidth();
	call	GetScreenWidth	 #
	movl	%eax, %ebx	 # tmp1061, _163
 # .\src\main.cpp:1368:     const int screen_height = GetScreenHeight();
	call	GetScreenHeight	 #
 # .\src\main.cpp:1370:     DEBUG("Using %d threads", num_threads);
	movl	_ZL11num_threads(%rip), %edx	 # num_threads,
	leaq	.LC29(%rip), %rcx	 #, tmp470
 # .\src\main.cpp:1368:     const int screen_height = GetScreenHeight();
	movl	%eax, -24(%rbp)	 # _165, %sfp
	movl	%eax, %r13d	 # tmp1062, _165
 # .\src\main.cpp:1370:     DEBUG("Using %d threads", num_threads);
	call	TextFormat	 #
 # .\src\main.cpp:1370:     DEBUG("Using %d threads", num_threads);
	movl	$2, %ecx	 #,
 # .\src\main.cpp:1370:     DEBUG("Using %d threads", num_threads);
	movq	%rax, %rdx	 # tmp1063, _167
 # .\src\main.cpp:1370:     DEBUG("Using %d threads", num_threads);
	call	TraceLog	 #
 # .\src\main.cpp:1372:     TraceLog(LOG_DEBUG, TextFormat("Boid size is: %d bytes", sizeof(Boid)));
	movl	$4, %edx	 #,
	leaq	.LC30(%rip), %rcx	 #, tmp471
	call	TextFormat	 #
 # .\src\main.cpp:1372:     TraceLog(LOG_DEBUG, TextFormat("Boid size is: %d bytes", sizeof(Boid)));
	movl	$2, %ecx	 #,
 # .\src\main.cpp:1372:     TraceLog(LOG_DEBUG, TextFormat("Boid size is: %d bytes", sizeof(Boid)));
	movq	%rax, %rdx	 # tmp1064, _170
 # .\src\main.cpp:1372:     TraceLog(LOG_DEBUG, TextFormat("Boid size is: %d bytes", sizeof(Boid)));
	call	TraceLog	 #
 # .\src\main.cpp:351:     Mesh mesh = { 0 };
	xorl	%eax, %eax	 # tmp473
	movl	$13, %ecx	 #, tmp474
	rep stosq
 # .\src\main.cpp:353:     mesh.vertexCount = mesh.triangleCount*3;
	movq	.LC31(%rip), %rax	 #, tmp475
 # .\src\main.cpp:354:     mesh.vertices = (float *) MemAlloc(mesh.vertexCount*3*sizeof(float));    // 3 vertices, 3 coordinates each (x, y, z)
	movl	$36, %ecx	 #,
 # .\src\main.cpp:353:     mesh.vertexCount = mesh.triangleCount*3;
	movq	%rax, 816(%rbp)	 # tmp475, MEM <vector(2) int> [(int *)&tri]
 # .\src\main.cpp:354:     mesh.vertices = (float *) MemAlloc(mesh.vertexCount*3*sizeof(float));    // 3 vertices, 3 coordinates each (x, y, z)
	call	MemAlloc	 #
 # .\src\main.cpp:354:     mesh.vertices = (float *) MemAlloc(mesh.vertexCount*3*sizeof(float));    // 3 vertices, 3 coordinates each (x, y, z)
	movq	%rax, 824(%rbp)	 # tmp1065, tri.vertices
 # .\src\main.cpp:355:     mesh.colors = (unsigned char *) MemAlloc(mesh.vertexCount*4*sizeof(unsigned char)); 
	movl	816(%rbp), %eax	 # tri.vertexCount, tmp1297
	leal	0(,%rax,4), %ecx	 #, tmp476
 # .\src\main.cpp:355:     mesh.colors = (unsigned char *) MemAlloc(mesh.vertexCount*4*sizeof(unsigned char)); 
	call	MemAlloc	 #
 # .\src\main.cpp:358:     mesh.vertices[0] = -TRIANGLE_SIZE;
	vmovups	.LC32(%rip), %ymm0	 #, tmp478
 # .\src\main.cpp:358:     mesh.vertices[0] = -TRIANGLE_SIZE;
	movq	824(%rbp), %rdx	 # tri.vertices, _486
 # .\src\main.cpp:388:     UploadMesh(&mesh, false);
	leaq	816(%rbp), %rcx	 #, tmp480
 # .\src\main.cpp:355:     mesh.colors = (unsigned char *) MemAlloc(mesh.vertexCount*4*sizeof(unsigned char)); 
	movq	%rax, 864(%rbp)	 # _485, tri.colors
 # .\src\main.cpp:358:     mesh.vertices[0] = -TRIANGLE_SIZE;
	vmovups	%ymm0, (%rdx)	 # tmp478, MEM <vector(8) float> [(float *)_486]
 # .\src\main.cpp:370:     mesh.vertices[8] = -2 * TRIANGLE_SIZE;
	movl	$0xc1200000, 32(%rdx)	 #, MEM[(float *)_486 + 32B]
 # .\src\main.cpp:388:     UploadMesh(&mesh, false);
	xorl	%edx, %edx	 #
 # .\src\main.cpp:372:     mesh.colors[0] = 255;
	movb	$-1, (%rax)	 #, MEM[(unsigned char *)_485]
 # .\src\main.cpp:373:     mesh.colors[1] = 0;
	movq	864(%rbp), %rax	 # tri.colors, _487
 # .\src\main.cpp:373:     mesh.colors[1] = 0;
	movb	$0, 1(%rax)	 #, MEM[(unsigned char *)_487 + 1B]
 # .\src\main.cpp:374:     mesh.colors[2] = 0;
	movq	864(%rbp), %rax	 # tri.colors, _488
 # .\src\main.cpp:374:     mesh.colors[2] = 0;
	movb	$0, 2(%rax)	 #, MEM[(unsigned char *)_488 + 2B]
 # .\src\main.cpp:375:     mesh.colors[3] = 255;
	movq	864(%rbp), %rax	 # tri.colors, _489
 # .\src\main.cpp:375:     mesh.colors[3] = 255;
	movb	$-1, 3(%rax)	 #, MEM[(unsigned char *)_489 + 3B]
 # .\src\main.cpp:377:     mesh.colors[4] = 0;
	movq	864(%rbp), %rax	 # tri.colors, _490
 # .\src\main.cpp:377:     mesh.colors[4] = 0;
	movb	$0, 4(%rax)	 #, MEM[(unsigned char *)_490 + 4B]
 # .\src\main.cpp:378:     mesh.colors[5] = 255;
	movq	864(%rbp), %rax	 # tri.colors, _491
 # .\src\main.cpp:378:     mesh.colors[5] = 255;
	movb	$-1, 5(%rax)	 #, MEM[(unsigned char *)_491 + 5B]
 # .\src\main.cpp:379:     mesh.colors[6] = 0;
	movq	864(%rbp), %rax	 # tri.colors, _492
 # .\src\main.cpp:379:     mesh.colors[6] = 0;
	movb	$0, 6(%rax)	 #, MEM[(unsigned char *)_492 + 6B]
 # .\src\main.cpp:380:     mesh.colors[7] = 255;
	movq	864(%rbp), %rax	 # tri.colors, _493
 # .\src\main.cpp:380:     mesh.colors[7] = 255;
	movb	$-1, 7(%rax)	 #, MEM[(unsigned char *)_493 + 7B]
 # .\src\main.cpp:382:     mesh.colors[8] = 0;
	movq	864(%rbp), %rax	 # tri.colors, _494
 # .\src\main.cpp:382:     mesh.colors[8] = 0;
	movb	$0, 8(%rax)	 #, MEM[(unsigned char *)_494 + 8B]
 # .\src\main.cpp:383:     mesh.colors[9] = 0;
	movq	864(%rbp), %rax	 # tri.colors, _495
 # .\src\main.cpp:383:     mesh.colors[9] = 0;
	movb	$0, 9(%rax)	 #, MEM[(unsigned char *)_495 + 9B]
 # .\src\main.cpp:384:     mesh.colors[10] = 255;
	movq	864(%rbp), %rax	 # tri.colors, _496
 # .\src\main.cpp:384:     mesh.colors[10] = 255;
	movb	$-1, 10(%rax)	 #, MEM[(unsigned char *)_496 + 10B]
 # .\src\main.cpp:385:     mesh.colors[11] = 255;
	movq	864(%rbp), %rax	 # tri.colors, _497
 # .\src\main.cpp:385:     mesh.colors[11] = 255;
	movb	$-1, 11(%rax)	 #, MEM[(unsigned char *)_497 + 11B]
 # .\src\main.cpp:388:     UploadMesh(&mesh, false);
	vzeroupper
	call	UploadMesh	 #
 # .\src\main.cpp:1378:     Shader boid_shader = LoadShader(TextFormat("resources/shaders/glsl%i/directional.vs", 330),
	movl	$330, %edx	 #,
	leaq	.LC34(%rip), %rcx	 #, tmp481
	call	TextFormat	 #
 # .\src\main.cpp:1378:     Shader boid_shader = LoadShader(TextFormat("resources/shaders/glsl%i/directional.vs", 330),
	movl	$330, %edx	 #,
	leaq	.LC35(%rip), %rcx	 #, tmp482
 # .\src\main.cpp:1378:     Shader boid_shader = LoadShader(TextFormat("resources/shaders/glsl%i/directional.vs", 330),
	movq	%rax, %rdi	 # tmp1067, _174
 # .\src\main.cpp:1378:     Shader boid_shader = LoadShader(TextFormat("resources/shaders/glsl%i/directional.vs", 330),
	call	TextFormat	 #
 # .\src\main.cpp:1378:     Shader boid_shader = LoadShader(TextFormat("resources/shaders/glsl%i/directional.vs", 330),
	movq	%rdi, %r8	 # _174,
	movq	%r15, %rcx	 # tmp1019,
	movq	%r15, -48(%rbp)	 # tmp1019, %sfp
 # .\src\main.cpp:1378:     Shader boid_shader = LoadShader(TextFormat("resources/shaders/glsl%i/directional.vs", 330),
	movq	%rax, %rdx	 # tmp1068, _176
 # .\src\main.cpp:1378:     Shader boid_shader = LoadShader(TextFormat("resources/shaders/glsl%i/directional.vs", 330),
	call	LoadShader	 #
	movq	392(%rbp), %rdi	 #, boid_shader$locs
	movq	384(%rbp), %r14	 #, boid_shader
 # .\src\main.cpp:1381:     boid_shader.locs[SHADER_LOC_VECTOR_VIEW] = GetShaderLocation(boid_shader, "viewPos");
	movq	%r15, %rcx	 # tmp1019,
	leaq	.LC36(%rip), %rdx	 #, tmp485
 # .\src\main.cpp:1378:     Shader boid_shader = LoadShader(TextFormat("resources/shaders/glsl%i/directional.vs", 330),
	movq	%rdi, -16(%rbp)	 # boid_shader$locs, %sfp
	movq	%r14, -40(%rbp)	 # boid_shader, %sfp
 # .\src\main.cpp:1381:     boid_shader.locs[SHADER_LOC_VECTOR_VIEW] = GetShaderLocation(boid_shader, "viewPos");
	call	GetShaderLocation	 #
 # .\src\main.cpp:1382:     boid_shader.locs[SHADER_LOC_MATRIX_MODEL] = GetShaderLocationAttrib(boid_shader, "instanceTransform");
	leaq	.LC37(%rip), %rdx	 #, tmp487
	movq	%r15, %rcx	 # tmp1019,
 # .\src\main.cpp:1381:     boid_shader.locs[SHADER_LOC_VECTOR_VIEW] = GetShaderLocation(boid_shader, "viewPos");
	movl	%eax, 44(%rdi)	 # tmp1069, MEM[(int *)boid_shader$locs_258 + 44B]
 # .\src\main.cpp:1382:     boid_shader.locs[SHADER_LOC_MATRIX_MODEL] = GetShaderLocationAttrib(boid_shader, "instanceTransform");
	movq	%rdi, 392(%rbp)	 # boid_shader$locs,
	movq	%r14, 384(%rbp)	 # boid_shader,
	call	GetShaderLocationAttrib	 #
 # .\src\main.cpp:1384:     boid_shader.locs[26] = GetShaderLocationAttrib(boid_shader, "boid_x");
	leaq	.LC38(%rip), %rdx	 #, tmp489
	movq	%r15, %rcx	 # tmp1019,
 # .\src\main.cpp:1382:     boid_shader.locs[SHADER_LOC_MATRIX_MODEL] = GetShaderLocationAttrib(boid_shader, "instanceTransform");
	movl	%eax, 36(%rdi)	 # tmp1070, MEM[(int *)boid_shader$locs_258 + 36B]
 # .\src\main.cpp:1384:     boid_shader.locs[26] = GetShaderLocationAttrib(boid_shader, "boid_x");
	movq	%rdi, 392(%rbp)	 # boid_shader$locs,
	movq	%r14, 384(%rbp)	 # boid_shader,
	call	GetShaderLocationAttrib	 #
 # .\src\main.cpp:1385:     boid_shader.locs[27] = GetShaderLocationAttrib(boid_shader, "boid_y");
	leaq	.LC39(%rip), %rdx	 #, tmp491
	movq	%r15, %rcx	 # tmp1019,
 # .\src\main.cpp:1384:     boid_shader.locs[26] = GetShaderLocationAttrib(boid_shader, "boid_x");
	movl	%eax, 104(%rdi)	 # tmp1071, MEM[(int *)boid_shader$locs_258 + 104B]
 # .\src\main.cpp:1385:     boid_shader.locs[27] = GetShaderLocationAttrib(boid_shader, "boid_y");
	movq	%rdi, 392(%rbp)	 # boid_shader$locs,
	movq	%r14, 384(%rbp)	 # boid_shader,
	call	GetShaderLocationAttrib	 #
 # .\src\main.cpp:1386:     boid_shader.locs[28] = GetShaderLocationAttrib(boid_shader, "boid_vx");
	leaq	.LC40(%rip), %rdx	 #, tmp493
	movq	%r15, %rcx	 # tmp1019,
 # .\src\main.cpp:1385:     boid_shader.locs[27] = GetShaderLocationAttrib(boid_shader, "boid_y");
	movl	%eax, 108(%rdi)	 # tmp1072, MEM[(int *)boid_shader$locs_258 + 108B]
 # .\src\main.cpp:1386:     boid_shader.locs[28] = GetShaderLocationAttrib(boid_shader, "boid_vx");
	movq	%rdi, 392(%rbp)	 # boid_shader$locs,
	movq	%r14, 384(%rbp)	 # boid_shader,
	call	GetShaderLocationAttrib	 #
 # .\src\main.cpp:1387:     boid_shader.locs[29] = GetShaderLocationAttrib(boid_shader, "boid_vy");
	leaq	.LC41(%rip), %rdx	 #, tmp495
	movq	%r15, %rcx	 # tmp1019,
 # .\src\main.cpp:1386:     boid_shader.locs[28] = GetShaderLocationAttrib(boid_shader, "boid_vx");
	movl	%eax, 112(%rdi)	 # tmp1073, MEM[(int *)boid_shader$locs_258 + 112B]
 # .\src\main.cpp:1387:     boid_shader.locs[29] = GetShaderLocationAttrib(boid_shader, "boid_vy");
	movq	%rdi, 392(%rbp)	 # boid_shader$locs,
	movq	%r14, 384(%rbp)	 # boid_shader,
	call	GetShaderLocationAttrib	 #
 # .\src\main.cpp:1389:     DEBUG("boid_x at: %d", boid_shader.locs[26]);
	movl	104(%rdi), %edx	 # MEM[(int *)boid_shader$locs_258 + 104B], MEM[(int *)boid_shader$locs_258 + 104B]
	leaq	.LC42(%rip), %rcx	 #, tmp497
 # .\src\main.cpp:1387:     boid_shader.locs[29] = GetShaderLocationAttrib(boid_shader, "boid_vy");
	movl	%eax, 116(%rdi)	 # tmp1074, MEM[(int *)boid_shader$locs_258 + 116B]
 # .\src\main.cpp:1389:     DEBUG("boid_x at: %d", boid_shader.locs[26]);
	call	TextFormat	 #
 # .\src\main.cpp:1389:     DEBUG("boid_x at: %d", boid_shader.locs[26]);
	movl	$2, %ecx	 #,
 # .\src\main.cpp:1389:     DEBUG("boid_x at: %d", boid_shader.locs[26]);
	movq	%rax, %rdx	 # tmp1075, _197
 # .\src\main.cpp:1389:     DEBUG("boid_x at: %d", boid_shader.locs[26]);
	call	TraceLog	 #
 # .\src\main.cpp:1390:     DEBUG("viewPos at: %d", boid_shader.locs[SHADER_LOC_VECTOR_VIEW]);
	movl	44(%rdi), %edx	 # MEM[(int *)boid_shader$locs_258 + 44B], MEM[(int *)boid_shader$locs_258 + 44B]
	leaq	.LC43(%rip), %rcx	 #, tmp499
	call	TextFormat	 #
 # .\src\main.cpp:1390:     DEBUG("viewPos at: %d", boid_shader.locs[SHADER_LOC_VECTOR_VIEW]);
	movl	$2, %ecx	 #,
 # .\src\main.cpp:1390:     DEBUG("viewPos at: %d", boid_shader.locs[SHADER_LOC_VECTOR_VIEW]);
	movq	%rax, %rdx	 # tmp1076, _200
 # .\src\main.cpp:1390:     DEBUG("viewPos at: %d", boid_shader.locs[SHADER_LOC_VECTOR_VIEW]);
	call	TraceLog	 #
 # .\src\main.cpp:1391:     DEBUG("instanceTransform at: %d", boid_shader.locs[SHADER_LOC_MATRIX_MODEL]);
	movl	36(%rdi), %edx	 # MEM[(int *)boid_shader$locs_258 + 36B], MEM[(int *)boid_shader$locs_258 + 36B]
	leaq	.LC44(%rip), %rcx	 #, tmp501
	call	TextFormat	 #
 # .\src\main.cpp:1391:     DEBUG("instanceTransform at: %d", boid_shader.locs[SHADER_LOC_MATRIX_MODEL]);
	movl	$2, %ecx	 #,
 # .\src\main.cpp:1391:     DEBUG("instanceTransform at: %d", boid_shader.locs[SHADER_LOC_MATRIX_MODEL]);
	movq	%rax, %rdx	 # tmp1077, _203
 # .\src\main.cpp:1391:     DEBUG("instanceTransform at: %d", boid_shader.locs[SHADER_LOC_MATRIX_MODEL]);
	call	TraceLog	 #
 # .\src\main.cpp:1393:     Material matInstances = LoadMaterialDefault();
	leaq	560(%rbp), %rcx	 #, tmp502
	call	LoadMaterialDefault	 #
 # .\src\main.cpp:1395:     matInstances.maps[MATERIAL_MAP_DIFFUSE].color = RED;
	movq	576(%rbp), %rax	 # matInstances.maps, matInstances.maps
 # .\src\main.cpp:1397:     BoidList boid_list(num_boids);
	movl	%r12d, %edx	 # _3,
 # .\src\main.cpp:1394:     matInstances.shader = boid_shader;
	movq	%rdi, 568(%rbp)	 # boid_shader$locs, matInstances.shader
 # .\src\main.cpp:1397:     BoidList boid_list(num_boids);
	leaq	464(%rbp), %rdi	 #, tmp1022
 # .\src\main.cpp:1394:     matInstances.shader = boid_shader;
	movq	%r14, 560(%rbp)	 # boid_shader, matInstances.shader
 # .\src\main.cpp:1395:     matInstances.maps[MATERIAL_MAP_DIFFUSE].color = RED;
	movl	$-13162010, 20(%rax)	 #, MEM <vector(4) unsigned char> [(unsigned char *)_17 + 20B]
 # .\src\main.cpp:1397:     BoidList boid_list(num_boids);
	movq	%rdi, %rcx	 # tmp1022,
	movq	%rdi, 24(%rbp)	 # tmp1022, %sfp
 # .\src\main.cpp:1415:     Ui ui;
	leaq	415(%rbp), %rdi	 #, tmp1020
 # .\src\main.cpp:1397:     BoidList boid_list(num_boids);
	call	_ZN8BoidListC1Ei	 #
.LEHE63:
 # .\src\main.cpp:1399:     Rules rules = {
	movq	.LC47(%rip), %rax	 #, tmp507
 # .\src\main.cpp:1415:     Ui ui;
	movq	%rdi, %rcx	 # tmp1020,
 # .\src\main.cpp:1399:     Rules rules = {
	vmovups	.LC46(%rip), %xmm0	 #, tmp506
	movb	$0, 792(%rbp)	 #, rules.show_lines
	movq	%rax, 768(%rbp)	 # tmp507, MEM <vector(2) float> [(float *)&rules + 16B]
	movabsq	$4417130515383975966, %rax	 #, tmp1323
	movq	%rax, 776(%rbp)	 # tmp1323, MEM <unsigned long long> [(void *)&rules + 24B]
	movabsq	$3939278218913959117, %rax	 #, tmp1324
	movq	%rax, 784(%rbp)	 # tmp1324, MEM <unsigned long long> [(float *)&rules + 32B]
	movq	.LC48(%rip), %rax	 #, tmp510
 # .\src\main.cpp:1415:     Ui ui;
	movq	%rdi, -56(%rbp)	 # tmp1020, %sfp
 # .\src\main.cpp:1399:     Rules rules = {
	movq	%rax, 796(%rbp)	 # tmp510, MEM <vector(2) int> [(int *)&rules + 44B]
	vmovups	%xmm0, 752(%rbp)	 # tmp506, MEM <vector(4) float> [(float *)&rules]
.LEHB64:
 # .\src\main.cpp:1415:     Ui ui;
	call	_ZN2UiC1Ev	 #
 # .\src\main.cpp:1419:     myfile.open("log.log");
	movl	$16, %r8d	 #,
	leaq	.LC49(%rip), %rdx	 #, tmp512
	leaq	myfile(%rip), %rcx	 #, tmp513
	call	_ZNSt14basic_ofstreamIcSt11char_traitsIcEE4openEPKcSt13_Ios_Openmode	 #
	vxorps	%xmm6, %xmm6, %xmm6	 # tmp1107
 # .\src\main.cpp:1421:     const uint32_t world_size_mult = std::ceil(sqrt( (BOID_DENSITY_MAGIC_NUMBER / ((double)screen_height)) * ((double) num_boids / (double) screen_width)));
	vcvtsi2sdl	%ebx, %xmm6, %xmm1	 # _163, tmp1107, tmp1109
 # .\src\main.cpp:1421:     const uint32_t world_size_mult = std::ceil(sqrt( (BOID_DENSITY_MAGIC_NUMBER / ((double)screen_height)) * ((double) num_boids / (double) screen_width)));
	vcvtsi2sdq	%rsi, %xmm6, %xmm0	 # num_boids, tmp1107, tmp1108
 # .\src\main.cpp:1421:     const uint32_t world_size_mult = std::ceil(sqrt( (BOID_DENSITY_MAGIC_NUMBER / ((double)screen_height)) * ((double) num_boids / (double) screen_width)));
	vcvtsi2sdl	%r13d, %xmm6, %xmm2	 # _165, tmp1107, tmp1110
 # .\src\main.cpp:1421:     const uint32_t world_size_mult = std::ceil(sqrt( (BOID_DENSITY_MAGIC_NUMBER / ((double)screen_height)) * ((double) num_boids / (double) screen_width)));
	vdivsd	%xmm1, %xmm0, %xmm0	 # tmp519, tmp514, tmp520
 # .\src\main.cpp:1421:     const uint32_t world_size_mult = std::ceil(sqrt( (BOID_DENSITY_MAGIC_NUMBER / ((double)screen_height)) * ((double) num_boids / (double) screen_width)));
	vmovsd	.LC50(%rip), %xmm1	 #, tmp523
	vdivsd	%xmm2, %xmm1, %xmm1	 # tmp521, tmp523, tmp522
 # .\src\main.cpp:1421:     const uint32_t world_size_mult = std::ceil(sqrt( (BOID_DENSITY_MAGIC_NUMBER / ((double)screen_height)) * ((double) num_boids / (double) screen_width)));
	vmulsd	%xmm1, %xmm0, %xmm0	 # tmp522, tmp520, _24
	vxorpd	%xmm1, %xmm1, %xmm1	 # tmp524
	vucomisd	%xmm0, %xmm1	 # _24, tmp524
	ja	.L1223	 #,
	vsqrtsd	%xmm0, %xmm0, %xmm0	 # _24, _25
.L1113:
 # .\src\main.cpp:1421:     const uint32_t world_size_mult = std::ceil(sqrt( (BOID_DENSITY_MAGIC_NUMBER / ((double)screen_height)) * ((double) num_boids / (double) screen_width)));
	vroundsd	$10, %xmm0, %xmm0, %xmm0	 #, _25, _26
 # .\src\main.cpp:1421:     const uint32_t world_size_mult = std::ceil(sqrt( (BOID_DENSITY_MAGIC_NUMBER / ((double)screen_height)) * ((double) num_boids / (double) screen_width)));
	vcvttsd2siq	%xmm0, %rax	 # _26, tmp525
 # .\src\main.cpp:1424:     const int world_height = screen_height * world_size_mult;
	movl	-24(%rbp), %r12d	 # %sfp, world_height
 # .\src\main.cpp:1423:     const int world_width = screen_width * world_size_mult;
	movl	%ebx, %edi	 # _163, world_width
 # .\src\main.cpp:1426:     Camera2D cam = { 0 };
	vpxor	%xmm0, %xmm0, %xmm0	 # tmp526
 # .\src\main.cpp:1427:     cam.zoom = static_cast<float>(screen_width) / world_width;
	vcvtsi2ssl	%ebx, %xmm6, %xmm1	 # _163, tmp1107, tmp1111
 # .\src\main.cpp:1430:         .position = (Vector3){world_width/2.f, 200.f, world_height/2.f},            
	vmovss	.LC52(%rip), %xmm5	 #, tmp1330
 # .\src\main.cpp:1440:     BoidMap boid_map(world_height, world_width, CELL_WIDTH);
	movl	$100, %r9d	 #,
 # .\src\main.cpp:1426:     Camera2D cam = { 0 };
	vmovdqu	%xmm0, 496(%rbp)	 # tmp526, cam
 # .\src\main.cpp:1429:     Camera camera = {
	vmovdqu	%xmm0, 656(%rbp)	 # tmp526, MEM <char[32]> [(struct Camera3D *)&camera]
 # .\src\main.cpp:1423:     const int world_width = screen_width * world_size_mult;
	imull	%eax, %edi	 # tmp525, world_width
 # .\src\main.cpp:1429:     Camera camera = {
	vmovdqu	%xmm0, 672(%rbp)	 # tmp526, MEM <char[32]> [(struct Camera3D *)&camera]
 # .\src\main.cpp:1424:     const int world_height = screen_height * world_size_mult;
	imull	%eax, %r12d	 # tmp525, world_height
 # .\src\main.cpp:1421:     const uint32_t world_size_mult = std::ceil(sqrt( (BOID_DENSITY_MAGIC_NUMBER / ((double)screen_height)) * ((double) num_boids / (double) screen_width)));
	movl	%eax, -64(%rbp)	 # tmp525, %sfp
 # .\src\main.cpp:1440:     BoidMap boid_map(world_height, world_width, CELL_WIDTH);
	leaq	608(%rbp), %rax	 #, tmp1039
	movq	%rax, %rcx	 # tmp1039,
	movq	%rax, 16(%rbp)	 # tmp1039, %sfp
 # .\src\main.cpp:1427:     cam.zoom = static_cast<float>(screen_width) / world_width;
	vcvtsi2ssl	%edi, %xmm6, %xmm8	 # world_width, tmp1107, tmp1112
 # .\src\main.cpp:1440:     BoidMap boid_map(world_height, world_width, CELL_WIDTH);
	movl	%edi, %r8d	 # world_width,
 # .\src\main.cpp:1427:     cam.zoom = static_cast<float>(screen_width) / world_width;
	vmovss	%xmm1, -60(%rbp)	 # _31, %sfp
 # .\src\main.cpp:1430:         .position = (Vector3){world_width/2.f, 200.f, world_height/2.f},            
	vcvtsi2ssl	%r12d, %xmm6, %xmm0	 # world_height, tmp1107, tmp1113
 # .\src\main.cpp:1440:     BoidMap boid_map(world_height, world_width, CELL_WIDTH);
	movl	%r12d, %edx	 # world_height,
 # .\src\main.cpp:1426:     Camera2D cam = { 0 };
	movq	$0, 512(%rbp)	 #, cam
 # .\src\main.cpp:1427:     cam.zoom = static_cast<float>(screen_width) / world_width;
	vdivss	%xmm8, %xmm1, %xmm9	 # _32, _31, cam$zoom
 # .\src\main.cpp:1430:         .position = (Vector3){world_width/2.f, 200.f, world_height/2.f},            
	vmulss	%xmm0, %xmm5, %xmm7	 # camera$fovy, tmp1330, camera$position$z
	vmovss	%xmm0, 12(%rbp)	 # camera$fovy, %sfp
 # .\src\main.cpp:1430:         .position = (Vector3){world_width/2.f, 200.f, world_height/2.f},            
	vmulss	.LC52(%rip), %xmm8, %xmm8	 #, _32, camera$position$x
 # .\src\main.cpp:1440:     BoidMap boid_map(world_height, world_width, CELL_WIDTH);
	call	_ZN7BoidMapC1Eiii	 #
.LEHE64:
 # C:/msys64/ucrt64/include/time.h:256: static __inline time_t __CRTDECL time(time_t *_Time) { return _time64(_Time); }
	xorl	%ecx, %ecx	 #
.LEHB65:
	call	*__imp__time64(%rip)	 #
 # .\src\main.cpp:1442:     std::srand(std::time(nullptr));
	movl	%eax, %ecx	 # tmp1079, _322
	call	srand	 #
 # .\src\main.cpp:1449:     std::uniform_real_distribution<float> width_distribution2 (-((world_width - rules.edge_width * 2) /  16) / 2, ((world_width - rules.edge_width * 2) /  16) / 2);
	movl	776(%rbp), %eax	 # rules.edge_width, tmp1333
 # .\src\main.cpp:1449:     std::uniform_real_distribution<float> width_distribution2 (-((world_width - rules.edge_width * 2) /  16) / 2, ((world_width - rules.edge_width * 2) /  16) / 2);
	movl	%edi, %edx	 # world_width, _40
 # .\src\main.cpp:1453:     for (int i = 0; i < boid_list.m_size; i++) {
	movl	480(%rbp), %ecx	 # boid_list.m_size,
 # .\src\main.cpp:1449:     std::uniform_real_distribution<float> width_distribution2 (-((world_width - rules.edge_width * 2) /  16) / 2, ((world_width - rules.edge_width * 2) /  16) / 2);
	addl	%eax, %eax	 # tmp533
 # .\src\main.cpp:1449:     std::uniform_real_distribution<float> width_distribution2 (-((world_width - rules.edge_width * 2) /  16) / 2, ((world_width - rules.edge_width * 2) /  16) / 2);
	subl	%eax, %edx	 # tmp533, _40
 # .\src\main.cpp:1449:     std::uniform_real_distribution<float> width_distribution2 (-((world_width - rules.edge_width * 2) /  16) / 2, ((world_width - rules.edge_width * 2) /  16) / 2);
	leal	31(%rdx), %eax	 #, tmp536
	cmovns	%edx, %eax	 # tmp536,, _40, _40
	sarl	$5, %eax	 #, tmp537
	vcvtsi2ssl	%eax, %xmm6, %xmm0	 # tmp537, tmp1107, tmp1114
	negl	%eax	 # tmp538
	vcvtsi2ssl	%eax, %xmm6, %xmm15	 # tmp538, tmp1107, tmp1115
 # .\src\main.cpp:1450:     std::uniform_real_distribution<float> height_distribution2 (-((world_width - rules.edge_width * 2) /  9) / 2, ((world_width - rules.edge_width * 2) /  9) / 2);
	movslq	%edx, %rax	 # _40, _40
	sarl	$31, %edx	 #, tmp543
	imulq	$954437177, %rax, %rax	 #, _40, tmp540
	sarq	$34, %rax	 #, tmp542
	subl	%edx, %eax	 # tmp543, _44
	vcvtsi2ssl	%eax, %xmm6, %xmm13	 # _44, tmp1107, tmp1116
	negl	%eax	 # tmp544
	vcvtsi2ssl	%eax, %xmm6, %xmm14	 # tmp544, tmp1107, tmp1117
 # .\src\main.cpp:1453:     for (int i = 0; i < boid_list.m_size; i++) {
	testl	%ecx, %ecx	 #
	jle	.L1127	 #,
	vsubss	%xmm15, %xmm0, %xmm3	 # _43, _42, tmp1016
	vsubss	%xmm14, %xmm13, %xmm13	 # _46, _45, tmp1017
 # .\src\main.cpp:1454:         boid_list.m_boid_store->index_next[i] = -1;
	xorl	%esi, %esi	 # ivtmp.2780
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/random.tcc:125: 	_M_x = __detail::__mod<_UIntType, __m>(__s);
	movl	$1, %ebx	 #, generator$_M_x
 # .\src\main.cpp:1454:         boid_list.m_boid_store->index_next[i] = -1;
	movq	464(%rbp), %r8	 # boid_list.m_boid_store, _67
	vmovss	.LC53(%rip), %xmm12	 #, tmp1024
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/random.tcc:3364: 	  __sum += _RealType(__urng() - __urng.min()) * __tmp;
	vxorps	%xmm10, %xmm10, %xmm10	 # tmp624
	vmovss	.LC4(%rip), %xmm11	 #, tmp1029
	vmovss	%xmm3, 64(%rbp)	 # tmp1016, %sfp
	jmp	.L1128	 #
.L1235:
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/random.h:1885: 	  return (__aurng() * (__p.b() - __p.a())) + __p.a();
	vfmadd132ss	%xmm13, %xmm14, %xmm0	 # tmp1017, _46, _867
 # .\src\main.cpp:1463:         boid_list.m_boid_store->ys[i] = home_index_y * ((world_height - rules.edge_width * 2) /  9) + rules.edge_width + height_distribution2(generator);
	movq	8(%r8), %rax	 # _67->ys, _67->ys
 # .\src\main.cpp:1463:         boid_list.m_boid_store->ys[i] = home_index_y * ((world_height - rules.edge_width * 2) /  9) + rules.edge_width + height_distribution2(generator);
	vaddss	%xmm0, %xmm1, %xmm0	 # _867, _85, tmp668
 # .\src\main.cpp:1463:         boid_list.m_boid_store->ys[i] = home_index_y * ((world_height - rules.edge_width * 2) /  9) + rules.edge_width + height_distribution2(generator);
	vmovss	%xmm0, (%rax,%rsi,4)	 # tmp668, *_870
 # .\src\main.cpp:1453:     for (int i = 0; i < boid_list.m_size; i++) {
	addq	$1, %rsi	 #, ivtmp.2780
	cmpl	%esi, 480(%rbp)	 # ivtmp.2780, boid_list.m_size
	jle	.L1127	 #,
.L1128:
 # .\src\main.cpp:1454:         boid_list.m_boid_store->index_next[i] = -1;
	movq	32(%r8), %rax	 # prephitmp_858->index_next, prephitmp_858->index_next
	movl	$-1, (%rax,%rsi,4)	 #, *_51
 # .\src\main.cpp:1455:         boid_list.m_boid_store->vxs[i] = (std::rand() % 3) - 1;
	call	rand	 #
 # .\src\main.cpp:1455:         boid_list.m_boid_store->vxs[i] = (std::rand() % 3) - 1;
	movq	464(%rbp), %rdx	 # boid_list.m_boid_store, boid_list.m_boid_store
 # .\src\main.cpp:1455:         boid_list.m_boid_store->vxs[i] = (std::rand() % 3) - 1;
	movl	%eax, %r8d	 # _52, tmp554
 # .\src\main.cpp:1455:         boid_list.m_boid_store->vxs[i] = (std::rand() % 3) - 1;
	movq	16(%rdx), %rcx	 # _55->vxs, _55->vxs
 # .\src\main.cpp:1455:         boid_list.m_boid_store->vxs[i] = (std::rand() % 3) - 1;
	movslq	%eax, %rdx	 # _52, _52
	sarl	$31, %r8d	 #, tmp554
	imulq	$1431655766, %rdx, %rdx	 #, _52, tmp552
	shrq	$32, %rdx	 #, tmp553
	subl	%r8d, %edx	 # tmp554, tmp550
	leal	(%rdx,%rdx,2), %edx	 #, tmp557
	subl	%edx, %eax	 # tmp557, tmp558
 # .\src\main.cpp:1455:         boid_list.m_boid_store->vxs[i] = (std::rand() % 3) - 1;
	subl	$1, %eax	 #, tmp559
 # .\src\main.cpp:1455:         boid_list.m_boid_store->vxs[i] = (std::rand() % 3) - 1;
	vcvtsi2ssl	%eax, %xmm6, %xmm0	 # tmp559, tmp1107, tmp1118
	vmovss	%xmm0, (%rcx,%rsi,4)	 # tmp560, *_57
 # .\src\main.cpp:1456:         boid_list.m_boid_store->vys[i] = (std::rand() % 3) - 1;
	call	rand	 #
 # .\src\main.cpp:1456:         boid_list.m_boid_store->vys[i] = (std::rand() % 3) - 1;
	movq	464(%rbp), %rdx	 # boid_list.m_boid_store, boid_list.m_boid_store
 # .\src\main.cpp:1456:         boid_list.m_boid_store->vys[i] = (std::rand() % 3) - 1;
	movl	%eax, %r8d	 # _59, tmp567
 # .\src\main.cpp:1456:         boid_list.m_boid_store->vys[i] = (std::rand() % 3) - 1;
	movq	24(%rdx), %rcx	 # _62->vys, _62->vys
 # .\src\main.cpp:1456:         boid_list.m_boid_store->vys[i] = (std::rand() % 3) - 1;
	movslq	%eax, %rdx	 # _59, _59
	sarl	$31, %r8d	 #, tmp567
	imulq	$1431655766, %rdx, %rdx	 #, _59, tmp565
	shrq	$32, %rdx	 #, tmp566
	subl	%r8d, %edx	 # tmp567, tmp563
	leal	(%rdx,%rdx,2), %edx	 #, tmp570
	subl	%edx, %eax	 # tmp570, tmp571
 # .\src\main.cpp:1456:         boid_list.m_boid_store->vys[i] = (std::rand() % 3) - 1;
	subl	$1, %eax	 #, tmp572
 # .\src\main.cpp:1456:         boid_list.m_boid_store->vys[i] = (std::rand() % 3) - 1;
	vcvtsi2ssl	%eax, %xmm6, %xmm0	 # tmp572, tmp1107, tmp1119
	vmovss	%xmm0, (%rcx,%rsi,4)	 # tmp573, *_64
 # .\src\main.cpp:1457:         boid_list.m_boid_store->homes[i] = rand() % 144;
	call	rand	 #
 # .\src\main.cpp:1457:         boid_list.m_boid_store->homes[i] = rand() % 144;
	movq	464(%rbp), %r8	 # boid_list.m_boid_store, _67
 # .\src\main.cpp:1462:         boid_list.m_boid_store->xs[i] = home_index_x * ((world_width - rules.edge_width * 2) /  16) + rules.edge_width + width_distribution2(generator);
	movl	%edi, %r11d	 # world_width, tmp587
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/random.tcc:3371: 	  __ret = std::nextafter(_RealType(1), _RealType(0));
	vmovss	.LC24(%rip), %xmm5	 #, tmp1345
 # .\src\main.cpp:1457:         boid_list.m_boid_store->homes[i] = rand() % 144;
	movslq	%eax, %rdx	 # _66, _66
	movl	%eax, %ecx	 # _66, tmp578
	imulq	$954437177, %rdx, %rdx	 #, _66, tmp575
	sarl	$31, %ecx	 #, tmp578
	sarq	$37, %rdx	 #, tmp577
	subl	%ecx, %edx	 # tmp578, _70
	leal	(%rdx,%rdx,8), %ecx	 #, tmp581
	sall	$4, %ecx	 #, tmp582
	subl	%ecx, %eax	 # tmp582, _66
	movl	%eax, %edx	 # _66, _70
 # .\src\main.cpp:1457:         boid_list.m_boid_store->homes[i] = rand() % 144;
	movq	40(%r8), %rax	 # _67->homes, _67->homes
 # .\src\main.cpp:1459:         int home_index_y = boid_list.m_boid_store->homes[i] / 16;
	leal	15(%rdx), %ecx	 #, tmp585
 # .\src\main.cpp:1460:         int home_index_x = boid_list.m_boid_store->homes[i] % 16;
	movl	%edx, %r13d	 # _70, tmp593
 # .\src\main.cpp:1457:         boid_list.m_boid_store->homes[i] = rand() % 144;
	movl	%edx, (%rax,%rsi,4)	 # _70, *_69
 # .\src\main.cpp:1462:         boid_list.m_boid_store->xs[i] = home_index_x * ((world_width - rules.edge_width * 2) /  16) + rules.edge_width + width_distribution2(generator);
	movl	776(%rbp), %r9d	 # rules.edge_width, _71
 # .\src\main.cpp:1459:         int home_index_y = boid_list.m_boid_store->homes[i] / 16;
	cmovns	%edx, %ecx	 # tmp585,, _70, _70
 # .\src\main.cpp:1462:         boid_list.m_boid_store->xs[i] = home_index_x * ((world_width - rules.edge_width * 2) /  16) + rules.edge_width + width_distribution2(generator);
	leal	(%r9,%r9), %r10d	 #, _72
 # .\src\main.cpp:1459:         int home_index_y = boid_list.m_boid_store->homes[i] / 16;
	sarl	$4, %ecx	 #, tmp586
 # .\src\main.cpp:1462:         boid_list.m_boid_store->xs[i] = home_index_x * ((world_width - rules.edge_width * 2) /  16) + rules.edge_width + width_distribution2(generator);
	subl	%r10d, %r11d	 # _72, tmp587
 # .\src\main.cpp:1462:         boid_list.m_boid_store->xs[i] = home_index_x * ((world_width - rules.edge_width * 2) /  16) + rules.edge_width + width_distribution2(generator);
	leal	15(%r11), %eax	 #, tmp590
	cmovns	%r11d, %eax	 # tmp590,, tmp587, tmp589
 # .\src\main.cpp:1460:         int home_index_x = boid_list.m_boid_store->homes[i] % 16;
	sarl	$31, %r13d	 #, tmp593
	shrl	$28, %r13d	 #, tmp594
 # .\src\main.cpp:1462:         boid_list.m_boid_store->xs[i] = home_index_x * ((world_width - rules.edge_width * 2) /  16) + rules.edge_width + width_distribution2(generator);
	sarl	$4, %eax	 #, tmp589
	movl	%eax, %r11d	 # tmp589, tmp591
 # .\src\main.cpp:1460:         int home_index_x = boid_list.m_boid_store->homes[i] % 16;
	leal	(%rdx,%r13), %eax	 #, tmp595
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/random.tcc:61: 	    _Tp __t1 = __a * (__x % __q);
	movl	%ebx, %edx	 # generator$_M_x, tmp604
 # .\src\main.cpp:1460:         int home_index_x = boid_list.m_boid_store->homes[i] % 16;
	andl	$15, %eax	 #, tmp596
	subl	%r13d, %eax	 # tmp594, home_index_x
 # .\src\main.cpp:1462:         boid_list.m_boid_store->xs[i] = home_index_x * ((world_width - rules.edge_width * 2) /  16) + rules.edge_width + width_distribution2(generator);
	imull	%r11d, %eax	 # tmp591, tmp598
 # .\src\main.cpp:1462:         boid_list.m_boid_store->xs[i] = home_index_x * ((world_width - rules.edge_width * 2) /  16) + rules.edge_width + width_distribution2(generator);
	addl	%r9d, %eax	 # _71, tmp599
 # .\src\main.cpp:1462:         boid_list.m_boid_store->xs[i] = home_index_x * ((world_width - rules.edge_width * 2) /  16) + rules.edge_width + width_distribution2(generator);
	vcvtsi2ssl	%eax, %xmm6, %xmm1	 # tmp599, tmp1107, tmp1120
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/random.tcc:61: 	    _Tp __t1 = __a * (__x % __q);
	movl	%ebx, %eax	 # generator$_M_x, generator$_M_x
	imulq	$110892733, %rax, %rax	 #, generator$_M_x, tmp602
	shrq	$32, %rax	 #, tmp603
	subl	%eax, %edx	 # tmp603, tmp604
	shrl	%edx	 # tmp605
	addl	%eax, %edx	 # tmp603, tmp606
	shrl	$16, %edx	 #, tmp600
	imull	$127773, %edx, %eax	 #, tmp600, tmp607
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/random.tcc:62: 	    _Tp __t2 = __r * (__x / __q);
	imull	$2836, %edx, %edx	 #, tmp600, __t2
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/random.tcc:61: 	    _Tp __t1 = __a * (__x % __q);
	subl	%eax, %ebx	 # tmp607, tmp608
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/random.tcc:61: 	    _Tp __t1 = __a * (__x % __q);
	imull	$16807, %ebx, %r11d	 #, tmp608, __t1
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/random.tcc:64: 	      __x = __t1 - __t2;
	movl	%r11d, %ebx	 # __t1, tmp1040
	leal	2147483647(%r11), %eax	 #, tmp616
	subl	%edx, %ebx	 # __t2, tmp1040
	subl	%edx, %eax	 # __t2, tmp1041
	cmpl	%edx, %r11d	 # __t2, __t1
 # .\src\main.cpp:1463:         boid_list.m_boid_store->ys[i] = home_index_y * ((world_height - rules.edge_width * 2) /  9) + rules.edge_width + height_distribution2(generator);
	movl	%r12d, %r11d	 # world_height, tmp630
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/random.tcc:64: 	      __x = __t1 - __t2;
	cmovnb	%ebx, %eax	 # tmp1041,, tmp1040, __x
 # .\src\main.cpp:1463:         boid_list.m_boid_store->ys[i] = home_index_y * ((world_height - rules.edge_width * 2) /  9) + rules.edge_width + height_distribution2(generator);
	subl	%r10d, %r11d	 # _72, tmp630
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/random.tcc:3364: 	  __sum += _RealType(__urng() - __urng.min()) * __tmp;
	leal	-1(%rax), %edx	 #, tmp619
	vcvtsi2ssq	%rdx, %xmm6, %xmm0	 # tmp619, tmp1107, tmp1121
 # .\src\main.cpp:1462:         boid_list.m_boid_store->xs[i] = home_index_x * ((world_width - rules.edge_width * 2) /  16) + rules.edge_width + width_distribution2(generator);
	movq	(%r8), %rdx	 # _67->xs, _67->xs
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/random.tcc:3364: 	  __sum += _RealType(__urng() - __urng.min()) * __tmp;
	vaddss	%xmm10, %xmm0, %xmm0	 # tmp624, tmp618, __sum
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/random.tcc:3367:       __ret = __sum / __tmp;
	vmulss	%xmm12, %xmm0, %xmm0	 # tmp1024, __sum, __ret
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/random.tcc:3371: 	  __ret = std::nextafter(_RealType(1), _RealType(0));
	vcmpless	%xmm0, %xmm11, %xmm2	 #, __ret, tmp1029, tmp1046
	vblendvps	%xmm2, %xmm5, %xmm0, %xmm0	 # tmp1046, tmp1345, __ret, __ret
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/random.h:1885: 	  return (__aurng() * (__p.b() - __p.a())) + __p.a();
	vfmadd132ss	64(%rbp), %xmm15, %xmm0	 # %sfp, _43, _389
 # .\src\main.cpp:1462:         boid_list.m_boid_store->xs[i] = home_index_x * ((world_width - rules.edge_width * 2) /  16) + rules.edge_width + width_distribution2(generator);
	vaddss	%xmm0, %xmm1, %xmm1	 # _389, _77, tmp629
 # .\src\main.cpp:1462:         boid_list.m_boid_store->xs[i] = home_index_x * ((world_width - rules.edge_width * 2) /  16) + rules.edge_width + width_distribution2(generator);
	vmovss	%xmm1, (%rdx,%rsi,4)	 # tmp629, *_79
 # .\src\main.cpp:1463:         boid_list.m_boid_store->ys[i] = home_index_y * ((world_height - rules.edge_width * 2) /  9) + rules.edge_width + height_distribution2(generator);
	movslq	%r11d, %rdx	 # tmp630, tmp632
	sarl	$31, %r11d	 #, tmp636
	imulq	$954437177, %rdx, %rdx	 #, tmp632, tmp633
	sarq	$33, %rdx	 #, tmp635
	subl	%r11d, %edx	 # tmp636, tmp631
 # .\src\main.cpp:1463:         boid_list.m_boid_store->ys[i] = home_index_y * ((world_height - rules.edge_width * 2) /  9) + rules.edge_width + height_distribution2(generator);
	imull	%ecx, %edx	 # tmp586, tmp637
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/random.tcc:61: 	    _Tp __t1 = __a * (__x % __q);
	movl	%eax, %ecx	 # __x, __x
	imulq	$110892733, %rcx, %rcx	 #, __x, tmp641
 # .\src\main.cpp:1463:         boid_list.m_boid_store->ys[i] = home_index_y * ((world_height - rules.edge_width * 2) /  9) + rules.edge_width + height_distribution2(generator);
	addl	%r9d, %edx	 # _71, tmp638
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/random.tcc:61: 	    _Tp __t1 = __a * (__x % __q);
	shrq	$32, %rcx	 #, tmp642
 # .\src\main.cpp:1463:         boid_list.m_boid_store->ys[i] = home_index_y * ((world_height - rules.edge_width * 2) /  9) + rules.edge_width + height_distribution2(generator);
	vcvtsi2ssl	%edx, %xmm6, %xmm1	 # tmp638, tmp1107, tmp1122
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/random.tcc:61: 	    _Tp __t1 = __a * (__x % __q);
	movl	%eax, %edx	 # __x, tmp643
	subl	%ecx, %edx	 # tmp642, tmp643
	shrl	%edx	 # tmp644
	addl	%ecx, %edx	 # tmp642, tmp645
	shrl	$16, %edx	 #, tmp639
	imull	$127773, %edx, %ecx	 #, tmp639, tmp646
	subl	%ecx, %eax	 # tmp646, tmp647
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/random.tcc:61: 	    _Tp __t1 = __a * (__x % __q);
	imull	$16807, %eax, %ecx	 #, tmp647, __t1
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/random.tcc:62: 	    _Tp __t2 = __r * (__x / __q);
	imull	$2836, %edx, %eax	 #, tmp639, __t2
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/random.tcc:64: 	      __x = __t1 - __t2;
	leal	2147483647(%rcx), %ebx	 #, tmp655
	movl	%ecx, %edx	 # __t1, tmp1042
	subl	%eax, %edx	 # __t2, tmp1042
	subl	%eax, %ebx	 # __t2, tmp1043
	cmpl	%eax, %ecx	 # __t2, __t1
	cmovnb	%edx, %ebx	 # tmp1043,, tmp1042, generator$_M_x
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/random.tcc:3364: 	  __sum += _RealType(__urng() - __urng.min()) * __tmp;
	leal	-1(%rbx), %eax	 #, tmp658
	vcvtsi2ssq	%rax, %xmm6, %xmm0	 # tmp658, tmp1107, tmp1123
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/random.tcc:3364: 	  __sum += _RealType(__urng() - __urng.min()) * __tmp;
	vaddss	%xmm10, %xmm0, %xmm0	 # tmp624, tmp657, __sum
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/random.tcc:3367:       __ret = __sum / __tmp;
	vmulss	%xmm12, %xmm0, %xmm0	 # tmp1024, __sum, __ret
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/random.tcc:3368:       if (__builtin_expect(__ret >= _RealType(1), 0))
	vcomiss	%xmm11, %xmm0	 # tmp1029, __ret
	jb	.L1235	 #,
 # .\src\main.cpp:1463:         boid_list.m_boid_store->ys[i] = home_index_y * ((world_height - rules.edge_width * 2) /  9) + rules.edge_width + height_distribution2(generator);
	vmovaps	%xmm13, %xmm0	 # tmp1017, _385
 # .\src\main.cpp:1463:         boid_list.m_boid_store->ys[i] = home_index_y * ((world_height - rules.edge_width * 2) /  9) + rules.edge_width + height_distribution2(generator);
	movq	8(%r8), %rax	 # _67->ys, _67->ys
 # .\src\main.cpp:1463:         boid_list.m_boid_store->ys[i] = home_index_y * ((world_height - rules.edge_width * 2) /  9) + rules.edge_width + height_distribution2(generator);
	vfmadd132ss	.LC24(%rip), %xmm14, %xmm0	 #, _46, _385
	vaddss	%xmm0, %xmm1, %xmm1	 # _385, _85, tmp672
 # .\src\main.cpp:1463:         boid_list.m_boid_store->ys[i] = home_index_y * ((world_height - rules.edge_width * 2) /  9) + rules.edge_width + height_distribution2(generator);
	vmovss	%xmm1, (%rax,%rsi,4)	 # tmp672, *_87
 # .\src\main.cpp:1453:     for (int i = 0; i < boid_list.m_size; i++) {
	addq	$1, %rsi	 #, ivtmp.2780
	cmpl	%esi, 480(%rbp)	 # ivtmp.2780, boid_list.m_size
	jg	.L1128	 #,
.L1127:
 # .\src\main.cpp:1467:     populate_map(boid_list, boid_map);
	movq	16(%rbp), %rdx	 # %sfp,
	movq	24(%rbp), %rcx	 # %sfp,
	call	_Z12populate_mapR8BoidListR7BoidMap	 #
 # .\src\main.cpp:1478:     row_runner_args args_update[boid_map.m_ysize];
	movslq	608(%rbp), %rdx	 # boid_map.m_ysize,
 # .\src\main.cpp:1478:     row_runner_args args_update[boid_map.m_ysize];
	leaq	(%rdx,%rdx,4), %rax	 #, tmp675
 # .\src\main.cpp:1478:     row_runner_args args_update[boid_map.m_ysize];
	movq	%rdx, %rbx	 #,
 # .\src\main.cpp:1478:     row_runner_args args_update[boid_map.m_ysize];
	leaq	15(,%rax,8), %rax	 #, tmp677
	andq	$-16, %rax	 #, tmp679
	call	___chkstk_ms
	subq	%rax, %rsp	 # tmp681,
	leaq	64(%rsp), %rax	 #, tmp684
	movq	%rax, -32(%rbp)	 # tmp684, %sfp
 # .\src\main.cpp:1479:     rebuild_args args_rebuild[boid_map.m_ysize];
	movq	%rdx, %rax	 # _90, _90
	salq	$5, %rax	 #, _90
	call	___chkstk_ms
 # .\src\main.cpp:1481:     Boid *index_buffer = (Boid *) malloc(boid_map.m_xsize * boid_map.m_ysize * sizeof(Boid));
	movl	612(%rbp), %ecx	 # boid_map.m_xsize, tmp694
	imull	%edx, %ecx	 # _243, tmp694
 # .\src\main.cpp:1479:     rebuild_args args_rebuild[boid_map.m_ysize];
	subq	%rax, %rsp	 # tmp690,
	leaq	64(%rsp), %rax	 #, tmp693
	movq	%rax, -8(%rbp)	 # tmp693, %sfp
 # .\src\main.cpp:1481:     Boid *index_buffer = (Boid *) malloc(boid_map.m_xsize * boid_map.m_ysize * sizeof(Boid));
	movslq	%ecx, %rcx	 # tmp694, tmp695
 # .\src\main.cpp:1481:     Boid *index_buffer = (Boid *) malloc(boid_map.m_xsize * boid_map.m_ysize * sizeof(Boid));
	salq	$2, %rcx	 #, tmp696
	call	malloc	 #
	movq	%rax, %r8	 # tmp1083, index_buffer
 # .\src\main.cpp:1483:     for (uint32_t i = 0; i < boid_map.m_ysize; i++) {
	testl	%ebx, %ebx	 # _243
	je	.L1132	 #,
	movq	-32(%rbp), %rsi	 # %sfp, tmp684
	movq	-8(%rbp), %rdx	 # %sfp, ivtmp.2778
 # .\src\main.cpp:1483:     for (uint32_t i = 0; i < boid_map.m_ysize; i++) {
	xorl	%ecx, %ecx	 # i
	leaq	752(%rbp), %r9	 #, tmp1018
	movq	24(%rbp), %r10	 # %sfp, tmp1022
	movq	16(%rbp), %r11	 # %sfp, tmp1039
	movq	%rsi, %rax	 # tmp684, ivtmp.2777
.L1131:
 # .\src\main.cpp:1484:         args_update[i] = row_runner_args {
	movl	%ecx, 8(%rax)	 # i, MEM[(unsigned int *)_1065 + 8B]
 # .\src\main.cpp:1483:     for (uint32_t i = 0; i < boid_map.m_ysize; i++) {
	addq	$32, %rdx	 #, ivtmp.2778
	addq	$40, %rax	 #, ivtmp.2777
 # .\src\main.cpp:1492:         args_rebuild[i] = rebuild_args {
	movl	%ecx, -24(%rdx)	 # i, MEM[(unsigned int *)_1060 + 8B]
 # .\src\main.cpp:1483:     for (uint32_t i = 0; i < boid_map.m_ysize; i++) {
	addl	$1, %ecx	 #, i
 # .\src\main.cpp:1484:         args_update[i] = row_runner_args {
	movq	%r11, -40(%rax)	 # tmp1039, MEM[(struct BoidMap * *)_1065]
	movq	%r9, -24(%rax)	 # tmp1018, MEM[(struct Rules * *)_1065 + 16B]
	movq	%rsi, -16(%rax)	 # tmp684, MEM[(struct row_runner_args * *)_1065 + 24B]
	movq	%r10, -8(%rax)	 # tmp1022, MEM[(struct BoidList * *)_1065 + 32B]
 # .\src\main.cpp:1492:         args_rebuild[i] = rebuild_args {
	movq	%r11, -32(%rdx)	 # tmp1039, MEM[(struct BoidMap * *)_1060]
	movq	%r8, -16(%rdx)	 # index_buffer, MEM[(Boid * *)_1060 + 16B]
	movq	%r10, -8(%rdx)	 # tmp1022, MEM[(struct BoidList * *)_1060 + 24B]
 # .\src\main.cpp:1483:     for (uint32_t i = 0; i < boid_map.m_ysize; i++) {
	cmpl	%ebx, %ecx	 # _243, i
	jne	.L1131	 #,
.L1132:
 # .\src\main.cpp:1502:     const uint32_t num_tasks = (boid_list.m_size + (task_size - 1)) / task_size; //to force rounding up
	movl	480(%rbp), %eax	 # boid_list.m_size, tmp1356
	leal	9999(%rax), %r14d	 #,
 # .\src\main.cpp:1502:     const uint32_t num_tasks = (boid_list.m_size + (task_size - 1)) / task_size; //to force rounding up
	movl	$3518437209, %eax	 #, tmp701
 # .\src\main.cpp:1502:     const uint32_t num_tasks = (boid_list.m_size + (task_size - 1)) / task_size; //to force rounding up
	movl	%r14d, 8(%rbp)	 # _100, %sfp
 # .\src\main.cpp:1502:     const uint32_t num_tasks = (boid_list.m_size + (task_size - 1)) / task_size; //to force rounding up
	imulq	%rax, %r14	 # tmp701, tmp700
	shrq	$45, %r14	 #, num_tasks
 # .\src\main.cpp:1503:     populate_args *args_populate = new populate_args[num_tasks];
	movl	%r14d, %eax	 # num_tasks, num_tasks
 # .\src\main.cpp:1503:     populate_args *args_populate = new populate_args[num_tasks];
	leaq	(%rax,%rax,2), %rcx	 #, tmp706
	salq	$3, %rcx	 #, tmp707
	call	_Znay	 #
 # .\src\main.cpp:1505:     DEBUG("Num tasks: %d", num_tasks);
	movl	%r14d, %edx	 # num_tasks,
	leaq	.LC54(%rip), %rcx	 #, tmp714
 # .\src\main.cpp:1503:     populate_args *args_populate = new populate_args[num_tasks];
	movq	%rax, 0(%rbp)	 # tmp1084, %sfp
 # .\src\main.cpp:1505:     DEBUG("Num tasks: %d", num_tasks);
	call	TextFormat	 #
	movq	%rax, %rdx	 # tmp1085, _263
 # .\src\main.cpp:1505:     DEBUG("Num tasks: %d", num_tasks);
	movl	$2, %ecx	 #,
	call	TraceLog	 #
 # .\src\main.cpp:1509:     for (uint32_t i = 0; i < num_tasks; i++) {
	cmpl	$9999, 8(%rbp)	 #, %sfp
	jbe	.L1138	 #,
	cmpl	$289999, 8(%rbp)	 #, %sfp
 # .\src\main.cpp:1513:             .task_size = std::min(task_size, boid_list.m_size - (i * task_size)),
	movl	480(%rbp), %r9d	 # boid_list.m_size, _108
	jbe	.L1185	 #,
	movl	$8, %ecx	 #, tmp729
	movl	%r14d, %edx	 # num_tasks, bnd.2636
	movq	0(%rbp), %rdi	 # %sfp, _261
	vmovd	%r9d, %xmm12	 # _108, vect_cst__691
	vmovd	%ecx, %xmm4	 # tmp729, tmp728
	shrl	$3, %edx	 #,
 # .\src\main.cpp:1512:             .start = i * task_size,
	movl	$10000, %ecx	 #, tmp732
 # .\src\main.cpp:1513:             .task_size = std::min(task_size, boid_list.m_size - (i * task_size)),
	vmovdqu	.LC25(%rip), %ymm3	 #, vect_vec_iv_.2639
	vpbroadcastd	%xmm4, %ymm4	 # tmp728, tmp728
	leaq	(%rdx,%rdx,2), %rdx	 #, tmp724
	vmovdqu	.LC57(%rip), %ymm11	 #, tmp1025
	vmovdqu	.LC58(%rip), %ymm10	 #, tmp1026
	salq	$6, %rdx	 #, tmp725
	vmovdqu	%ymm4, 64(%rbp)	 # tmp728, %sfp
	vmovdqu	.LC59(%rip), %ymm5	 #, tmp1027
 # .\src\main.cpp:1512:             .start = i * task_size,
	vmovd	%ecx, %xmm4	 # tmp732, tmp731
	vmovdqu	.LC60(%rip), %ymm14	 #, tmp1030
	vmovdqu	.LC61(%rip), %ymm15	 #, tmp1031
	vpbroadcastd	%xmm12, %ymm12	 # vect_cst__691, vect_cst__691
	leaq	8(%rdi), %rax	 #, ivtmp.2768
	movq	24(%rbp), %rcx	 # %sfp, tmp1022
	movq	16(%rbp), %r8	 # %sfp, tmp1039
	leaq	8(%rdi,%rdx), %rdx	 #, _1072
	vpbroadcastd	%xmm4, %ymm4	 # tmp731, tmp731
.L1136:
	vmovdqa	%ymm3, %ymm0	 # vect_vec_iv_.2639, vect_vec_iv_.2639
 # .\src\main.cpp:1510:         args_populate[i] = populate_args {
	movq	%r8, -8(%rax)	 # tmp1039, MEM[(struct BoidMap * *)_1100 + -8B]
	addq	$192, %rax	 #, ivtmp.2768
	vpaddd	64(%rbp), %ymm3, %ymm3	 # %sfp, vect_vec_iv_.2639, vect_vec_iv_.2639
 # .\src\main.cpp:1512:             .start = i * task_size,
	vpmulld	%ymm4, %ymm0, %ymm0	 # tmp731, vect_vec_iv_.2639, vect__106.2640
 # .\src\main.cpp:1510:         args_populate[i] = populate_args {
	movq	%r8, -176(%rax)	 # tmp1039, MEM[(struct BoidMap * *)_1100 + 16B]
	movq	%r8, -152(%rax)	 # tmp1039, MEM[(struct BoidMap * *)_1100 + 40B]
	movq	%r8, -128(%rax)	 # tmp1039, MEM[(struct BoidMap * *)_1100 + 64B]
	movq	%r8, -104(%rax)	 # tmp1039, MEM[(struct BoidMap * *)_1100 + 88B]
	movq	%r8, -80(%rax)	 # tmp1039, MEM[(struct BoidMap * *)_1100 + 112B]
 # .\src\main.cpp:1513:             .task_size = std::min(task_size, boid_list.m_size - (i * task_size)),
	vpsubd	%ymm0, %ymm12, %ymm1	 # vect__106.2640, vect_cst__691, vect__785.2642
 # .\src\main.cpp:1510:         args_populate[i] = populate_args {
	movq	%r8, -56(%rax)	 # tmp1039, MEM[(struct BoidMap * *)_1100 + 136B]
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/stl_algobase.h:238:       if (__b < __a)
	vpminud	%ymm4, %ymm1, %ymm1	 # tmp731, vect__785.2642, vect__785.2642
 # .\src\main.cpp:1510:         args_populate[i] = populate_args {
	movq	%r8, -32(%rax)	 # tmp1039, MEM[(struct BoidMap * *)_1100 + 160B]
	vpermd	%ymm1, %ymm11, %ymm2	 # vect__785.2642, tmp1025, tmp737
	vpermd	%ymm1, %ymm10, %ymm13	 # vect__785.2642, tmp1026, tmp747
	movq	%rcx, -184(%rax)	 # tmp1022, MEM[(struct BoidList * *)_1100 + 8B]
	vpblendd	$2, %ymm2, %ymm0, %ymm2	 #, tmp737, vect__106.2640, tmp736
	movq	%rcx, -160(%rax)	 # tmp1022, MEM[(struct BoidList * *)_1100 + 32B]
	vmovq	%xmm2, -192(%rax)	 # tmp739, MEM <vector(2) unsigned int> [(unsigned int *)_1100]
	vpshufd	$229, %ymm0, %ymm2	 #, vect__106.2640, tmp742
	vpblendd	$254, %ymm1, %ymm2, %ymm2	 #, vect__785.2642, tmp742, tmp741
	movq	%rcx, -136(%rax)	 # tmp1022, MEM[(struct BoidList * *)_1100 + 56B]
	vmovq	%xmm2, -168(%rax)	 # tmp743, MEM <vector(2) unsigned int> [(unsigned int *)_1100 + 24B]
	vpshufd	$230, %ymm0, %ymm2	 #, vect__106.2640, tmp746
	vpblendd	$254, %ymm13, %ymm2, %ymm2	 #, tmp747, tmp746, tmp745
	vpermd	%ymm1, %ymm5, %ymm13	 # vect__785.2642, tmp1027, tmp753
	movq	%rcx, -112(%rax)	 # tmp1022, MEM[(struct BoidList * *)_1100 + 80B]
	vmovq	%xmm2, -144(%rax)	 # tmp749, MEM <vector(2) unsigned int> [(unsigned int *)_1100 + 48B]
	vpshufd	$231, %ymm0, %ymm2	 #, vect__106.2640, tmp752
	vpblendd	$254, %ymm13, %ymm2, %ymm2	 #, tmp753, tmp752, tmp751
	vpermd	%ymm1, %ymm15, %ymm13	 # vect__785.2642, tmp1031, tmp759
	movq	%rcx, -88(%rax)	 # tmp1022, MEM[(struct BoidList * *)_1100 + 104B]
	vmovq	%xmm2, -120(%rax)	 # tmp755, MEM <vector(2) unsigned int> [(unsigned int *)_1100 + 72B]
	vpermd	%ymm0, %ymm14, %ymm2	 # vect__106.2640, tmp1030, tmp758
	vpblendd	$254, %ymm13, %ymm2, %ymm2	 #, tmp759, tmp758, tmp757
	vmovdqu	.LC63(%rip), %ymm13	 #, tmp1368
	movq	%rcx, -64(%rax)	 # tmp1022, MEM[(struct BoidList * *)_1100 + 128B]
	vmovq	%xmm2, -96(%rax)	 # tmp762, MEM <vector(2) unsigned int> [(unsigned int *)_1100 + 96B]
	vmovdqu	.LC62(%rip), %ymm2	 #, tmp1367
	vpermd	%ymm1, %ymm13, %ymm13	 # vect__785.2642, tmp1368, tmp766
	movq	%rcx, -40(%rax)	 # tmp1022, MEM[(struct BoidList * *)_1100 + 152B]
	vpermd	%ymm0, %ymm2, %ymm2	 # vect__106.2640, tmp1367, tmp765
	movq	%rcx, -16(%rax)	 # tmp1022, MEM[(struct BoidList * *)_1100 + 176B]
	vpblendd	$254, %ymm13, %ymm2, %ymm2	 #, tmp766, tmp765, tmp764
	vmovdqu	.LC65(%rip), %ymm13	 #, tmp1370
	vmovq	%xmm2, -72(%rax)	 # tmp769, MEM <vector(2) unsigned int> [(unsigned int *)_1100 + 120B]
	vmovdqu	.LC64(%rip), %ymm2	 #, tmp1369
	vpermd	%ymm1, %ymm13, %ymm13	 # vect__785.2642, tmp1370, tmp773
	vpermd	%ymm0, %ymm2, %ymm2	 # vect__106.2640, tmp1369, tmp772
	vpblendd	$254, %ymm13, %ymm2, %ymm2	 #, tmp773, tmp772, tmp771
	vmovq	%xmm2, -48(%rax)	 # tmp776, MEM <vector(2) unsigned int> [(unsigned int *)_1100 + 144B]
	vmovdqu	.LC66(%rip), %ymm2	 #, tmp1371
	vpermd	%ymm0, %ymm2, %ymm0	 # vect__106.2640, tmp1371, tmp779
	vmovdqu	.LC67(%rip), %ymm2	 #, tmp1372
	vpermd	%ymm1, %ymm2, %ymm1	 # vect__785.2642, tmp1372, tmp780
	vpblendd	$254, %ymm1, %ymm0, %ymm0	 #, tmp780, tmp779, tmp778
	vmovq	%xmm0, -24(%rax)	 # tmp783, MEM <vector(2) unsigned int> [(unsigned int *)_1100 + 168B]
	cmpq	%rax, %rdx	 # ivtmp.2768, _1072
	jne	.L1136	 #,
	movl	%r14d, %r8d	 # num_tasks, niters_vector_mult_vf.2637
	andl	$-8, %r8d	 #, niters_vector_mult_vf.2637
	testb	$7, %r14b	 #, num_tasks
	je	.L1236	 #,
	vzeroupper
.L1135:
	imull	$10000, %r8d, %eax	 #, niters_vector_mult_vf.2637, tmp786
	movl	%r9d, %edx	 # _108, ivtmp.2761
	movq	0(%rbp), %rdi	 # %sfp, _261
	movq	24(%rbp), %r10	 # %sfp, tmp1022
	movq	16(%rbp), %r11	 # %sfp, tmp1039
	subl	%eax, %edx	 # tmp786, ivtmp.2761
	movl	%r8d, %eax	 # niters_vector_mult_vf.2637, niters_vector_mult_vf.2637
	leaq	(%rax,%rax,2), %rax	 #, tmp790
	leaq	(%rdi,%rax,8), %rax	 #, ivtmp.2762
.L1140:
 # .\src\main.cpp:1512:             .start = i * task_size,
	movl	%r9d, %ecx	 # _108, tmp793
 # .\src\main.cpp:1510:         args_populate[i] = populate_args {
	movq	%r11, (%rax)	 # tmp1039, MEM[(struct BoidMap * *)_1109]
 # .\src\main.cpp:1512:             .start = i * task_size,
	subl	%edx, %ecx	 # ivtmp.2761, tmp793
 # .\src\main.cpp:1510:         args_populate[i] = populate_args {
	movq	%r10, 16(%rax)	 # tmp1022, MEM[(struct BoidList * *)_1109 + 16B]
 # .\src\main.cpp:1512:             .start = i * task_size,
	movl	%ecx, 8(%rax)	 # tmp793, MEM[(unsigned int *)_1109 + 8B]
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/stl_algobase.h:238:       if (__b < __a)
	movl	$10000, %ecx	 #, tmp1131
	cmpl	%ecx, %edx	 # tmp1131, ivtmp.2761
	cmovbe	%edx, %ecx	 # ivtmp.2761,, tmp794
 # .\src\main.cpp:1509:     for (uint32_t i = 0; i < num_tasks; i++) {
	addl	$1, %r8d	 #, niters_vector_mult_vf.2637
 # .\src\main.cpp:1509:     for (uint32_t i = 0; i < num_tasks; i++) {
	subl	$10000, %edx	 #, ivtmp.2761
	addq	$24, %rax	 #, ivtmp.2762
 # .\src\main.cpp:1510:         args_populate[i] = populate_args {
	movl	%ecx, -12(%rax)	 # tmp794, MEM[(unsigned int *)_1109 + 12B]
 # .\src\main.cpp:1509:     for (uint32_t i = 0; i < num_tasks; i++) {
	cmpl	%r14d, %r8d	 # num_tasks, niters_vector_mult_vf.2637
	jb	.L1140	 #,
.L1138:
	cmpl	$9999, 8(%rbp)	 #, %sfp
	movl	$1, %eax	 #, tmp716
 # .\src\main.cpp:1426:     Camera2D cam = { 0 };
	vxorps	%xmm10, %xmm10, %xmm10	 # cam$target$y
	movl	$0, %edx	 #, tmp718
	vmovaps	%xmm10, %xmm14	 #, cam$target$x
	vmovaps	%xmm10, %xmm11	 #, cam$offset$y
	vmovaps	%xmm10, %xmm12	 #, cam$offset$x
	cmova	%r14d, %eax	 # num_tasks,, tmp715
 # .\src\main.cpp:1541:         float cameraPos[3] = { camera.position.x, camera.position.y, camera.position.z };
	vmovss	.LC68(%rip), %xmm15	 #, tmp1055
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_thread.h:240: 	  : _M_func(std::forward<_Args>(__args)...)
	leaq	16+_ZTVNSt6thread11_State_implINS_8_InvokerISt5tupleIJPFvP10TaskMasterhES4_iEEEEEE(%rip), %r13	 #, tmp1053
	cmova	%eax, %edx	 # tmp715,, tmp718
	movl	%edx, -20(%rbp)	 # tmp718, %sfp
	.p2align 4,,10
	.p2align 3
.L1134:
 # .\src\main.cpp:1518:     while (WindowShouldClose() == false){
	call	WindowShouldClose	 #
.LEHE65:
 # .\src\main.cpp:1518:     while (WindowShouldClose() == false){
	testb	%al, %al	 # tmp1103
	jne	.L1237	 #,
 # .\src\.\task_master\taskmaster.h:45: struct TaskMaster {
	movq	$0, 928(%rbp)	 #, MEM <vector(2) unsigned int> [(unsigned int *)&task_master]
	leaq	66488(%rbp), %rbx	 #, _592
	call	_ZNSt6thread20hardware_concurrencyEv	 #
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/stl_algobase.h:238:       if (__b < __a)
	movl	$64, %edx	 #, tmp1130
 # .\src\.\task_master\taskmaster.h:34: struct Task {
	vpxor	%xmm0, %xmm0, %xmm0	 # tmp802
 # .\src\.\task_master\taskmaster.h:49:     uint32_t num_threads = std::min(std::thread::hardware_concurrency() - 1, (uint32_t) 64);
	subl	$1, %eax	 #, tmp797
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/stl_algobase.h:238:       if (__b < __a)
	cmpl	%edx, %eax	 # tmp1130, tmp797
	cmova	%edx, %eax	 # tmp797,, tmp1130, tmp798
 # .\src\.\task_master\taskmaster.h:45: struct TaskMaster {
	movl	%eax, 936(%rbp)	 # tmp798, task_master.num_threads
	leaq	952(%rbp), %rax	 #, ivtmp.2754
	.p2align 4,,10
	.p2align 3
.L1141:
 # .\src\.\task_master\taskmaster.h:34: struct Task {
	movq	$0, 16(%rax)	 #, MEM[(void * *)_915 + 16B]
 # .\src\.\task_master\ringbuffer.h:9: class RingBuffer
	addq	$32, %rax	 #, ivtmp.2754
 # .\src\.\task_master\taskmaster.h:34: struct Task {
	vmovdqu	%xmm0, -32(%rax)	 # tmp802, MEM <vector(2) long long unsigned int> [(void *)_915]
 # .\src\.\task_master\ringbuffer.h:9: class RingBuffer
	cmpq	%rbx, %rax	 # _592, ivtmp.2754
	jne	.L1141	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_thread.h:97:       id() noexcept : _M_thread() { }
	leaq	66496(%rbp), %rdi	 #, tmp1021
	xorl	%eax, %eax	 # tmp807
	movl	$64, %ecx	 #, tmp808
 # .\src\.\task_master\taskmaster.h:79:         for (int i = 0; i < num_threads; i++) {
	xorl	%esi, %esi	 # ivtmp.2738
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_thread.h:97:       id() noexcept : _M_thread() { }
	movq	%rdi, 64(%rbp)	 # tmp1021, %sfp
 # C:/msys64/ucrt64/include/c++/13.1.0/tuple:194:       : _M_head_impl(__h) { }
	leaq	_Z6runnerP10TaskMasterh(%rip), %r12	 #, tmp1051
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_thread.h:164: 	_M_start_thread(_State_ptr(new _State_impl<_Wrapper>(
	leaq	_ZNSt6thread24_M_thread_deps_never_runEv(%rip), %r15	 #, tmp1052
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_thread.h:97:       id() noexcept : _M_thread() { }
	rep stosq
 # .\src\.\task_master\ringbuffer.h:9: class RingBuffer
	vmovdqu	%xmm0, 66480(%rbp)	 # tmp802, MEM <vector(2) long long unsigned int> [(long long unsigned int *)&task_master + 65552B]
 # .\src\.\task_master\lock.h:36: struct Lock {
	movl	$0, 67072(%rbp)	 #, MEM[(struct Lock *)&task_master + 66144B].lock_internal
 # .\src\main.cpp:1521:         auto t_start = std::chrono::high_resolution_clock::now();
	call	_ZNSt6chrono3_V212system_clock3nowEv	 #
 # .\src\.\task_master\taskmaster.h:79:         for (int i = 0; i < num_threads; i++) {
	movl	936(%rbp), %edx	 # task_master.num_threads,
 # .\src\main.cpp:1521:         auto t_start = std::chrono::high_resolution_clock::now();
	movq	%rax, 56(%rbp)	 # tmp1087, %sfp
 # .\src\.\task_master\taskmaster.h:79:         for (int i = 0; i < num_threads; i++) {
	testl	%edx, %edx	 #
	je	.L1238	 #,
	.p2align 4,,10
	.p2align 3
.L1142:
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_thread.h:97:       id() noexcept : _M_thread() { }
	movq	$0, 440(%rbp)	 #, MEM[(struct id *)&D.234226]._M_thread
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_thread.h:164: 	_M_start_thread(_State_ptr(new _State_impl<_Wrapper>(
	movl	$32, %ecx	 #,
.LEHB66:
	call	_Znwy	 #
.LEHE66:
 # C:/msys64/ucrt64/include/c++/13.1.0/tuple:201: 	: _M_head_impl(std::forward<_UHead>(__h)) { }
	leaq	928(%rbp), %rdi	 #, tmp1028
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_thread.h:240: 	  : _M_func(std::forward<_Args>(__args)...)
	movq	%r13, (%rax)	 # tmp1053, MEM[(struct _State_impl *)_570].D.178931._vptr._State
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_thread.h:164: 	_M_start_thread(_State_ptr(new _State_impl<_Wrapper>(
	movq	%r15, %r8	 # tmp1052,
	leaq	704(%rbp), %rdx	 #, tmp828
 # C:/msys64/ucrt64/include/c++/13.1.0/tuple:201: 	: _M_head_impl(std::forward<_UHead>(__h)) { }
	movl	%esi, 8(%rax)	 # ivtmp.2738, MEM[(struct _Head_base *)_570 + 8B]._M_head_impl
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_thread.h:164: 	_M_start_thread(_State_ptr(new _State_impl<_Wrapper>(
	leaq	440(%rbp), %rcx	 #, tmp829
 # C:/msys64/ucrt64/include/c++/13.1.0/tuple:201: 	: _M_head_impl(std::forward<_UHead>(__h)) { }
	movq	%rdi, 16(%rax)	 # tmp1028, MEM[(struct _Head_base *)_570 + 16B]._M_head_impl
 # C:/msys64/ucrt64/include/c++/13.1.0/tuple:194:       : _M_head_impl(__h) { }
	movq	%r12, 24(%rax)	 # tmp1051, MEM[(struct _Head_base *)_570 + 24B]._M_head_impl
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/unique_ptr.h:176:       __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
	movq	%rax, 704(%rbp)	 # tmp824, MEM[(struct _State * &)_821]
.LEHB67:
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_thread.h:164: 	_M_start_thread(_State_ptr(new _State_impl<_Wrapper>(
	call	_ZNSt6thread15_M_start_threadESt10unique_ptrINS_6_StateESt14default_deleteIS1_EEPFvvE	 #
.LEHE67:
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/unique_ptr.h:403: 	if (__ptr != nullptr)
	movq	704(%rbp), %rcx	 # MEM[(struct _State * &)_821], _573
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/unique_ptr.h:403: 	if (__ptr != nullptr)
	testq	%rcx, %rcx	 # _573
	je	.L1144	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/unique_ptr.h:99: 	delete __ptr;
	movq	(%rcx), %rax	 # _573->_vptr._State, _573->_vptr._State
	call	*8(%rax)	 # MEM[(int (*) () *)_574 + 8B]
.L1144:
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_thread.h:185:       if (joinable())
	cmpq	$0, 66496(%rbp,%rsi,8)	 #, MEM[(const struct thread *)&task_master + 65568B + ivtmp.2738_698 * 8]
	jne	.L1145	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/move.h:205:       __a = _GLIBCXX_MOVE(__b);
	movq	440(%rbp), %rax	 # MEM[(struct id &)&D.234226], MEM[(struct id &)&D.234226]
	movq	%rax, 66496(%rbp,%rsi,8)	 # MEM[(struct id &)&D.234226], MEM[(struct id *)&task_master + 65568B + ivtmp.2738_698 * 8]
 # .\src\.\task_master\taskmaster.h:81:             status[i] = true;
	movb	$1, 67008(%rbp,%rsi)	 #, MEM[(bool *)&task_master + 66080B + ivtmp.2738_698 * 1]
 # .\src\.\task_master\taskmaster.h:79:         for (int i = 0; i < num_threads; i++) {
	addq	$1, %rsi	 #, ivtmp.2738
	cmpl	936(%rbp), %esi	 # task_master.num_threads, ivtmp.2738
	jb	.L1142	 #,
.L1150:
 # .\src\main.cpp:292:     memset(boid_map.m_boid_map, -1, sizeof(Boid) * boid_map.m_xsize * boid_map.m_ysize);
	movslq	608(%rbp), %rdx	 # boid_map.m_ysize, boid_map.m_ysize
 # .\src\main.cpp:292:     memset(boid_map.m_boid_map, -1, sizeof(Boid) * boid_map.m_xsize * boid_map.m_ysize);
	movslq	612(%rbp), %rax	 # boid_map.m_xsize, boid_map.m_xsize
 # .\src\main.cpp:1525:         TaskSync task_populate;
	movq	$0, 416(%rbp)	 #, MEM <volatile vector(2) long int> [(void *)&task_populate]
 # .\src\main.cpp:292:     memset(boid_map.m_boid_map, -1, sizeof(Boid) * boid_map.m_xsize * boid_map.m_ysize);
	movq	624(%rbp), %rcx	 # boid_map.m_boid_map,
 # .\src\main.cpp:292:     memset(boid_map.m_boid_map, -1, sizeof(Boid) * boid_map.m_xsize * boid_map.m_ysize);
	imulq	%rdx, %rax	 # boid_map.m_ysize, tmp821
 # .\src\main.cpp:292:     memset(boid_map.m_boid_map, -1, sizeof(Boid) * boid_map.m_xsize * boid_map.m_ysize);
	movl	$-1, %edx	 #,
	leaq	0(,%rax,4), %r8	 #,
	call	memset	 #
	.p2align 4,,10
	.p2align 3
.L1143:
 # C:/msys64/ucrt64/include/psdk_inc/intrin-impl.h:1800: __buildbittesti(_interlockedbittestandset, __LONG32, "lock bts{l %[Offset],%[Base] | %[Base],%[Offset]}" __FLAGSET, "I")
/APP
 # 1800 "C:/msys64/ucrt64/include/psdk_inc/intrin-impl.h" 1
	lock btsl $0,67072(%rbp) 	 #, MEM[(volatile long int *)&task_master + 66144B]
 # 0 "" 2
 # .\src\.\task_master\lock.h:40:         while (_interlockedbittestandset(&lock_internal, 0)) {}
/NO_APP
	jc	.L1143	 #,
 # .\src\main.cpp:299:     for (int y = 0; y < num_tasks; y++) {
	cmpl	$9999, 8(%rbp)	 #, %sfp
	jbe	.L1154	 #,
 # .\src\.\task_master\ringbuffer.h:18:         size_t next = (head + 1) % capacity;
	movq	66480(%rbp), %rax	 # MEM[(struct RingBuffer *)&task_master + 16B].head, pretmp_904
	movq	0(%rbp), %r8	 # %sfp, ivtmp.2736
 # .\src\main.cpp:299:     for (int y = 0; y < num_tasks; y++) {
	xorl	%ecx, %ecx	 # y
 # .\src\.\task_master\ringbuffer.h:21:             data[head] = item;
	leaq	416(%rbp), %r9	 #, tmp1049
 # .\src\.\task_master\ringbuffer.h:19:         if (next != tail)
	movq	66488(%rbp), %r10	 # MEM[(struct RingBuffer *)&task_master + 16B].tail, _595
 # .\src\.\task_master\ringbuffer.h:18:         size_t next = (head + 1) % capacity;
	leaq	1(%rax), %rdx	 #, tmp846
 # .\src\.\task_master\ringbuffer.h:18:         size_t next = (head + 1) % capacity;
	andl	$2047, %edx	 #, next
 # .\src\.\task_master\ringbuffer.h:19:         if (next != tail)
	cmpq	%r10, %rdx	 # _595, next
	je	.L1154	 #,
.L1239:
 # .\src\.\task_master\ringbuffer.h:21:             data[head] = item;
	salq	$5, %rax	 #, tmp847
 # .\src\main.cpp:299:     for (int y = 0; y < num_tasks; y++) {
	addl	$1, %ecx	 #, y
 # .\src\.\task_master\ringbuffer.h:21:             data[head] = item;
	movl	$0, 944(%rbp,%rax)	 #, MEM <unsigned int> [(struct Task *)_596]
	movq	%r8, 952(%rbp,%rax)	 # ivtmp.2736, MEM[(struct RingBuffer *)&task_master + 16B].data[prephitmp_905].argument_struct
	movq	%r9, 960(%rbp,%rax)	 # tmp1049, MEM[(struct RingBuffer *)&task_master + 16B].data[prephitmp_905].sync
	movq	$0, 968(%rbp,%rax)	 #, MEM[(struct RingBuffer *)&task_master + 16B].data[prephitmp_905].on_complete
 # .\src\.\task_master\ringbuffer.h:22:             head = next;
	movq	%rdx, 66480(%rbp)	 # next, MEM[(struct RingBuffer *)&task_master + 16B].head
 # .\src\main.cpp:299:     for (int y = 0; y < num_tasks; y++) {
	cmpl	%r14d, %ecx	 # num_tasks, y
	jnb	.L1154	 #,
	movq	%rdx, %rax	 # next, pretmp_904
	addq	$24, %r8	 #, ivtmp.2736
 # .\src\.\task_master\ringbuffer.h:18:         size_t next = (head + 1) % capacity;
	leaq	1(%rax), %rdx	 #, tmp846
 # .\src\.\task_master\ringbuffer.h:18:         size_t next = (head + 1) % capacity;
	andl	$2047, %edx	 #, next
 # .\src\.\task_master\ringbuffer.h:19:         if (next != tail)
	cmpq	%r10, %rdx	 # _595, next
	jne	.L1239	 #,
	.p2align 4,,10
	.p2align 3
.L1154:
 # C:/msys64/ucrt64/include/psdk_inc/intrin-impl.h:1800: __buildbittesti(_interlockedbittestandset, __LONG32, "lock bts{l %[Offset],%[Base] | %[Base],%[Offset]}" __FLAGSET, "I")
/APP
 # 1800 "C:/msys64/ucrt64/include/psdk_inc/intrin-impl.h" 1
	lock btsl $0,416(%rbp) 	 #, MEM[(volatile long int *)&task_populate]
 # 0 "" 2
 # .\src\.\task_master\lock.h:40:         while (_interlockedbittestandset(&lock_internal, 0)) {}
/NO_APP
	jc	.L1154	 #,
 # .\src\main.cpp:312:     task_monitor->task_counter += tasks_added;
	movl	420(%rbp), %eax	 # task_populate.task_counter, _603
 # .\src\main.cpp:312:     task_monitor->task_counter += tasks_added;
	movl	-20(%rbp), %esi	 # %sfp, tasks_added
	addl	%esi, %eax	 # tasks_added, _607
	movl	%eax, 420(%rbp)	 # _607, task_populate.task_counter
 # C:/msys64/ucrt64/include/psdk_inc/intrin-impl.h:1809: __buildbittesti(_interlockedbittestandreset, __LONG32, "lock btr{l %[Offset],%[Base] | %[Base],%[Offset]}" __FLAGSET, "I")
/APP
 # 1809 "C:/msys64/ucrt64/include/psdk_inc/intrin-impl.h" 1
	lock btrl $0,416(%rbp) 	 #, MEM[(volatile long int *)&task_populate]
 # 0 "" 2
 # 1809 "C:/msys64/ucrt64/include/psdk_inc/intrin-impl.h" 1
	lock btrl $0,67072(%rbp) 	 #, MEM[(volatile long int *)&task_master + 66144B]
 # 0 "" 2
	.p2align 4,,10
	.p2align 3
/NO_APP
.L1155:
 # C:/msys64/ucrt64/include/psdk_inc/intrin-impl.h:1800: __buildbittesti(_interlockedbittestandset, __LONG32, "lock bts{l %[Offset],%[Base] | %[Base],%[Offset]}" __FLAGSET, "I")
/APP
 # 1800 "C:/msys64/ucrt64/include/psdk_inc/intrin-impl.h" 1
	lock btsl $0,416(%rbp) 	 #, MEM[(volatile long int *)&task_populate]
 # 0 "" 2
 # .\src\.\task_master\lock.h:40:         while (_interlockedbittestandset(&lock_internal, 0)) {}
/NO_APP
	jc	.L1155	 #,
 # .\src\.\task_master\taskmaster.h:26:             if (task_counter == 0) break;
	movl	420(%rbp), %eax	 # task_populate.task_counter, _397
 # .\src\.\task_master\taskmaster.h:26:             if (task_counter == 0) break;
	testl	%eax, %eax	 # _397
	je	.L1156	 #,
 # C:/msys64/ucrt64/include/psdk_inc/intrin-impl.h:1809: __buildbittesti(_interlockedbittestandreset, __LONG32, "lock btr{l %[Offset],%[Base] | %[Base],%[Offset]}" __FLAGSET, "I")
/APP
 # 1809 "C:/msys64/ucrt64/include/psdk_inc/intrin-impl.h" 1
	lock btrl $0,416(%rbp) 	 #,
 # 0 "" 2
 # .\src\.\task_master\lock.h:40:         while (_interlockedbittestandset(&lock_internal, 0)) {}
/NO_APP
	jmp	.L1155	 #
.L1156:
 # C:/msys64/ucrt64/include/psdk_inc/intrin-impl.h:1809: __buildbittesti(_interlockedbittestandreset, __LONG32, "lock btr{l %[Offset],%[Base] | %[Base],%[Offset]}" __FLAGSET, "I")
/APP
 # 1809 "C:/msys64/ucrt64/include/psdk_inc/intrin-impl.h" 1
	lock btrl $0,416(%rbp) 	 #,
 # 0 "" 2
 # .\src\main.cpp:1529:         auto t_mid = std::chrono::high_resolution_clock::now();
/NO_APP
	call	_ZNSt6chrono3_V212system_clock3nowEv	 #
 # .\src\main.cpp:1532:         rebuild_list2(boid_map, boid_list, args_rebuild, &task_master, &task_rebuild);
	movq	%rdi, %r9	 # tmp1028,
 # .\src\main.cpp:1531:         TaskSync task_rebuild;
	movq	$0, 424(%rbp)	 #, MEM <volatile vector(2) long int> [(void *)&task_rebuild]
 # .\src\main.cpp:1529:         auto t_mid = std::chrono::high_resolution_clock::now();
	movq	%rax, %r15	 # tmp1090, t_mid$__d$__r
 # .\src\main.cpp:1532:         rebuild_list2(boid_map, boid_list, args_rebuild, &task_master, &task_rebuild);
	leaq	424(%rbp), %rax	 #, tmp870
	movq	%rax, 32(%rsp)	 # tmp870,
	movq	-8(%rbp), %r8	 # %sfp,
	movq	24(%rbp), %rdx	 # %sfp,
	movq	16(%rbp), %rcx	 # %sfp,
	call	_Z13rebuild_list2RK7BoidMapRK8BoidListP12rebuild_argsP10TaskMasterP8TaskSync	 #
	.p2align 4,,10
	.p2align 3
.L1158:
 # C:/msys64/ucrt64/include/psdk_inc/intrin-impl.h:1800: __buildbittesti(_interlockedbittestandset, __LONG32, "lock bts{l %[Offset],%[Base] | %[Base],%[Offset]}" __FLAGSET, "I")
/APP
 # 1800 "C:/msys64/ucrt64/include/psdk_inc/intrin-impl.h" 1
	lock btsl $0,424(%rbp) 	 #, MEM[(volatile long int *)&task_rebuild]
 # 0 "" 2
 # .\src\.\task_master\lock.h:40:         while (_interlockedbittestandset(&lock_internal, 0)) {}
/NO_APP
	jc	.L1158	 #,
 # .\src\.\task_master\taskmaster.h:26:             if (task_counter == 0) break;
	movl	428(%rbp), %esi	 # task_rebuild.task_counter, i
 # .\src\.\task_master\taskmaster.h:26:             if (task_counter == 0) break;
	testl	%esi, %esi	 # i
	je	.L1159	 #,
 # C:/msys64/ucrt64/include/psdk_inc/intrin-impl.h:1809: __buildbittesti(_interlockedbittestandreset, __LONG32, "lock btr{l %[Offset],%[Base] | %[Base],%[Offset]}" __FLAGSET, "I")
/APP
 # 1809 "C:/msys64/ucrt64/include/psdk_inc/intrin-impl.h" 1
	lock btrl $0,424(%rbp) 	 #,
 # 0 "" 2
 # .\src\.\task_master\lock.h:40:         while (_interlockedbittestandset(&lock_internal, 0)) {}
/NO_APP
	jmp	.L1158	 #
.L1159:
 # C:/msys64/ucrt64/include/psdk_inc/intrin-impl.h:1809: __buildbittesti(_interlockedbittestandreset, __LONG32, "lock btr{l %[Offset],%[Base] | %[Base],%[Offset]}" __FLAGSET, "I")
/APP
 # 1809 "C:/msys64/ucrt64/include/psdk_inc/intrin-impl.h" 1
	lock btrl $0,424(%rbp) 	 #,
 # 0 "" 2
 # .\src\main.cpp:1535:         auto t_end = std::chrono::high_resolution_clock::now();
/NO_APP
	call	_ZNSt6chrono3_V212system_clock3nowEv	 #
	movq	%rax, 48(%rbp)	 # tmp1091, %sfp
 # .\src\main.cpp:1536:         auto t_update_start = std::chrono::high_resolution_clock::now();
	call	_ZNSt6chrono3_V212system_clock3nowEv	 #
 # .\src\main.cpp:1538:         TaskSync task_update;
	movq	$0, 432(%rbp)	 #, MEM <volatile vector(2) long int> [(void *)&task_update]
 # .\src\main.cpp:1536:         auto t_update_start = std::chrono::high_resolution_clock::now();
	movq	%rax, 40(%rbp)	 # tmp1092, %sfp
	.p2align 4,,10
	.p2align 3
.L1161:
 # C:/msys64/ucrt64/include/psdk_inc/intrin-impl.h:1800: __buildbittesti(_interlockedbittestandset, __LONG32, "lock bts{l %[Offset],%[Base] | %[Base],%[Offset]}" __FLAGSET, "I")
/APP
 # 1800 "C:/msys64/ucrt64/include/psdk_inc/intrin-impl.h" 1
	lock btsl $0,67072(%rbp) 	 #, MEM[(volatile long int *)&task_master + 66144B]
 # 0 "" 2
 # .\src\.\task_master\lock.h:40:         while (_interlockedbittestandset(&lock_internal, 0)) {}
/NO_APP
	jc	.L1161	 #,
 # .\src\main.cpp:1209:     for (int y = 0; y < boid_map.m_ysize; y += 2) {
	movl	608(%rbp), %edx	 # boid_map.m_ysize, _509
 # .\src\main.cpp:1209:     for (int y = 0; y < boid_map.m_ysize; y += 2) {
	testl	%edx, %edx	 # _509
	jle	.L1187	 #,
	leal	-1(%rdx), %r9d	 #, tmp876
 # .\src\.\task_master\ringbuffer.h:18:         size_t next = (head + 1) % capacity;
	movq	66480(%rbp), %rax	 # MEM[(struct RingBuffer *)&task_master + 16B].head, pretmp_906
	movq	-32(%rbp), %r10	 # %sfp, tmp684
 # .\src\.\task_master\ringbuffer.h:21:             data[head] = item;
	leaq	432(%rbp), %r11	 #, tmp1047
	shrl	%r9d	 # _297
 # .\src\.\task_master\ringbuffer.h:19:         if (next != tail)
	movq	66488(%rbp), %rdi	 # MEM[(struct RingBuffer *)&task_master + 16B].tail, _621
	movl	%r9d, %edx	 # _297, _297
	movq	%r10, %rcx	 # tmp684, ivtmp.2732
	leaq	(%rdx,%rdx,4), %r8	 #, tmp880
 # .\src\.\task_master\ringbuffer.h:18:         size_t next = (head + 1) % capacity;
	leaq	1(%rax), %rdx	 #, tmp882
	salq	$4, %r8	 #, tmp881
 # .\src\.\task_master\ringbuffer.h:18:         size_t next = (head + 1) % capacity;
	andl	$2047, %edx	 #, next
	addq	%r10, %r8	 # tmp684, _286
 # .\src\.\task_master\ringbuffer.h:21:             data[head] = item;
	leaq	_ZZ13update_boids2RK7BoidMapP15row_runner_argsP10TaskMasterP8TaskSyncENUlS5_P4TaskE_4_FUNES5_S9_(%rip), %r10	 #, tmp1048
 # .\src\.\task_master\ringbuffer.h:19:         if (next != tail)
	cmpq	%rdi, %rdx	 # _621, next
	je	.L1163	 #,
.L1240:
 # .\src\.\task_master\ringbuffer.h:21:             data[head] = item;
	salq	$5, %rax	 #, tmp883
	movl	$2, 944(%rbp,%rax)	 #, MEM <unsigned int> [(struct Task *)_622]
	movq	%rcx, 952(%rbp,%rax)	 # ivtmp.2732, MEM[(struct RingBuffer *)&task_master + 16B].data[prephitmp_907].argument_struct
	movq	%r11, 960(%rbp,%rax)	 # tmp1047, MEM[(struct RingBuffer *)&task_master + 16B].data[prephitmp_907].sync
	movq	%r10, 968(%rbp,%rax)	 # tmp1048, MEM[(struct RingBuffer *)&task_master + 16B].data[prephitmp_907].on_complete
 # .\src\.\task_master\ringbuffer.h:22:             head = next;
	movq	%rdx, 66480(%rbp)	 # next, MEM[(struct RingBuffer *)&task_master + 16B].head
 # .\src\main.cpp:1209:     for (int y = 0; y < boid_map.m_ysize; y += 2) {
	cmpq	%rcx, %r8	 # ivtmp.2732, _286
	je	.L1163	 #,
	movq	%rdx, %rax	 # next, pretmp_906
	addq	$80, %rcx	 #, ivtmp.2732
 # .\src\.\task_master\ringbuffer.h:18:         size_t next = (head + 1) % capacity;
	leaq	1(%rax), %rdx	 #, tmp882
 # .\src\.\task_master\ringbuffer.h:18:         size_t next = (head + 1) % capacity;
	andl	$2047, %edx	 #, next
 # .\src\.\task_master\ringbuffer.h:19:         if (next != tail)
	cmpq	%rdi, %rdx	 # _621, next
	jne	.L1240	 #,
.L1163:
	addl	$1, %r9d	 #, tasks_added
	.p2align 4,,10
	.p2align 3
.L1165:
 # C:/msys64/ucrt64/include/psdk_inc/intrin-impl.h:1800: __buildbittesti(_interlockedbittestandset, __LONG32, "lock bts{l %[Offset],%[Base] | %[Base],%[Offset]}" __FLAGSET, "I")
/APP
 # 1800 "C:/msys64/ucrt64/include/psdk_inc/intrin-impl.h" 1
	lock btsl $0,432(%rbp) 	 #, MEM[(volatile long int *)&task_update]
 # 0 "" 2
 # .\src\.\task_master\lock.h:40:         while (_interlockedbittestandset(&lock_internal, 0)) {}
/NO_APP
	jc	.L1165	 #,
 # .\src\main.cpp:1259:     task_monitor->task_counter += tasks_added;
	movl	436(%rbp), %eax	 # task_update.task_counter, _629
 # .\src\main.cpp:1259:     task_monitor->task_counter += tasks_added;
	addl	%r9d, %eax	 # tasks_added, _633
	movl	%eax, 436(%rbp)	 # _633, task_update.task_counter
 # C:/msys64/ucrt64/include/psdk_inc/intrin-impl.h:1809: __buildbittesti(_interlockedbittestandreset, __LONG32, "lock btr{l %[Offset],%[Base] | %[Base],%[Offset]}" __FLAGSET, "I")
/APP
 # 1809 "C:/msys64/ucrt64/include/psdk_inc/intrin-impl.h" 1
	lock btrl $0,432(%rbp) 	 #, MEM[(volatile long int *)&task_update]
 # 0 "" 2
 # 1809 "C:/msys64/ucrt64/include/psdk_inc/intrin-impl.h" 1
	lock btrl $0,67072(%rbp) 	 #, MEM[(volatile long int *)&task_master + 66144B]
 # 0 "" 2
 # .\src\main.cpp:1542:         SetShaderValue(boid_shader, boid_shader.locs[SHADER_LOC_VECTOR_VIEW], cameraPos, SHADER_UNIFORM_VEC3);
/NO_APP
	movq	-16(%rbp), %rax	 # %sfp, boid_shader$locs
	movq	-40(%rbp), %rdi	 # %sfp, boid_shader
	movl	$2, %r9d	 #,
	leaq	452(%rbp), %r8	 #,
	movq	-48(%rbp), %rcx	 # %sfp,
 # .\src\main.cpp:1541:         float cameraPos[3] = { camera.position.x, camera.position.y, camera.position.z };
	vmovss	%xmm8, 452(%rbp)	 # camera$position$x, cameraPos[0]
 # .\src\main.cpp:1542:         SetShaderValue(boid_shader, boid_shader.locs[SHADER_LOC_VECTOR_VIEW], cameraPos, SHADER_UNIFORM_VEC3);
	movl	44(%rax), %edx	 # MEM[(int *)boid_shader$locs_258 + 44B], _113
 # .\src\main.cpp:1541:         float cameraPos[3] = { camera.position.x, camera.position.y, camera.position.z };
	vmovss	%xmm15, 456(%rbp)	 # tmp1055, cameraPos[1]
 # .\src\main.cpp:1542:         SetShaderValue(boid_shader, boid_shader.locs[SHADER_LOC_VECTOR_VIEW], cameraPos, SHADER_UNIFORM_VEC3);
	movq	%rdi, 384(%rbp)	 # boid_shader,
	movq	%rax, 392(%rbp)	 # boid_shader$locs,
 # .\src\main.cpp:1541:         float cameraPos[3] = { camera.position.x, camera.position.y, camera.position.z };
	vmovss	%xmm7, 460(%rbp)	 # camera$position$z, cameraPos[2]
.LEHB68:
 # .\src\main.cpp:1542:         SetShaderValue(boid_shader, boid_shader.locs[SHADER_LOC_VECTOR_VIEW], cameraPos, SHADER_UNIFORM_VEC3);
	call	SetShaderValue	 #
 # .\src\main.cpp:1546:         if (IsMouseButtonDown(MOUSE_BUTTON_RIGHT)){
	movl	$1, %ecx	 #,
	call	IsMouseButtonDown	 #
 # .\src\main.cpp:1546:         if (IsMouseButtonDown(MOUSE_BUTTON_RIGHT)){
	testb	%al, %al	 # tmp1093
	je	.L1166	 #,
 # .\src\main.cpp:1547:             Vector2 delta = Vector2Scale(GetMouseDelta(), -1.0f / cam.zoom);
	vmovss	.LC69(%rip), %xmm13	 #, tmp903
	vdivss	%xmm9, %xmm13, %xmm13	 # cam$zoom, tmp903, _114
	call	GetMouseDelta	 #
	vmovd	%eax, %xmm1	 # D.226027, v$x
	shrq	$32, %rax	 #,
 # include/raymath.h:249:     Vector2 result = { v1.x + v2.x, v1.y + v2.y };
	vfmadd231ss	%xmm1, %xmm13, %xmm14	 # v$x, _114, cam$target$x
 # .\src\main.cpp:1551:             camera.position = Vector3 {camera.position.x + delta.x, camera.position.y, camera.position.z + delta.y };
	vfmadd231ss	%xmm1, %xmm13, %xmm8	 # v$x, _114, camera$position$x
	vmovd	%eax, %xmm0	 # tmp906, v$y
 # include/raymath.h:249:     Vector2 result = { v1.x + v2.x, v1.y + v2.y };
	vfmadd231ss	%xmm0, %xmm13, %xmm10	 # v$y, _114, cam$target$y
 # .\src\main.cpp:1551:             camera.position = Vector3 {camera.position.x + delta.x, camera.position.y, camera.position.z + delta.y };
	vfmadd231ss	%xmm0, %xmm13, %xmm7	 # v$y, _114, camera$position$z
.L1166:
 # .\src\main.cpp:1555:         float wheel = GetMouseWheelMove();
	call	GetMouseWheelMove	 #
	vmovaps	%xmm0, %xmm13	 # tmp1095, _308
 # .\src\main.cpp:1556:         if (wheel != 0)
	vxorps	%xmm0, %xmm0, %xmm0	 # tmp907
	vucomiss	%xmm0, %xmm13	 # tmp907, _308
	jp	.L1193	 #,
	je	.L1167	 #,
.L1193:
 # .\src\main.cpp:1558:             Vector2 mouseWorldPos = GetScreenToWorld2D(GetMousePosition(), cam);
	call	GetMousePosition	 #
	movq	%rax, %rcx	 # tmp1096, D.226031
 # .\src\main.cpp:1558:             Vector2 mouseWorldPos = GetScreenToWorld2D(GetMousePosition(), cam);
	vunpcklps	%xmm10, %xmm14, %xmm10	 # cam$target$y, cam$target$x, tmp910
	vunpcklps	%xmm11, %xmm12, %xmm0	 # cam$offset$y, cam$offset$x, tmp911
	vmovss	%xmm9, 516(%rbp)	 # cam$zoom, cam.zoom
	movq	512(%rbp), %rax	 # cam, cam
	vmovlhps	%xmm10, %xmm0, %xmm0	 # tmp910, tmp911, tmp909
	leaq	352(%rbp), %rdx	 #, tmp914
	vmovups	%xmm0, 496(%rbp)	 # tmp909, MEM <vector(4) float> [(float *)&cam]
	movq	%rax, 368(%rbp)	 # cam,
	vmovdqu	%xmm0, 352(%rbp)	 # tmp909,
	call	GetScreenToWorld2D	 #
	movq	%rax, %rdi	 # tmp1097, mouseWorldPos
 # .\src\main.cpp:1560:             auto m_pos = GetMousePosition();
	call	GetMousePosition	 #
 # .\src\main.cpp:1561:             cam.offset = m_pos;
	vmovd	%eax, %xmm12	 # m_pos, cam$offset$x
	shrq	$32, %rax	 #,
 # .\src\main.cpp:1567:             if (cam.zoom < (1./world_size_mult))
	vmovsd	.LC71(%rip), %xmm0	 #, tmp927
 # .\src\main.cpp:1563:             cam.target = mouseWorldPos;
	vmovd	%edi, %xmm14	 # mouseWorldPos, cam$target$x
 # .\src\main.cpp:1561:             cam.offset = m_pos;
	vmovd	%eax, %xmm11	 # tmp917, cam$offset$y
 # .\src\main.cpp:1567:             if (cam.zoom < (1./world_size_mult))
	movl	-64(%rbp), %eax	 # %sfp, world_size_mult
 # .\src\main.cpp:1563:             cam.target = mouseWorldPos;
	shrq	$32, %rdi	 #,
 # .\src\main.cpp:1565:             cam.zoom += wheel * 0.125f;
	vfmadd231ss	.LC70(%rip), %xmm13, %xmm9	 #, _308, cam$zoom
 # .\src\main.cpp:1563:             cam.target = mouseWorldPos;
	vmovd	%edi, %xmm10	 # tmp920, cam$target$y
 # .\src\main.cpp:1567:             if (cam.zoom < (1./world_size_mult))
	vcvtsi2sdq	%rax, %xmm6, %xmm1	 # world_size_mult, tmp1107, tmp1124
	vdivsd	%xmm1, %xmm0, %xmm0	 # tmp922, tmp927, _121
 # .\src\main.cpp:1567:             if (cam.zoom < (1./world_size_mult))
	vcvtss2sd	%xmm9, %xmm9, %xmm1	 # cam$zoom, tmp928
 # .\src\main.cpp:1567:             if (cam.zoom < (1./world_size_mult))
	vcomisd	%xmm1, %xmm0	 # tmp928, _121
	jbe	.L1171	 #,
 # .\src\main.cpp:1568:                 cam.zoom = (1./world_size_mult);
	vcvtsd2ss	%xmm0, %xmm0, %xmm9	 # _121, cam$zoom
.L1171:
 # .\src\main.cpp:1570:             camera.fovy = screen_height / cam.zoom;
	vcvtsi2ssl	-24(%rbp), %xmm6, %xmm0	 # %sfp, tmp1107, tmp1125
 # .\src\main.cpp:1575:                 .z = (screen_height * 0.5f - cam.offset.y) / cam.zoom + cam.target.y,
	vmovss	.LC52(%rip), %xmm7	 #, _130
 # .\src\main.cpp:1573:                 .x = (screen_width * 0.5f - cam.offset.x) / cam.zoom + cam.target.x,
	vmovss	.LC52(%rip), %xmm8	 #, _126
	vfmsub132ss	-60(%rbp), %xmm12, %xmm8	 # %sfp, cam$offset$x, _126
 # .\src\main.cpp:1570:             camera.fovy = screen_height / cam.zoom;
	vdivss	%xmm9, %xmm0, %xmm5	 # cam$zoom, _123, camera$fovy
 # .\src\main.cpp:1575:                 .z = (screen_height * 0.5f - cam.offset.y) / cam.zoom + cam.target.y,
	vfmsub132ss	%xmm0, %xmm11, %xmm7	 # _123, cam$offset$y, _130
 # .\src\main.cpp:1573:                 .x = (screen_width * 0.5f - cam.offset.x) / cam.zoom + cam.target.x,
	vdivss	%xmm9, %xmm8, %xmm8	 # cam$zoom, _126, tmp930
 # .\src\main.cpp:1570:             camera.fovy = screen_height / cam.zoom;
	vmovss	%xmm5, 12(%rbp)	 # camera$fovy, %sfp
 # .\src\main.cpp:1575:                 .z = (screen_height * 0.5f - cam.offset.y) / cam.zoom + cam.target.y,
	vdivss	%xmm9, %xmm7, %xmm7	 # cam$zoom, _130, tmp932
 # .\src\main.cpp:1573:                 .x = (screen_width * 0.5f - cam.offset.x) / cam.zoom + cam.target.x,
	vaddss	%xmm14, %xmm8, %xmm8	 # cam$target$x, tmp930, camera$position$x
 # .\src\main.cpp:1575:                 .z = (screen_height * 0.5f - cam.offset.y) / cam.zoom + cam.target.y,
	vaddss	%xmm10, %xmm7, %xmm7	 # cam$target$y, tmp932, camera$position$z
.L1167:
	vunpcklps	%xmm10, %xmm14, %xmm0	 # cam$target$y, cam$target$x, tmp934
	vunpcklps	%xmm11, %xmm12, %xmm13	 # cam$offset$y, cam$offset$x, tmp935
	vmovlhps	%xmm0, %xmm13, %xmm13	 # tmp934, tmp935, tmp933
 # .\src\main.cpp:1581:         auto t_start_drawing = std::chrono::high_resolution_clock::now();
	call	_ZNSt6chrono3_V212system_clock3nowEv	 #
	vmovss	12(%rbp), %xmm5	 # %sfp, camera$fovy
	movl	$0x00000000, 672(%rbp)	 #, camera.target.y
	movq	%rax, 32(%rbp)	 # tmp1099, %sfp
	movl	$0xbf800000, 688(%rbp)	 #, camera.up.z
	movl	$1, 696(%rbp)	 #, camera.projection
	vmovss	%xmm9, 516(%rbp)	 # cam$zoom, cam.zoom
	movq	512(%rbp), %rax	 # cam, cam
	vmovss	%xmm8, 656(%rbp)	 # camera$position$x, camera.position.x
	vmovss	%xmm15, 660(%rbp)	 # tmp1055, camera.position.y
	vmovss	%xmm7, 664(%rbp)	 # camera$position$z, camera.position.z
	vmovss	%xmm8, 668(%rbp)	 # camera$position$x, camera.target.x
	vmovdqu	656(%rbp), %xmm4	 # camera, tmp1392
	vmovss	%xmm7, 676(%rbp)	 # camera$position$z, camera.target.z
	vmovdqu	672(%rbp), %xmm3	 # camera, tmp1393
	vmovss	%xmm5, 692(%rbp)	 # camera$fovy, camera.fovy
	vmovdqu	684(%rbp), %xmm5	 # camera, tmp1394
	vmovdqu	%xmm3, 720(%rbp)	 # tmp1393, MEM[(struct Camera3D *)_821]
	movq	%rax, 544(%rbp)	 # cam, cam
	vmovups	%xmm13, 496(%rbp)	 # tmp933, MEM <vector(4) float> [(float *)&cam]
	vmovdqu	%xmm13, 528(%rbp)	 # tmp933, cam
	vmovdqu	%xmm4, 704(%rbp)	 # tmp1392, MEM[(struct Camera3D *)_821]
	vmovdqu	%xmm5, 732(%rbp)	 # tmp1394, MEM[(struct Camera3D *)_821]
 # .\src\main.cpp:1309:     BeginDrawing();
	call	BeginDrawing	 #
 # .\src\main.cpp:1310:         ClearBackground(BLACK);
	movl	$-16777216, %ecx	 #,
	call	ClearBackground	 #
 # .\src\main.cpp:1312:         auto t_start_3d = std::chrono::high_resolution_clock::now();
	call	_ZNSt6chrono3_V212system_clock3nowEv	 #
 # .\src\main.cpp:1316:         BeginMode3D(camera);
	vmovdqu	704(%rbp), %xmm4	 # MEM[(struct Camera3D *)_821], tmp1395
	vmovdqu	720(%rbp), %xmm3	 # MEM[(struct Camera3D *)_821], tmp1396
	leaq	288(%rbp), %rcx	 #, tmp947
	vmovdqu	732(%rbp), %xmm5	 # MEM[(struct Camera3D *)_821], tmp1397
 # .\src\main.cpp:1314:         auto const boid_store = boid_list->m_backbuffer;
	movq	472(%rbp), %rdi	 # boid_list.m_backbuffer, boid_store
 # .\src\main.cpp:1316:         BeginMode3D(camera);
	vmovdqu	%xmm3, 304(%rbp)	 # tmp1396,
	vmovdqu	%xmm4, 288(%rbp)	 # tmp1395,
	vmovdqu	%xmm5, 316(%rbp)	 # tmp1397,
	call	BeginMode3D	 #
 # .\src\main.cpp:1317:             DrawMeshInstanced2(*tri, *matInstances, boid_list->m_size - offset, boid_store->xs + offset, boid_store->ys + offset, boid_store->vxs + offset, boid_store->vys + offset);
	vmovdqu	816(%rbp), %xmm4	 # tri, tmp1398
	vmovdqu	832(%rbp), %xmm3	 # tri, tmp1399
	leaq	96(%rbp), %rdx	 #, tmp960
	leaq	160(%rbp), %rcx	 #, tmp961
	vmovdqu	848(%rbp), %xmm5	 # tri, tmp1400
	movq	592(%rbp), %rax	 # matInstances, matInstances
	vmovdqu	%xmm4, 160(%rbp)	 # tmp1398,
	vmovdqu	864(%rbp), %xmm4	 # tri, tmp1401
	vmovdqu	%xmm3, 176(%rbp)	 # tmp1399,
	vmovdqu	880(%rbp), %xmm3	 # tri, tmp1402
	vmovdqu	%xmm5, 192(%rbp)	 # tmp1400,
	vmovdqu	896(%rbp), %xmm5	 # tri, tmp1403
	vmovdqu	%xmm4, 208(%rbp)	 # tmp1401,
	vmovdqu	912(%rbp), %xmm4	 # tri, tmp1404
	vmovdqu	%xmm3, 224(%rbp)	 # tmp1402,
	vmovdqu	560(%rbp), %xmm3	 # matInstances, tmp1405
	vmovdqu	%xmm5, 240(%rbp)	 # tmp1403,
	vmovdqu	576(%rbp), %xmm5	 # matInstances, tmp1406
	vmovdqu	%xmm4, 256(%rbp)	 # tmp1404,
	movq	(%rdi), %r9	 # boid_store_638->xs, boid_store_638->xs
	movq	%rax, 128(%rbp)	 # matInstances,
	movq	24(%rdi), %rax	 # boid_store_638->vys, boid_store_638->vys
	vmovdqu	%xmm3, 96(%rbp)	 # tmp1405,
	vmovdqu	%xmm5, 112(%rbp)	 # tmp1406,
	movq	%rax, 48(%rsp)	 # boid_store_638->vys,
	movq	16(%rdi), %rax	 # boid_store_638->vxs, boid_store_638->vxs
	movq	%rax, 40(%rsp)	 # boid_store_638->vxs,
	movq	8(%rdi), %rax	 # boid_store_638->ys, boid_store_638->ys
	movq	%rax, 32(%rsp)	 # boid_store_638->ys,
	movl	480(%rbp), %r8d	 # boid_list.m_size,
	call	_Z18DrawMeshInstanced24Mesh8MaterialiPfS1_S1_S1_	 #
 # .\src\main.cpp:1318:         EndMode3D();
	call	EndMode3D	 #
 # .\src\main.cpp:1320:         auto t_end_3d = std::chrono::high_resolution_clock::now();
	call	_ZNSt6chrono3_V212system_clock3nowEv	 #
 # .\src\main.cpp:1348:         ui->Render(cam, camera, rules);
	movq	-56(%rbp), %rcx	 # %sfp,
	leaq	528(%rbp), %rdx	 #, tmp967
	leaq	752(%rbp), %r9	 #,
	leaq	704(%rbp), %r8	 #,
	call	_ZN2Ui6RenderER8Camera2DR8Camera3DR5Rules	 #
 # .\src\main.cpp:1350:     EndDrawing();
	call	EndDrawing	 #
 # .\src\main.cpp:1584:         auto t_end_drawing = std::chrono::high_resolution_clock::now();
	call	_ZNSt6chrono3_V212system_clock3nowEv	 #
	movq	64(%rbp), %rdi	 # %sfp, ivtmp.2725
	movq	%rax, %r12	 # tmp1100, t_end_drawing
 # .\src\.\task_master\taskmaster.h:96:         for (int i = 0; i < num_threads; i++) {
	movl	936(%rbp), %eax	 # task_master.num_threads,
	testl	%eax, %eax	 #
	je	.L1176	 #,
	.p2align 4,,10
	.p2align 3
.L1175:
 # .\src\.\task_master\taskmaster.h:98:             this->threads[i].join();
	movq	%rdi, %rcx	 # ivtmp.2725,
	call	_ZNSt6thread4joinEv	 #
 # .\src\.\task_master\taskmaster.h:96:         for (int i = 0; i < num_threads; i++) {
	addl	$1, %esi	 #, i
 # .\src\.\task_master\taskmaster.h:96:         for (int i = 0; i < num_threads; i++) {
	addq	$8, %rdi	 #, ivtmp.2725
	cmpl	936(%rbp), %esi	 # task_master.num_threads, i
	jb	.L1175	 #,
.L1176:
 # .\src\main.cpp:1586:         auto t_update_end = std::chrono::high_resolution_clock::now();
	call	_ZNSt6chrono3_V212system_clock3nowEv	 #
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/chrono.h:727: 	return __cd(__cd(__lhs).count() - __cd(__rhs).count());
	movq	32(%rbp), %rdi	 # %sfp, t_start_drawing
	movq	48(%rbp), %rdx	 # %sfp, t_end
 # .\src\main.cpp:1588:         DEBUG("Populate :%0.4f, rebuild: %0.4f, render: %0.4f, comp: %0.4f", std::chrono::duration<double, std::milli>(t_mid-t_start).count(), std::chrono::duration<double, std::milli>(t_end-t_mid).count(), 
	leaq	.LC73(%rip), %rcx	 #, tmp1000
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/chrono.h:212: 	      static_cast<_CR>(__d.count()) / static_cast<_CR>(_CF::den)));
	vmovsd	.LC72(%rip), %xmm2	 #, tmp972
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/chrono.h:727: 	return __cd(__cd(__lhs).count() - __cd(__rhs).count());
	subq	%rdi, %r12	 # t_start_drawing, tmp969
	subq	%r15, %rdx	 # t_mid$__d$__r, t_end
	movq	56(%rbp), %rdi	 # %sfp, t_start
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/chrono.h:212: 	      static_cast<_CR>(__d.count()) / static_cast<_CR>(_CF::den)));
	vcvtsi2sdq	%r12, %xmm6, %xmm0	 # tmp969, tmp1107, tmp1126
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/chrono.h:212: 	      static_cast<_CR>(__d.count()) / static_cast<_CR>(_CF::den)));
	vdivsd	%xmm2, %xmm0, %xmm4	 # tmp972, tmp970, tmp971
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/chrono.h:212: 	      static_cast<_CR>(__d.count()) / static_cast<_CR>(_CF::den)));
	vcvtsi2sdq	%rdx, %xmm6, %xmm0	 # tmp978, tmp1107, tmp1127
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/chrono.h:727: 	return __cd(__cd(__lhs).count() - __cd(__rhs).count());
	movq	%r15, %rdx	 # t_mid$__d$__r, t_mid$__d$__r
	subq	%rdi, %rdx	 # t_start, t_mid$__d$__r
	movq	40(%rbp), %rdi	 # %sfp, t_update_start
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/chrono.h:212: 	      static_cast<_CR>(__d.count()) / static_cast<_CR>(_CF::den)));
	vcvtsi2sdq	%rdx, %xmm6, %xmm1	 # tmp987, tmp1107, tmp1128
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/chrono.h:727: 	return __cd(__cd(__lhs).count() - __cd(__rhs).count());
	subq	%rdi, %rax	 # t_update_start, tmp996
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/chrono.h:212: 	      static_cast<_CR>(__d.count()) / static_cast<_CR>(_CF::den)));
	vdivsd	%xmm2, %xmm0, %xmm3	 # tmp972, tmp979, tmp980
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/chrono.h:212: 	      static_cast<_CR>(__d.count()) / static_cast<_CR>(_CF::den)));
	vcvtsi2sdq	%rax, %xmm6, %xmm0	 # tmp996, tmp1107, tmp1129
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/chrono.h:212: 	      static_cast<_CR>(__d.count()) / static_cast<_CR>(_CF::den)));
	vmovq	%xmm4, %r9	 # tmp971, tmp971
	vdivsd	%xmm2, %xmm1, %xmm1	 # tmp972, tmp988, tmp989
	vmovq	%xmm3, %r8	 # tmp980, tmp980
 # .\src\main.cpp:1588:         DEBUG("Populate :%0.4f, rebuild: %0.4f, render: %0.4f, comp: %0.4f", std::chrono::duration<double, std::milli>(t_mid-t_start).count(), std::chrono::duration<double, std::milli>(t_end-t_mid).count(), 
	vmovsd	%xmm4, %xmm4, %xmm3	 # tmp971,
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/chrono.h:212: 	      static_cast<_CR>(__d.count()) / static_cast<_CR>(_CF::den)));
	vdivsd	%xmm2, %xmm0, %xmm0	 # tmp972, tmp997, tmp998
 # .\src\main.cpp:1588:         DEBUG("Populate :%0.4f, rebuild: %0.4f, render: %0.4f, comp: %0.4f", std::chrono::duration<double, std::milli>(t_mid-t_start).count(), std::chrono::duration<double, std::milli>(t_end-t_mid).count(), 
	vmovq	%r8, %xmm2	 # tmp980,
	vmovq	%xmm1, %rdx	 # tmp989,
	vmovsd	%xmm0, 32(%rsp)	 # tmp998,
	call	TextFormat	 #
	movq	%rax, %rdx	 # tmp1102, _324
 # .\src\main.cpp:1588:         DEBUG("Populate :%0.4f, rebuild: %0.4f, render: %0.4f, comp: %0.4f", std::chrono::duration<double, std::milli>(t_mid-t_start).count(), std::chrono::duration<double, std::milli>(t_end-t_mid).count(), 
	movl	$2, %ecx	 #,
	call	TraceLog	 #
.LEHE68:
	leaq	67000(%rbp), %rax	 #, ivtmp.2714
	jmp	.L1177	 #
	.p2align 4,,10
	.p2align 3
.L1241:
 # .\src\.\task_master\taskmaster.h:45: struct TaskMaster {
	subq	$8, %rax	 #, ivtmp.2714
	cmpq	%rax, %rbx	 # ivtmp.2714, _592
	je	.L1134	 #,
.L1177:
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_thread.h:172:       if (joinable())
	cmpq	$0, (%rax)	 #, MEM[(long long unsigned int *)_430]
	je	.L1241	 #,
.L1145:
 # C:/msys64/ucrt64/include/c++/13.1.0/x86_64-w64-mingw32/bits/c++config.h:322:     terminate();
	call	_ZSt9terminatev	 #
.L1187:
 # .\src\main.cpp:1207:     uint32_t tasks_added = 0;
	xorl	%r9d, %r9d	 # tasks_added
	jmp	.L1165	 #
.L1238:
	leaq	928(%rbp), %rdi	 #, tmp1028
	jmp	.L1150	 #
.L1237:
.LEHB69:
 # .\src\main.cpp:1593:     CloseWindow();
	call	CloseWindow	 #
.LEHE69:
 # .\src\main.cpp:1595: }
	movq	16(%rbp), %rcx	 # %sfp,
	call	_ZN7BoidMapD1Ev	 #
 # .\src\main.cpp:1595: }
	movq	24(%rbp), %rcx	 # %sfp,
	call	_ZN8BoidListD1Ev	 #
	nop	
 # .\src\main.cpp:1595: }
	vmovups	67088(%rbp), %xmm6	 #,
	xorl	%eax, %eax	 #
	vmovups	67104(%rbp), %xmm7	 #,
	vmovups	67120(%rbp), %xmm8	 #,
	vmovups	67136(%rbp), %xmm9	 #,
	vmovups	67152(%rbp), %xmm10	 #,
	vmovups	67168(%rbp), %xmm11	 #,
	vmovups	67184(%rbp), %xmm12	 #,
	vmovups	67200(%rbp), %xmm13	 #,
	vmovups	67216(%rbp), %xmm14	 #,
	vmovups	67232(%rbp), %xmm15	 #,
	leaq	67256(%rbp), %rsp	 #,
	popq	%rbx	 #
	popq	%rsi	 #
	popq	%rdi	 #
	popq	%r12	 #
	popq	%r13	 #
	popq	%r14	 #
	popq	%r15	 #
	popq	%rbp	 #
	ret	
.L1234:
 # .\src\main.cpp:1360:         TraceLog(LOG_ERROR, TextFormat("Please request more boids than threads (%d)! Defaulting to 1000", NUM_THREADS));
	leaq	.LC27(%rip), %rcx	 #, tmp468
 # .\src\main.cpp:1360:         TraceLog(LOG_ERROR, TextFormat("Please request more boids than threads (%d)! Defaulting to 1000", NUM_THREADS));
	movl	$1000, %r12d	 #, _3
 # .\src\main.cpp:1361:         num_boids = 1000;
	movl	$1000, %esi	 #,
.LEHB70:
 # .\src\main.cpp:1360:         TraceLog(LOG_ERROR, TextFormat("Please request more boids than threads (%d)! Defaulting to 1000", NUM_THREADS));
	call	TextFormat	 #
 # .\src\main.cpp:1360:         TraceLog(LOG_ERROR, TextFormat("Please request more boids than threads (%d)! Defaulting to 1000", NUM_THREADS));
	movl	$5, %ecx	 #,
 # .\src\main.cpp:1360:         TraceLog(LOG_ERROR, TextFormat("Please request more boids than threads (%d)! Defaulting to 1000", NUM_THREADS));
	movq	%rax, %rdx	 # tmp1060, _158
 # .\src\main.cpp:1360:         TraceLog(LOG_ERROR, TextFormat("Please request more boids than threads (%d)! Defaulting to 1000", NUM_THREADS));
	call	TraceLog	 #
	jmp	.L1108	 #
.L1236:
	vzeroupper
	jmp	.L1138	 #
.L1185:
 # .\src\main.cpp:1509:     for (uint32_t i = 0; i < num_tasks; i++) {
	xorl	%r8d, %r8d	 # niters_vector_mult_vf.2637
	jmp	.L1135	 #
.L1223:
 # .\src\main.cpp:1421:     const uint32_t world_size_mult = std::ceil(sqrt( (BOID_DENSITY_MAGIC_NUMBER / ((double)screen_height)) * ((double) num_boids / (double) screen_width)));
	call	sqrt	 #
	jmp	.L1113	 #
.L1188:
 # .\src\main.cpp:1595: }
	movq	%rax, %rbx	 # tmp1106, tmp1011
	vzeroupper
.L1181:
	movq	24(%rbp), %rcx	 # %sfp,
	call	_ZN8BoidListD1Ev	 #
	movq	%rbx, %rcx	 # tmp1011,
	call	_Unwind_Resume	 #
.LEHE70:
.L1189:
	movq	%rax, %rbx	 # tmp1105, tmp1008
	vzeroupper
.L1180:
	movq	16(%rbp), %rcx	 # %sfp,
	call	_ZN7BoidMapD1Ev	 #
	jmp	.L1181	 #
.L1191:
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/unique_ptr.h:403: 	if (__ptr != nullptr)
	movq	704(%rbp), %rcx	 # MEM[(struct _State * &)_821], _576
	movq	%rax, %rbx	 # tmp1089, tmp837
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/unique_ptr.h:403: 	if (__ptr != nullptr)
	testq	%rcx, %rcx	 # _576
	je	.L1233	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/unique_ptr.h:99: 	delete __ptr;
	movq	(%rcx), %rax	 # _576->_vptr._State, _576->_vptr._State
	vzeroupper
	call	*8(%rax)	 # MEM[(int (*) () *)_577 + 8B]
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/unique_ptr.h:100:       }
	jmp	.L1149	 #
.L1190:
 # .\src\.\task_master\taskmaster.h:45: struct TaskMaster {
	movq	%rax, %rbx	 # tmp1104, tmp836
	vzeroupper
.L1149:
	leaq	67008(%rbp), %rax	 #, _433
.L1179:
 # .\src\.\task_master\taskmaster.h:45: struct TaskMaster {
	subq	$8, %rax	 #, _433
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_thread.h:172:       if (joinable())
	cmpq	$0, (%rax)	 #, MEM[(long long unsigned int *)_433]
	jne	.L1145	 #,
 # .\src\.\task_master\taskmaster.h:45: struct TaskMaster {
	movq	64(%rbp), %rdi	 # %sfp, tmp1021
	cmpq	%rdi, %rax	 # tmp1021, _433
	je	.L1180	 #,
 # .\src\.\task_master\taskmaster.h:45: struct TaskMaster {
	jmp	.L1179	 #
.L1233:
	vzeroupper
	jmp	.L1149	 #
	.seh_handler	__gxx_personality_seh0, @unwind, @except
	.seh_handlerdata
.LLSDA12633:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE12633-.LLSDACSB12633
.LLSDACSB12633:
	.uleb128 .LEHB63-.LFB12633
	.uleb128 .LEHE63-.LEHB63
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB64-.LFB12633
	.uleb128 .LEHE64-.LEHB64
	.uleb128 .L1188-.LFB12633
	.uleb128 0
	.uleb128 .LEHB65-.LFB12633
	.uleb128 .LEHE65-.LEHB65
	.uleb128 .L1189-.LFB12633
	.uleb128 0
	.uleb128 .LEHB66-.LFB12633
	.uleb128 .LEHE66-.LEHB66
	.uleb128 .L1190-.LFB12633
	.uleb128 0
	.uleb128 .LEHB67-.LFB12633
	.uleb128 .LEHE67-.LEHB67
	.uleb128 .L1191-.LFB12633
	.uleb128 0
	.uleb128 .LEHB68-.LFB12633
	.uleb128 .LEHE68-.LEHB68
	.uleb128 .L1190-.LFB12633
	.uleb128 0
	.uleb128 .LEHB69-.LFB12633
	.uleb128 .LEHE69-.LEHB69
	.uleb128 .L1189-.LFB12633
	.uleb128 0
	.uleb128 .LEHB70-.LFB12633
	.uleb128 .LEHE70-.LEHB70
	.uleb128 0
	.uleb128 0
.LLSDACSE12633:
	.section	.text.startup,"x"
	.seh_endproc
	.text
	.p2align 4
	.def	_ZSt5asyncIRFvibPK7BoidMapPK5RulesPK8BoidListEJRibS2_S5_S8_EESt6futureINSt15__invoke_resultINSt5decayIT_E4typeEJDpNSE_IT0_E4typeEEE4typeEESt6launchOSF_DpOSI_.constprop.0;	.scl	3;	.type	32;	.endef
	.seh_proc	_ZSt5asyncIRFvibPK7BoidMapPK5RulesPK8BoidListEJRibS2_S5_S8_EESt6futureINSt15__invoke_resultINSt5decayIT_E4typeEJDpNSE_IT0_E4typeEEE4typeEESt6launchOSF_DpOSI_.constprop.0
_ZSt5asyncIRFvibPK7BoidMapPK5RulesPK8BoidListEJRibS2_S5_S8_EESt6futureINSt15__invoke_resultINSt5decayIT_E4typeEJDpNSE_IT0_E4typeEEE4typeEESt6launchOSF_DpOSI_.constprop.0:
.LFB15136:
	pushq	%r15	 #
	.seh_pushreg	%r15
	pushq	%r14	 #
	.seh_pushreg	%r14
	pushq	%r13	 #
	.seh_pushreg	%r13
	pushq	%r12	 #
	.seh_pushreg	%r12
	pushq	%rbp	 #
	.seh_pushreg	%rbp
	pushq	%rdi	 #
	.seh_pushreg	%rdi
	pushq	%rsi	 #
	.seh_pushreg	%rsi
	pushq	%rbx	 #
	.seh_pushreg	%rbx
	subq	$72, %rsp	 #,
	.seh_stackalloc	72
	.seh_endprologue
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1794:     async(launch __policy, _Fn&& __fn, _Args&&... __args)
	movq	%rcx, %rsi	 # tmp198, <retval>
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/new_allocator.h:147: 	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
	movl	$128, %ecx	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1794:     async(launch __policy, _Fn&& __fn, _Args&&... __args)
	movq	%rdx, %rdi	 # tmp199, __args#0
	movq	%r8, %rbp	 # tmp200, __args#1
	movq	%r9, %r13	 # tmp201, __args#2
.LEHB71:
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/new_allocator.h:147: 	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
	call	_Znwy	 #
.LEHE71:
	movq	%rax, %rbx	 # tmp202, _74
	leaq	8(%rax), %r12	 #, vectp.2791
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:130:       : _M_use_count(1), _M_weak_count(1) { }
	movq	.LC23(%rip), %rax	 #, tmp136
 # C:/msys64/ucrt64/include/c++/13.1.0/x86_64-w64-mingw32/bits/gthr-default.h:733:     __gthrw_(pthread_mutex_init) (__mutex, NULL);
	xorl	%edx, %edx	 #
 # C:/msys64/ucrt64/include/c++/13.1.0/tuple:191:       : _M_head_impl() { }
	movq	$0, 24(%rbx)	 #, MEM[(struct _Head_base *)_74 + 24B]._M_head_impl
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_mutex.h:74:       __GTHREAD_MUTEX_INIT_FUNCTION(&_M_mutex);
	leaq	40(%rbx), %rcx	 #, tmp139
 # C:/msys64/ucrt64/include/c++/13.1.0/ext/aligned_buffer.h:106:         return static_cast<void*>(&_M_storage);
	leaq	16(%rbx), %r15	 #, _69
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:130:       : _M_use_count(1), _M_weak_count(1) { }
	movq	%rax, 8(%rbx)	 # tmp136, MEM <vector(2) int> [(int *)_74 + 8B]
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:600: 	: _M_impl(__a)
	leaq	16+_ZTVSt23_Sp_counted_ptr_inplaceINSt13__future_base17_Async_state_implINSt6thread8_InvokerISt5tupleIJPFvibPK7BoidMapPK5RulesPK8BoidListEibS7_SA_SD_EEEEvEESaIvELN9__gnu_cxx12_Lock_policyE2EE(%rip), %rax	 #, tmp220
	movq	%rax, (%rbx)	 # tmp220, *_74.D.210265._vptr._Sp_counted_base
 # C:/msys64/ucrt64/include/c++/13.1.0/future:340:       _State_baseV2() noexcept : _M_result(), _M_status(_Status::__not_ready)
	leaq	16+_ZTVNSt13__future_base13_State_baseV2E(%rip), %rax	 #, tmp221
	movq	%rax, 16(%rbx)	 # tmp221, MEM[(struct _State_baseV2 *)_74 + 16B]._vptr._State_baseV2
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/atomic_futex.h:298:     __atomic_futex_unsigned(unsigned __data) : _M_data(__data)
	movl	$0, 32(%rbx)	 #, MEM[(struct __atomic_futex_unsigned *)_74 + 32B]._M_data
 # C:/msys64/ucrt64/include/c++/13.1.0/x86_64-w64-mingw32/bits/gthr-default.h:733:     __gthrw_(pthread_mutex_init) (__mutex, NULL);
	call	pthread_mutex_init	 #
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/atomic_futex.h:298:     __atomic_futex_unsigned(unsigned __data) : _M_data(__data)
	leaq	48(%rbx), %rcx	 #, tmp141
	call	_ZNSt18condition_variableC1Ev	 #
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1754: 	  _M_fn(std::forward<_Args>(__args)...)
	leaq	16+_ZTVNSt13__future_base17_Async_state_implINSt6thread8_InvokerISt5tupleIJPFvibPK7BoidMapPK5RulesPK8BoidListEibS6_S9_SC_EEEEvEE(%rip), %rax	 #, tmp222
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/atomic_base.h:222:       : __atomic_flag_base{ _S_init(__i) }
	movb	$0, 56(%rbx)	 #, MEM[(struct atomic_flag *)_74 + 56B].D.132351._M_i
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1753: 	: _M_result(new _Result<_Res>()),
	movl	$16, %ecx	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/mutex:800:     constexpr once_flag() noexcept = default;
	movq	$0, 60(%rbx)	 #, MEM <unsigned long long> [(void *)_74 + 60B]
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_thread.h:97:       id() noexcept : _M_thread() { }
	movq	$0, 68(%rbx)	 #, MEM <unsigned long long> [(void *)_74 + 68B]
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1754: 	  _M_fn(std::forward<_Args>(__args)...)
	movq	%rax, 16(%rbx)	 # tmp222, MEM[(struct _Async_state_impl *)_74 + 16B].D.196832.D.152781._vptr._State_baseV2
.LEHB72:
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1753: 	: _M_result(new _Result<_Res>()),
	call	_Znwy	 #
.LEHE72:
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1753: 	: _M_result(new _Result<_Res>()),
	vpxor	%xmm0, %xmm0, %xmm0	 # tmp144
 # C:/msys64/ucrt64/include/c++/13.1.0/future:667:     struct __future_base::_Result<void> : __future_base::_Result_base
	movq	%rax, %rcx	 # _76,
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1753: 	: _M_result(new _Result<_Res>()),
	movq	%rax, %r14	 # tmp203, _76
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1753: 	: _M_result(new _Result<_Res>()),
	vmovdqu	%xmm0, (%rax)	 # tmp144, MEM <vector(2) long long unsigned int> [(void *)_76]
.LEHB73:
 # C:/msys64/ucrt64/include/c++/13.1.0/future:667:     struct __future_base::_Result<void> : __future_base::_Result_base
	call	_ZNSt13__future_base12_Result_baseC2Ev	 #
.LEHE73:
 # C:/msys64/ucrt64/include/c++/13.1.0/future:667:     struct __future_base::_Result<void> : __future_base::_Result_base
	leaq	16+_ZTVNSt13__future_base7_ResultIvEE(%rip), %rax	 #, tmp223
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/unique_ptr.h:176:       __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
	vmovq	%r14, %xmm2	 # _76, _76
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_thread.h:164: 	_M_start_thread(_State_ptr(new _State_impl<_Wrapper>(
	movl	$32, %ecx	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_thread.h:97:       id() noexcept : _M_thread() { }
	movq	$0, 40(%rsp)	 #, MEM[(struct id *)&D.234646]._M_thread
 # C:/msys64/ucrt64/include/c++/13.1.0/future:667:     struct __future_base::_Result<void> : __future_base::_Result_base
	movq	%rax, (%r14)	 # tmp223, MEM[(struct _Result *)_76].D.147292._vptr._Result_base
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/unique_ptr.h:176:       __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
	movq	176(%rsp), %rax	 # __args#3, __args#3
	vmovq	(%rax), %xmm1	 # *__args#3_6(D), *__args#3_6(D)
	movq	184(%rsp), %rax	 # __args#4, __args#4
	vpinsrq	$1, 0(%r13), %xmm1, %xmm1	 # *__args#2_5(D), *__args#3_6(D), tmp147
	vpinsrq	$1, (%rax), %xmm2, %xmm0	 # *__args#4_7(D), _76, tmp150
 # C:/msys64/ucrt64/include/c++/13.1.0/tuple:201: 	: _M_head_impl(std::forward<_UHead>(__h)) { }
	movzbl	0(%rbp), %eax	 # *__args#1_4(D), *__args#1_4(D)
	movb	%al, 112(%rbx)	 # *__args#1_4(D), MEM[(struct _Head_base *)_74 + 112B]._M_head_impl
	movl	(%rdi), %eax	 # MEM[(type &)__args#0_3(D)], MEM[(type &)__args#0_3(D)]
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/unique_ptr.h:176:       __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
	vinserti128	$0x1, %xmm1, %ymm0, %ymm0	 # tmp147, tmp150, tmp146
	vmovdqu	%ymm0, 80(%rbx)	 # tmp146, MEM <vector(4) long long unsigned int> [(void *)_74 + 80B]
 # C:/msys64/ucrt64/include/c++/13.1.0/tuple:201: 	: _M_head_impl(std::forward<_UHead>(__h)) { }
	movl	%eax, 116(%rbx)	 # MEM[(type &)__args#0_3(D)], MEM[(struct _Head_base *)_74 + 116B]._M_head_impl
 # C:/msys64/ucrt64/include/c++/13.1.0/tuple:194:       : _M_head_impl(__h) { }
	leaq	_Z11jump_runneribPK7BoidMapPK5RulesPK8BoidList(%rip), %rax	 #, tmp155
	movq	%rax, 120(%rbx)	 # tmp155, MEM[(struct _Head_base *)_74 + 120B]._M_head_impl
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_thread.h:164: 	_M_start_thread(_State_ptr(new _State_impl<_Wrapper>(
	vzeroupper
.LEHB74:
	call	_Znwy	 #
.LEHE74:
 # C:/msys64/ucrt64/include/c++/13.1.0/tuple:201: 	: _M_head_impl(std::forward<_UHead>(__h)) { }
	leaq	_ZNSt13__future_base17_Async_state_implINSt6thread8_InvokerISt5tupleIJPFvibPK7BoidMapPK5RulesPK8BoidListEibS6_S9_SC_EEEEvE6_M_runEv(%rip), %rdx	 #, tmp159
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_thread.h:240: 	  : _M_func(std::forward<_Args>(__args)...)
	leaq	16+_ZTVNSt6thread11_State_implINS_8_InvokerISt5tupleIJMNSt13__future_base17_Async_state_implINS1_IS2_IJPFvibPK7BoidMapPK5RulesPK8BoidListEibS7_SA_SD_EEEEvEEFvvEPSI_EEEEEE(%rip), %rdi	 #, tmp225
 # C:/msys64/ucrt64/include/c++/13.1.0/tuple:201: 	: _M_head_impl(std::forward<_UHead>(__h)) { }
	movq	%r15, 8(%rax)	 # _69, MEM[(struct _Head_base *)_90 + 8B]._M_head_impl
	movq	%rdx, 16(%rax)	 # tmp159, MEM[(struct _Head_base *)_90 + 16B]._M_head_impl.__pfn
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_thread.h:164: 	_M_start_thread(_State_ptr(new _State_impl<_Wrapper>(
	leaq	40(%rsp), %rcx	 #, tmp161
	leaq	48(%rsp), %rdx	 #, tmp160
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_thread.h:240: 	  : _M_func(std::forward<_Args>(__args)...)
	movq	%rdi, (%rax)	 # tmp225, MEM[(struct _State_impl *)_90].D.219460._vptr._State
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_thread.h:164: 	_M_start_thread(_State_ptr(new _State_impl<_Wrapper>(
	leaq	_ZNSt6thread24_M_thread_deps_never_runEv(%rip), %r8	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/tuple:201: 	: _M_head_impl(std::forward<_UHead>(__h)) { }
	movq	$0, 24(%rax)	 #, MEM[(struct _Head_base *)_90 + 16B]._M_head_impl.__delta
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/unique_ptr.h:176:       __uniq_ptr_impl(pointer __p) : _M_t() { _M_ptr() = __p; }
	movq	%rax, 48(%rsp)	 # tmp156, MEM[(struct _State * &)_11]
.LEHB75:
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_thread.h:164: 	_M_start_thread(_State_ptr(new _State_impl<_Wrapper>(
	call	_ZNSt6thread15_M_start_threadESt10unique_ptrINS_6_StateESt14default_deleteIS1_EEPFvvE	 #
.LEHE75:
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/unique_ptr.h:403: 	if (__ptr != nullptr)
	movq	48(%rsp), %rcx	 # MEM[(struct _State * &)_11], _92
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/unique_ptr.h:403: 	if (__ptr != nullptr)
	testq	%rcx, %rcx	 # _92
	je	.L1243	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/unique_ptr.h:99: 	delete __ptr;
	movq	(%rcx), %rax	 # _92->_vptr._State, _92->_vptr._State
	call	*8(%rax)	 # MEM[(int (*) () *)_93 + 8B]
.L1243:
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_thread.h:185:       if (joinable())
	cmpq	$0, 64(%rbx)	 #, MEM[(const struct thread *)_74 + 64B]._M_id._M_thread
	jne	.L1244	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/move.h:205:       __a = _GLIBCXX_MOVE(__b);
	movq	40(%rsp), %rax	 # MEM[(struct id &)&D.234646], MEM[(struct id &)&D.234646]
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:1522:       __shared_ptr(const __shared_ptr&) noexcept = default;
	movq	%r15, (%rsi)	 # _69, MEM[(struct __shared_ptr *)_1(D)]._M_ptr
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:1075:       : _M_pi(__r._M_pi)
	movq	%rbx, 8(%rsi)	 # _74, MEM[(struct __shared_count *)_1(D) + 8B]._M_pi
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/move.h:205:       __a = _GLIBCXX_MOVE(__b);
	movq	%rax, 64(%rbx)	 # MEM[(struct id &)&D.234646], MEM[(struct id *)_74 + 64B]
 # C:/msys64/ucrt64/include/c++/13.1.0/ext/atomicity.h:71:   { __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
	lock addl	$1, 8(%rbx)	 #,,
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:1670:       { return _M_ptr != nullptr; }
	movq	(%rsi), %rdx	 # MEM[(const struct __shared_ptr *)_1(D)]._M_ptr, _127
 # C:/msys64/ucrt64/include/c++/13.1.0/future:580:           if (!static_cast<bool>(__p))
	testq	%rdx, %rdx	 # _127
	je	.L1289	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/atomic_base.h:228:       return __atomic_test_and_set (&_M_i, int(__m));
	movl	$1, %eax	 #, tmp183
	xchgb	40(%rdx), %al	 #,, _130
 # C:/msys64/ucrt64/include/c++/13.1.0/future:481: 	if (_M_retrieved.test_and_set())
	testb	%al, %al	 # _130
	jne	.L1290	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:337: 	  if (__atomic_load_n(__both_counts, __ATOMIC_ACQUIRE) == __unique_ref)
	movabsq	$4294967297, %rax	 #, tmp188
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:337: 	  if (__atomic_load_n(__both_counts, __ATOMIC_ACQUIRE) == __unique_ref)
	movq	8(%rbx), %rdx	 #, _132
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:337: 	  if (__atomic_load_n(__both_counts, __ATOMIC_ACQUIRE) == __unique_ref)
	cmpq	%rax, %rdx	 # tmp188, _132
	je	.L1291	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/ext/atomicity.h:66:   { return __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
	lock subl	$1, (%r12)	 #,,* vectp.2791
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:350: 	  if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
	je	.L1292	 #,
.L1242:
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1823:     }
	movq	%rsi, %rax	 # <retval>,
	addq	$72, %rsp	 #,
	popq	%rbx	 #
	popq	%rsi	 #
	popq	%rdi	 #
	popq	%rbp	 #
	popq	%r12	 #
	popq	%r13	 #
	popq	%r14	 #
	popq	%r15	 #
	ret	
	.p2align 4,,10
	.p2align 3
.L1291:
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:346: 	      _M_dispose();
	movq	(%rbx), %rax	 # MEM[(struct _Sp_counted_base *)_74]._vptr._Sp_counted_base, MEM[(struct _Sp_counted_base *)_74]._vptr._Sp_counted_base
	movq	%rbx, %rcx	 # _74,
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:343: 	      _M_weak_count = _M_use_count = 0;
	movq	$0, 8(%rbx)	 #, MEM <vector(2) int> [(int *)_74 + 8B]
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:346: 	      _M_dispose();
	call	*16(%rax)	 # MEM[(int (*) () *)_134 + 16B]
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:347: 	      _M_destroy();
	movq	(%rbx), %rax	 # MEM[(struct _Sp_counted_base *)_74]._vptr._Sp_counted_base, MEM[(struct _Sp_counted_base *)_74]._vptr._Sp_counted_base
	movq	%rbx, %rcx	 # _74,
	call	*24(%rax)	 # MEM[(int (*) () *)_136 + 24B]
	jmp	.L1242	 #
	.p2align 4,,10
	.p2align 3
.L1292:
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:353: 	      _M_release_last_use_cold();
	movq	%rbx, %rcx	 # _74,
	call	_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE24_M_release_last_use_coldEv	 #
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1822:       return future<__async_result_of<_Fn, _Args...>>(std::move(__state));
	jmp	.L1242	 #
.L1289:
 # C:/msys64/ucrt64/include/c++/13.1.0/future:581:             __throw_future_error((int)future_errc::no_state);
	movl	$3, %ecx	 #,
.LEHB76:
	call	_ZSt20__throw_future_errori	 #
.L1290:
 # C:/msys64/ucrt64/include/c++/13.1.0/future:482: 	  __throw_future_error(int(future_errc::future_already_retrieved));
	movl	$1, %ecx	 #,
	call	_ZSt20__throw_future_errori	 #
.LEHE76:
.L1266:
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1753: 	: _M_result(new _Result<_Res>()),
	movq	%rdx, %rdi	 # tmp208, tmp175
	movq	%r14, %rcx	 # _76,
	movl	$16, %edx	 #,
	movq	%rax, %rsi	 # tmp207, tmp173
	vzeroupper
	call	_ZdlPvy	 #
.L1252:
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1718:     ~_Async_state_commonV2() = default;
	leaq	16+_ZTVNSt13__future_base21_Async_state_commonV2E(%rip), %rax	 #, tmp226
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_thread.h:172:       if (joinable())
	cmpq	$0, 64(%rbx)	 #, MEM[(const struct thread *)_74 + 64B]._M_id._M_thread
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1718:     ~_Async_state_commonV2() = default;
	movq	%rax, 16(%rbx)	 # tmp226, MEM[(struct _Async_state_commonV2 *)_74 + 16B].D.152781._vptr._State_baseV2
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_thread.h:172:       if (joinable())
	je	.L1293	 #,
.L1244:
 # C:/msys64/ucrt64/include/c++/13.1.0/x86_64-w64-mingw32/bits/c++config.h:322:     terminate();
	call	_ZSt9terminatev	 #
.L1268:
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:1070: 	if (_M_pi != nullptr)
	movq	8(%rsi), %rcx	 # MEM[(struct __shared_count *)_1(D) + 8B]._M_pi, _128
	movq	%rax, %rdi	 # tmp213, tmp185
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:1070: 	if (_M_pi != nullptr)
	testq	%rcx, %rcx	 # _128
	jne	.L1294	 #,
	vzeroupper
.L1257:
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:1071: 	  _M_pi->_M_release();
	movq	%rbx, %rcx	 # _74,
	call	_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE10_M_releaseEv	 #
	movq	%rdi, %rcx	 # tmp185,
.LEHB77:
	call	_Unwind_Resume	 #
.LEHE77:
.L1263:
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1809: 	  catch(const system_error& __e)
	movq	%rax, %rcx	 # tmp214, tmp181
	movq	%rdx, %rdi	 # tmp215, tmp182
	vzeroupper
.L1254:
	subq	$1, %rdi	 #, tmp182
	jne	.L1288	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1809: 	  catch(const system_error& __e)
	call	__cxa_begin_catch	 #
	movq	%rax, %rbx	 # tmp216, _17
 # C:/msys64/ucrt64/include/c++/13.1.0/system_error:436:   { return error_condition(static_cast<int>(__e), generic_category()); }
	call	_ZNSt3_V216generic_categoryEv	 #
 # C:/msys64/ucrt64/include/c++/13.1.0/system_error:531:   { return !(__lhs == __rhs); }
	leaq	48(%rsp), %rdx	 #, tmp195
 # C:/msys64/ucrt64/include/c++/13.1.0/system_error:590:     code() const noexcept { return _M_code; }
	leaq	16(%rbx), %rcx	 #, tmp196
 # C:/msys64/ucrt64/include/c++/13.1.0/system_error:375: 	*this = make_error_condition(__e);
	movl	$11, 48(%rsp)	 #, MEM[(struct error_condition *)_11]._M_value
	movq	%rax, 56(%rsp)	 # tmp217, MEM[(struct error_condition *)_11]._M_cat
 # C:/msys64/ucrt64/include/c++/13.1.0/system_error:531:   { return !(__lhs == __rhs); }
	call	_ZSteqRKSt10error_codeRKSt15error_condition	 #
.LEHB78:
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1813: 		throw;
	call	__cxa_rethrow	 #
.LEHE78:
.L1294:
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:1071: 	  _M_pi->_M_release();
	vzeroupper
	call	_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE10_M_releaseEv	 #
	jmp	.L1257	 #
.L1262:
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1809: 	  catch(const system_error& __e)
	movq	%rax, %rbx	 # tmp218, tmp197
	vzeroupper
	call	__cxa_end_catch	 #
	movq	%rbx, %rcx	 # tmp197,
.L1288:
.LEHB79:
	call	_Unwind_Resume	 #
.LEHE79:
.L1267:
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/unique_ptr.h:403: 	if (__ptr != nullptr)
	movq	48(%rsp), %rcx	 # MEM[(struct _State * &)_11], _95
	movq	%rax, %rsi	 # tmp205, tmp168
	movq	%rdx, %rdi	 # tmp206, tmp170
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/unique_ptr.h:403: 	if (__ptr != nullptr)
	testq	%rcx, %rcx	 # _95
	je	.L1286	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/unique_ptr.h:99: 	delete __ptr;
	movq	(%rcx), %rax	 # _95->_vptr._State, _95->_vptr._State
	vzeroupper
	call	*8(%rax)	 # MEM[(int (*) () *)_96 + 8B]
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/unique_ptr.h:100:       }
	jmp	.L1248	 #
.L1264:
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1718:     ~_Async_state_commonV2() = default;
	movq	%rax, %rsi	 # tmp211, tmp172
	movq	%rdx, %rdi	 # tmp212, tmp174
	vzeroupper
	jmp	.L1252	 #
.L1265:
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/unique_ptr.h:403: 	if (__ptr != nullptr)
	movq	%rax, %rsi	 # tmp209, tmp167
	movq	%rdx, %rdi	 # tmp210, tmp169
	vzeroupper
.L1248:
	movq	80(%rbx), %rcx	 # MEM[(struct _Result * &)_74 + 80], _84
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/unique_ptr.h:403: 	if (__ptr != nullptr)
	testq	%rcx, %rcx	 # _84
	je	.L1252	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/future:229: 	void operator()(_Result_base* __fr) const { __fr->_M_destroy(); }
	movq	(%rcx), %rax	 # MEM[(struct _Result_base *)_84]._vptr._Result_base, MEM[(struct _Result_base *)_84]._vptr._Result_base
	call	*(%rax)	 # *_85
 # C:/msys64/ucrt64/include/c++/13.1.0/future:229: 	void operator()(_Result_base* __fr) const { __fr->_M_destroy(); }
	jmp	.L1252	 #
.L1293:
 # C:/msys64/ucrt64/include/c++/13.1.0/future:1718:     ~_Async_state_commonV2() = default;
	movq	%r15, %rcx	 # _69,
	call	_ZNSt13__future_base13_State_baseV2D2Ev	 #
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/new_allocator.h:168: 	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
	movq	%rbx, %rcx	 # _74,
	movl	$128, %edx	 #,
	call	_ZdlPvy	 #
	movq	%rsi, %rcx	 # tmp172, tmp181
	jmp	.L1254	 #
.L1286:
	vzeroupper
	jmp	.L1248	 #
	.seh_handler	__gxx_personality_seh0, @unwind, @except
	.seh_handlerdata
	.align 4
.LLSDA15136:
	.byte	0xff
	.byte	0x9b
	.uleb128 .LLSDATT15136-.LLSDATTD15136
.LLSDATTD15136:
	.byte	0x1
	.uleb128 .LLSDACSE15136-.LLSDACSB15136
.LLSDACSB15136:
	.uleb128 .LEHB71-.LFB15136
	.uleb128 .LEHE71-.LEHB71
	.uleb128 .L1263-.LFB15136
	.uleb128 0x3
	.uleb128 .LEHB72-.LFB15136
	.uleb128 .LEHE72-.LEHB72
	.uleb128 .L1264-.LFB15136
	.uleb128 0x3
	.uleb128 .LEHB73-.LFB15136
	.uleb128 .LEHE73-.LEHB73
	.uleb128 .L1266-.LFB15136
	.uleb128 0x3
	.uleb128 .LEHB74-.LFB15136
	.uleb128 .LEHE74-.LEHB74
	.uleb128 .L1265-.LFB15136
	.uleb128 0x3
	.uleb128 .LEHB75-.LFB15136
	.uleb128 .LEHE75-.LEHB75
	.uleb128 .L1267-.LFB15136
	.uleb128 0x3
	.uleb128 .LEHB76-.LFB15136
	.uleb128 .LEHE76-.LEHB76
	.uleb128 .L1268-.LFB15136
	.uleb128 0
	.uleb128 .LEHB77-.LFB15136
	.uleb128 .LEHE77-.LEHB77
	.uleb128 0
	.uleb128 0
	.uleb128 .LEHB78-.LFB15136
	.uleb128 .LEHE78-.LEHB78
	.uleb128 .L1262-.LFB15136
	.uleb128 0
	.uleb128 .LEHB79-.LFB15136
	.uleb128 .LEHE79-.LEHB79
	.uleb128 0
	.uleb128 0
.LLSDACSE15136:
	.byte	0
	.byte	0
	.byte	0x1
	.byte	0x7d
	.align 4
	.long	.LDFCM1-.
.LLSDATT15136:
	.text
	.seh_endproc
	.section .rdata,"dr"
	.align 8
.LC75:
	.ascii "cells :%0.12f, non-inter: %0.12f\0"
	.text
	.p2align 4
	.globl	_Z12update_boidsRK7BoidMapRK5RulesRK8BoidList
	.def	_Z12update_boidsRK7BoidMapRK5RulesRK8BoidList;	.scl	2;	.type	32;	.endef
	.seh_proc	_Z12update_boidsRK7BoidMapRK5RulesRK8BoidList
_Z12update_boidsRK7BoidMapRK5RulesRK8BoidList:
.LFB12616:
	pushq	%rbp	 #
	.seh_pushreg	%rbp
	pushq	%r15	 #
	.seh_pushreg	%r15
	pushq	%r14	 #
	.seh_pushreg	%r14
	pushq	%r13	 #
	.seh_pushreg	%r13
	pushq	%r12	 #
	.seh_pushreg	%r12
	pushq	%rdi	 #
	.seh_pushreg	%rdi
	pushq	%rsi	 #
	.seh_pushreg	%rsi
	pushq	%rbx	 #
	.seh_pushreg	%rbx
	subq	$280, %rsp	 #,
	.seh_stackalloc	280
	leaq	208(%rsp), %rbp	 #,
	.seh_setframe	%rbp, 208
	vmovups	%xmm6, 0(%rbp)	 #,
	.seh_savexmm	%xmm6, 208
	vmovups	%xmm7, 16(%rbp)	 #,
	.seh_savexmm	%xmm7, 224
	vmovups	%xmm8, 32(%rbp)	 #,
	.seh_savexmm	%xmm8, 240
	vmovups	%xmm9, 48(%rbp)	 #,
	.seh_savexmm	%xmm9, 256
	.seh_endprologue
 # .\src\main.cpp:1062: void update_boids(const BoidMap& boid_map, const Rules& rules, const BoidList& boid_list) {
	movq	%r8, 160(%rbp)	 # tmp830, boid_list
	movq	%rdx, %r14	 # tmp829, rules
	movq	%rcx, 144(%rbp)	 # tmp828, boid_map
 # .\src\main.cpp:1063:     auto t_start = std::chrono::high_resolution_clock::now();
	call	_ZNSt6chrono3_V212system_clock3nowEv	 #
 # .\src\main.cpp:1086:     std::thread threads[NUM_THREADS];
	movl	_ZL11num_threads(%rip), %esi	 # num_threads,
 # .\src\main.cpp:1063:     auto t_start = std::chrono::high_resolution_clock::now();
	movq	%rax, -144(%rbp)	 # tmp831, %sfp
 # .\src\main.cpp:1086:     std::thread threads[NUM_THREADS];
	leaq	0(,%rsi,8), %r8	 #, _4
	leaq	15(%r8), %rax	 #, tmp481
	movq	%r8, -136(%rbp)	 # _4, %sfp
	shrq	$4, %rax	 #, tmp482
	salq	$4, %rax	 #, tmp483
	call	___chkstk_ms
	subq	%rax, %rsp	 # tmp485,
	leaq	48(%rsp), %rax	 #, tmp488
	movq	%rax, -128(%rbp)	 # tmp488, %sfp
 # .\src\main.cpp:1086:     std::thread threads[NUM_THREADS];
	testl	%esi, %esi	 # num_threads.123_52
	je	.L1296	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/new_allocator.h:147: 	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
	movq	%rsi, %rdi	 # _3, _44
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_thread.h:97:       id() noexcept : _M_thread() { }
	movq	%rax, %rcx	 # tmp488,
	xorl	%edx, %edx	 #
	call	memset	 #
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/new_allocator.h:147: 	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
	salq	$4, %rdi	 #, _44
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/stl_vector.h:100: 	: _M_start(), _M_finish(), _M_end_of_storage()
	vpxor	%xmm0, %xmm0, %xmm0	 # tmp493
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/stl_vector.h:100: 	: _M_start(), _M_finish(), _M_end_of_storage()
	movq	$0, -16(%rbp)	 #, MEM[(struct _Vector_impl_data *)&pool]._M_end_of_storage
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/new_allocator.h:147: 	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
	movq	%rdi, %rcx	 # _44,
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/stl_vector.h:100: 	: _M_start(), _M_finish(), _M_end_of_storage()
	vmovdqu	%xmm0, -32(%rbp)	 # tmp493, MEM <vector(2) long long unsigned int> [(struct future * *)&pool]
.LEHB80:
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/new_allocator.h:147: 	return static_cast<_Tp*>(_GLIBCXX_OPERATOR_NEW(__n * sizeof(_Tp)));
	call	_Znwy	 #
	cmpl	$1, %esi	 #, num_threads.123_52
	je	.L1355	 #,
	leaq	-2(%rsi), %rdx	 #, tmp495
	xorl	%ecx, %ecx	 # ivtmp_874
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:1463:       : _M_ptr(0), _M_refcount()
	vpxor	%xmm0, %xmm0, %xmm0	 # tmp498
	shrq	%rdx	 # tmp496
	addq	$1, %rdx	 #, bnd.2935
.L1298:
	movq	%rcx, %r8	 # ivtmp_874, tmp497
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/stl_uninitialized.h:642: 	      for (; __n > 0; --__n, (void) ++__cur)
	addq	$1, %rcx	 #, ivtmp_874
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:1463:       : _M_ptr(0), _M_refcount()
	salq	$5, %r8	 #, tmp497
	vmovdqu	%ymm0, (%rax,%r8)	 # tmp498, MEM <vector(4) long long unsigned int> [(void *)_200 + _896 * 1]
	cmpq	%rdx, %rcx	 # bnd.2935, ivtmp_874
	jb	.L1298	 #,
	leaq	(%rdx,%rdx), %rcx	 #, niters_vector_mult_vf.2936
	cmpq	%rcx, %rsi	 # niters_vector_mult_vf.2936, _3
	je	.L1412	 #,
	salq	$5, %rdx	 #, tmp499
	addq	%rax, %rdx	 # _200, tmp.2937
	vzeroupper
.L1297:
	vpxor	%xmm0, %xmm0, %xmm0	 # tmp500
	vmovdqu	%xmm0, (%rdx)	 # tmp500, MEM <vector(2) long long unsigned int> [(void *)__cur_860]
.L1299:
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/vector.tcc:705: 	      this->_M_impl._M_start = __new_start;
	movq	%rax, -32(%rbp)	 # _200, pool.D.168544._M_impl.D.167883._M_start
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/vector.tcc:706: 	      this->_M_impl._M_finish = __new_start + __size + __n;
	addq	%rdi, %rax	 # _44, _219
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/vector.tcc:706: 	      this->_M_impl._M_finish = __new_start + __size + __n;
	movq	%rax, -24(%rbp)	 # _219, pool.D.168544._M_impl.D.167883._M_finish
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/vector.tcc:707: 	      this->_M_impl._M_end_of_storage = __new_start + __len;
	movq	%rax, -16(%rbp)	 # _219, pool.D.168544._M_impl.D.167883._M_end_of_storage
 # .\src\main.cpp:1130:     for (int i = 0; i < NUM_THREADS; i++) {
	movl	_ZL11num_threads(%rip), %eax	 # num_threads,
 # .\src\main.cpp:1130:     for (int i = 0; i < NUM_THREADS; i++) {
	movl	$0, -76(%rbp)	 #, MEM[(int *)_637]
 # .\src\main.cpp:1130:     for (int i = 0; i < NUM_THREADS; i++) {
	testl	%eax, %eax	 #
	je	.L1322	 #,
	leaq	-72(%rbp), %rax	 #, tmp818
 # .\src\main.cpp:1130:     for (int i = 0; i < NUM_THREADS; i++) {
	xorl	%esi, %esi	 # _13
	leaq	-48(%rbp), %rbx	 #, tmp821
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:337: 	  if (__atomic_load_n(__both_counts, __ATOMIC_ACQUIRE) == __unique_ref)
	movabsq	$4294967297, %rdi	 #, tmp827
	movq	%rax, -104(%rbp)	 # tmp818, %sfp
	leaq	-77(%rbp), %rax	 #, tmp816
	movq	%rax, -88(%rbp)	 # tmp816, %sfp
	leaq	-76(%rbp), %rax	 #, tmp817
	movq	%rax, -96(%rbp)	 # tmp817, %sfp
	leaq	-56(%rbp), %rax	 #, tmp820
	movq	%rax, -120(%rbp)	 # tmp820, %sfp
	leaq	-64(%rbp), %rax	 #, tmp819
	movq	%rax, -112(%rbp)	 # tmp819, %sfp
	jmp	.L1304	 #
	.p2align 4,,10
	.p2align 3
.L1302:
 # C:/msys64/ucrt64/include/c++/13.1.0/ext/atomicity.h:66:   { return __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
	lock subl	$1, (%rax)	 #,,* __both_counts
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:350: 	  if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
	je	.L1303	 #,
.L1416:
 # .\src\main.cpp:1130:     for (int i = 0; i < NUM_THREADS; i++) {
	movl	-76(%rbp), %esi	 # MEM[(int *)_637], _13
.L1301:
 # .\src\main.cpp:1130:     for (int i = 0; i < NUM_THREADS; i++) {
	movl	_ZL11num_threads(%rip), %eax	 # num_threads, num_threads.131_16
 # .\src\main.cpp:1130:     for (int i = 0; i < NUM_THREADS; i++) {
	addl	$1, %esi	 #, _13
	movl	%esi, -76(%rbp)	 # _13, MEM[(int *)_637]
 # .\src\main.cpp:1130:     for (int i = 0; i < NUM_THREADS; i++) {
	cmpl	%eax, %esi	 # num_threads.131_16, _13
	jnb	.L1420	 #,
.L1304:
 # .\src\main.cpp:1131:         pool[i] = std::async(std::launch::async, jump_runner, i, false, &boid_map, &rules, &boid_list);
	movq	160(%rbp), %rax	 # boid_list, tmp899
 # .\src\main.cpp:1131:         pool[i] = std::async(std::launch::async, jump_runner, i, false, &boid_map, &rules, &boid_list);
	movq	%r14, -64(%rbp)	 # rules, MEM[(const struct Rules * *)_785]
 # .\src\main.cpp:1131:         pool[i] = std::async(std::launch::async, jump_runner, i, false, &boid_map, &rules, &boid_list);
	movq	%rbx, %rcx	 # tmp821,
 # .\src\main.cpp:1131:         pool[i] = std::async(std::launch::async, jump_runner, i, false, &boid_map, &rules, &boid_list);
	movb	$0, -77(%rbp)	 #, MEM[(bool *)_700]
 # .\src\main.cpp:1131:         pool[i] = std::async(std::launch::async, jump_runner, i, false, &boid_map, &rules, &boid_list);
	movq	%rax, -56(%rbp)	 # tmp899, MEM[(const struct BoidList * *)_647]
 # .\src\main.cpp:1131:         pool[i] = std::async(std::launch::async, jump_runner, i, false, &boid_map, &rules, &boid_list);
	movq	144(%rbp), %rax	 # boid_map, tmp900
	movq	%rax, -72(%rbp)	 # tmp900, MEM[(const struct BoidMap * *)_801]
 # .\src\main.cpp:1131:         pool[i] = std::async(std::launch::async, jump_runner, i, false, &boid_map, &rules, &boid_list);
	movq	-120(%rbp), %rax	 # %sfp, tmp820
	movq	%rax, 40(%rsp)	 # tmp820,
	movq	-112(%rbp), %rax	 # %sfp, tmp819
	movq	%rax, 32(%rsp)	 # tmp819,
	movq	-104(%rbp), %r9	 # %sfp,
	movq	-88(%rbp), %r8	 # %sfp,
	movq	-96(%rbp), %rdx	 # %sfp,
	call	_ZSt5asyncIRFvibPK7BoidMapPK5RulesPK8BoidListEJRibS2_S5_S8_EESt6futureINSt15__invoke_resultINSt5decayIT_E4typeEJDpNSE_IT0_E4typeEEE4typeEESt6launchOSF_DpOSI_.constprop.0	 #
 # .\src\main.cpp:1131:         pool[i] = std::async(std::launch::async, jump_runner, i, false, &boid_map, &rules, &boid_list);
	movslq	%esi, %rax	 # _13, _13
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/move.h:206:       __b = _GLIBCXX_MOVE(__tmp);
	vmovdqu	-48(%rbp), %xmm7	 # MEM <vector(2) long long unsigned int> [(void *)_167], tmp903
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/stl_vector.h:1124: 	return *(this->_M_impl._M_start + __n);
	salq	$4, %rax	 #, tmp508
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/stl_vector.h:1124: 	return *(this->_M_impl._M_start + __n);
	addq	-32(%rbp), %rax	 # pool.D.168544._M_impl.D.167883._M_start, _125
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:1099: 	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	movq	8(%rax), %r12	 # MEM[(struct __shared_count &)_125 + 8]._M_pi, __tmp
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/move.h:206:       __b = _GLIBCXX_MOVE(__tmp);
	vmovdqu	%xmm7, (%rax)	 # tmp903, MEM <vector(2) long long unsigned int> [(void *)_125]
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:1070: 	if (_M_pi != nullptr)
	testq	%r12, %r12	 # __tmp
	je	.L1301	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:337: 	  if (__atomic_load_n(__both_counts, __ATOMIC_ACQUIRE) == __unique_ref)
	movq	8(%r12), %rdx	 #, _253
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:334: 	  auto __both_counts = reinterpret_cast<long long*>(&_M_use_count);
	leaq	8(%r12), %rax	 #, __both_counts
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:337: 	  if (__atomic_load_n(__both_counts, __ATOMIC_ACQUIRE) == __unique_ref)
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:337: 	  if (__atomic_load_n(__both_counts, __ATOMIC_ACQUIRE) == __unique_ref)
	cmpq	%rdi, %rdx	 # tmp827, _253
	jne	.L1302	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:343: 	      _M_weak_count = _M_use_count = 0;
	movq	$0, 8(%r12)	 #, MEM <vector(2) int> [(int *)__tmp_86 + 8B]
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:346: 	      _M_dispose();
	movq	(%r12), %rax	 # __tmp_86->_vptr._Sp_counted_base, __tmp_86->_vptr._Sp_counted_base
	movq	%r12, %rcx	 # __tmp,
	call	*16(%rax)	 # MEM[(int (*) () *)_255 + 16B]
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:347: 	      _M_destroy();
	movq	(%r12), %rax	 # __tmp_86->_vptr._Sp_counted_base, __tmp_86->_vptr._Sp_counted_base
	movq	%r12, %rcx	 # __tmp,
	call	*24(%rax)	 # MEM[(int (*) () *)_257 + 24B]
 # .\src\main.cpp:1130:     for (int i = 0; i < NUM_THREADS; i++) {
	movl	-76(%rbp), %esi	 # MEM[(int *)_637], _13
 # .\src\main.cpp:1130:     for (int i = 0; i < NUM_THREADS; i++) {
	movl	_ZL11num_threads(%rip), %eax	 # num_threads, num_threads.131_16
 # .\src\main.cpp:1130:     for (int i = 0; i < NUM_THREADS; i++) {
	addl	$1, %esi	 #, _13
	movl	%esi, -76(%rbp)	 # _13, MEM[(int *)_637]
 # .\src\main.cpp:1130:     for (int i = 0; i < NUM_THREADS; i++) {
	cmpl	%eax, %esi	 # num_threads.131_16, _13
	jb	.L1304	 #,
	.p2align 4,,10
	.p2align 3
.L1420:
 # .\src\main.cpp:1134:     for (int i = 0; i < NUM_THREADS; i++) {
	testl	%eax, %eax	 # num_threads.131_16
	je	.L1322	 #,
	movq	-32(%rbp), %r15	 # pool.D.168544._M_impl.D.167883._M_start, ivtmp.3023
 # .\src\main.cpp:1134:     for (int i = 0; i < NUM_THREADS; i++) {
	xorl	%r13d, %r13d	 # i
	.p2align 4,,10
	.p2align 3
.L1312:
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:1670:       { return _M_ptr != nullptr; }
	movq	(%r15), %rsi	 # MEM[(struct element_type * *)_898], _259
 # C:/msys64/ucrt64/include/c++/13.1.0/future:580:           if (!static_cast<bool>(__p))
	testq	%rsi, %rsi	 # _259
	je	.L1421	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/future:350: 	_M_complete_async();
	movq	(%rsi), %rax	 # MEM[(struct _State_baseV2 *)_259]._vptr._State_baseV2, MEM[(struct _State_baseV2 *)_259]._vptr._State_baseV2
	movq	%rsi, %rcx	 # _259,
	call	*16(%rax)	 # MEM[(int (*) () *)_260 + 16B]
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/atomic_futex.h:320:       unique_lock<mutex> __lock(_M_mutex);
	leaq	24(%rsi), %rcx	 #, _374
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/unique_lock.h:69:       : _M_device(std::__addressof(__m)), _M_owns(false)
	movb	$0, -40(%rbp)	 #, MEM[(struct unique_lock *)_167]._M_owns
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/unique_lock.h:69:       : _M_device(std::__addressof(__m)), _M_owns(false)
	movq	%rcx, -48(%rbp)	 # _374, MEM[(struct unique_lock *)_167]._M_device
 # C:/msys64/ucrt64/include/c++/13.1.0/x86_64-w64-mingw32/bits/gthr-default.h:749:     return __gthrw_(pthread_mutex_lock) (__mutex);
	call	pthread_mutex_lock	 #
.LEHE80:
	movl	%eax, %r12d	 # tmp833, i
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_mutex.h:116:       if (__e)
	testl	%eax, %eax	 # i
	jne	.L1422	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/unique_lock.h:142: 	    _M_owns = true;
	movb	$1, -40(%rbp)	 #, MEM[(struct unique_lock *)_167]._M_owns
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/atomic_futex.h:322: 	_M_condvar.wait(__lock);
	leaq	32(%rsi), %rdi	 #, tmp826
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/unique_lock.h:73:       }
	jmp	.L1309	 #
	.p2align 4,,10
	.p2align 3
.L1310:
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/atomic_futex.h:322: 	_M_condvar.wait(__lock);
	movq	%rbx, %rdx	 # tmp821,
	movq	%rdi, %rcx	 # tmp826,
.LEHB81:
	call	_ZNSt18condition_variable4waitERSt11unique_lockISt5mutexE	 #
.LEHE81:
.L1309:
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/atomic_futex.h:321:       while (_M_data != __val)
	cmpl	$1, 16(%rsi)	 #, MEM[(struct __atomic_futex_unsigned *)_259 + 16B]._M_data
	jne	.L1310	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/unique_lock.h:105: 	if (_M_owns)
	cmpb	$0, -40(%rbp)	 #, MEM[(struct unique_lock *)_167]._M_owns
	jne	.L1423	 #,
.L1311:
 # .\src\main.cpp:1134:     for (int i = 0; i < NUM_THREADS; i++) {
	movl	_ZL11num_threads(%rip), %eax	 # num_threads, num_threads.133_20
 # .\src\main.cpp:1134:     for (int i = 0; i < NUM_THREADS; i++) {
	addl	$1, %r13d	 #, i
 # .\src\main.cpp:1134:     for (int i = 0; i < NUM_THREADS; i++) {
	addq	$16, %r15	 #, ivtmp.3023
	cmpl	%eax, %r13d	 # num_threads.133_20, i
	jb	.L1312	 #,
 # .\src\main.cpp:1138:     for (int i = 0; i < NUM_THREADS; i++) {
	movl	$0, -76(%rbp)	 #, MEM[(int *)_637]
 # .\src\main.cpp:1138:     for (int i = 0; i < NUM_THREADS; i++) {
	testl	%eax, %eax	 # num_threads.133_20
	je	.L1322	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:337: 	  if (__atomic_load_n(__both_counts, __ATOMIC_ACQUIRE) == __unique_ref)
	movabsq	$4294967297, %rdi	 #, tmp825
 # .\src\main.cpp:1138:     for (int i = 0; i < NUM_THREADS; i++) {
	xorl	%esi, %esi	 # _24
	jmp	.L1320	 #
	.p2align 4,,10
	.p2align 3
.L1318:
 # C:/msys64/ucrt64/include/c++/13.1.0/ext/atomicity.h:66:   { return __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
	lock subl	$1, (%rax)	 #,,* __both_counts
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:350: 	  if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
	je	.L1319	 #,
.L1417:
 # .\src\main.cpp:1138:     for (int i = 0; i < NUM_THREADS; i++) {
	movl	-76(%rbp), %esi	 # MEM[(int *)_637], _24
.L1317:
 # .\src\main.cpp:1138:     for (int i = 0; i < NUM_THREADS; i++) {
	movl	_ZL11num_threads(%rip), %eax	 # num_threads, num_threads.138_27
 # .\src\main.cpp:1138:     for (int i = 0; i < NUM_THREADS; i++) {
	addl	$1, %esi	 #, _24
	movl	%esi, -76(%rbp)	 # _24, MEM[(int *)_637]
 # .\src\main.cpp:1138:     for (int i = 0; i < NUM_THREADS; i++) {
	cmpl	%eax, %esi	 # num_threads.138_27, _24
	jnb	.L1424	 #,
.L1320:
 # .\src\main.cpp:1139:         pool[i] = std::async(std::launch::async, jump_runner, i, true, &boid_map, &rules, &boid_list);
	movq	160(%rbp), %rax	 # boid_list, tmp904
 # .\src\main.cpp:1139:         pool[i] = std::async(std::launch::async, jump_runner, i, true, &boid_map, &rules, &boid_list);
	movq	%r14, -64(%rbp)	 # rules, MEM[(const struct Rules * *)_785]
 # .\src\main.cpp:1139:         pool[i] = std::async(std::launch::async, jump_runner, i, true, &boid_map, &rules, &boid_list);
	movq	%rbx, %rcx	 # tmp821,
 # .\src\main.cpp:1139:         pool[i] = std::async(std::launch::async, jump_runner, i, true, &boid_map, &rules, &boid_list);
	movb	$1, -77(%rbp)	 #, MEM[(bool *)_700]
 # .\src\main.cpp:1139:         pool[i] = std::async(std::launch::async, jump_runner, i, true, &boid_map, &rules, &boid_list);
	movq	%rax, -56(%rbp)	 # tmp904, MEM[(const struct BoidList * *)_647]
 # .\src\main.cpp:1139:         pool[i] = std::async(std::launch::async, jump_runner, i, true, &boid_map, &rules, &boid_list);
	movq	144(%rbp), %rax	 # boid_map, tmp905
	movq	%rax, -72(%rbp)	 # tmp905, MEM[(const struct BoidMap * *)_801]
 # .\src\main.cpp:1139:         pool[i] = std::async(std::launch::async, jump_runner, i, true, &boid_map, &rules, &boid_list);
	movq	-120(%rbp), %rax	 # %sfp, tmp820
	movq	%rax, 40(%rsp)	 # tmp820,
	movq	-112(%rbp), %rax	 # %sfp, tmp819
	movq	%rax, 32(%rsp)	 # tmp819,
	movq	-104(%rbp), %r9	 # %sfp,
	movq	-88(%rbp), %r8	 # %sfp,
	movq	-96(%rbp), %rdx	 # %sfp,
.LEHB82:
	call	_ZSt5asyncIRFvibPK7BoidMapPK5RulesPK8BoidListEJRibS2_S5_S8_EESt6futureINSt15__invoke_resultINSt5decayIT_E4typeEJDpNSE_IT0_E4typeEEE4typeEESt6launchOSF_DpOSI_.constprop.0	 #
 # .\src\main.cpp:1139:         pool[i] = std::async(std::launch::async, jump_runner, i, true, &boid_map, &rules, &boid_list);
	movslq	%esi, %rax	 # _24, _24
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/move.h:206:       __b = _GLIBCXX_MOVE(__tmp);
	vmovdqu	-48(%rbp), %xmm5	 # MEM <vector(2) long long unsigned int> [(void *)_167], tmp908
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/stl_vector.h:1124: 	return *(this->_M_impl._M_start + __n);
	salq	$4, %rax	 #, tmp535
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/stl_vector.h:1124: 	return *(this->_M_impl._M_start + __n);
	addq	-32(%rbp), %rax	 # pool.D.168544._M_impl.D.167883._M_start, _134
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:1099: 	_Sp_counted_base<_Lp>* __tmp = __r._M_pi;
	movq	8(%rax), %r13	 # MEM[(struct __shared_count &)_134 + 8]._M_pi, __tmp
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/move.h:206:       __b = _GLIBCXX_MOVE(__tmp);
	vmovdqu	%xmm5, (%rax)	 # tmp908, MEM <vector(2) long long unsigned int> [(void *)_134]
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:1070: 	if (_M_pi != nullptr)
	testq	%r13, %r13	 # __tmp
	je	.L1317	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:337: 	  if (__atomic_load_n(__both_counts, __ATOMIC_ACQUIRE) == __unique_ref)
	movq	8(%r13), %rdx	 #, _275
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:334: 	  auto __both_counts = reinterpret_cast<long long*>(&_M_use_count);
	leaq	8(%r13), %rax	 #, __both_counts
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:337: 	  if (__atomic_load_n(__both_counts, __ATOMIC_ACQUIRE) == __unique_ref)
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:337: 	  if (__atomic_load_n(__both_counts, __ATOMIC_ACQUIRE) == __unique_ref)
	cmpq	%rdi, %rdx	 # tmp825, _275
	jne	.L1318	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:346: 	      _M_dispose();
	movq	0(%r13), %rax	 # __tmp_131->_vptr._Sp_counted_base, __tmp_131->_vptr._Sp_counted_base
	movq	%r13, %rcx	 # __tmp,
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:343: 	      _M_weak_count = _M_use_count = 0;
	movq	$0, 8(%r13)	 #, MEM <vector(2) int> [(int *)__tmp_131 + 8B]
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:346: 	      _M_dispose();
	call	*16(%rax)	 # MEM[(int (*) () *)_277 + 16B]
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:347: 	      _M_destroy();
	movq	0(%r13), %rax	 # __tmp_131->_vptr._Sp_counted_base, __tmp_131->_vptr._Sp_counted_base
	movq	%r13, %rcx	 # __tmp,
	call	*24(%rax)	 # MEM[(int (*) () *)_279 + 24B]
 # .\src\main.cpp:1138:     for (int i = 0; i < NUM_THREADS; i++) {
	movl	-76(%rbp), %esi	 # MEM[(int *)_637], _24
 # .\src\main.cpp:1138:     for (int i = 0; i < NUM_THREADS; i++) {
	movl	_ZL11num_threads(%rip), %eax	 # num_threads, num_threads.138_27
 # .\src\main.cpp:1138:     for (int i = 0; i < NUM_THREADS; i++) {
	addl	$1, %esi	 #, _24
	movl	%esi, -76(%rbp)	 # _24, MEM[(int *)_637]
 # .\src\main.cpp:1138:     for (int i = 0; i < NUM_THREADS; i++) {
	cmpl	%eax, %esi	 # num_threads.138_27, _24
	jb	.L1320	 #,
	.p2align 4,,10
	.p2align 3
.L1424:
 # .\src\main.cpp:1142:     for (int i = 0; i < NUM_THREADS; i++) {
	testl	%eax, %eax	 # num_threads.138_27
	je	.L1322	 #,
	movq	-32(%rbp), %r13	 # pool.D.168544._M_impl.D.167883._M_start, ivtmp.3018
	.p2align 4,,10
	.p2align 3
.L1328:
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:1670:       { return _M_ptr != nullptr; }
	movq	0(%r13), %rsi	 # MEM[(struct element_type * *)_903], _281
 # C:/msys64/ucrt64/include/c++/13.1.0/future:580:           if (!static_cast<bool>(__p))
	testq	%rsi, %rsi	 # _281
	je	.L1425	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/future:350: 	_M_complete_async();
	movq	(%rsi), %rax	 # MEM[(struct _State_baseV2 *)_281]._vptr._State_baseV2, MEM[(struct _State_baseV2 *)_281]._vptr._State_baseV2
	movq	%rsi, %rcx	 # _281,
	call	*16(%rax)	 # MEM[(int (*) () *)_282 + 16B]
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/atomic_futex.h:320:       unique_lock<mutex> __lock(_M_mutex);
	leaq	24(%rsi), %rcx	 #, _381
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/unique_lock.h:69:       : _M_device(std::__addressof(__m)), _M_owns(false)
	movb	$0, -40(%rbp)	 #, MEM[(struct unique_lock *)_167]._M_owns
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/unique_lock.h:69:       : _M_device(std::__addressof(__m)), _M_owns(false)
	movq	%rcx, -48(%rbp)	 # _381, MEM[(struct unique_lock *)_167]._M_device
 # C:/msys64/ucrt64/include/c++/13.1.0/x86_64-w64-mingw32/bits/gthr-default.h:749:     return __gthrw_(pthread_mutex_lock) (__mutex);
	call	pthread_mutex_lock	 #
.LEHE82:
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_mutex.h:116:       if (__e)
	testl	%eax, %eax	 # _292
	jne	.L1426	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/unique_lock.h:142: 	    _M_owns = true;
	movb	$1, -40(%rbp)	 #, MEM[(struct unique_lock *)_167]._M_owns
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/atomic_futex.h:322: 	_M_condvar.wait(__lock);
	leaq	32(%rsi), %rdi	 #, tmp824
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/unique_lock.h:73:       }
	jmp	.L1325	 #
	.p2align 4,,10
	.p2align 3
.L1326:
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/atomic_futex.h:322: 	_M_condvar.wait(__lock);
	movq	%rbx, %rdx	 # tmp821,
	movq	%rdi, %rcx	 # tmp824,
.LEHB83:
	call	_ZNSt18condition_variable4waitERSt11unique_lockISt5mutexE	 #
.LEHE83:
.L1325:
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/atomic_futex.h:321:       while (_M_data != __val)
	cmpl	$1, 16(%rsi)	 #, MEM[(struct __atomic_futex_unsigned *)_281 + 16B]._M_data
	jne	.L1326	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/unique_lock.h:105: 	if (_M_owns)
	cmpb	$0, -40(%rbp)	 #, MEM[(struct unique_lock *)_167]._M_owns
	jne	.L1427	 #,
.L1327:
 # .\src\main.cpp:1142:     for (int i = 0; i < NUM_THREADS; i++) {
	addl	$1, %r12d	 #, i
 # .\src\main.cpp:1142:     for (int i = 0; i < NUM_THREADS; i++) {
	addq	$16, %r13	 #, ivtmp.3018
	cmpl	_ZL11num_threads(%rip), %r12d	 # num_threads, i
	jb	.L1328	 #,
	jmp	.L1322	 #
.L1296:
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/stl_vector.h:100: 	: _M_start(), _M_finish(), _M_end_of_storage()
	movq	$0, -16(%rbp)	 #, MEM[(struct _Vector_impl_data *)&pool]._M_end_of_storage
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/stl_vector.h:100: 	: _M_start(), _M_finish(), _M_end_of_storage()
	vpxor	%xmm0, %xmm0, %xmm0	 # tmp815
	vmovdqu	%xmm0, -32(%rbp)	 # tmp815, MEM <vector(2) long long unsigned int> [(struct future * *)&pool]
	.p2align 4,,10
	.p2align 3
.L1322:
	vxorps	%xmm6, %xmm6, %xmm6	 # tmp841
 # .\src\main.cpp:1150:     auto t_mid = std::chrono::high_resolution_clock::now();
	call	_ZNSt6chrono3_V212system_clock3nowEv	 #
 # .\src\main.cpp:983:     const auto world_height = boid_map->m_cell_size * boid_map->m_ysize;
	movq	144(%rbp), %rdi	 # boid_map, tmp913
 # .\src\main.cpp:1150:     auto t_mid = std::chrono::high_resolution_clock::now();
	movq	%rax, -104(%rbp)	 # tmp837, %sfp
	movq	144(%rbp), %rax	 # boid_map, tmp909
 # .\src\main.cpp:983:     const auto world_height = boid_map->m_cell_size * boid_map->m_ysize;
	movl	(%rdi), %r11d	 # MEM[(int *)boid_map_62(D)], world_height
	movl	8(%rax), %r10d	 # MEM[(int *)boid_map_62(D) + 8B], _170
	movq	160(%rbp), %rax	 # boid_list, tmp910
	movq	(%rax), %r9	 # MEM[(struct BoidStore * *)boid_list_64(D)], _171
	movl	16(%rax), %ebx	 # MEM[(int *)boid_list_64(D) + 16B], _172
	imull	%r10d, %r11d	 # _170, world_height
 # .\src\main.cpp:984:     const auto world_width = boid_map->m_cell_size * boid_map->m_xsize;
	imull	4(%rdi), %r10d	 # MEM[(int *)boid_map_62(D) + 4B], world_width
 # .\src\main.cpp:977:     const auto xs = boid_list->m_boid_store->xs;
	movq	(%r9), %r8	 # _171->xs, xs
 # .\src\main.cpp:978:     const auto ys = boid_list->m_boid_store->ys;
	movq	8(%r9), %rdx	 # _171->ys, ys
	movl	%ebx, -88(%rbp)	 # _172, %sfp
 # .\src\main.cpp:979:     const auto vxs = boid_list->m_boid_store->vxs;
	movq	16(%r9), %rax	 # _171->vxs, vxs
 # .\src\main.cpp:980:     const auto vys = boid_list->m_boid_store->vys;
	movq	24(%r9), %rcx	 # _171->vys, vys
 # .\src\main.cpp:981:     const auto homes = boid_list->m_boid_store->homes;
	movq	40(%r9), %r9	 # _171->homes, homes
 # .\src\main.cpp:987:     for (Boid boid = 0; boid < boid_list->m_size; boid++) {     
	testl	%ebx, %ebx	 # _172
	jle	.L1336	 #,
 # .\src\main.cpp:991:         float home_loc_x = home_index_x * ((world_width - rules->edge_width * 2) /  16) + rules->edge_width;
	movl	24(%r14), %r15d	 # rules_63(D)->edge_width, _314
 # .\src\main.cpp:991:         float home_loc_x = home_index_x * ((world_width - rules->edge_width * 2) /  16) + rules->edge_width;
	leal	(%r15,%r15), %ebx	 #, _315
 # .\src\main.cpp:991:         float home_loc_x = home_index_x * ((world_width - rules->edge_width * 2) /  16) + rules->edge_width;
	subl	%ebx, %r10d	 # _315, tmp572
 # .\src\main.cpp:991:         float home_loc_x = home_index_x * ((world_width - rules->edge_width * 2) /  16) + rules->edge_width;
	leal	15(%r10), %esi	 #, tmp574
	cmovns	%r10d, %esi	 # tmp574,, tmp572, tmp573
 # .\src\main.cpp:992:         float home_loc_y = home_index_y * ((world_height - rules->edge_width * 2) /  9) + rules->edge_width;
	subl	%ebx, %r11d	 # _315, tmp576
	movl	-88(%rbp), %ebx	 # %sfp, _172
 # .\src\main.cpp:992:         float home_loc_y = home_index_y * ((world_height - rules->edge_width * 2) /  9) + rules->edge_width;
	movslq	%r11d, %r10	 # tmp576, tmp577
	sarl	$31, %r11d	 #, tmp581
	imulq	$954437177, %r10, %r10	 #, tmp577, tmp578
	movl	%ebx, -120(%rbp)	 # _172, %sfp
 # .\src\main.cpp:991:         float home_loc_x = home_index_x * ((world_width - rules->edge_width * 2) /  16) + rules->edge_width;
	sarl	$4, %esi	 #, tmp573
	subl	$1, %ebx	 #, _238
	movl	%esi, -96(%rbp)	 # tmp573, %sfp
	movl	%ebx, -152(%rbp)	 # _238, %sfp
 # .\src\main.cpp:992:         float home_loc_y = home_index_y * ((world_height - rules->edge_width * 2) /  9) + rules->edge_width;
	sarq	$33, %r10	 #, tmp580
	subl	%r11d, %r10d	 # tmp581, tmp580
	movl	%r10d, %r13d	 # tmp580, _322
	cmpl	$2, %ebx	 #, _238
	jbe	.L1428	 #,
	movslq	-88(%rbp), %rbx	 # %sfp, _172
	leaq	36(%r14), %r12	 #, _229
	leaq	40(%r14), %rdi	 #, _236
	leaq	31(%r8), %r11	 #, _184
	leaq	0(,%rbx,4), %r10	 #, _231
	movq	%rbx, -160(%rbp)	 # _172, %sfp
	leaq	31(%rdx), %rbx	 #, _42
	movq	%rbx, -112(%rbp)	 # _42, %sfp
	leaq	(%rdx,%r10), %rbx	 #, tmp583
	cmpq	%rbx, %r12	 # tmp583, _229
	setnb	%bl	 #, tmp585
	cmpq	%rdi, %rdx	 # _236, ys
	setnb	%sil	 #, tmp587
	orl	%esi, %ebx	 # tmp587, tmp588
	leaq	(%r8,%r10), %rsi	 #, tmp589
	cmpq	%rsi, %r12	 # tmp589, _229
	setnb	%sil	 #, tmp591
	cmpq	%rdi, %r8	 # _236, xs
	setnb	-145(%rbp)	 #, %sfp
	orb	-145(%rbp), %sil	 # %sfp, tmp594
	andl	%ebx, %esi	 # tmp588, tmp595
	leaq	(%rax,%r10), %rbx	 #, tmp596
	cmpq	%rbx, %r12	 # tmp596, _229
	setnb	%bl	 #, tmp598
	cmpq	%rdi, %rax	 # _236, vxs
	setnb	-145(%rbp)	 #, %sfp
	addq	%rcx, %r10	 # vys, tmp603
	orb	-145(%rbp), %bl	 # %sfp, tmp601
	andl	%esi, %ebx	 # tmp595, tmp602
	cmpq	%r10, %r12	 # tmp603, _229
	setnb	%r10b	 #, tmp605
	cmpq	%rdi, %rcx	 # _236, vys
	movq	%r11, %rdi	 # _184, tmp610
	setnb	%sil	 #, tmp607
	subq	%rdx, %rdi	 # ys, tmp610
	orl	%esi, %r10d	 # tmp607, tmp608
	andl	%ebx, %r10d	 # tmp602, tmp609
	cmpq	$62, %rdi	 #, tmp610
	movq	%r11, %rdi	 # _184, tmp614
	seta	%bl	 #, tmp612
	subq	%rax, %rdi	 # vxs, tmp614
	andl	%ebx, %r10d	 # tmp612, tmp613
	cmpq	$62, %rdi	 #, tmp614
	seta	%bl	 #, tmp616
	subq	%rcx, %r11	 # vys, tmp618
	andl	%r10d, %ebx	 # tmp613, tmp617
	cmpq	$62, %r11	 #, tmp618
	seta	%r11b	 #, tmp620
	andl	%ebx, %r11d	 # tmp617, tmp621
	movq	-112(%rbp), %rbx	 # %sfp, _42
	movq	%rbx, %r10	 # _42, tmp622
	subq	%rax, %r10	 # vxs, tmp622
	cmpq	$62, %r10	 #, tmp622
	seta	%r10b	 #, tmp624
	subq	%rcx, %rbx	 # vys, _42
	andl	%r11d, %r10d	 # tmp621, tmp625
	cmpq	$62, %rbx	 #, tmp626
	seta	%r11b	 #, tmp628
	testb	%r11b, %r10b	 # tmp628, tmp625
	je	.L1332	 #,
	leaq	31(%rax), %r10	 #, tmp630
	subq	%rcx, %r10	 # vys, tmp631
	cmpq	$62, %r10	 #, tmp631
	jbe	.L1332	 #,
	cmpl	$6, -152(%rbp)	 #, %sfp
	jbe	.L1356	 #,
	movl	-88(%rbp), %ebx	 # %sfp, bnd.2811
	movl	$15, %r11d	 #, tmp645
	vmovd	%r15d, %xmm4	 # _314, vect_cst__616
	xorl	%r10d, %r10d	 # ivtmp.3004
	vmovd	%r13d, %xmm7	 # _322, vect_cst__619
	vmovd	%r11d, %xmm2	 # tmp645, tmp644
	vpbroadcastd	%xmm4, %ymm4	 # vect_cst__616, vect_cst__616
	vpbroadcastd	-96(%rbp), %ymm8	 # %sfp, vect_cst__614
	shrl	$3, %ebx	 #,
	vbroadcastss	36(%r14), %ymm3	 # rules_63(D)->homing, vect_cst__636
	vpbroadcastd	%xmm7, %ymm7	 # vect_cst__619, vect_cst__619
	vpxor	%xmm5, %xmm5, %xmm5	 # tmp641
	salq	$5, %rbx	 #, _907
	vpbroadcastd	%xmm2, %ymm2	 # tmp644, tmp644
	.p2align 4,,10
	.p2align 3
.L1334:
	vpcmpgtd	(%r9,%r10), %ymm5, %ymm9	 # MEM <vector(8) int> [(int *)homes_301 + ivtmp.3004_910 * 1], tmp641, tmp642
	vpand	%ymm2, %ymm9, %ymm9	 # tmp644, tmp642, vect_patt_288.2817
 # .\src\main.cpp:992:         float home_loc_y = home_index_y * ((world_height - rules->edge_width * 2) /  9) + rules->edge_width;
	vpaddd	(%r9,%r10), %ymm9, %ymm0	 # MEM <vector(8) int> [(int *)homes_301 + ivtmp.3004_910 * 1], vect_patt_288.2817, vect_patt_471.2818
	vpsrad	$4, %ymm0, %ymm1	 #, vect_patt_471.2818, vect_patt_150.2819
 # .\src\main.cpp:991:         float home_loc_x = home_index_x * ((world_width - rules->edge_width * 2) /  16) + rules->edge_width;
	vpand	%ymm2, %ymm0, %ymm0	 # tmp644, vect_patt_471.2818, vect_patt_398.2824
	vpsubd	%ymm9, %ymm0, %ymm0	 # vect_patt_288.2817, vect_patt_398.2824, vect_patt_397.2825
 # .\src\main.cpp:992:         float home_loc_y = home_index_y * ((world_height - rules->edge_width * 2) /  9) + rules->edge_width;
	vpmulld	%ymm7, %ymm1, %ymm1	 # vect_cst__619, vect_patt_150.2819, vect__323.2829
 # .\src\main.cpp:991:         float home_loc_x = home_index_x * ((world_width - rules->edge_width * 2) /  16) + rules->edge_width;
	vpmulld	%ymm8, %ymm0, %ymm0	 # vect_cst__614, vect_patt_397.2825, vect__318.2826
 # .\src\main.cpp:992:         float home_loc_y = home_index_y * ((world_height - rules->edge_width * 2) /  9) + rules->edge_width;
	vpaddd	%ymm4, %ymm1, %ymm1	 # vect_cst__616, vect__323.2829, vect__324.2830
 # .\src\main.cpp:991:         float home_loc_x = home_index_x * ((world_width - rules->edge_width * 2) /  16) + rules->edge_width;
	vpaddd	%ymm4, %ymm0, %ymm0	 # vect_cst__616, vect__318.2826, vect__319.2827
 # .\src\main.cpp:992:         float home_loc_y = home_index_y * ((world_height - rules->edge_width * 2) /  9) + rules->edge_width;
	vcvtdq2ps	%ymm1, %ymm1	 # vect__324.2830, vect_home_loc_y_325.2831
 # .\src\main.cpp:995:         float dy = home_loc_y - ys[boid];
	vsubps	(%rdx,%r10), %ymm1, %ymm1	 # MEM <vector(8) float> [(float *)ys_298 + ivtmp.3004_910 * 1], vect_home_loc_y_325.2831, vect_dy_331.2839
 # .\src\main.cpp:991:         float home_loc_x = home_index_x * ((world_width - rules->edge_width * 2) /  16) + rules->edge_width;
	vcvtdq2ps	%ymm0, %ymm0	 # vect__319.2827, vect_home_loc_x_320.2828
 # .\src\main.cpp:994:         float dx = home_loc_x - xs[boid];
	vsubps	(%r8,%r10), %ymm0, %ymm0	 # MEM <vector(8) float> [(float *)xs_297 + ivtmp.3004_910 * 1], vect_home_loc_x_320.2828, vect_dx_328.2835
 # .\src\main.cpp:997:         vxs[boid] += dx * rules->homing;
	vfmadd213ps	(%rax,%r10), %ymm3, %ymm0	 # MEM <vector(8) float> [(float *)vxs_299 + ivtmp.3004_910 * 1], vect_cst__636, vect__336.2844
	vmovups	%ymm0, (%rax,%r10)	 # vect__336.2844, MEM <vector(8) float> [(float *)vxs_299 + ivtmp.3004_910 * 1]
 # .\src\main.cpp:998:         vys[boid] += dy * rules->homing;
	vfmadd213ps	(%rcx,%r10), %ymm3, %ymm1	 # MEM <vector(8) float> [(float *)vys_300 + ivtmp.3004_910 * 1], vect_cst__636, vect__341.2851
	vmovups	%ymm1, (%rcx,%r10)	 # vect__341.2851, MEM <vector(8) float> [(float *)vys_300 + ivtmp.3004_910 * 1]
 # .\src\main.cpp:1000:         xs[boid] += vxs[boid];
	vmovups	(%r8,%r10), %ymm1	 # MEM <vector(8) float> [(float *)xs_297 + ivtmp.3004_910 * 1], tmp941
	vaddps	(%rax,%r10), %ymm1, %ymm0	 # MEM <vector(8) float> [(float *)vxs_299 + ivtmp.3004_910 * 1], tmp941, vect__344.2860
	vmovups	%ymm0, (%r8,%r10)	 # vect__344.2860, MEM <vector(8) float> [(float *)xs_297 + ivtmp.3004_910 * 1]
 # .\src\main.cpp:1001:         ys[boid] += vys[boid];        
	vmovups	(%rdx,%r10), %ymm1	 # MEM <vector(8) float> [(float *)ys_298 + ivtmp.3004_910 * 1], tmp942
	vaddps	(%rcx,%r10), %ymm1, %ymm0	 # MEM <vector(8) float> [(float *)vys_300 + ivtmp.3004_910 * 1], tmp942, vect__347.2869
	vmovups	%ymm0, (%rdx,%r10)	 # vect__347.2869, MEM <vector(8) float> [(float *)ys_298 + ivtmp.3004_910 * 1]
	addq	$32, %r10	 #, ivtmp.3004
	cmpq	%r10, %rbx	 # ivtmp.3004, _907
	jne	.L1334	 #,
	movl	-88(%rbp), %ebx	 # %sfp, _172
	movl	%ebx, %r12d	 # _172, tmp.2875
	andl	$-8, %r12d	 #, tmp.2875
	movl	%r12d, %r11d	 # tmp.2875,
	cmpl	%r12d, %ebx	 # tmp.2875, _172
	je	.L1413	 #,
	subl	%r12d, %ebx	 # tmp.2875, niters.2872
	leal	-1(%rbx), %r10d	 #, tmp674
	movl	%ebx, -120(%rbp)	 # niters.2872, %sfp
	cmpl	$2, %r10d	 #, tmp674
	jbe	.L1429	 #,
	vzeroupper
.L1333:
 # .\src\main.cpp:988:         int home_index_y = homes[boid] / 16;
	vmovdqu	(%r9,%r11,4), %xmm0	 # MEM <vector(4) int> [(int *)vectp_homes.2877_729], MEM <vector(4) int> [(int *)vectp_homes.2877_729]
	vpxor	%xmm3, %xmm3, %xmm3	 # tmp681
 # .\src\main.cpp:992:         float home_loc_y = home_index_y * ((world_height - rules->edge_width * 2) /  9) + rules->edge_width;
	vmovd	%r13d, %xmm4	 # _322, _322
 # .\src\main.cpp:992:         float home_loc_y = home_index_y * ((world_height - rules->edge_width * 2) /  9) + rules->edge_width;
	vmovd	%r15d, %xmm7	 # _314, _314
	leaq	0(,%r11,4), %r10	 #, _731
	movl	$15, %r11d	 #, tmp685
 # .\src\main.cpp:992:         float home_loc_y = home_index_y * ((world_height - rules->edge_width * 2) /  9) + rules->edge_width;
	vpshufd	$0, %xmm4, %xmm4	 # _322, tmp678
	vbroadcastss	36(%r14), %xmm2	 # rules_63(D)->homing, tmp679
	vpcmpgtd	%xmm0, %xmm3, %xmm3	 # MEM <vector(4) int> [(int *)vectp_homes.2877_729], tmp681, tmp682
	vmovd	%r11d, %xmm5	 # tmp685, tmp685
	leaq	(%r8,%r10), %rsi	 #, vectp_xs.2895
	vpshufd	$0, %xmm5, %xmm5	 # tmp685, tmp684
	leaq	(%rax,%r10), %rdi	 #, vectp_vxs.2903
	leaq	(%rdx,%r10), %rbx	 #, vectp_ys.2899
	addq	%rcx, %r10	 # vys, vectp_vys.2910
	vpand	%xmm5, %xmm3, %xmm3	 # tmp684, tmp682, vect_patt_358.2879
	vpaddd	%xmm3, %xmm0, %xmm0	 # vect_patt_358.2879, MEM <vector(4) int> [(int *)vectp_homes.2877_729], vect_patt_307.2880
	vpsrad	$4, %xmm0, %xmm1	 #, vect_patt_307.2880, vect_patt_302.2881
 # .\src\main.cpp:991:         float home_loc_x = home_index_x * ((world_width - rules->edge_width * 2) /  16) + rules->edge_width;
	vpand	%xmm5, %xmm0, %xmm0	 # tmp684, vect_patt_307.2880, vect_patt_271.2886
	vpsubd	%xmm3, %xmm0, %xmm0	 # vect_patt_358.2879, vect_patt_271.2886, vect_patt_262.2887
	vmovd	-96(%rbp), %xmm3	 # %sfp, tmp575
 # .\src\main.cpp:992:         float home_loc_y = home_index_y * ((world_height - rules->edge_width * 2) /  9) + rules->edge_width;
	vpmulld	%xmm4, %xmm1, %xmm1	 # tmp678, vect_patt_302.2881, vect__552.2891
 # .\src\main.cpp:992:         float home_loc_y = home_index_y * ((world_height - rules->edge_width * 2) /  9) + rules->edge_width;
	vpshufd	$0, %xmm7, %xmm4	 # _314, tmp677
 # .\src\main.cpp:991:         float home_loc_x = home_index_x * ((world_width - rules->edge_width * 2) /  16) + rules->edge_width;
	vpshufd	$0, %xmm3, %xmm3	 # tmp575, tmp676
	vpmulld	%xmm3, %xmm0, %xmm0	 # tmp676, vect_patt_262.2887, vect__549.2888
 # .\src\main.cpp:992:         float home_loc_y = home_index_y * ((world_height - rules->edge_width * 2) /  9) + rules->edge_width;
	vpaddd	%xmm4, %xmm1, %xmm1	 # tmp677, vect__552.2891, vect__553.2892
 # .\src\main.cpp:992:         float home_loc_y = home_index_y * ((world_height - rules->edge_width * 2) /  9) + rules->edge_width;
	vcvtdq2ps	%xmm1, %xmm1	 # vect__553.2892, vect_home_loc_y_554.2893
 # .\src\main.cpp:995:         float dy = home_loc_y - ys[boid];
	vsubps	(%rbx), %xmm1, %xmm1	 # MEM <vector(4) float> [(float *)vectp_ys.2899_770], vect_home_loc_y_554.2893, vect_dy_560.2901
 # .\src\main.cpp:991:         float home_loc_x = home_index_x * ((world_width - rules->edge_width * 2) /  16) + rules->edge_width;
	vpaddd	%xmm4, %xmm0, %xmm0	 # tmp677, vect__549.2888, vect__550.2889
 # .\src\main.cpp:991:         float home_loc_x = home_index_x * ((world_width - rules->edge_width * 2) /  16) + rules->edge_width;
	vcvtdq2ps	%xmm0, %xmm0	 # vect__550.2889, vect_home_loc_x_551.2890
 # .\src\main.cpp:994:         float dx = home_loc_x - xs[boid];
	vsubps	(%rsi), %xmm0, %xmm0	 # MEM <vector(4) float> [(float *)vectp_xs.2895_763], vect_home_loc_x_551.2890, vect_dx_557.2897
 # .\src\main.cpp:997:         vxs[boid] += dx * rules->homing;
	vfmadd213ps	(%rdi), %xmm2, %xmm0	 # MEM <vector(4) float> [(float *)vectp_vxs.2903_777], tmp679, vect__565.2906
	vmovups	%xmm0, (%rdi)	 # vect__565.2906, MEM <vector(4) float> [(float *)vectp_vxs.2903_777]
 # .\src\main.cpp:998:         vys[boid] += dy * rules->homing;
	vfmadd213ps	(%r10), %xmm2, %xmm1	 # MEM <vector(4) float> [(float *)vectp_vys.2910_793], tmp679, vect_dy_560.2901
	vmovups	%xmm1, (%r10)	 # vect__571.2913, MEM <vector(4) float> [(float *)vectp_vys.2910_793]
 # .\src\main.cpp:1000:         xs[boid] += vxs[boid];
	vmovups	(%rdi), %xmm0	 # MEM <vector(4) float> [(float *)vectp_vxs.2903_777], vect__574.2921
 # .\src\main.cpp:1000:         xs[boid] += vxs[boid];
	vaddps	(%rsi), %xmm0, %xmm0	 # MEM <vector(4) float> [(float *)vectp_xs.2895_763], vect__574.2921, vect__575.2922
	vmovups	%xmm0, (%rsi)	 # vect__575.2922, MEM <vector(4) float> [(float *)vectp_xs.2895_763]
 # .\src\main.cpp:1001:         ys[boid] += vys[boid];        
	vmovups	(%r10), %xmm0	 # MEM <vector(4) float> [(float *)vectp_vys.2910_793], vect__578.2930
 # .\src\main.cpp:1001:         ys[boid] += vys[boid];        
	vaddps	(%rbx), %xmm0, %xmm0	 # MEM <vector(4) float> [(float *)vectp_ys.2899_770], vect__578.2930, vect__579.2931
	vmovups	%xmm0, (%rbx)	 # vect__579.2931, MEM <vector(4) float> [(float *)vectp_ys.2899_770]
	movl	-120(%rbp), %ebx	 # %sfp, niters.2872
	movl	%ebx, %r10d	 # niters.2872, niters_vector_mult_vf.2874
	andl	$-4, %r10d	 #, niters_vector_mult_vf.2874
	addl	%r10d, %r12d	 # niters_vector_mult_vf.2874, tmp.2875
	andl	$3, %ebx	 #, niters.2872
	je	.L1336	 #,
.L1338:
 # .\src\main.cpp:988:         int home_index_y = homes[boid] / 16;
	movslq	%r12d, %r10	 # tmp.2875, tmp.2875
 # .\src\main.cpp:988:         int home_index_y = homes[boid] / 16;
	leaq	0(,%r10,4), %r11	 #, _205
	movl	(%r9,%r10,4), %r10d	 # *_179, _308
 # .\src\main.cpp:994:         float dx = home_loc_x - xs[boid];
	leaq	(%r8,%r11), %rsi	 #, _323
 # .\src\main.cpp:995:         float dy = home_loc_y - ys[boid];
	leaq	(%rdx,%r11), %rdi	 #, _326
 # .\src\main.cpp:988:         int home_index_y = homes[boid] / 16;
	testl	%r10d, %r10d	 # _308
	leal	15(%r10), %ebx	 #, tmp719
	cmovns	%r10d, %ebx	 # tmp719,, _308, _308
	sarl	$4, %ebx	 #, home_index_y
 # .\src\main.cpp:992:         float home_loc_y = home_index_y * ((world_height - rules->edge_width * 2) /  9) + rules->edge_width;
	imull	%r13d, %ebx	 # _322, tmp721
 # .\src\main.cpp:992:         float home_loc_y = home_index_y * ((world_height - rules->edge_width * 2) /  9) + rules->edge_width;
	addl	%r15d, %ebx	 # _314, tmp722
 # .\src\main.cpp:992:         float home_loc_y = home_index_y * ((world_height - rules->edge_width * 2) /  9) + rules->edge_width;
	vcvtsi2ssl	%ebx, %xmm6, %xmm0	 # tmp722, tmp841, tmp844
 # .\src\main.cpp:997:         vxs[boid] += dx * rules->homing;
	leaq	(%rax,%r11), %rbx	 #, _329
	movq	%rbx, -112(%rbp)	 # _329, %sfp
 # .\src\main.cpp:989:         int home_index_x = homes[boid] % 16;
	movl	%r10d, %ebx	 # _308, tmp725
 # .\src\main.cpp:995:         float dy = home_loc_y - ys[boid];
	vsubss	(%rdi), %xmm0, %xmm0	 # *_326, home_loc_y, dy
 # .\src\main.cpp:989:         int home_index_x = homes[boid] % 16;
	sarl	$31, %ebx	 #, tmp725
	shrl	$28, %ebx	 #, tmp726
	addl	%ebx, %r10d	 # tmp726, tmp727
	andl	$15, %r10d	 #, tmp728
	subl	%ebx, %r10d	 # tmp726, home_index_x
 # .\src\main.cpp:991:         float home_loc_x = home_index_x * ((world_width - rules->edge_width * 2) /  16) + rules->edge_width;
	movl	-96(%rbp), %ebx	 # %sfp, tmp575
	imull	%ebx, %r10d	 # tmp575, tmp730
 # .\src\main.cpp:997:         vxs[boid] += dx * rules->homing;
	movq	-112(%rbp), %rbx	 # %sfp, _329
	vmovss	(%rbx), %xmm2	 # *_329, tmp958
 # .\src\main.cpp:991:         float home_loc_x = home_index_x * ((world_width - rules->edge_width * 2) /  16) + rules->edge_width;
	addl	%r15d, %r10d	 # _314, tmp731
 # .\src\main.cpp:991:         float home_loc_x = home_index_x * ((world_width - rules->edge_width * 2) /  16) + rules->edge_width;
	vcvtsi2ssl	%r10d, %xmm6, %xmm1	 # tmp731, tmp841, tmp845
 # .\src\main.cpp:994:         float dx = home_loc_x - xs[boid];
	vsubss	(%rsi), %xmm1, %xmm1	 # *_323, home_loc_x, dx
 # .\src\main.cpp:997:         vxs[boid] += dx * rules->homing;
	vfmadd132ss	36(%r14), %xmm2, %xmm1	 # rules_63(D)->homing, tmp958, _333
 # .\src\main.cpp:998:         vys[boid] += dy * rules->homing;
	leaq	(%rcx,%r11), %r10	 #, _335
 # .\src\main.cpp:997:         vxs[boid] += dx * rules->homing;
	vmovss	%xmm1, (%rbx)	 # _333, *_329
 # .\src\main.cpp:998:         vys[boid] += dy * rules->homing;
	vmovss	(%r10), %xmm2	 # *_335, tmp960
	vfmadd132ss	36(%r14), %xmm2, %xmm0	 # rules_63(D)->homing, tmp960, _339
	vmovss	%xmm0, (%r10)	 # _339, *_335
 # .\src\main.cpp:1000:         xs[boid] += vxs[boid];
	vmovss	(%rsi), %xmm0	 # *_323, *_323
	vaddss	(%rbx), %xmm0, %xmm0	 # *_329, *_323, tmp734
	vmovss	%xmm0, (%rsi)	 # tmp734, *_323
 # .\src\main.cpp:1001:         ys[boid] += vys[boid];        
	vmovss	(%rdi), %xmm0	 # *_326, *_326
	vaddss	(%r10), %xmm0, %xmm0	 # *_335, *_326, tmp736
 # .\src\main.cpp:987:     for (Boid boid = 0; boid < boid_list->m_size; boid++) {     
	leal	1(%r12), %r10d	 #, boid
 # .\src\main.cpp:1001:         ys[boid] += vys[boid];        
	vmovss	%xmm0, (%rdi)	 # tmp736, *_326
 # .\src\main.cpp:987:     for (Boid boid = 0; boid < boid_list->m_size; boid++) {     
	cmpl	%r10d, -88(%rbp)	 # boid, %sfp
	jle	.L1336	 #,
 # .\src\main.cpp:988:         int home_index_y = homes[boid] / 16;
	movl	4(%r9,%r11), %r10d	 # *_547, _548
	leaq	4(%r11), %rbx	 #, _546
 # .\src\main.cpp:994:         float dx = home_loc_x - xs[boid];
	leaq	(%r8,%rbx), %rsi	 #, _557
 # .\src\main.cpp:995:         float dy = home_loc_y - ys[boid];
	leaq	(%rdx,%rbx), %rdi	 #, _560
	movq	%rbx, -120(%rbp)	 # _546, %sfp
 # .\src\main.cpp:988:         int home_index_y = homes[boid] / 16;
	testl	%r10d, %r10d	 # _548
	leal	15(%r10), %ebx	 #, tmp741
	cmovns	%r10d, %ebx	 # tmp741,, _548, _548
	sarl	$4, %ebx	 #, home_index_y
 # .\src\main.cpp:992:         float home_loc_y = home_index_y * ((world_height - rules->edge_width * 2) /  9) + rules->edge_width;
	imull	%r13d, %ebx	 # _322, tmp743
 # .\src\main.cpp:992:         float home_loc_y = home_index_y * ((world_height - rules->edge_width * 2) /  9) + rules->edge_width;
	addl	%r15d, %ebx	 # _314, tmp744
 # .\src\main.cpp:992:         float home_loc_y = home_index_y * ((world_height - rules->edge_width * 2) /  9) + rules->edge_width;
	vcvtsi2ssl	%ebx, %xmm6, %xmm0	 # tmp744, tmp841, tmp846
 # .\src\main.cpp:997:         vxs[boid] += dx * rules->homing;
	movq	-120(%rbp), %rbx	 # %sfp, _546
 # .\src\main.cpp:995:         float dy = home_loc_y - ys[boid];
	vsubss	(%rdi), %xmm0, %xmm0	 # *_560, home_loc_y, dy
 # .\src\main.cpp:997:         vxs[boid] += dx * rules->homing;
	addq	%rax, %rbx	 # vxs, _563
	movq	%rbx, -112(%rbp)	 # _563, %sfp
 # .\src\main.cpp:989:         int home_index_x = homes[boid] % 16;
	movl	%r10d, %ebx	 # _548, tmp747
	sarl	$31, %ebx	 #, tmp747
	shrl	$28, %ebx	 #, tmp748
	addl	%ebx, %r10d	 # tmp748, tmp749
	andl	$15, %r10d	 #, tmp750
	subl	%ebx, %r10d	 # tmp748, home_index_x
 # .\src\main.cpp:991:         float home_loc_x = home_index_x * ((world_width - rules->edge_width * 2) /  16) + rules->edge_width;
	movl	-96(%rbp), %ebx	 # %sfp, tmp575
	imull	%ebx, %r10d	 # tmp575, tmp752
 # .\src\main.cpp:998:         vys[boid] += dy * rules->homing;
	movq	-120(%rbp), %rbx	 # %sfp, _546
 # .\src\main.cpp:991:         float home_loc_x = home_index_x * ((world_width - rules->edge_width * 2) /  16) + rules->edge_width;
	addl	%r15d, %r10d	 # _314, tmp753
 # .\src\main.cpp:991:         float home_loc_x = home_index_x * ((world_width - rules->edge_width * 2) /  16) + rules->edge_width;
	vcvtsi2ssl	%r10d, %xmm6, %xmm1	 # tmp753, tmp841, tmp847
 # .\src\main.cpp:997:         vxs[boid] += dx * rules->homing;
	movq	-112(%rbp), %r10	 # %sfp, _563
 # .\src\main.cpp:994:         float dx = home_loc_x - xs[boid];
	vsubss	(%rsi), %xmm1, %xmm1	 # *_557, home_loc_x, dx
 # .\src\main.cpp:997:         vxs[boid] += dx * rules->homing;
	vmovss	(%r10), %xmm2	 # *_563, tmp971
	vfmadd132ss	36(%r14), %xmm2, %xmm1	 # rules_63(D)->homing, tmp971, _568
	vmovss	%xmm1, (%r10)	 # _568, *_563
 # .\src\main.cpp:998:         vys[boid] += dy * rules->homing;
	leaq	(%rcx,%rbx), %r10	 #, _570
 # .\src\main.cpp:1000:         xs[boid] += vxs[boid];
	movq	-112(%rbp), %rbx	 # %sfp, _563
 # .\src\main.cpp:998:         vys[boid] += dy * rules->homing;
	vmovss	(%r10), %xmm2	 # *_570, tmp974
	vfmadd132ss	36(%r14), %xmm2, %xmm0	 # rules_63(D)->homing, tmp974, _575
	vmovss	%xmm0, (%r10)	 # _575, *_570
 # .\src\main.cpp:1000:         xs[boid] += vxs[boid];
	vmovss	(%rsi), %xmm0	 # *_557, *_557
	vaddss	(%rbx), %xmm0, %xmm0	 # *_563, *_557, tmp756
	vmovss	%xmm0, (%rsi)	 # tmp756, *_557
 # .\src\main.cpp:1001:         ys[boid] += vys[boid];        
	vmovss	(%rdi), %xmm0	 # *_560, *_560
	vaddss	(%r10), %xmm0, %xmm0	 # *_570, *_560, tmp758
 # .\src\main.cpp:987:     for (Boid boid = 0; boid < boid_list->m_size; boid++) {     
	leal	2(%r12), %r10d	 #, boid
 # .\src\main.cpp:1001:         ys[boid] += vys[boid];        
	vmovss	%xmm0, (%rdi)	 # tmp758, *_560
 # .\src\main.cpp:987:     for (Boid boid = 0; boid < boid_list->m_size; boid++) {     
	cmpl	%r10d, -88(%rbp)	 # boid, %sfp
	jle	.L1336	 #,
 # .\src\main.cpp:988:         int home_index_y = homes[boid] / 16;
	movl	8(%r9,%r11), %r9d	 # *_681, _682
	leaq	8(%r11), %r10	 #, _680
 # .\src\main.cpp:991:         float home_loc_x = home_index_x * ((world_width - rules->edge_width * 2) /  16) + rules->edge_width;
	movl	-96(%rbp), %ebx	 # %sfp, tmp575
 # .\src\main.cpp:994:         float dx = home_loc_x - xs[boid];
	addq	%r10, %r8	 # _680, _691
 # .\src\main.cpp:995:         float dy = home_loc_y - ys[boid];
	addq	%r10, %rdx	 # _680, _694
 # .\src\main.cpp:988:         int home_index_y = homes[boid] / 16;
	leal	15(%r9), %r11d	 #, tmp763
	testl	%r9d, %r9d	 # _682
	cmovns	%r9d, %r11d	 # tmp763,, _682, _682
 # .\src\main.cpp:997:         vxs[boid] += dx * rules->homing;
	addq	%r10, %rax	 # _680, _697
 # .\src\main.cpp:998:         vys[boid] += dy * rules->homing;
	addq	%rcx, %r10	 # vys, _703
 # .\src\main.cpp:997:         vxs[boid] += dx * rules->homing;
	vmovss	(%rax), %xmm2	 # *_697, tmp979
 # .\src\main.cpp:988:         int home_index_y = homes[boid] / 16;
	sarl	$4, %r11d	 #, home_index_y
 # .\src\main.cpp:992:         float home_loc_y = home_index_y * ((world_height - rules->edge_width * 2) /  9) + rules->edge_width;
	imull	%r13d, %r11d	 # _322, tmp765
 # .\src\main.cpp:992:         float home_loc_y = home_index_y * ((world_height - rules->edge_width * 2) /  9) + rules->edge_width;
	addl	%r15d, %r11d	 # _314, tmp766
 # .\src\main.cpp:992:         float home_loc_y = home_index_y * ((world_height - rules->edge_width * 2) /  9) + rules->edge_width;
	vcvtsi2ssl	%r11d, %xmm6, %xmm0	 # tmp766, tmp841, tmp848
 # .\src\main.cpp:989:         int home_index_x = homes[boid] % 16;
	movl	%r9d, %r11d	 # _682, tmp769
 # .\src\main.cpp:995:         float dy = home_loc_y - ys[boid];
	vsubss	(%rdx), %xmm0, %xmm0	 # *_694, home_loc_y, dy
 # .\src\main.cpp:989:         int home_index_x = homes[boid] % 16;
	sarl	$31, %r11d	 #, tmp769
	shrl	$28, %r11d	 #, tmp770
	addl	%r11d, %r9d	 # tmp770, tmp771
	andl	$15, %r9d	 #, tmp772
	subl	%r11d, %r9d	 # tmp770, home_index_x
 # .\src\main.cpp:991:         float home_loc_x = home_index_x * ((world_width - rules->edge_width * 2) /  16) + rules->edge_width;
	imull	%ebx, %r9d	 # tmp575, tmp774
 # .\src\main.cpp:991:         float home_loc_x = home_index_x * ((world_width - rules->edge_width * 2) /  16) + rules->edge_width;
	addl	%r15d, %r9d	 # _314, tmp775
 # .\src\main.cpp:991:         float home_loc_x = home_index_x * ((world_width - rules->edge_width * 2) /  16) + rules->edge_width;
	vcvtsi2ssl	%r9d, %xmm6, %xmm1	 # tmp775, tmp841, tmp849
 # .\src\main.cpp:994:         float dx = home_loc_x - xs[boid];
	vsubss	(%r8), %xmm1, %xmm1	 # *_691, home_loc_x, dx
 # .\src\main.cpp:997:         vxs[boid] += dx * rules->homing;
	vfmadd132ss	36(%r14), %xmm2, %xmm1	 # rules_63(D)->homing, tmp979, _701
	vmovss	%xmm1, (%rax)	 # _701, *_697
 # .\src\main.cpp:998:         vys[boid] += dy * rules->homing;
	vmovss	(%r10), %xmm2	 # *_703, tmp980
	vfmadd132ss	36(%r14), %xmm2, %xmm0	 # rules_63(D)->homing, tmp980, _707
	vmovss	%xmm0, (%r10)	 # _707, *_703
 # .\src\main.cpp:1000:         xs[boid] += vxs[boid];
	vmovss	(%r8), %xmm0	 # *_691, *_691
	vaddss	(%rax), %xmm0, %xmm0	 # *_697, *_691, tmp778
	vmovss	%xmm0, (%r8)	 # tmp778, *_691
 # .\src\main.cpp:1001:         ys[boid] += vys[boid];        
	vmovss	(%rdx), %xmm0	 # *_694, *_694
	vaddss	(%r10), %xmm0, %xmm0	 # *_703, *_694, tmp780
	vmovss	%xmm0, (%rdx)	 # tmp780, *_694
	.p2align 4,,10
	.p2align 3
.L1336:
 # .\src\main.cpp:1154:     auto t_end = std::chrono::high_resolution_clock::now();
	call	_ZNSt6chrono3_V212system_clock3nowEv	 #
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/chrono.h:727: 	return __cd(__cd(__lhs).count() - __cd(__rhs).count());
	movq	-104(%rbp), %rdx	 # %sfp, t_mid$__d$__r
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/chrono.h:212: 	      static_cast<_CR>(__d.count()) / static_cast<_CR>(_CF::den)));
	vmovsd	.LC72(%rip), %xmm2	 #, tmp556
 # .\src\main.cpp:1156:     DEBUG("cells :%0.12f, non-inter: %0.12f", std::chrono::duration<double, std::milli>(t_mid-t_start).count(), std::chrono::duration<double, std::milli>(t_end-t_mid).count());
	leaq	.LC75(%rip), %rcx	 #, tmp571
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/chrono.h:727: 	return __cd(__cd(__lhs).count() - __cd(__rhs).count());
	subq	%rdx, %rax	 # t_mid$__d$__r, tmp553
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/chrono.h:212: 	      static_cast<_CR>(__d.count()) / static_cast<_CR>(_CF::den)));
	vcvtsi2sdq	%rax, %xmm6, %xmm0	 # tmp553, tmp841, tmp842
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/chrono.h:727: 	return __cd(__cd(__lhs).count() - __cd(__rhs).count());
	movq	%rdx, %rax	 # t_mid$__d$__r, t_mid$__d$__r
	movq	-144(%rbp), %rdx	 # %sfp, t_start
	subq	%rdx, %rax	 # t_start, t_mid$__d$__r
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/chrono.h:212: 	      static_cast<_CR>(__d.count()) / static_cast<_CR>(_CF::den)));
	vcvtsi2sdq	%rax, %xmm6, %xmm1	 # tmp562, tmp841, tmp843
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/chrono.h:212: 	      static_cast<_CR>(__d.count()) / static_cast<_CR>(_CF::den)));
	vdivsd	%xmm2, %xmm0, %xmm4	 # tmp556, tmp554, tmp555
	vdivsd	%xmm2, %xmm1, %xmm1	 # tmp556, tmp563, tmp564
	vmovq	%xmm4, %r8	 # tmp555, tmp555
 # .\src\main.cpp:1156:     DEBUG("cells :%0.12f, non-inter: %0.12f", std::chrono::duration<double, std::milli>(t_mid-t_start).count(), std::chrono::duration<double, std::milli>(t_end-t_mid).count());
	vmovsd	%xmm4, %xmm4, %xmm2	 # tmp555,
	vmovq	%xmm1, %rdx	 # tmp564,
.LEHB84:
	call	TextFormat	 #
	movq	%rax, %rdx	 # tmp839, _69
 # .\src\main.cpp:1156:     DEBUG("cells :%0.12f, non-inter: %0.12f", std::chrono::duration<double, std::milli>(t_mid-t_start).count(), std::chrono::duration<double, std::milli>(t_end-t_mid).count());
	movl	$2, %ecx	 #,
	call	TraceLog	 #
.LEHE84:
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/stl_vector.h:730: 	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
	movq	-24(%rbp), %rdi	 # pool.D.168544._M_impl.D.167883._M_finish, _350
	movq	-32(%rbp), %rbx	 # pool.D.168544._M_impl.D.167883._M_start, __first
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/stl_construct.h:162: 	  for (; __first != __last; ++__first)
	cmpq	%rbx, %rdi	 # __first, _350
	je	.L1342	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:337: 	  if (__atomic_load_n(__both_counts, __ATOMIC_ACQUIRE) == __unique_ref)
	movabsq	$4294967297, %r12	 #, tmp823
	jmp	.L1347	 #
	.p2align 4,,10
	.p2align 3
.L1345:
 # C:/msys64/ucrt64/include/c++/13.1.0/ext/atomicity.h:66:   { return __atomic_fetch_add(__mem, __val, __ATOMIC_ACQ_REL); }
	lock subl	$1, (%rax)	 #,,* __both_counts
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:350: 	  if (__gnu_cxx::__exchange_and_add_dispatch(&_M_use_count, -1) == 1)
	je	.L1430	 #,
.L1344:
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/stl_construct.h:162: 	  for (; __first != __last; ++__first)
	addq	$16, %rbx	 #, __first
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/stl_construct.h:162: 	  for (; __first != __last; ++__first)
	cmpq	%rbx, %rdi	 # __first, _350
	je	.L1431	 #,
.L1347:
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:1070: 	if (_M_pi != nullptr)
	movq	8(%rbx), %rsi	 # MEM[(struct _Sp_counted_base * *)__first_180 + 8B], _359
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:1070: 	if (_M_pi != nullptr)
	testq	%rsi, %rsi	 # _359
	je	.L1344	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:337: 	  if (__atomic_load_n(__both_counts, __ATOMIC_ACQUIRE) == __unique_ref)
	movq	8(%rsi), %rdx	 #, _362
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:334: 	  auto __both_counts = reinterpret_cast<long long*>(&_M_use_count);
	leaq	8(%rsi), %rax	 #, __both_counts
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:337: 	  if (__atomic_load_n(__both_counts, __ATOMIC_ACQUIRE) == __unique_ref)
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:337: 	  if (__atomic_load_n(__both_counts, __ATOMIC_ACQUIRE) == __unique_ref)
	cmpq	%r12, %rdx	 # tmp823, _362
	jne	.L1345	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:346: 	      _M_dispose();
	movq	(%rsi), %rax	 # _359->_vptr._Sp_counted_base, _359->_vptr._Sp_counted_base
	movq	%rsi, %rcx	 # _359,
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:343: 	      _M_weak_count = _M_use_count = 0;
	movq	$0, 8(%rsi)	 #, MEM <vector(2) int> [(int *)_359 + 8B]
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/stl_construct.h:162: 	  for (; __first != __last; ++__first)
	addq	$16, %rbx	 #, __first
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:346: 	      _M_dispose();
	call	*16(%rax)	 # MEM[(int (*) () *)_364 + 16B]
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:347: 	      _M_destroy();
	movq	(%rsi), %rax	 # _359->_vptr._Sp_counted_base, _359->_vptr._Sp_counted_base
	movq	%rsi, %rcx	 # _359,
	call	*24(%rax)	 # MEM[(int (*) () *)_366 + 24B]
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/stl_construct.h:162: 	  for (; __first != __last; ++__first)
	cmpq	%rbx, %rdi	 # __first, _350
	jne	.L1347	 #,
	.p2align 4,,10
	.p2align 3
.L1431:
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/stl_vector.h:367: 		      _M_impl._M_end_of_storage - _M_impl._M_start);
	movq	-32(%rbp), %rbx	 # MEM[(struct _Vector_base *)&pool]._M_impl.D.167883._M_start, __first
.L1342:
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/stl_vector.h:386: 	if (__p)
	testq	%rbx, %rbx	 # __first
	je	.L1348	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/stl_vector.h:367: 		      _M_impl._M_end_of_storage - _M_impl._M_start);
	movq	-16(%rbp), %rdx	 # MEM[(struct _Vector_base *)&pool]._M_impl.D.167883._M_end_of_storage, tmp810
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/new_allocator.h:168: 	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
	movq	%rbx, %rcx	 # __first,
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/stl_vector.h:367: 		      _M_impl._M_end_of_storage - _M_impl._M_start);
	subq	%rbx, %rdx	 # __first, tmp810
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/new_allocator.h:168: 	_GLIBCXX_OPERATOR_DELETE(_GLIBCXX_SIZED_DEALLOC(__p, __n));
	call	_ZdlPvy	 #
.L1348:
 # .\src\main.cpp:1086:     std::thread threads[NUM_THREADS];
	movq	-136(%rbp), %rax	 # %sfp, _4
	movq	-128(%rbp), %rdx	 # %sfp, tmp488
	addq	%rdx, %rax	 # tmp488, _4
	jmp	.L1418	 #
	.p2align 4,,10
	.p2align 3
.L1432:
	subq	$8, %rax	 #, _73
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_thread.h:172:       if (joinable())
	cmpq	$0, (%rax)	 #, MEM[(long long unsigned int *)_73]
	jne	.L1353	 #,
.L1418:
 # .\src\main.cpp:1157: }
	cmpq	%rax, %rdx	 # _73, tmp488
	jne	.L1432	 #,
	vmovups	0(%rbp), %xmm6	 #,
	vmovups	16(%rbp), %xmm7	 #,
	vmovups	32(%rbp), %xmm8	 #,
	vmovups	48(%rbp), %xmm9	 #,
	leaq	72(%rbp), %rsp	 #,
	popq	%rbx	 #
	popq	%rsi	 #
	popq	%rdi	 #
	popq	%r12	 #
	popq	%r13	 #
	popq	%r14	 #
	popq	%r15	 #
	popq	%rbp	 #
	ret	
.L1428:
	movslq	-88(%rbp), %rdi	 # %sfp, _172
	movq	%rdi, -160(%rbp)	 # _172, %sfp
.L1332:
	movq	-160(%rbp), %rsi	 # %sfp, _172
 # .\src\main.cpp:987:     for (Boid boid = 0; boid < boid_list->m_size; boid++) {     
	movl	-96(%rbp), %ebx	 # %sfp, tmp575
	xorl	%r10d, %r10d	 # ivtmp.3000
	salq	$2, %rsi	 #, _172
	.p2align 4,,10
	.p2align 3
.L1340:
 # .\src\main.cpp:988:         int home_index_y = homes[boid] / 16;
	movl	(%r9,%r10), %r11d	 # MEM[(int *)homes_301 + ivtmp.3000_479 * 1], _23
 # .\src\main.cpp:997:         vxs[boid] += dx * rules->homing;
	vmovss	(%rax,%r10), %xmm4	 # MEM[(float *)vxs_299 + ivtmp.3000_479 * 1], tmp983
 # .\src\main.cpp:988:         int home_index_y = homes[boid] / 16;
	testl	%r11d, %r11d	 # _23
	leal	15(%r11), %edi	 #, tmp785
	cmovns	%r11d, %edi	 # tmp785,, _23, _23
	sarl	$4, %edi	 #, home_index_y
 # .\src\main.cpp:992:         float home_loc_y = home_index_y * ((world_height - rules->edge_width * 2) /  9) + rules->edge_width;
	imull	%r13d, %edi	 # _322, tmp787
 # .\src\main.cpp:992:         float home_loc_y = home_index_y * ((world_height - rules->edge_width * 2) /  9) + rules->edge_width;
	addl	%r15d, %edi	 # _314, tmp788
 # .\src\main.cpp:992:         float home_loc_y = home_index_y * ((world_height - rules->edge_width * 2) /  9) + rules->edge_width;
	vcvtsi2ssl	%edi, %xmm6, %xmm0	 # tmp788, tmp841, tmp850
 # .\src\main.cpp:989:         int home_index_x = homes[boid] % 16;
	movl	%r11d, %edi	 # _23, tmp791
 # .\src\main.cpp:995:         float dy = home_loc_y - ys[boid];
	vsubss	(%rdx,%r10), %xmm0, %xmm0	 # MEM[(float *)ys_298 + ivtmp.3000_479 * 1], home_loc_y, dy
 # .\src\main.cpp:989:         int home_index_x = homes[boid] % 16;
	sarl	$31, %edi	 #, tmp791
	shrl	$28, %edi	 #, tmp792
	addl	%edi, %r11d	 # tmp792, tmp793
	andl	$15, %r11d	 #, tmp794
	subl	%edi, %r11d	 # tmp792, home_index_x
 # .\src\main.cpp:991:         float home_loc_x = home_index_x * ((world_width - rules->edge_width * 2) /  16) + rules->edge_width;
	imull	%ebx, %r11d	 # tmp575, tmp796
 # .\src\main.cpp:991:         float home_loc_x = home_index_x * ((world_width - rules->edge_width * 2) /  16) + rules->edge_width;
	addl	%r15d, %r11d	 # _314, tmp797
 # .\src\main.cpp:991:         float home_loc_x = home_index_x * ((world_width - rules->edge_width * 2) /  16) + rules->edge_width;
	vcvtsi2ssl	%r11d, %xmm6, %xmm1	 # tmp797, tmp841, tmp851
 # .\src\main.cpp:994:         float dx = home_loc_x - xs[boid];
	vsubss	(%r8,%r10), %xmm1, %xmm1	 # MEM[(float *)xs_297 + ivtmp.3000_479 * 1], home_loc_x, dx
 # .\src\main.cpp:997:         vxs[boid] += dx * rules->homing;
	vfmadd132ss	36(%r14), %xmm4, %xmm1	 # rules_63(D)->homing, tmp983, _522
	vmovss	%xmm1, (%rax,%r10)	 # _522, MEM[(float *)vxs_299 + ivtmp.3000_479 * 1]
 # .\src\main.cpp:998:         vys[boid] += dy * rules->homing;
	vmovss	(%rcx,%r10), %xmm3	 # MEM[(float *)vys_300 + ivtmp.3000_479 * 1], tmp984
	vfmadd132ss	36(%r14), %xmm3, %xmm0	 # rules_63(D)->homing, tmp984, _528
	vmovss	%xmm0, (%rcx,%r10)	 # _528, MEM[(float *)vys_300 + ivtmp.3000_479 * 1]
 # .\src\main.cpp:1000:         xs[boid] += vxs[boid];
	vmovss	(%r8,%r10), %xmm0	 # MEM[(float *)xs_297 + ivtmp.3000_479 * 1], MEM[(float *)xs_297 + ivtmp.3000_479 * 1]
	vaddss	(%rax,%r10), %xmm0, %xmm0	 # MEM[(float *)vxs_299 + ivtmp.3000_479 * 1], MEM[(float *)xs_297 + ivtmp.3000_479 * 1], tmp800
	vmovss	%xmm0, (%r8,%r10)	 # tmp800, MEM[(float *)xs_297 + ivtmp.3000_479 * 1]
 # .\src\main.cpp:1001:         ys[boid] += vys[boid];        
	vmovss	(%rdx,%r10), %xmm0	 # MEM[(float *)ys_298 + ivtmp.3000_479 * 1], MEM[(float *)ys_298 + ivtmp.3000_479 * 1]
	vaddss	(%rcx,%r10), %xmm0, %xmm0	 # MEM[(float *)vys_300 + ivtmp.3000_479 * 1], MEM[(float *)ys_298 + ivtmp.3000_479 * 1], tmp802
	vmovss	%xmm0, (%rdx,%r10)	 # tmp802, MEM[(float *)ys_298 + ivtmp.3000_479 * 1]
 # .\src\main.cpp:987:     for (Boid boid = 0; boid < boid_list->m_size; boid++) {     
	addq	$4, %r10	 #, ivtmp.3000
	cmpq	%rsi, %r10	 # _911, ivtmp.3000
	jne	.L1340	 #,
	jmp	.L1336	 #
.L1430:
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:353: 	      _M_release_last_use_cold();
	movq	%rsi, %rcx	 # _359,
	call	_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE24_M_release_last_use_coldEv	 #
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:354: 	      return;
	jmp	.L1344	 #
	.p2align 4,,10
	.p2align 3
.L1423:
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/unique_lock.h:198: 	else if (_M_device)
	movq	-48(%rbp), %rcx	 # MEM[(struct unique_lock *)_167]._M_device, _272
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/unique_lock.h:198: 	else if (_M_device)
	testq	%rcx, %rcx	 # _272
	je	.L1311	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/x86_64-w64-mingw32/bits/gthr-default.h:779:     return __gthrw_(pthread_mutex_unlock) (__mutex);
	call	pthread_mutex_unlock	 #
	jmp	.L1311	 #
	.p2align 4,,10
	.p2align 3
.L1427:
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/unique_lock.h:198: 	else if (_M_device)
	movq	-48(%rbp), %rcx	 # MEM[(struct unique_lock *)_167]._M_device, _294
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/unique_lock.h:198: 	else if (_M_device)
	testq	%rcx, %rcx	 # _294
	je	.L1327	 #,
 # C:/msys64/ucrt64/include/c++/13.1.0/x86_64-w64-mingw32/bits/gthr-default.h:779:     return __gthrw_(pthread_mutex_unlock) (__mutex);
	call	pthread_mutex_unlock	 #
	jmp	.L1327	 #
.L1303:
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/shared_ptr_base.h:353: 	      _M_release_last_use_cold();
	movq	%r12, %rcx	 # __tmp,
	call	_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE24_M_release_last_use_coldEv	 #
	jmp	.L1416	 #
.L1319:
	movq	%r13, %rcx	 # __tmp,
	call	_ZNSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE24_M_release_last_use_coldEv	 #
	jmp	.L1417	 #
.L1413:
	vzeroupper
	jmp	.L1336	 #
.L1356:
 # .\src\main.cpp:992:         float home_loc_y = home_index_y * ((world_height - rules->edge_width * 2) /  9) + rules->edge_width;
	xorl	%r11d, %r11d	 #
 # .\src\main.cpp:987:     for (Boid boid = 0; boid < boid_list->m_size; boid++) {     
	xorl	%r12d, %r12d	 # tmp.2875
	jmp	.L1333	 #
.L1429:
	vzeroupper
	jmp	.L1338	 #
.L1412:
	vzeroupper
	jmp	.L1299	 #
.L1357:
 # .\src\main.cpp:1157: }
	movq	%rax, %rsi	 # tmp840, tmp524
	vzeroupper
.L1315:
	leaq	-32(%rbp), %rcx	 #, tmp812
	call	_ZNSt6vectorISt6futureIvESaIS1_EED1Ev	 #
 # .\src\main.cpp:1086:     std::thread threads[NUM_THREADS];
	movq	-136(%rbp), %rax	 # %sfp, _4
	movq	-128(%rbp), %rdx	 # %sfp, tmp488
	addq	%rdx, %rax	 # tmp488, _4
.L1354:
 # .\src\main.cpp:1157: }
	movq	-128(%rbp), %rdx	 # %sfp, tmp488
	cmpq	%rdx, %rax	 # tmp488, _36
	je	.L1352	 #,
 # .\src\main.cpp:1086:     std::thread threads[NUM_THREADS];
	subq	$8, %rax	 #, _36
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_thread.h:172:       if (joinable())
	cmpq	$0, (%rax)	 #, MEM[(long long unsigned int *)_122]
	je	.L1354	 #,
.L1353:
 # C:/msys64/ucrt64/include/c++/13.1.0/x86_64-w64-mingw32/bits/c++config.h:322:     terminate();
	call	_ZSt9terminatev	 #
.L1355:
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/stl_uninitialized.h:639: 	  _ForwardIterator __cur = __first;
	movq	%rax, %rdx	 # _200, tmp.2937
	jmp	.L1297	 #
.L1426:
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/std_mutex.h:117: 	__throw_system_error(__e);
	movl	%eax, %ecx	 # _292,
.LEHB85:
	call	_ZSt20__throw_system_errori	 #
.L1422:
	movl	%eax, %ecx	 # i,
	call	_ZSt20__throw_system_errori	 #
.L1425:
 # C:/msys64/ucrt64/include/c++/13.1.0/future:581:             __throw_future_error((int)future_errc::no_state);
	movl	$3, %ecx	 #,
	call	_ZSt20__throw_future_errori	 #
.L1421:
	movl	$3, %ecx	 #,
	call	_ZSt20__throw_future_errori	 #
.LEHE85:
.L1358:
.L1419:
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/atomic_futex.h:323:     }
	movq	%rbx, %rcx	 # tmp821,
	movq	%rax, %rsi	 # tmp836, tmp551
	vzeroupper
	call	_ZNSt11unique_lockISt5mutexED1Ev	 #
	jmp	.L1315	 #
.L1359:
	jmp	.L1419	 #
.L1352:
	movq	%rsi, %rcx	 # tmp524,
.LEHB86:
	call	_Unwind_Resume	 #
	nop	
.LEHE86:
	.seh_handler	__gxx_personality_seh0, @unwind, @except
	.seh_handlerdata
.LLSDA12616:
	.byte	0xff
	.byte	0xff
	.byte	0x1
	.uleb128 .LLSDACSE12616-.LLSDACSB12616
.LLSDACSB12616:
	.uleb128 .LEHB80-.LFB12616
	.uleb128 .LEHE80-.LEHB80
	.uleb128 .L1357-.LFB12616
	.uleb128 0
	.uleb128 .LEHB81-.LFB12616
	.uleb128 .LEHE81-.LEHB81
	.uleb128 .L1358-.LFB12616
	.uleb128 0
	.uleb128 .LEHB82-.LFB12616
	.uleb128 .LEHE82-.LEHB82
	.uleb128 .L1357-.LFB12616
	.uleb128 0
	.uleb128 .LEHB83-.LFB12616
	.uleb128 .LEHE83-.LEHB83
	.uleb128 .L1359-.LFB12616
	.uleb128 0
	.uleb128 .LEHB84-.LFB12616
	.uleb128 .LEHE84-.LEHB84
	.uleb128 .L1357-.LFB12616
	.uleb128 0
	.uleb128 .LEHB85-.LFB12616
	.uleb128 .LEHE85-.LEHB85
	.uleb128 .L1357-.LFB12616
	.uleb128 0
	.uleb128 .LEHB86-.LFB12616
	.uleb128 .LEHE86-.LEHB86
	.uleb128 0
	.uleb128 0
.LLSDACSE12616:
	.text
	.seh_endproc
	.section	.text.startup,"x"
	.p2align 4
	.def	_GLOBAL__sub_I_myfile;	.scl	3;	.type	32;	.endef
	.seh_proc	_GLOBAL__sub_I_myfile
_GLOBAL__sub_I_myfile:
.LFB15099:
	subq	$40, %rsp	 #,
	.seh_stackalloc	40
	.seh_endprologue
 # .\src\main.cpp:31: std::ofstream myfile;
	leaq	myfile(%rip), %rcx	 #, tmp85
	call	_ZNSt14basic_ofstreamIcSt11char_traitsIcEEC1Ev	 #
 # .\src\main.cpp:31: std::ofstream myfile;
	leaq	__tcf_0(%rip), %rcx	 #, tmp86
	call	atexit	 #
 # .\src\main.cpp:53: const uint32_t num_threads = std::min(std::thread::hardware_concurrency() - 1, (uint32_t) 64);
	call	_ZNSt6thread20hardware_concurrencyEv	 #
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/stl_algobase.h:238:       if (__b < __a)
	movl	$64, %edx	 #, tmp91
 # .\src\main.cpp:53: const uint32_t num_threads = std::min(std::thread::hardware_concurrency() - 1, (uint32_t) 64);
	subl	$1, %eax	 #, tmp87
 # C:/msys64/ucrt64/include/c++/13.1.0/bits/stl_algobase.h:238:       if (__b < __a)
	cmpl	%edx, %eax	 # tmp91, tmp87
	cmova	%edx, %eax	 # tmp87,, tmp91, tmp88
 # .\src\main.cpp:53: const uint32_t num_threads = std::min(std::thread::hardware_concurrency() - 1, (uint32_t) 64);
	movl	%eax, _ZL11num_threads(%rip)	 # tmp88, num_threads
 # .\src\main.cpp:1712: }
	addq	$40, %rsp	 #,
	ret	
	.seh_endproc
	.section	.ctors,"w"
	.align 8
	.quad	_GLOBAL__sub_I_myfile
	.globl	_ZTSSt11_Mutex_baseILN9__gnu_cxx12_Lock_policyE2EE
	.section	.rdata$_ZTSSt11_Mutex_baseILN9__gnu_cxx12_Lock_policyE2EE,"dr"
	.linkonce same_size
	.align 32
_ZTSSt11_Mutex_baseILN9__gnu_cxx12_Lock_policyE2EE:
	.ascii "St11_Mutex_baseILN9__gnu_cxx12_Lock_policyE2EE\0"
	.globl	_ZTISt11_Mutex_baseILN9__gnu_cxx12_Lock_policyE2EE
	.section	.rdata$_ZTISt11_Mutex_baseILN9__gnu_cxx12_Lock_policyE2EE,"dr"
	.linkonce same_size
	.align 8
_ZTISt11_Mutex_baseILN9__gnu_cxx12_Lock_policyE2EE:
 # <anonymous>:
 # <anonymous>:
	.quad	_ZTVN10__cxxabiv117__class_type_infoE+16
 # <anonymous>:
	.quad	_ZTSSt11_Mutex_baseILN9__gnu_cxx12_Lock_policyE2EE
	.globl	_ZTSSt19_Sp_make_shared_tag
	.section	.rdata$_ZTSSt19_Sp_make_shared_tag,"dr"
	.linkonce same_size
	.align 16
_ZTSSt19_Sp_make_shared_tag:
	.ascii "St19_Sp_make_shared_tag\0"
	.globl	_ZTISt19_Sp_make_shared_tag
	.section	.rdata$_ZTISt19_Sp_make_shared_tag,"dr"
	.linkonce same_size
	.align 8
_ZTISt19_Sp_make_shared_tag:
 # <anonymous>:
 # <anonymous>:
	.quad	_ZTVN10__cxxabiv117__class_type_infoE+16
 # <anonymous>:
	.quad	_ZTSSt19_Sp_make_shared_tag
	.globl	_ZTSSt9exception
	.section	.rdata$_ZTSSt9exception,"dr"
	.linkonce same_size
	.align 8
_ZTSSt9exception:
	.ascii "St9exception\0"
	.globl	_ZTISt9exception
	.section	.rdata$_ZTISt9exception,"dr"
	.linkonce same_size
	.align 8
_ZTISt9exception:
 # <anonymous>:
 # <anonymous>:
	.quad	_ZTVN10__cxxabiv117__class_type_infoE+16
 # <anonymous>:
	.quad	_ZTSSt9exception
	.globl	_ZTSN10__cxxabiv115__forced_unwindE
	.section	.rdata$_ZTSN10__cxxabiv115__forced_unwindE,"dr"
	.linkonce same_size
	.align 32
_ZTSN10__cxxabiv115__forced_unwindE:
	.ascii "N10__cxxabiv115__forced_unwindE\0"
	.globl	_ZTIN10__cxxabiv115__forced_unwindE
	.section	.rdata$_ZTIN10__cxxabiv115__forced_unwindE,"dr"
	.linkonce same_size
	.align 8
_ZTIN10__cxxabiv115__forced_unwindE:
 # <anonymous>:
 # <anonymous>:
	.quad	_ZTVN10__cxxabiv117__class_type_infoE+16
 # <anonymous>:
	.quad	_ZTSN10__cxxabiv115__forced_unwindE
	.globl	_ZTSSt11logic_error
	.section	.rdata$_ZTSSt11logic_error,"dr"
	.linkonce same_size
	.align 16
_ZTSSt11logic_error:
	.ascii "St11logic_error\0"
	.globl	_ZTISt11logic_error
	.section	.rdata$_ZTISt11logic_error,"dr"
	.linkonce same_size
	.align 8
_ZTISt11logic_error:
 # <anonymous>:
 # <anonymous>:
	.quad	_ZTVN10__cxxabiv120__si_class_type_infoE+16
 # <anonymous>:
	.quad	_ZTSSt11logic_error
 # <anonymous>:
	.quad	_ZTISt9exception
	.globl	_ZTSSt13runtime_error
	.section	.rdata$_ZTSSt13runtime_error,"dr"
	.linkonce same_size
	.align 16
_ZTSSt13runtime_error:
	.ascii "St13runtime_error\0"
	.globl	_ZTISt13runtime_error
	.section	.rdata$_ZTISt13runtime_error,"dr"
	.linkonce same_size
	.align 8
_ZTISt13runtime_error:
 # <anonymous>:
 # <anonymous>:
	.quad	_ZTVN10__cxxabiv120__si_class_type_infoE+16
 # <anonymous>:
	.quad	_ZTSSt13runtime_error
 # <anonymous>:
	.quad	_ZTISt9exception
	.globl	_ZTSSt12system_error
	.section	.rdata$_ZTSSt12system_error,"dr"
	.linkonce same_size
	.align 16
_ZTSSt12system_error:
	.ascii "St12system_error\0"
	.globl	_ZTISt12system_error
	.section	.rdata$_ZTISt12system_error,"dr"
	.linkonce same_size
	.align 8
_ZTISt12system_error:
 # <anonymous>:
 # <anonymous>:
	.quad	_ZTVN10__cxxabiv120__si_class_type_infoE+16
 # <anonymous>:
	.quad	_ZTSSt12system_error
 # <anonymous>:
	.quad	_ZTISt13runtime_error
	.globl	_ZTSNSt6thread6_StateE
	.section	.rdata$_ZTSNSt6thread6_StateE,"dr"
	.linkonce same_size
	.align 16
_ZTSNSt6thread6_StateE:
	.ascii "NSt6thread6_StateE\0"
	.globl	_ZTINSt6thread6_StateE
	.section	.rdata$_ZTINSt6thread6_StateE,"dr"
	.linkonce same_size
	.align 8
_ZTINSt6thread6_StateE:
 # <anonymous>:
 # <anonymous>:
	.quad	_ZTVN10__cxxabiv117__class_type_infoE+16
 # <anonymous>:
	.quad	_ZTSNSt6thread6_StateE
	.globl	_ZTSSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE
	.section	.rdata$_ZTSSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE,"dr"
	.linkonce same_size
	.align 32
_ZTSSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE:
	.ascii "St16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE\0"
	.globl	_ZTISt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE
	.section	.rdata$_ZTISt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE,"dr"
	.linkonce same_size
	.align 8
_ZTISt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE:
 # <anonymous>:
 # <anonymous>:
	.quad	_ZTVN10__cxxabiv120__si_class_type_infoE+16
 # <anonymous>:
	.quad	_ZTSSt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE
 # <anonymous>:
	.quad	_ZTISt11_Mutex_baseILN9__gnu_cxx12_Lock_policyE2EE
	.globl	_ZTSSt12future_error
	.section	.rdata$_ZTSSt12future_error,"dr"
	.linkonce same_size
	.align 16
_ZTSSt12future_error:
	.ascii "St12future_error\0"
	.globl	_ZTISt12future_error
	.section	.rdata$_ZTISt12future_error,"dr"
	.linkonce same_size
	.align 8
_ZTISt12future_error:
 # <anonymous>:
 # <anonymous>:
	.quad	_ZTVN10__cxxabiv120__si_class_type_infoE+16
 # <anonymous>:
	.quad	_ZTSSt12future_error
 # <anonymous>:
	.quad	_ZTISt11logic_error
	.globl	_ZTSNSt13__future_base12_Result_baseE
	.section	.rdata$_ZTSNSt13__future_base12_Result_baseE,"dr"
	.linkonce same_size
	.align 32
_ZTSNSt13__future_base12_Result_baseE:
	.ascii "NSt13__future_base12_Result_baseE\0"
	.globl	_ZTINSt13__future_base12_Result_baseE
	.section	.rdata$_ZTINSt13__future_base12_Result_baseE,"dr"
	.linkonce same_size
	.align 8
_ZTINSt13__future_base12_Result_baseE:
 # <anonymous>:
 # <anonymous>:
	.quad	_ZTVN10__cxxabiv117__class_type_infoE+16
 # <anonymous>:
	.quad	_ZTSNSt13__future_base12_Result_baseE
	.globl	_ZTSNSt13__future_base13_State_baseV2E
	.section	.rdata$_ZTSNSt13__future_base13_State_baseV2E,"dr"
	.linkonce same_size
	.align 32
_ZTSNSt13__future_base13_State_baseV2E:
	.ascii "NSt13__future_base13_State_baseV2E\0"
	.globl	_ZTINSt13__future_base13_State_baseV2E
	.section	.rdata$_ZTINSt13__future_base13_State_baseV2E,"dr"
	.linkonce same_size
	.align 8
_ZTINSt13__future_base13_State_baseV2E:
 # <anonymous>:
 # <anonymous>:
	.quad	_ZTVN10__cxxabiv117__class_type_infoE+16
 # <anonymous>:
	.quad	_ZTSNSt13__future_base13_State_baseV2E
	.globl	_ZTSNSt13__future_base7_ResultIvEE
	.section	.rdata$_ZTSNSt13__future_base7_ResultIvEE,"dr"
	.linkonce same_size
	.align 16
_ZTSNSt13__future_base7_ResultIvEE:
	.ascii "NSt13__future_base7_ResultIvEE\0"
	.globl	_ZTINSt13__future_base7_ResultIvEE
	.section	.rdata$_ZTINSt13__future_base7_ResultIvEE,"dr"
	.linkonce same_size
	.align 8
_ZTINSt13__future_base7_ResultIvEE:
 # <anonymous>:
 # <anonymous>:
	.quad	_ZTVN10__cxxabiv120__si_class_type_infoE+16
 # <anonymous>:
	.quad	_ZTSNSt13__future_base7_ResultIvEE
 # <anonymous>:
	.quad	_ZTINSt13__future_base12_Result_baseE
	.globl	_ZTSNSt13__future_base21_Async_state_commonV2E
	.section	.rdata$_ZTSNSt13__future_base21_Async_state_commonV2E,"dr"
	.linkonce same_size
	.align 32
_ZTSNSt13__future_base21_Async_state_commonV2E:
	.ascii "NSt13__future_base21_Async_state_commonV2E\0"
	.globl	_ZTINSt13__future_base21_Async_state_commonV2E
	.section	.rdata$_ZTINSt13__future_base21_Async_state_commonV2E,"dr"
	.linkonce same_size
	.align 8
_ZTINSt13__future_base21_Async_state_commonV2E:
 # <anonymous>:
 # <anonymous>:
	.quad	_ZTVN10__cxxabiv120__si_class_type_infoE+16
 # <anonymous>:
	.quad	_ZTSNSt13__future_base21_Async_state_commonV2E
 # <anonymous>:
	.quad	_ZTINSt13__future_base13_State_baseV2E
	.globl	_ZTSNSt6thread11_State_implINS_8_InvokerISt5tupleIJPFvP10TaskMasterhES4_iEEEEEE
	.section	.rdata$_ZTSNSt6thread11_State_implINS_8_InvokerISt5tupleIJPFvP10TaskMasterhES4_iEEEEEE,"dr"
	.linkonce same_size
	.align 32
_ZTSNSt6thread11_State_implINS_8_InvokerISt5tupleIJPFvP10TaskMasterhES4_iEEEEEE:
	.ascii "NSt6thread11_State_implINS_8_InvokerISt5tupleIJPFvP10TaskMasterhES4_iEEEEEE\0"
	.globl	_ZTINSt6thread11_State_implINS_8_InvokerISt5tupleIJPFvP10TaskMasterhES4_iEEEEEE
	.section	.rdata$_ZTINSt6thread11_State_implINS_8_InvokerISt5tupleIJPFvP10TaskMasterhES4_iEEEEEE,"dr"
	.linkonce same_size
	.align 8
_ZTINSt6thread11_State_implINS_8_InvokerISt5tupleIJPFvP10TaskMasterhES4_iEEEEEE:
 # <anonymous>:
 # <anonymous>:
	.quad	_ZTVN10__cxxabiv120__si_class_type_infoE+16
 # <anonymous>:
	.quad	_ZTSNSt6thread11_State_implINS_8_InvokerISt5tupleIJPFvP10TaskMasterhES4_iEEEEEE
 # <anonymous>:
	.quad	_ZTINSt6thread6_StateE
	.globl	_ZTSNSt6thread11_State_implINS_8_InvokerISt5tupleIJPFviPKiPK8BoidListPK7BoidMapEiPiPS5_SA_EEEEEE
	.section	.rdata$_ZTSNSt6thread11_State_implINS_8_InvokerISt5tupleIJPFviPKiPK8BoidListPK7BoidMapEiPiPS5_SA_EEEEEE,"dr"
	.linkonce same_size
	.align 32
_ZTSNSt6thread11_State_implINS_8_InvokerISt5tupleIJPFviPKiPK8BoidListPK7BoidMapEiPiPS5_SA_EEEEEE:
	.ascii "NSt6thread11_State_implINS_8_InvokerISt5tupleIJPFviPKiPK8BoidListPK7BoidMapEiPiPS5_SA_EEEEEE\0"
	.globl	_ZTINSt6thread11_State_implINS_8_InvokerISt5tupleIJPFviPKiPK8BoidListPK7BoidMapEiPiPS5_SA_EEEEEE
	.section	.rdata$_ZTINSt6thread11_State_implINS_8_InvokerISt5tupleIJPFviPKiPK8BoidListPK7BoidMapEiPiPS5_SA_EEEEEE,"dr"
	.linkonce same_size
	.align 8
_ZTINSt6thread11_State_implINS_8_InvokerISt5tupleIJPFviPKiPK8BoidListPK7BoidMapEiPiPS5_SA_EEEEEE:
 # <anonymous>:
 # <anonymous>:
	.quad	_ZTVN10__cxxabiv120__si_class_type_infoE+16
 # <anonymous>:
	.quad	_ZTSNSt6thread11_State_implINS_8_InvokerISt5tupleIJPFviPKiPK8BoidListPK7BoidMapEiPiPS5_SA_EEEEEE
 # <anonymous>:
	.quad	_ZTINSt6thread6_StateE
	.globl	_ZTSNSt13__future_base17_Async_state_implINSt6thread8_InvokerISt5tupleIJPFviPK8BoidListPK7BoidMapEiPS4_PS7_EEEEvEE
	.section	.rdata$_ZTSNSt13__future_base17_Async_state_implINSt6thread8_InvokerISt5tupleIJPFviPK8BoidListPK7BoidMapEiPS4_PS7_EEEEvEE,"dr"
	.linkonce same_size
	.align 32
_ZTSNSt13__future_base17_Async_state_implINSt6thread8_InvokerISt5tupleIJPFviPK8BoidListPK7BoidMapEiPS4_PS7_EEEEvEE:
	.ascii "NSt13__future_base17_Async_state_implINSt6thread8_InvokerISt5tupleIJPFviPK8BoidListPK7BoidMapEiPS4_PS7_EEEEvEE\0"
	.globl	_ZTINSt13__future_base17_Async_state_implINSt6thread8_InvokerISt5tupleIJPFviPK8BoidListPK7BoidMapEiPS4_PS7_EEEEvEE
	.section	.rdata$_ZTINSt13__future_base17_Async_state_implINSt6thread8_InvokerISt5tupleIJPFviPK8BoidListPK7BoidMapEiPS4_PS7_EEEEvEE,"dr"
	.linkonce same_size
	.align 8
_ZTINSt13__future_base17_Async_state_implINSt6thread8_InvokerISt5tupleIJPFviPK8BoidListPK7BoidMapEiPS4_PS7_EEEEvEE:
 # <anonymous>:
 # <anonymous>:
	.quad	_ZTVN10__cxxabiv120__si_class_type_infoE+16
 # <anonymous>:
	.quad	_ZTSNSt13__future_base17_Async_state_implINSt6thread8_InvokerISt5tupleIJPFviPK8BoidListPK7BoidMapEiPS4_PS7_EEEEvEE
 # <anonymous>:
	.quad	_ZTINSt13__future_base21_Async_state_commonV2E
	.globl	_ZTSNSt13__future_base15_Deferred_stateINSt6thread8_InvokerISt5tupleIJPFviPK8BoidListPK7BoidMapEiPS4_PS7_EEEEvEE
	.section	.rdata$_ZTSNSt13__future_base15_Deferred_stateINSt6thread8_InvokerISt5tupleIJPFviPK8BoidListPK7BoidMapEiPS4_PS7_EEEEvEE,"dr"
	.linkonce same_size
	.align 32
_ZTSNSt13__future_base15_Deferred_stateINSt6thread8_InvokerISt5tupleIJPFviPK8BoidListPK7BoidMapEiPS4_PS7_EEEEvEE:
	.ascii "NSt13__future_base15_Deferred_stateINSt6thread8_InvokerISt5tupleIJPFviPK8BoidListPK7BoidMapEiPS4_PS7_EEEEvEE\0"
	.globl	_ZTINSt13__future_base15_Deferred_stateINSt6thread8_InvokerISt5tupleIJPFviPK8BoidListPK7BoidMapEiPS4_PS7_EEEEvEE
	.section	.rdata$_ZTINSt13__future_base15_Deferred_stateINSt6thread8_InvokerISt5tupleIJPFviPK8BoidListPK7BoidMapEiPS4_PS7_EEEEvEE,"dr"
	.linkonce same_size
	.align 8
_ZTINSt13__future_base15_Deferred_stateINSt6thread8_InvokerISt5tupleIJPFviPK8BoidListPK7BoidMapEiPS4_PS7_EEEEvEE:
 # <anonymous>:
 # <anonymous>:
	.quad	_ZTVN10__cxxabiv120__si_class_type_infoE+16
 # <anonymous>:
	.quad	_ZTSNSt13__future_base15_Deferred_stateINSt6thread8_InvokerISt5tupleIJPFviPK8BoidListPK7BoidMapEiPS4_PS7_EEEEvEE
 # <anonymous>:
	.quad	_ZTINSt13__future_base13_State_baseV2E
	.globl	_ZTSNSt13__future_base17_Async_state_implINSt6thread8_InvokerISt5tupleIJPFvibPK7BoidMapPK5RulesPK8BoidListEibS6_S9_SC_EEEEvEE
	.section	.rdata$_ZTSNSt13__future_base17_Async_state_implINSt6thread8_InvokerISt5tupleIJPFvibPK7BoidMapPK5RulesPK8BoidListEibS6_S9_SC_EEEEvEE,"dr"
	.linkonce same_size
	.align 32
_ZTSNSt13__future_base17_Async_state_implINSt6thread8_InvokerISt5tupleIJPFvibPK7BoidMapPK5RulesPK8BoidListEibS6_S9_SC_EEEEvEE:
	.ascii "NSt13__future_base17_Async_state_implINSt6thread8_InvokerISt5tupleIJPFvibPK7BoidMapPK5RulesPK8BoidListEibS6_S9_SC_EEEEvEE\0"
	.globl	_ZTINSt13__future_base17_Async_state_implINSt6thread8_InvokerISt5tupleIJPFvibPK7BoidMapPK5RulesPK8BoidListEibS6_S9_SC_EEEEvEE
	.section	.rdata$_ZTINSt13__future_base17_Async_state_implINSt6thread8_InvokerISt5tupleIJPFvibPK7BoidMapPK5RulesPK8BoidListEibS6_S9_SC_EEEEvEE,"dr"
	.linkonce same_size
	.align 8
_ZTINSt13__future_base17_Async_state_implINSt6thread8_InvokerISt5tupleIJPFvibPK7BoidMapPK5RulesPK8BoidListEibS6_S9_SC_EEEEvEE:
 # <anonymous>:
 # <anonymous>:
	.quad	_ZTVN10__cxxabiv120__si_class_type_infoE+16
 # <anonymous>:
	.quad	_ZTSNSt13__future_base17_Async_state_implINSt6thread8_InvokerISt5tupleIJPFvibPK7BoidMapPK5RulesPK8BoidListEibS6_S9_SC_EEEEvEE
 # <anonymous>:
	.quad	_ZTINSt13__future_base21_Async_state_commonV2E
	.globl	_ZTSNSt13__future_base15_Deferred_stateINSt6thread8_InvokerISt5tupleIJPFvibPK7BoidMapPK5RulesPK8BoidListEibS6_S9_SC_EEEEvEE
	.section	.rdata$_ZTSNSt13__future_base15_Deferred_stateINSt6thread8_InvokerISt5tupleIJPFvibPK7BoidMapPK5RulesPK8BoidListEibS6_S9_SC_EEEEvEE,"dr"
	.linkonce same_size
	.align 32
_ZTSNSt13__future_base15_Deferred_stateINSt6thread8_InvokerISt5tupleIJPFvibPK7BoidMapPK5RulesPK8BoidListEibS6_S9_SC_EEEEvEE:
	.ascii "NSt13__future_base15_Deferred_stateINSt6thread8_InvokerISt5tupleIJPFvibPK7BoidMapPK5RulesPK8BoidListEibS6_S9_SC_EEEEvEE\0"
	.globl	_ZTINSt13__future_base15_Deferred_stateINSt6thread8_InvokerISt5tupleIJPFvibPK7BoidMapPK5RulesPK8BoidListEibS6_S9_SC_EEEEvEE
	.section	.rdata$_ZTINSt13__future_base15_Deferred_stateINSt6thread8_InvokerISt5tupleIJPFvibPK7BoidMapPK5RulesPK8BoidListEibS6_S9_SC_EEEEvEE,"dr"
	.linkonce same_size
	.align 8
_ZTINSt13__future_base15_Deferred_stateINSt6thread8_InvokerISt5tupleIJPFvibPK7BoidMapPK5RulesPK8BoidListEibS6_S9_SC_EEEEvEE:
 # <anonymous>:
 # <anonymous>:
	.quad	_ZTVN10__cxxabiv120__si_class_type_infoE+16
 # <anonymous>:
	.quad	_ZTSNSt13__future_base15_Deferred_stateINSt6thread8_InvokerISt5tupleIJPFvibPK7BoidMapPK5RulesPK8BoidListEibS6_S9_SC_EEEEvEE
 # <anonymous>:
	.quad	_ZTINSt13__future_base13_State_baseV2E
	.globl	_ZTSSt23_Sp_counted_ptr_inplaceINSt13__future_base17_Async_state_implINSt6thread8_InvokerISt5tupleIJPFviPK8BoidListPK7BoidMapEiPS5_PS8_EEEEvEESaIvELN9__gnu_cxx12_Lock_policyE2EE
	.section	.rdata$_ZTSSt23_Sp_counted_ptr_inplaceINSt13__future_base17_Async_state_implINSt6thread8_InvokerISt5tupleIJPFviPK8BoidListPK7BoidMapEiPS5_PS8_EEEEvEESaIvELN9__gnu_cxx12_Lock_policyE2EE,"dr"
	.linkonce same_size
	.align 32
_ZTSSt23_Sp_counted_ptr_inplaceINSt13__future_base17_Async_state_implINSt6thread8_InvokerISt5tupleIJPFviPK8BoidListPK7BoidMapEiPS5_PS8_EEEEvEESaIvELN9__gnu_cxx12_Lock_policyE2EE:
	.ascii "St23_Sp_counted_ptr_inplaceINSt13__future_base17_Async_state_implINSt6thread8_InvokerISt5tupleIJPFviPK8BoidListPK7BoidMapEiPS5_PS8_EEEEvEESaIvELN9__gnu_cxx12_Lock_policyE2EE\0"
	.globl	_ZTISt23_Sp_counted_ptr_inplaceINSt13__future_base17_Async_state_implINSt6thread8_InvokerISt5tupleIJPFviPK8BoidListPK7BoidMapEiPS5_PS8_EEEEvEESaIvELN9__gnu_cxx12_Lock_policyE2EE
	.section	.rdata$_ZTISt23_Sp_counted_ptr_inplaceINSt13__future_base17_Async_state_implINSt6thread8_InvokerISt5tupleIJPFviPK8BoidListPK7BoidMapEiPS5_PS8_EEEEvEESaIvELN9__gnu_cxx12_Lock_policyE2EE,"dr"
	.linkonce same_size
	.align 8
_ZTISt23_Sp_counted_ptr_inplaceINSt13__future_base17_Async_state_implINSt6thread8_InvokerISt5tupleIJPFviPK8BoidListPK7BoidMapEiPS5_PS8_EEEEvEESaIvELN9__gnu_cxx12_Lock_policyE2EE:
 # <anonymous>:
 # <anonymous>:
	.quad	_ZTVN10__cxxabiv120__si_class_type_infoE+16
 # <anonymous>:
	.quad	_ZTSSt23_Sp_counted_ptr_inplaceINSt13__future_base17_Async_state_implINSt6thread8_InvokerISt5tupleIJPFviPK8BoidListPK7BoidMapEiPS5_PS8_EEEEvEESaIvELN9__gnu_cxx12_Lock_policyE2EE
 # <anonymous>:
	.quad	_ZTISt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE
	.globl	_ZTSSt23_Sp_counted_ptr_inplaceINSt13__future_base15_Deferred_stateINSt6thread8_InvokerISt5tupleIJPFviPK8BoidListPK7BoidMapEiPS5_PS8_EEEEvEESaIvELN9__gnu_cxx12_Lock_policyE2EE
	.section	.rdata$_ZTSSt23_Sp_counted_ptr_inplaceINSt13__future_base15_Deferred_stateINSt6thread8_InvokerISt5tupleIJPFviPK8BoidListPK7BoidMapEiPS5_PS8_EEEEvEESaIvELN9__gnu_cxx12_Lock_policyE2EE,"dr"
	.linkonce same_size
	.align 32
_ZTSSt23_Sp_counted_ptr_inplaceINSt13__future_base15_Deferred_stateINSt6thread8_InvokerISt5tupleIJPFviPK8BoidListPK7BoidMapEiPS5_PS8_EEEEvEESaIvELN9__gnu_cxx12_Lock_policyE2EE:
	.ascii "St23_Sp_counted_ptr_inplaceINSt13__future_base15_Deferred_stateINSt6thread8_InvokerISt5tupleIJPFviPK8BoidListPK7BoidMapEiPS5_PS8_EEEEvEESaIvELN9__gnu_cxx12_Lock_policyE2EE\0"
	.globl	_ZTISt23_Sp_counted_ptr_inplaceINSt13__future_base15_Deferred_stateINSt6thread8_InvokerISt5tupleIJPFviPK8BoidListPK7BoidMapEiPS5_PS8_EEEEvEESaIvELN9__gnu_cxx12_Lock_policyE2EE
	.section	.rdata$_ZTISt23_Sp_counted_ptr_inplaceINSt13__future_base15_Deferred_stateINSt6thread8_InvokerISt5tupleIJPFviPK8BoidListPK7BoidMapEiPS5_PS8_EEEEvEESaIvELN9__gnu_cxx12_Lock_policyE2EE,"dr"
	.linkonce same_size
	.align 8
_ZTISt23_Sp_counted_ptr_inplaceINSt13__future_base15_Deferred_stateINSt6thread8_InvokerISt5tupleIJPFviPK8BoidListPK7BoidMapEiPS5_PS8_EEEEvEESaIvELN9__gnu_cxx12_Lock_policyE2EE:
 # <anonymous>:
 # <anonymous>:
	.quad	_ZTVN10__cxxabiv120__si_class_type_infoE+16
 # <anonymous>:
	.quad	_ZTSSt23_Sp_counted_ptr_inplaceINSt13__future_base15_Deferred_stateINSt6thread8_InvokerISt5tupleIJPFviPK8BoidListPK7BoidMapEiPS5_PS8_EEEEvEESaIvELN9__gnu_cxx12_Lock_policyE2EE
 # <anonymous>:
	.quad	_ZTISt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE
	.globl	_ZTSSt23_Sp_counted_ptr_inplaceINSt13__future_base17_Async_state_implINSt6thread8_InvokerISt5tupleIJPFvibPK7BoidMapPK5RulesPK8BoidListEibS7_SA_SD_EEEEvEESaIvELN9__gnu_cxx12_Lock_policyE2EE
	.section	.rdata$_ZTSSt23_Sp_counted_ptr_inplaceINSt13__future_base17_Async_state_implINSt6thread8_InvokerISt5tupleIJPFvibPK7BoidMapPK5RulesPK8BoidListEibS7_SA_SD_EEEEvEESaIvELN9__gnu_cxx12_Lock_policyE2EE,"dr"
	.linkonce same_size
	.align 32
_ZTSSt23_Sp_counted_ptr_inplaceINSt13__future_base17_Async_state_implINSt6thread8_InvokerISt5tupleIJPFvibPK7BoidMapPK5RulesPK8BoidListEibS7_SA_SD_EEEEvEESaIvELN9__gnu_cxx12_Lock_policyE2EE:
	.ascii "St23_Sp_counted_ptr_inplaceINSt13__future_base17_Async_state_implINSt6thread8_InvokerISt5tupleIJPFvibPK7BoidMapPK5RulesPK8BoidListEibS7_SA_SD_EEEEvEESaIvELN9__gnu_cxx12_Lock_policyE2EE\0"
	.globl	_ZTISt23_Sp_counted_ptr_inplaceINSt13__future_base17_Async_state_implINSt6thread8_InvokerISt5tupleIJPFvibPK7BoidMapPK5RulesPK8BoidListEibS7_SA_SD_EEEEvEESaIvELN9__gnu_cxx12_Lock_policyE2EE
	.section	.rdata$_ZTISt23_Sp_counted_ptr_inplaceINSt13__future_base17_Async_state_implINSt6thread8_InvokerISt5tupleIJPFvibPK7BoidMapPK5RulesPK8BoidListEibS7_SA_SD_EEEEvEESaIvELN9__gnu_cxx12_Lock_policyE2EE,"dr"
	.linkonce same_size
	.align 8
_ZTISt23_Sp_counted_ptr_inplaceINSt13__future_base17_Async_state_implINSt6thread8_InvokerISt5tupleIJPFvibPK7BoidMapPK5RulesPK8BoidListEibS7_SA_SD_EEEEvEESaIvELN9__gnu_cxx12_Lock_policyE2EE:
 # <anonymous>:
 # <anonymous>:
	.quad	_ZTVN10__cxxabiv120__si_class_type_infoE+16
 # <anonymous>:
	.quad	_ZTSSt23_Sp_counted_ptr_inplaceINSt13__future_base17_Async_state_implINSt6thread8_InvokerISt5tupleIJPFvibPK7BoidMapPK5RulesPK8BoidListEibS7_SA_SD_EEEEvEESaIvELN9__gnu_cxx12_Lock_policyE2EE
 # <anonymous>:
	.quad	_ZTISt16_Sp_counted_baseILN9__gnu_cxx12_Lock_policyE2EE
	.globl	_ZTSNSt6thread11_State_implINS_8_InvokerISt5tupleIJMNSt13__future_base17_Async_state_implINS1_IS2_IJPFviPK8BoidListPK7BoidMapEiPS5_PS8_EEEEvEEFvvEPSH_EEEEEE
	.section	.rdata$_ZTSNSt6thread11_State_implINS_8_InvokerISt5tupleIJMNSt13__future_base17_Async_state_implINS1_IS2_IJPFviPK8BoidListPK7BoidMapEiPS5_PS8_EEEEvEEFvvEPSH_EEEEEE,"dr"
	.linkonce same_size
	.align 32
_ZTSNSt6thread11_State_implINS_8_InvokerISt5tupleIJMNSt13__future_base17_Async_state_implINS1_IS2_IJPFviPK8BoidListPK7BoidMapEiPS5_PS8_EEEEvEEFvvEPSH_EEEEEE:
	.ascii "NSt6thread11_State_implINS_8_InvokerISt5tupleIJMNSt13__future_base17_Async_state_implINS1_IS2_IJPFviPK8BoidListPK7BoidMapEiPS5_PS8_EEEEvEEFvvEPSH_EEEEEE\0"
	.globl	_ZTINSt6thread11_State_implINS_8_InvokerISt5tupleIJMNSt13__future_base17_Async_state_implINS1_IS2_IJPFviPK8BoidListPK7BoidMapEiPS5_PS8_EEEEvEEFvvEPSH_EEEEEE
	.section	.rdata$_ZTINSt6thread11_State_implINS_8_InvokerISt5tupleIJMNSt13__future_base17_Async_state_implINS1_IS2_IJPFviPK8BoidListPK7BoidMapEiPS5_PS8_EEEEvEEFvvEPSH_EEEEEE,"dr"
	.linkonce same_size
	.align 8
_ZTINSt6thread11_State_implINS_8_InvokerISt5tupleIJMNSt13__future_base17_Async_state_implINS1_IS2_IJPFviPK8BoidListPK7BoidMapEiPS5_PS8_EEEEvEEFvvEPSH_EEEEEE:
 # <anonymous>:
 # <anonymous>:
	.quad	_ZTVN10__cxxabiv120__si_class_type_infoE+16
 # <anonymous>:
	.quad	_ZTSNSt6thread11_State_implINS_8_InvokerISt5tupleIJMNSt13__future_base17_Async_state_implINS1_IS2_IJPFviPK8BoidListPK7BoidMapEiPS5_PS8_EEEEvEEFvvEPSH_EEEEEE
 # <anonymous>:
	.quad	_ZTINSt6thread6_StateE
	.globl	_ZTSNSt6thread11_State_implINS_8_InvokerISt5tupleIJMNSt13__future_base17_Async_state_implINS1_IS2_IJPFvibPK7BoidMapPK5RulesPK8BoidListEibS7_SA_SD_EEEEvEEFvvEPSI_EEEEEE
	.section	.rdata$_ZTSNSt6thread11_State_implINS_8_InvokerISt5tupleIJMNSt13__future_base17_Async_state_implINS1_IS2_IJPFvibPK7BoidMapPK5RulesPK8BoidListEibS7_SA_SD_EEEEvEEFvvEPSI_EEEEEE,"dr"
	.linkonce same_size
	.align 32
_ZTSNSt6thread11_State_implINS_8_InvokerISt5tupleIJMNSt13__future_base17_Async_state_implINS1_IS2_IJPFvibPK7BoidMapPK5RulesPK8BoidListEibS7_SA_SD_EEEEvEEFvvEPSI_EEEEEE:
	.ascii "NSt6thread11_State_implINS_8_InvokerISt5tupleIJMNSt13__future_base17_Async_state_implINS1_IS2_IJPFvibPK7BoidMapPK5RulesPK8BoidListEibS7_SA_SD_EEEEvEEFvvEPSI_EEEEEE\0"
	.globl	_ZTINSt6thread11_State_implINS_8_InvokerISt5tupleIJMNSt13__future_base17_Async_state_implINS1_IS2_IJPFvibPK7BoidMapPK5RulesPK8BoidListEibS7_SA_SD_EEEEvEEFvvEPSI_EEEEEE
	.section	.rdata$_ZTINSt6thread11_State_implINS_8_InvokerISt5tupleIJMNSt13__future_base17_Async_state_implINS1_IS2_IJPFvibPK7BoidMapPK5RulesPK8BoidListEibS7_SA_SD_EEEEvEEFvvEPSI_EEEEEE,"dr"
	.linkonce same_size
	.align 8
_ZTINSt6thread11_State_implINS_8_InvokerISt5tupleIJMNSt13__future_base17_Async_state_implINS1_IS2_IJPFvibPK7BoidMapPK5RulesPK8BoidListEibS7_SA_SD_EEEEvEEFvvEPSI_EEEEEE:
 # <anonymous>:
 # <anonymous>:
	.quad	_ZTVN10__cxxabiv120__si_class_type_infoE+16
 # <anonymous>:
	.quad	_ZTSNSt6thread11_State_implINS_8_InvokerISt5tupleIJMNSt13__future_base17_Async_state_implINS1_IS2_IJPFvibPK7BoidMapPK5RulesPK8BoidListEibS7_SA_SD_EEEEvEEFvvEPSI_EEEEEE
 # <anonymous>:
	.quad	_ZTINSt6thread6_StateE
	.globl	_ZTSNSt13__future_base12_Task_setterISt10unique_ptrINS_7_ResultIvEENS_12_Result_base8_DeleterEENSt6thread8_InvokerISt5tupleIJPFviPK8BoidListPK7BoidMapEiPSA_PSD_EEEEvEE
	.section	.rdata$_ZTSNSt13__future_base12_Task_setterISt10unique_ptrINS_7_ResultIvEENS_12_Result_base8_DeleterEENSt6thread8_InvokerISt5tupleIJPFviPK8BoidListPK7BoidMapEiPSA_PSD_EEEEvEE,"dr"
	.linkonce same_size
	.align 32
_ZTSNSt13__future_base12_Task_setterISt10unique_ptrINS_7_ResultIvEENS_12_Result_base8_DeleterEENSt6thread8_InvokerISt5tupleIJPFviPK8BoidListPK7BoidMapEiPSA_PSD_EEEEvEE:
	.ascii "NSt13__future_base12_Task_setterISt10unique_ptrINS_7_ResultIvEENS_12_Result_base8_DeleterEENSt6thread8_InvokerISt5tupleIJPFviPK8BoidListPK7BoidMapEiPSA_PSD_EEEEvEE\0"
	.globl	_ZTINSt13__future_base12_Task_setterISt10unique_ptrINS_7_ResultIvEENS_12_Result_base8_DeleterEENSt6thread8_InvokerISt5tupleIJPFviPK8BoidListPK7BoidMapEiPSA_PSD_EEEEvEE
	.section	.rdata$_ZTINSt13__future_base12_Task_setterISt10unique_ptrINS_7_ResultIvEENS_12_Result_base8_DeleterEENSt6thread8_InvokerISt5tupleIJPFviPK8BoidListPK7BoidMapEiPSA_PSD_EEEEvEE,"dr"
	.linkonce same_size
	.align 8
_ZTINSt13__future_base12_Task_setterISt10unique_ptrINS_7_ResultIvEENS_12_Result_base8_DeleterEENSt6thread8_InvokerISt5tupleIJPFviPK8BoidListPK7BoidMapEiPSA_PSD_EEEEvEE:
 # <anonymous>:
 # <anonymous>:
	.quad	_ZTVN10__cxxabiv117__class_type_infoE+16
 # <anonymous>:
	.quad	_ZTSNSt13__future_base12_Task_setterISt10unique_ptrINS_7_ResultIvEENS_12_Result_base8_DeleterEENSt6thread8_InvokerISt5tupleIJPFviPK8BoidListPK7BoidMapEiPSA_PSD_EEEEvEE
	.globl	_ZTSNSt13__future_base12_Task_setterISt10unique_ptrINS_7_ResultIvEENS_12_Result_base8_DeleterEENSt6thread8_InvokerISt5tupleIJPFvibPK7BoidMapPK5RulesPK8BoidListEibSC_SF_SI_EEEEvEE
	.section	.rdata$_ZTSNSt13__future_base12_Task_setterISt10unique_ptrINS_7_ResultIvEENS_12_Result_base8_DeleterEENSt6thread8_InvokerISt5tupleIJPFvibPK7BoidMapPK5RulesPK8BoidListEibSC_SF_SI_EEEEvEE,"dr"
	.linkonce same_size
	.align 32
_ZTSNSt13__future_base12_Task_setterISt10unique_ptrINS_7_ResultIvEENS_12_Result_base8_DeleterEENSt6thread8_InvokerISt5tupleIJPFvibPK7BoidMapPK5RulesPK8BoidListEibSC_SF_SI_EEEEvEE:
	.ascii "NSt13__future_base12_Task_setterISt10unique_ptrINS_7_ResultIvEENS_12_Result_base8_DeleterEENSt6thread8_InvokerISt5tupleIJPFvibPK7BoidMapPK5RulesPK8BoidListEibSC_SF_SI_EEEEvEE\0"
	.globl	_ZTINSt13__future_base12_Task_setterISt10unique_ptrINS_7_ResultIvEENS_12_Result_base8_DeleterEENSt6thread8_InvokerISt5tupleIJPFvibPK7BoidMapPK5RulesPK8BoidListEibSC_SF_SI_EEEEvEE
	.section	.rdata$_ZTINSt13__future_base12_Task_setterISt10unique_ptrINS_7_ResultIvEENS_12_Result_base8_DeleterEENSt6thread8_InvokerISt5tupleIJPFvibPK7BoidMapPK5RulesPK8BoidListEibSC_SF_SI_EEEEvEE,"dr"
	.linkonce same_size
	.align 8
_ZTINSt13__future_base12_Task_setterISt10unique_ptrINS_7_ResultIvEENS_12_Result_base8_DeleterEENSt6thread8_InvokerISt5tupleIJPFvibPK7BoidMapPK5RulesPK8BoidListEibSC_SF_SI_EEEEvEE:
 # <anonymous>:
 # <anonymous>:
	.quad	_ZTVN10__cxxabiv117__class_type_infoE+16
 # <anonymous>:
	.quad	_ZTSNSt13__future_base12_Task_setterISt10unique_ptrINS_7_ResultIvEENS_12_Result_base8_DeleterEENSt6thread8_InvokerISt5tupleIJPFvibPK7BoidMapPK5RulesPK8BoidListEibSC_SF_SI_EEEEvEE
	.globl	_ZTVNSt13__future_base13_State_baseV2E
	.section	.rdata$_ZTVNSt13__future_base13_State_baseV2E,"dr"
	.linkonce same_size
	.align 8
_ZTVNSt13__future_base13_State_baseV2E:
	.quad	0
	.quad	_ZTINSt13__future_base13_State_baseV2E
	.quad	_ZNSt13__future_base13_State_baseV2D1Ev
	.quad	_ZNSt13__future_base13_State_baseV2D0Ev
	.quad	_ZNSt13__future_base13_State_baseV217_M_complete_asyncEv
	.quad	_ZNKSt13__future_base13_State_baseV221_M_is_deferred_futureEv
	.globl	_ZTVNSt13__future_base7_ResultIvEE
	.section	.rdata$_ZTVNSt13__future_base7_ResultIvEE,"dr"
	.linkonce same_size
	.align 8
_ZTVNSt13__future_base7_ResultIvEE:
	.quad	0
	.quad	_ZTINSt13__future_base7_ResultIvEE
	.quad	_ZNSt13__future_base7_ResultIvE10_M_destroyEv
	.quad	_ZNSt13__future_base7_ResultIvED1Ev
	.quad	_ZNSt13__future_base7_ResultIvED0Ev
	.globl	_ZTVNSt13__future_base21_Async_state_commonV2E
	.section	.rdata$_ZTVNSt13__future_base21_Async_state_commonV2E,"dr"
	.linkonce same_size
	.align 8
_ZTVNSt13__future_base21_Async_state_commonV2E:
	.quad	0
	.quad	_ZTINSt13__future_base21_Async_state_commonV2E
	.quad	_ZNSt13__future_base21_Async_state_commonV2D1Ev
	.quad	_ZNSt13__future_base21_Async_state_commonV2D0Ev
	.quad	_ZNSt13__future_base21_Async_state_commonV217_M_complete_asyncEv
	.quad	_ZNKSt13__future_base13_State_baseV221_M_is_deferred_futureEv
	.globl	_ZTVNSt6thread11_State_implINS_8_InvokerISt5tupleIJPFvP10TaskMasterhES4_iEEEEEE
	.section	.rdata$_ZTVNSt6thread11_State_implINS_8_InvokerISt5tupleIJPFvP10TaskMasterhES4_iEEEEEE,"dr"
	.linkonce same_size
	.align 8
_ZTVNSt6thread11_State_implINS_8_InvokerISt5tupleIJPFvP10TaskMasterhES4_iEEEEEE:
	.quad	0
	.quad	_ZTINSt6thread11_State_implINS_8_InvokerISt5tupleIJPFvP10TaskMasterhES4_iEEEEEE
	.quad	_ZNSt6thread11_State_implINS_8_InvokerISt5tupleIJPFvP10TaskMasterhES4_iEEEEED1Ev
	.quad	_ZNSt6thread11_State_implINS_8_InvokerISt5tupleIJPFvP10TaskMasterhES4_iEEEEED0Ev
	.quad	_ZNSt6thread11_State_implINS_8_InvokerISt5tupleIJPFvP10TaskMasterhES4_iEEEEE6_M_runEv
	.globl	_ZTVNSt6thread11_State_implINS_8_InvokerISt5tupleIJPFviPKiPK8BoidListPK7BoidMapEiPiPS5_SA_EEEEEE
	.section	.rdata$_ZTVNSt6thread11_State_implINS_8_InvokerISt5tupleIJPFviPKiPK8BoidListPK7BoidMapEiPiPS5_SA_EEEEEE,"dr"
	.linkonce same_size
	.align 8
_ZTVNSt6thread11_State_implINS_8_InvokerISt5tupleIJPFviPKiPK8BoidListPK7BoidMapEiPiPS5_SA_EEEEEE:
	.quad	0
	.quad	_ZTINSt6thread11_State_implINS_8_InvokerISt5tupleIJPFviPKiPK8BoidListPK7BoidMapEiPiPS5_SA_EEEEEE
	.quad	_ZNSt6thread11_State_implINS_8_InvokerISt5tupleIJPFviPKiPK8BoidListPK7BoidMapEiPiPS5_SA_EEEEED1Ev
	.quad	_ZNSt6thread11_State_implINS_8_InvokerISt5tupleIJPFviPKiPK8BoidListPK7BoidMapEiPiPS5_SA_EEEEED0Ev
	.quad	_ZNSt6thread11_State_implINS_8_InvokerISt5tupleIJPFviPKiPK8BoidListPK7BoidMapEiPiPS5_SA_EEEEE6_M_runEv
	.globl	_ZTVNSt13__future_base17_Async_state_implINSt6thread8_InvokerISt5tupleIJPFviPK8BoidListPK7BoidMapEiPS4_PS7_EEEEvEE
	.section	.rdata$_ZTVNSt13__future_base17_Async_state_implINSt6thread8_InvokerISt5tupleIJPFviPK8BoidListPK7BoidMapEiPS4_PS7_EEEEvEE,"dr"
	.linkonce same_size
	.align 8
_ZTVNSt13__future_base17_Async_state_implINSt6thread8_InvokerISt5tupleIJPFviPK8BoidListPK7BoidMapEiPS4_PS7_EEEEvEE:
	.quad	0
	.quad	_ZTINSt13__future_base17_Async_state_implINSt6thread8_InvokerISt5tupleIJPFviPK8BoidListPK7BoidMapEiPS4_PS7_EEEEvEE
	.quad	_ZNSt13__future_base17_Async_state_implINSt6thread8_InvokerISt5tupleIJPFviPK8BoidListPK7BoidMapEiPS4_PS7_EEEEvED1Ev
	.quad	_ZNSt13__future_base17_Async_state_implINSt6thread8_InvokerISt5tupleIJPFviPK8BoidListPK7BoidMapEiPS4_PS7_EEEEvED0Ev
	.quad	_ZNSt13__future_base21_Async_state_commonV217_M_complete_asyncEv
	.quad	_ZNKSt13__future_base13_State_baseV221_M_is_deferred_futureEv
	.globl	_ZTVNSt13__future_base15_Deferred_stateINSt6thread8_InvokerISt5tupleIJPFviPK8BoidListPK7BoidMapEiPS4_PS7_EEEEvEE
	.section	.rdata$_ZTVNSt13__future_base15_Deferred_stateINSt6thread8_InvokerISt5tupleIJPFviPK8BoidListPK7BoidMapEiPS4_PS7_EEEEvEE,"dr"
	.linkonce same_size
	.align 8
_ZTVNSt13__future_base15_Deferred_stateINSt6thread8_InvokerISt5tupleIJPFviPK8BoidListPK7BoidMapEiPS4_PS7_EEEEvEE:
	.quad	0
	.quad	_ZTINSt13__future_base15_Deferred_stateINSt6thread8_InvokerISt5tupleIJPFviPK8BoidListPK7BoidMapEiPS4_PS7_EEEEvEE
	.quad	_ZNSt13__future_base15_Deferred_stateINSt6thread8_InvokerISt5tupleIJPFviPK8BoidListPK7BoidMapEiPS4_PS7_EEEEvED1Ev
	.quad	_ZNSt13__future_base15_Deferred_stateINSt6thread8_InvokerISt5tupleIJPFviPK8BoidListPK7BoidMapEiPS4_PS7_EEEEvED0Ev
	.quad	_ZNSt13__future_base15_Deferred_stateINSt6thread8_InvokerISt5tupleIJPFviPK8BoidListPK7BoidMapEiPS4_PS7_EEEEvE17_M_complete_asyncEv
	.quad	_ZNKSt13__future_base15_Deferred_stateINSt6thread8_InvokerISt5tupleIJPFviPK8BoidListPK7BoidMapEiPS4_PS7_EEEEvE21_M_is_deferred_futureEv
	.globl	_ZTVNSt13__future_base17_Async_state_implINSt6thread8_InvokerISt5tupleIJPFvibPK7BoidMapPK5RulesPK8BoidListEibS6_S9_SC_EEEEvEE
	.section	.rdata$_ZTVNSt13__future_base17_Async_state_implINSt6thread8_InvokerISt5tupleIJPFvibPK7BoidMapPK5RulesPK8BoidListEibS6_S9_SC_EEEEvEE,"dr"
	.linkonce same_size
	.align 8
_ZTVNSt13__future_base17_Async_state_implINSt6thread8_InvokerISt5tupleIJPFvibPK7BoidMapPK5RulesPK8BoidListEibS6_S9_SC_EEEEvEE:
	.quad	0
	.quad	_ZTINSt13__future_base17_Async_state_implINSt6thread8_InvokerISt5tupleIJPFvibPK7BoidMapPK5RulesPK8BoidListEibS6_S9_SC_EEEEvEE
	.quad	_ZNSt13__future_base17_Async_state_implINSt6thread8_InvokerISt5tupleIJPFvibPK7BoidMapPK5RulesPK8BoidListEibS6_S9_SC_EEEEvED1Ev
	.quad	_ZNSt13__future_base17_Async_state_implINSt6thread8_InvokerISt5tupleIJPFvibPK7BoidMapPK5RulesPK8BoidListEibS6_S9_SC_EEEEvED0Ev
	.quad	_ZNSt13__future_base21_Async_state_commonV217_M_complete_asyncEv
	.quad	_ZNKSt13__future_base13_State_baseV221_M_is_deferred_futureEv
	.globl	_ZTVNSt13__future_base15_Deferred_stateINSt6thread8_InvokerISt5tupleIJPFvibPK7BoidMapPK5RulesPK8BoidListEibS6_S9_SC_EEEEvEE
	.section	.rdata$_ZTVNSt13__future_base15_Deferred_stateINSt6thread8_InvokerISt5tupleIJPFvibPK7BoidMapPK5RulesPK8BoidListEibS6_S9_SC_EEEEvEE,"dr"
	.linkonce same_size
	.align 8
_ZTVNSt13__future_base15_Deferred_stateINSt6thread8_InvokerISt5tupleIJPFvibPK7BoidMapPK5RulesPK8BoidListEibS6_S9_SC_EEEEvEE:
	.quad	0
	.quad	_ZTINSt13__future_base15_Deferred_stateINSt6thread8_InvokerISt5tupleIJPFvibPK7BoidMapPK5RulesPK8BoidListEibS6_S9_SC_EEEEvEE
	.quad	_ZNSt13__future_base15_Deferred_stateINSt6thread8_InvokerISt5tupleIJPFvibPK7BoidMapPK5RulesPK8BoidListEibS6_S9_SC_EEEEvED1Ev
	.quad	_ZNSt13__future_base15_Deferred_stateINSt6thread8_InvokerISt5tupleIJPFvibPK7BoidMapPK5RulesPK8BoidListEibS6_S9_SC_EEEEvED0Ev
	.quad	_ZNSt13__future_base15_Deferred_stateINSt6thread8_InvokerISt5tupleIJPFvibPK7BoidMapPK5RulesPK8BoidListEibS6_S9_SC_EEEEvE17_M_complete_asyncEv
	.quad	_ZNKSt13__future_base15_Deferred_stateINSt6thread8_InvokerISt5tupleIJPFvibPK7BoidMapPK5RulesPK8BoidListEibS6_S9_SC_EEEEvE21_M_is_deferred_futureEv
	.globl	_ZTVSt23_Sp_counted_ptr_inplaceINSt13__future_base17_Async_state_implINSt6thread8_InvokerISt5tupleIJPFviPK8BoidListPK7BoidMapEiPS5_PS8_EEEEvEESaIvELN9__gnu_cxx12_Lock_policyE2EE
	.section	.rdata$_ZTVSt23_Sp_counted_ptr_inplaceINSt13__future_base17_Async_state_implINSt6thread8_InvokerISt5tupleIJPFviPK8BoidListPK7BoidMapEiPS5_PS8_EEEEvEESaIvELN9__gnu_cxx12_Lock_policyE2EE,"dr"
	.linkonce same_size
	.align 8
_ZTVSt23_Sp_counted_ptr_inplaceINSt13__future_base17_Async_state_implINSt6thread8_InvokerISt5tupleIJPFviPK8BoidListPK7BoidMapEiPS5_PS8_EEEEvEESaIvELN9__gnu_cxx12_Lock_policyE2EE:
	.quad	0
	.quad	_ZTISt23_Sp_counted_ptr_inplaceINSt13__future_base17_Async_state_implINSt6thread8_InvokerISt5tupleIJPFviPK8BoidListPK7BoidMapEiPS5_PS8_EEEEvEESaIvELN9__gnu_cxx12_Lock_policyE2EE
	.quad	_ZNSt23_Sp_counted_ptr_inplaceINSt13__future_base17_Async_state_implINSt6thread8_InvokerISt5tupleIJPFviPK8BoidListPK7BoidMapEiPS5_PS8_EEEEvEESaIvELN9__gnu_cxx12_Lock_policyE2EED1Ev
	.quad	_ZNSt23_Sp_counted_ptr_inplaceINSt13__future_base17_Async_state_implINSt6thread8_InvokerISt5tupleIJPFviPK8BoidListPK7BoidMapEiPS5_PS8_EEEEvEESaIvELN9__gnu_cxx12_Lock_policyE2EED0Ev
	.quad	_ZNSt23_Sp_counted_ptr_inplaceINSt13__future_base17_Async_state_implINSt6thread8_InvokerISt5tupleIJPFviPK8BoidListPK7BoidMapEiPS5_PS8_EEEEvEESaIvELN9__gnu_cxx12_Lock_policyE2EE10_M_disposeEv
	.quad	_ZNSt23_Sp_counted_ptr_inplaceINSt13__future_base17_Async_state_implINSt6thread8_InvokerISt5tupleIJPFviPK8BoidListPK7BoidMapEiPS5_PS8_EEEEvEESaIvELN9__gnu_cxx12_Lock_policyE2EE10_M_destroyEv
	.quad	_ZNSt23_Sp_counted_ptr_inplaceINSt13__future_base17_Async_state_implINSt6thread8_InvokerISt5tupleIJPFviPK8BoidListPK7BoidMapEiPS5_PS8_EEEEvEESaIvELN9__gnu_cxx12_Lock_policyE2EE14_M_get_deleterERKSt9type_info
	.globl	_ZTVSt23_Sp_counted_ptr_inplaceINSt13__future_base15_Deferred_stateINSt6thread8_InvokerISt5tupleIJPFviPK8BoidListPK7BoidMapEiPS5_PS8_EEEEvEESaIvELN9__gnu_cxx12_Lock_policyE2EE
	.section	.rdata$_ZTVSt23_Sp_counted_ptr_inplaceINSt13__future_base15_Deferred_stateINSt6thread8_InvokerISt5tupleIJPFviPK8BoidListPK7BoidMapEiPS5_PS8_EEEEvEESaIvELN9__gnu_cxx12_Lock_policyE2EE,"dr"
	.linkonce same_size
	.align 8
_ZTVSt23_Sp_counted_ptr_inplaceINSt13__future_base15_Deferred_stateINSt6thread8_InvokerISt5tupleIJPFviPK8BoidListPK7BoidMapEiPS5_PS8_EEEEvEESaIvELN9__gnu_cxx12_Lock_policyE2EE:
	.quad	0
	.quad	_ZTISt23_Sp_counted_ptr_inplaceINSt13__future_base15_Deferred_stateINSt6thread8_InvokerISt5tupleIJPFviPK8BoidListPK7BoidMapEiPS5_PS8_EEEEvEESaIvELN9__gnu_cxx12_Lock_policyE2EE
	.quad	_ZNSt23_Sp_counted_ptr_inplaceINSt13__future_base15_Deferred_stateINSt6thread8_InvokerISt5tupleIJPFviPK8BoidListPK7BoidMapEiPS5_PS8_EEEEvEESaIvELN9__gnu_cxx12_Lock_policyE2EED1Ev
	.quad	_ZNSt23_Sp_counted_ptr_inplaceINSt13__future_base15_Deferred_stateINSt6thread8_InvokerISt5tupleIJPFviPK8BoidListPK7BoidMapEiPS5_PS8_EEEEvEESaIvELN9__gnu_cxx12_Lock_policyE2EED0Ev
	.quad	_ZNSt23_Sp_counted_ptr_inplaceINSt13__future_base15_Deferred_stateINSt6thread8_InvokerISt5tupleIJPFviPK8BoidListPK7BoidMapEiPS5_PS8_EEEEvEESaIvELN9__gnu_cxx12_Lock_policyE2EE10_M_disposeEv
	.quad	_ZNSt23_Sp_counted_ptr_inplaceINSt13__future_base15_Deferred_stateINSt6thread8_InvokerISt5tupleIJPFviPK8BoidListPK7BoidMapEiPS5_PS8_EEEEvEESaIvELN9__gnu_cxx12_Lock_policyE2EE10_M_destroyEv
	.quad	_ZNSt23_Sp_counted_ptr_inplaceINSt13__future_base15_Deferred_stateINSt6thread8_InvokerISt5tupleIJPFviPK8BoidListPK7BoidMapEiPS5_PS8_EEEEvEESaIvELN9__gnu_cxx12_Lock_policyE2EE14_M_get_deleterERKSt9type_info
	.globl	_ZTVSt23_Sp_counted_ptr_inplaceINSt13__future_base17_Async_state_implINSt6thread8_InvokerISt5tupleIJPFvibPK7BoidMapPK5RulesPK8BoidListEibS7_SA_SD_EEEEvEESaIvELN9__gnu_cxx12_Lock_policyE2EE
	.section	.rdata$_ZTVSt23_Sp_counted_ptr_inplaceINSt13__future_base17_Async_state_implINSt6thread8_InvokerISt5tupleIJPFvibPK7BoidMapPK5RulesPK8BoidListEibS7_SA_SD_EEEEvEESaIvELN9__gnu_cxx12_Lock_policyE2EE,"dr"
	.linkonce same_size
	.align 8
_ZTVSt23_Sp_counted_ptr_inplaceINSt13__future_base17_Async_state_implINSt6thread8_InvokerISt5tupleIJPFvibPK7BoidMapPK5RulesPK8BoidListEibS7_SA_SD_EEEEvEESaIvELN9__gnu_cxx12_Lock_policyE2EE:
	.quad	0
	.quad	_ZTISt23_Sp_counted_ptr_inplaceINSt13__future_base17_Async_state_implINSt6thread8_InvokerISt5tupleIJPFvibPK7BoidMapPK5RulesPK8BoidListEibS7_SA_SD_EEEEvEESaIvELN9__gnu_cxx12_Lock_policyE2EE
	.quad	_ZNSt23_Sp_counted_ptr_inplaceINSt13__future_base17_Async_state_implINSt6thread8_InvokerISt5tupleIJPFvibPK7BoidMapPK5RulesPK8BoidListEibS7_SA_SD_EEEEvEESaIvELN9__gnu_cxx12_Lock_policyE2EED1Ev
	.quad	_ZNSt23_Sp_counted_ptr_inplaceINSt13__future_base17_Async_state_implINSt6thread8_InvokerISt5tupleIJPFvibPK7BoidMapPK5RulesPK8BoidListEibS7_SA_SD_EEEEvEESaIvELN9__gnu_cxx12_Lock_policyE2EED0Ev
	.quad	_ZNSt23_Sp_counted_ptr_inplaceINSt13__future_base17_Async_state_implINSt6thread8_InvokerISt5tupleIJPFvibPK7BoidMapPK5RulesPK8BoidListEibS7_SA_SD_EEEEvEESaIvELN9__gnu_cxx12_Lock_policyE2EE10_M_disposeEv
	.quad	_ZNSt23_Sp_counted_ptr_inplaceINSt13__future_base17_Async_state_implINSt6thread8_InvokerISt5tupleIJPFvibPK7BoidMapPK5RulesPK8BoidListEibS7_SA_SD_EEEEvEESaIvELN9__gnu_cxx12_Lock_policyE2EE10_M_destroyEv
	.quad	_ZNSt23_Sp_counted_ptr_inplaceINSt13__future_base17_Async_state_implINSt6thread8_InvokerISt5tupleIJPFvibPK7BoidMapPK5RulesPK8BoidListEibS7_SA_SD_EEEEvEESaIvELN9__gnu_cxx12_Lock_policyE2EE14_M_get_deleterERKSt9type_info
	.globl	_ZTVNSt6thread11_State_implINS_8_InvokerISt5tupleIJMNSt13__future_base17_Async_state_implINS1_IS2_IJPFviPK8BoidListPK7BoidMapEiPS5_PS8_EEEEvEEFvvEPSH_EEEEEE
	.section	.rdata$_ZTVNSt6thread11_State_implINS_8_InvokerISt5tupleIJMNSt13__future_base17_Async_state_implINS1_IS2_IJPFviPK8BoidListPK7BoidMapEiPS5_PS8_EEEEvEEFvvEPSH_EEEEEE,"dr"
	.linkonce same_size
	.align 8
_ZTVNSt6thread11_State_implINS_8_InvokerISt5tupleIJMNSt13__future_base17_Async_state_implINS1_IS2_IJPFviPK8BoidListPK7BoidMapEiPS5_PS8_EEEEvEEFvvEPSH_EEEEEE:
	.quad	0
	.quad	_ZTINSt6thread11_State_implINS_8_InvokerISt5tupleIJMNSt13__future_base17_Async_state_implINS1_IS2_IJPFviPK8BoidListPK7BoidMapEiPS5_PS8_EEEEvEEFvvEPSH_EEEEEE
	.quad	_ZNSt6thread11_State_implINS_8_InvokerISt5tupleIJMNSt13__future_base17_Async_state_implINS1_IS2_IJPFviPK8BoidListPK7BoidMapEiPS5_PS8_EEEEvEEFvvEPSH_EEEEED1Ev
	.quad	_ZNSt6thread11_State_implINS_8_InvokerISt5tupleIJMNSt13__future_base17_Async_state_implINS1_IS2_IJPFviPK8BoidListPK7BoidMapEiPS5_PS8_EEEEvEEFvvEPSH_EEEEED0Ev
	.quad	_ZNSt6thread11_State_implINS_8_InvokerISt5tupleIJMNSt13__future_base17_Async_state_implINS1_IS2_IJPFviPK8BoidListPK7BoidMapEiPS5_PS8_EEEEvEEFvvEPSH_EEEEE6_M_runEv
	.globl	_ZTVNSt6thread11_State_implINS_8_InvokerISt5tupleIJMNSt13__future_base17_Async_state_implINS1_IS2_IJPFvibPK7BoidMapPK5RulesPK8BoidListEibS7_SA_SD_EEEEvEEFvvEPSI_EEEEEE
	.section	.rdata$_ZTVNSt6thread11_State_implINS_8_InvokerISt5tupleIJMNSt13__future_base17_Async_state_implINS1_IS2_IJPFvibPK7BoidMapPK5RulesPK8BoidListEibS7_SA_SD_EEEEvEEFvvEPSI_EEEEEE,"dr"
	.linkonce same_size
	.align 8
_ZTVNSt6thread11_State_implINS_8_InvokerISt5tupleIJMNSt13__future_base17_Async_state_implINS1_IS2_IJPFvibPK7BoidMapPK5RulesPK8BoidListEibS7_SA_SD_EEEEvEEFvvEPSI_EEEEEE:
	.quad	0
	.quad	_ZTINSt6thread11_State_implINS_8_InvokerISt5tupleIJMNSt13__future_base17_Async_state_implINS1_IS2_IJPFvibPK7BoidMapPK5RulesPK8BoidListEibS7_SA_SD_EEEEvEEFvvEPSI_EEEEEE
	.quad	_ZNSt6thread11_State_implINS_8_InvokerISt5tupleIJMNSt13__future_base17_Async_state_implINS1_IS2_IJPFvibPK7BoidMapPK5RulesPK8BoidListEibS7_SA_SD_EEEEvEEFvvEPSI_EEEEED1Ev
	.quad	_ZNSt6thread11_State_implINS_8_InvokerISt5tupleIJMNSt13__future_base17_Async_state_implINS1_IS2_IJPFvibPK7BoidMapPK5RulesPK8BoidListEibS7_SA_SD_EEEEvEEFvvEPSI_EEEEED0Ev
	.quad	_ZNSt6thread11_State_implINS_8_InvokerISt5tupleIJMNSt13__future_base17_Async_state_implINS1_IS2_IJPFvibPK7BoidMapPK5RulesPK8BoidListEibS7_SA_SD_EEEEvEEFvvEPSI_EEEEE6_M_runEv
.lcomm _ZL11num_threads,4,4
	.globl	myfile
	.bss
	.align 32
myfile:
	.space 480
	.globl	_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag
	.section	.rdata$_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag,"dr"
	.linkonce same_size
	.align 8
_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag:
	.space 16
	.section .rdata,"dr"
	.align 32
.LC3:
	.long	1065353216
	.long	1065353216
	.long	1065353216
	.long	1065353216
	.long	1065353216
	.long	1065353216
	.long	1065353216
	.long	1065353216
	.set	.LC4,.LC3
	.align 32
.LC5:
	.long	1
	.long	2
	.long	3
	.long	4
	.long	5
	.long	6
	.long	7
	.long	0
	.align 32
.LC6:
	.long	1082130432
	.long	1082130432
	.long	1082130432
	.long	1082130432
	.long	1082130432
	.long	1082130432
	.long	1082130432
	.long	1082130432
	.set	.LC7,.LC6
	.align 32
.LC8:
	.long	1051372203
	.long	1051372203
	.long	1051372203
	.long	1051372203
	.long	1051372203
	.long	1051372203
	.long	1051372203
	.long	1051372203
	.set	.LC9,.LC8
	.align 32
.LC10:
	.long	1048576000
	.long	1048576000
	.long	1048576000
	.long	1048576000
	.long	1048576000
	.long	1048576000
	.long	1048576000
	.long	1048576000
	.set	.LC11,.LC10
	.align 32
.LC12:
	.long	2139095039
	.long	2139095039
	.long	2139095039
	.long	2139095039
	.long	2139095039
	.long	2139095039
	.long	2139095039
	.long	2139095039
	.set	.LC13,.LC12
	.align 32
.LC14:
	.long	1077936128
	.long	1077936128
	.long	1077936128
	.long	1077936128
	.long	1077936128
	.long	1077936128
	.long	1077936128
	.long	1077936128
	.set	.LC15,.LC14
	.align 32
.LC17:
	.long	0
	.long	4
	.long	1
	.long	5
	.long	2
	.long	6
	.long	3
	.long	7
	.align 4
.LC22:
	.long	1132396544
	.align 8
.LC23:
	.long	1
	.long	1
	.align 4
.LC24:
	.long	1065353215
	.align 32
.LC25:
	.long	0
	.long	1
	.long	2
	.long	3
	.long	4
	.long	5
	.long	6
	.long	7
	.align 8
.LC31:
	.long	3
	.long	1
	.align 32
.LC32:
	.long	-1063256064
	.long	0
	.long	-1054867456
	.long	0
	.long	0
	.long	1092616192
	.long	1084227584
	.long	0
	.align 16
.LC46:
	.long	1148846080
	.long	850119799
	.long	1120403456
	.long	1176256512
	.align 8
.LC47:
	.long	1028443341
	.long	973279855
	.set	.LC48,.LC25+8
	.align 8
.LC50:
	.long	0
	.long	1084358656
	.align 4
.LC52:
	.long	1056964608
	.align 4
.LC53:
	.long	805306368
	.align 32
.LC57:
	.long	0
	.long	0
	.long	2
	.long	3
	.long	4
	.long	5
	.long	6
	.long	7
	.align 32
.LC58:
	.long	0
	.long	2
	.long	2
	.long	3
	.long	4
	.long	5
	.long	6
	.long	7
	.align 32
.LC59:
	.long	0
	.long	3
	.long	2
	.long	3
	.long	4
	.long	5
	.long	6
	.long	7
	.align 32
.LC60:
	.long	4
	.long	1
	.long	2
	.long	3
	.long	0
	.long	5
	.long	6
	.long	7
	.align 32
.LC61:
	.long	0
	.long	4
	.long	2
	.long	3
	.long	4
	.long	5
	.long	6
	.long	7
	.align 32
.LC62:
	.long	5
	.long	1
	.long	2
	.long	3
	.long	1
	.long	5
	.long	6
	.long	7
	.align 32
.LC63:
	.long	0
	.long	5
	.long	2
	.long	3
	.long	4
	.long	5
	.long	6
	.long	7
	.align 32
.LC64:
	.long	6
	.long	1
	.long	2
	.long	3
	.long	2
	.long	5
	.long	6
	.long	7
	.align 32
.LC65:
	.long	0
	.long	6
	.long	2
	.long	3
	.long	4
	.long	5
	.long	6
	.long	7
	.align 32
.LC66:
	.long	7
	.long	1
	.long	2
	.long	3
	.long	3
	.long	5
	.long	6
	.long	7
	.align 32
.LC67:
	.long	0
	.long	7
	.long	2
	.long	3
	.long	4
	.long	5
	.long	6
	.long	7
	.align 4
.LC68:
	.long	1128792064
	.align 4
.LC69:
	.long	-1082130432
	.align 4
.LC70:
	.long	1040187392
	.align 8
.LC71:
	.long	0
	.long	1072693248
	.align 8
.LC72:
	.long	0
	.long	1093567616
	.data
	.align 8
.LDFCM0:
	.quad	_ZTIN10__cxxabiv115__forced_unwindE
	.align 8
.LDFCM1:
	.quad	_ZTISt12system_error
	.ident	"GCC: (Rev6, Built by MSYS2 project) 13.1.0"
	.def	_ZdlPvy;	.scl	2;	.type	32;	.endef
	.def	_ZNSt6thread6_StateD2Ev;	.scl	2;	.type	32;	.endef
	.def	_ZNKSt9type_infoeqERKS_;	.scl	2;	.type	32;	.endef
	.def	_ZNSt13__future_base12_Result_baseD2Ev;	.scl	2;	.type	32;	.endef
	.def	__cxa_begin_catch;	.scl	2;	.type	32;	.endef
	.def	__cxa_rethrow;	.scl	2;	.type	32;	.endef
	.def	_ZSt17current_exceptionv;	.scl	2;	.type	32;	.endef
	.def	_ZNSt15__exception_ptr13exception_ptr10_M_releaseEv;	.scl	2;	.type	32;	.endef
	.def	__cxa_end_catch;	.scl	2;	.type	32;	.endef
	.def	_Unwind_Resume;	.scl	2;	.type	32;	.endef
	.def	__emutls_get_address;	.scl	2;	.type	32;	.endef
	.def	pthread_once;	.scl	2;	.type	32;	.endef
	.def	_ZSt20__throw_system_errori;	.scl	2;	.type	32;	.endef
	.def	_ZNSt18condition_variableD1Ev;	.scl	2;	.type	32;	.endef
	.def	pthread_mutex_destroy;	.scl	2;	.type	32;	.endef
	.def	_ZSt25__throw_bad_function_callv;	.scl	2;	.type	32;	.endef
	.def	_ZNSt13basic_filebufIcSt11char_traitsIcEE5closeEv;	.scl	2;	.type	32;	.endef
	.def	_ZNSt12__basic_fileIcED1Ev;	.scl	2;	.type	32;	.endef
	.def	_ZNSt6localeD1Ev;	.scl	2;	.type	32;	.endef
	.def	_ZNSt8ios_baseD2Ev;	.scl	2;	.type	32;	.endef
	.def	_ZNK7BoidMap19get_map_pos_nearestEii;	.scl	2;	.type	32;	.endef
	.def	_ZSt9terminatev;	.scl	2;	.type	32;	.endef
	.def	_ZNK7BoidMap9get_coordEii;	.scl	2;	.type	32;	.endef
	.def	_ZNSt6thread4joinEv;	.scl	2;	.type	32;	.endef
	.def	pthread_mutex_lock;	.scl	2;	.type	32;	.endef
	.def	_ZNSt18condition_variable10notify_allEv;	.scl	2;	.type	32;	.endef
	.def	pthread_mutex_unlock;	.scl	2;	.type	32;	.endef
	.def	_ZSt15future_categoryv;	.scl	2;	.type	32;	.endef
	.def	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEyyPKcy;	.scl	2;	.type	32;	.endef
	.def	_ZNSt11logic_errorC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE;	.scl	2;	.type	32;	.endef
	.def	__cxa_allocate_exception;	.scl	2;	.type	32;	.endef
	.def	__cxa_init_primary_exception;	.scl	2;	.type	32;	.endef
	.def	_ZNSt11logic_errorC2ERKS_;	.scl	2;	.type	32;	.endef
	.def	_ZNSt15__exception_ptr13exception_ptrC1EPv;	.scl	2;	.type	32;	.endef
	.def	_ZNSt12future_errorD1Ev;	.scl	2;	.type	32;	.endef
	.def	_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv;	.scl	2;	.type	32;	.endef
	.def	_ZSt20__throw_future_errori;	.scl	2;	.type	32;	.endef
	.def	_ZNK7BoidMap12get_absoluteEi;	.scl	2;	.type	32;	.endef
	.def	sched_yield;	.scl	2;	.type	32;	.endef
	.def	_ZNSt6chrono3_V212system_clock3nowEv;	.scl	2;	.type	32;	.endef
	.def	malloc;	.scl	2;	.type	32;	.endef
	.def	memset;	.scl	2;	.type	32;	.endef
	.def	_Znwy;	.scl	2;	.type	32;	.endef
	.def	_ZNSt6thread15_M_start_threadESt10unique_ptrINS_6_StateESt14default_deleteIS1_EEPFvvE;	.scl	2;	.type	32;	.endef
	.def	free;	.scl	2;	.type	32;	.endef
	.def	memset;	.scl	2;	.type	32;	.endef
	.def	TextFormat;	.scl	2;	.type	32;	.endef
	.def	TraceLog;	.scl	2;	.type	32;	.endef
	.def	rlEnableShader;	.scl	2;	.type	32;	.endef
	.def	rlSetUniform;	.scl	2;	.type	32;	.endef
	.def	rlGetMatrixModelview;	.scl	2;	.type	32;	.endef
	.def	rlGetMatrixProjection;	.scl	2;	.type	32;	.endef
	.def	rlSetUniformMatrix;	.scl	2;	.type	32;	.endef
	.def	rlEnableVertexArray;	.scl	2;	.type	32;	.endef
	.def	rlLoadVertexBuffer;	.scl	2;	.type	32;	.endef
	.def	rlEnableVertexAttribute;	.scl	2;	.type	32;	.endef
	.def	rlSetVertexAttribute;	.scl	2;	.type	32;	.endef
	.def	rlSetVertexAttributeDivisor;	.scl	2;	.type	32;	.endef
	.def	rlDisableVertexBuffer;	.scl	2;	.type	32;	.endef
	.def	rlDisableVertexArray;	.scl	2;	.type	32;	.endef
	.def	rlGetMatrixTransform;	.scl	2;	.type	32;	.endef
	.def	rlDrawVertexArrayInstanced;	.scl	2;	.type	32;	.endef
	.def	rlDisableVertexBufferElement;	.scl	2;	.type	32;	.endef
	.def	rlDisableShader;	.scl	2;	.type	32;	.endef
	.def	rlUnloadVertexBuffer;	.scl	2;	.type	32;	.endef
	.def	rlActiveTextureSlot;	.scl	2;	.type	32;	.endef
	.def	rlDisableTexture;	.scl	2;	.type	32;	.endef
	.def	rlDisableTextureCubemap;	.scl	2;	.type	32;	.endef
	.def	BeginDrawing;	.scl	2;	.type	32;	.endef
	.def	ClearBackground;	.scl	2;	.type	32;	.endef
	.def	BeginMode3D;	.scl	2;	.type	32;	.endef
	.def	EndMode3D;	.scl	2;	.type	32;	.endef
	.def	_ZN2Ui6RenderER8Camera2DR8Camera3DR5Rules;	.scl	2;	.type	32;	.endef
	.def	EndDrawing;	.scl	2;	.type	32;	.endef
	.def	pthread_mutex_init;	.scl	2;	.type	32;	.endef
	.def	_ZNSt18condition_variableC1Ev;	.scl	2;	.type	32;	.endef
	.def	_ZNSt13__future_base12_Result_baseC2Ev;	.scl	2;	.type	32;	.endef
	.def	_ZNSt3_V216generic_categoryEv;	.scl	2;	.type	32;	.endef
	.def	_Znay;	.scl	2;	.type	32;	.endef
	.def	_ZNSt18condition_variable4waitERSt11unique_lockISt5mutexE;	.scl	2;	.type	32;	.endef
	.def	__cxa_throw_bad_array_new_length;	.scl	2;	.type	32;	.endef
	.def	atoi;	.scl	2;	.type	32;	.endef
	.def	SetTraceLogLevel;	.scl	2;	.type	32;	.endef
	.def	InitWindow;	.scl	2;	.type	32;	.endef
	.def	SetTargetFPS;	.scl	2;	.type	32;	.endef
	.def	GetScreenWidth;	.scl	2;	.type	32;	.endef
	.def	GetScreenHeight;	.scl	2;	.type	32;	.endef
	.def	MemAlloc;	.scl	2;	.type	32;	.endef
	.def	UploadMesh;	.scl	2;	.type	32;	.endef
	.def	LoadShader;	.scl	2;	.type	32;	.endef
	.def	GetShaderLocation;	.scl	2;	.type	32;	.endef
	.def	GetShaderLocationAttrib;	.scl	2;	.type	32;	.endef
	.def	LoadMaterialDefault;	.scl	2;	.type	32;	.endef
	.def	_ZN8BoidListC1Ei;	.scl	2;	.type	32;	.endef
	.def	_ZN2UiC1Ev;	.scl	2;	.type	32;	.endef
	.def	_ZNSt14basic_ofstreamIcSt11char_traitsIcEE4openEPKcSt13_Ios_Openmode;	.scl	2;	.type	32;	.endef
	.def	_ZN7BoidMapC1Eiii;	.scl	2;	.type	32;	.endef
	.def	srand;	.scl	2;	.type	32;	.endef
	.def	rand;	.scl	2;	.type	32;	.endef
	.def	WindowShouldClose;	.scl	2;	.type	32;	.endef
	.def	_ZNSt6thread20hardware_concurrencyEv;	.scl	2;	.type	32;	.endef
	.def	SetShaderValue;	.scl	2;	.type	32;	.endef
	.def	IsMouseButtonDown;	.scl	2;	.type	32;	.endef
	.def	GetMouseDelta;	.scl	2;	.type	32;	.endef
	.def	GetMouseWheelMove;	.scl	2;	.type	32;	.endef
	.def	GetMousePosition;	.scl	2;	.type	32;	.endef
	.def	GetScreenToWorld2D;	.scl	2;	.type	32;	.endef
	.def	CloseWindow;	.scl	2;	.type	32;	.endef
	.def	_ZN7BoidMapD1Ev;	.scl	2;	.type	32;	.endef
	.def	_ZN8BoidListD1Ev;	.scl	2;	.type	32;	.endef
	.def	sqrt;	.scl	2;	.type	32;	.endef
	.def	_ZNSt14basic_ofstreamIcSt11char_traitsIcEEC1Ev;	.scl	2;	.type	32;	.endef
	.def	atexit;	.scl	2;	.type	32;	.endef
	.section	.rdata$.refptr._ZTVSt12future_error, "dr"
	.globl	.refptr._ZTVSt12future_error
	.linkonce	discard
.refptr._ZTVSt12future_error:
	.quad	_ZTVSt12future_error
	.section	.rdata$.refptr._ZTVSt9basic_iosIcSt11char_traitsIcEE, "dr"
	.globl	.refptr._ZTVSt9basic_iosIcSt11char_traitsIcEE
	.linkonce	discard
.refptr._ZTVSt9basic_iosIcSt11char_traitsIcEE:
	.quad	_ZTVSt9basic_iosIcSt11char_traitsIcEE
	.section	.rdata$.refptr._ZTTSt14basic_ofstreamIcSt11char_traitsIcEE, "dr"
	.globl	.refptr._ZTTSt14basic_ofstreamIcSt11char_traitsIcEE
	.linkonce	discard
.refptr._ZTTSt14basic_ofstreamIcSt11char_traitsIcEE:
	.quad	_ZTTSt14basic_ofstreamIcSt11char_traitsIcEE
	.section	.rdata$.refptr._ZTVSt15basic_streambufIcSt11char_traitsIcEE, "dr"
	.globl	.refptr._ZTVSt15basic_streambufIcSt11char_traitsIcEE
	.linkonce	discard
.refptr._ZTVSt15basic_streambufIcSt11char_traitsIcEE:
	.quad	_ZTVSt15basic_streambufIcSt11char_traitsIcEE
	.section	.rdata$.refptr._ZTVSt13basic_filebufIcSt11char_traitsIcEE, "dr"
	.globl	.refptr._ZTVSt13basic_filebufIcSt11char_traitsIcEE
	.linkonce	discard
.refptr._ZTVSt13basic_filebufIcSt11char_traitsIcEE:
	.quad	_ZTVSt13basic_filebufIcSt11char_traitsIcEE
	.section	.rdata$.refptr._ZTVSt14basic_ofstreamIcSt11char_traitsIcEE, "dr"
	.globl	.refptr._ZTVSt14basic_ofstreamIcSt11char_traitsIcEE
	.linkonce	discard
.refptr._ZTVSt14basic_ofstreamIcSt11char_traitsIcEE:
	.quad	_ZTVSt14basic_ofstreamIcSt11char_traitsIcEE
	.section	.rdata$.refptr.__once_proxy, "dr"
	.globl	.refptr.__once_proxy
	.linkonce	discard
.refptr.__once_proxy:
	.quad	__once_proxy
	.section	.rdata$.refptr.__emutls_v._ZSt11__once_call, "dr"
	.globl	.refptr.__emutls_v._ZSt11__once_call
	.linkonce	discard
.refptr.__emutls_v._ZSt11__once_call:
	.quad	__emutls_v._ZSt11__once_call
	.section	.rdata$.refptr._ZNSt6thread4joinEv, "dr"
	.globl	.refptr._ZNSt6thread4joinEv
	.linkonce	discard
.refptr._ZNSt6thread4joinEv:
	.quad	_ZNSt6thread4joinEv
	.section	.rdata$.refptr.__emutls_v._ZSt15__once_callable, "dr"
	.globl	.refptr.__emutls_v._ZSt15__once_callable
	.linkonce	discard
.refptr.__emutls_v._ZSt15__once_callable:
	.quad	__emutls_v._ZSt15__once_callable
